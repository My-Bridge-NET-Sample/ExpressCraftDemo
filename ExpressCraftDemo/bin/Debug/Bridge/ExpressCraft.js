/**
 * @version 1.0.0.0
 * @copyright Copyright Â©  2017
 * @compiler Bridge.NET 17.4.0
 */
Bridge.assembly("ExpressCraft", function ($asm, globals) {
    "use strict";

    Bridge.define("ExpressCraft.Control", {
        inherits: function () { return [System.Collections.Generic.IList$1(ExpressCraft.Control)]; },
        statics: {
            fields: {
                ControlClass: null,
                cva: null
            },
            ctors: {
                init: function () {
                    this.ControlClass = "control";
                }
            },
            methods: {
                BaseClass: function (add, ac) {
                    if (add === void 0) { add = true; }
                    if (ac === void 0) { ac = true; }
                    return ac ? (add ? " control" : ExpressCraft.Control.ControlClass) : "";
                },
                GetImageString: function (s) {
                    return System.String.format("url('data:image/png;base64,{0}') no-repeat", [s]);
                },
                GetPdfString: function (s) {
                    return System.String.format("data:application/pdf;base64,{0}", [s]);
                },
                GetImageStringURI: function (s, useResourceURL) {
                    if (useResourceURL === void 0) { useResourceURL = true; }
                    return System.String.format("url('{0}{1}') no-repeat", useResourceURL ? ExpressCraft.Settings.ResourceURL : "", s);
                },
                Div: function (ac) {
                    var $t;
                    if (ac === void 0) { ac = true; }
                    return ($t = document.createElement("div"), $t.className = ExpressCraft.Control.BaseClass(false, ac), $t);
                },
                Div$1: function (cn, ac) {
                    var $t;
                    if (ac === void 0) { ac = true; }
                    return ($t = document.createElement("div"), $t.className = (cn || "") + (ExpressCraft.Control.BaseClass(true, ac) || ""), $t);
                },
                Span: function (ac) {
                    var $t;
                    if (ac === void 0) { ac = true; }
                    return ($t = document.createElement("span"), $t.className = ExpressCraft.Control.BaseClass(false, ac), $t);
                },
                Span$1: function (cn, ac) {
                    var $t;
                    if (ac === void 0) { ac = true; }
                    return ($t = document.createElement("span"), $t.className = (cn || "") + (ExpressCraft.Control.BaseClass(true, ac) || ""), $t);
                },
                Label$2: function (Caption, X, Y, IsBold, IsTiny, ac) {
                    var $t;
                    if (IsBold === void 0) { IsBold = false; }
                    if (IsTiny === void 0) { IsTiny = false; }
                    if (ac === void 0) { ac = true; }
                    var lbl = ($t = document.createElement("span"), $t.className = ExpressCraft.Control.BaseClass(false, ac), $t);

                    lbl.innerHTML = ExpressCraft.Helper.HtmlEscape$1(Caption);
                    ExpressCraft.Helper.SetLocation$2(lbl, X, Y);
                    ExpressCraft.Control.SetBT(lbl, IsBold, IsTiny);

                    return lbl;
                },
                Label$5: function (Caption, X, Y, width, height, IsBold, IsTiny, classr, Alignment, Forecolor, ac) {
                    var $t;
                    if (IsBold === void 0) { IsBold = false; }
                    if (IsTiny === void 0) { IsTiny = false; }
                    if (classr === void 0) { classr = ""; }
                    if (Alignment === void 0) { Alignment = "left"; }
                    if (Forecolor === void 0) { Forecolor = null; }
                    if (ac === void 0) { ac = true; }
                    var lbl = ($t = document.createElement("span"), $t.className = (classr || "") + (ExpressCraft.Control.BaseClass(!System.String.isNullOrWhiteSpace(classr), ac) || ""), $t);

                    lbl.innerHTML = ExpressCraft.Helper.HtmlEscape$1(Caption);
                    ExpressCraft.Helper.SetBounds$1(lbl, X, Y, width, height);
                    if (!Bridge.referenceEquals(Alignment, "left")) {
                        lbl.style.textAlign = Alignment;
                    }
                    ExpressCraft.Control.SetBT(lbl, IsBold, IsTiny);
                    if (Forecolor != null) {
                        lbl.style.color = Forecolor;
                    }

                    return lbl;
                },
                Label$3: function (Caption, X, Y, width, IsBold, IsTiny, classr, Alignment, Forecolor, ac) {
                    if (IsBold === void 0) { IsBold = false; }
                    if (IsTiny === void 0) { IsTiny = false; }
                    if (classr === void 0) { classr = ""; }
                    if (Alignment === void 0) { Alignment = "left"; }
                    if (Forecolor === void 0) { Forecolor = null; }
                    if (ac === void 0) { ac = true; }
                    var lbl = document.createElement("span");
                    lbl.className = (classr || "") + (ExpressCraft.Control.BaseClass(!System.String.isNullOrWhiteSpace(classr), ac) || "");
                    lbl.textContent = Caption;
                    lbl.style.left = ExpressCraft.Helper.ToPx(Bridge.box(X, System.Single, System.Single.format, System.Single.getHashCode));
                    lbl.style.top = ExpressCraft.Helper.ToPx(Bridge.box(Y, System.Single, System.Single.format, System.Single.getHashCode));
                    lbl.style.width = ExpressCraft.Helper.ToPx(Bridge.box(width, System.Single, System.Single.format, System.Single.getHashCode));

                    if (!Bridge.referenceEquals(Alignment, "left")) {
                        if (Bridge.referenceEquals(Alignment, "right")) {
                            lbl.style.direction = "rtl";
                        } else {
                            lbl.style.textAlign = Alignment;
                        }
                    }
                    ExpressCraft.Control.SetBT(lbl, IsBold, IsTiny);
                    if (Forecolor != null) {
                        lbl.style.color = Forecolor;
                    }

                    return lbl;
                },
                Label$4: function (c, X, Y, width, height, IsBold, IsTiny, classr, ac) {
                    var $t;
                    if (IsBold === void 0) { IsBold = false; }
                    if (IsTiny === void 0) { IsTiny = false; }
                    if (classr === void 0) { classr = ""; }
                    if (ac === void 0) { ac = true; }
                    var lbl = ($t = document.createElement("span"), $t.className = (classr || "") + (ExpressCraft.Control.BaseClass(!System.String.isNullOrWhiteSpace(classr), ac) || ""), $t);

                    lbl.innerHTML = ExpressCraft.Helper.HtmlEscape$1(c);
                    ExpressCraft.Helper.SetBounds$1(lbl, X, Y, width, height);
                    ExpressCraft.Control.SetBT(lbl, IsBold, IsTiny);

                    return lbl;
                },
                Label$1: function (c, X, Y, width, IsBold, IsTiny, classr, ac) {
                    var $t;
                    if (IsBold === void 0) { IsBold = false; }
                    if (IsTiny === void 0) { IsTiny = false; }
                    if (classr === void 0) { classr = ""; }
                    if (ac === void 0) { ac = true; }
                    var lbl = ($t = document.createElement("span"), $t.className = (classr || "") + (ExpressCraft.Control.BaseClass(!System.String.isNullOrWhiteSpace(classr), ac) || ""), $t);

                    lbl.innerHTML = ExpressCraft.Helper.HtmlEscape$1(c);
                    ExpressCraft.Helper.SetLocation$2(lbl, X, Y);
                    lbl.style.width = ExpressCraft.Helper.ToPx(Bridge.box(width, System.Int32));
                    ExpressCraft.Control.SetBT(lbl, IsBold, IsTiny);

                    return lbl;
                },
                Label: function (c, X, Y, IsBold, IsTiny, ac) {
                    if (IsBold === void 0) { IsBold = false; }
                    if (IsTiny === void 0) { IsTiny = false; }
                    if (ac === void 0) { ac = true; }
                    return ExpressCraft.Control.Label$2(c, X, Y, IsBold, IsTiny, ac);
                },
                DivLabel: function (Caption, X, Y, width, IsBold, IsTiny, classr, Alignment, Forecolor, ac) {
                    if (IsBold === void 0) { IsBold = false; }
                    if (IsTiny === void 0) { IsTiny = false; }
                    if (classr === void 0) { classr = ""; }
                    if (Alignment === void 0) { Alignment = "left"; }
                    if (Forecolor === void 0) { Forecolor = null; }
                    if (ac === void 0) { ac = true; }
                    var lbl = document.createElement("div");
                    lbl.className = (classr || "") + (ExpressCraft.Control.BaseClass(!System.String.isNullOrWhiteSpace(classr), ac) || "");
                    lbl.textContent = Caption;
                    lbl.style.left = ExpressCraft.Helper.ToPx(Bridge.box(X, System.Single, System.Single.format, System.Single.getHashCode));
                    lbl.style.top = ExpressCraft.Helper.ToPx(Bridge.box(Y, System.Single, System.Single.format, System.Single.getHashCode));
                    lbl.style.width = ExpressCraft.Helper.ToPx(Bridge.box(width, System.Single, System.Single.format, System.Single.getHashCode));

                    if (!Bridge.referenceEquals(Alignment, "left")) {
                        if (Bridge.referenceEquals(Alignment, "right")) {
                            lbl.style.direction = "rtl";
                        } else {
                            lbl.style.textAlign = Alignment;
                        }
                    }
                    if (IsBold) {
                        lbl.style.fontWeight = "bold";
                    }
                    if (IsTiny) {
                        lbl.style.fontSize = "6.75pt";
                    }
                    if (Forecolor != null) {
                        lbl.style.color = Forecolor;
                    }

                    return lbl;
                },
                SetBT: function (lbl, IsBold, IsTiny) {
                    if (IsBold) {
                        lbl.style.fontWeight = "bold";
                    }
                    if (IsTiny) {
                        lbl.style.fontSize = "6.75pt";
                    }
                },
                ComboBox: function (cn, ct, ac) {
                    var $t;
                    if (ac === void 0) { ac = true; }
                    var combo = ($t = document.createElement("select"), $t.className = (cn || "") + (ExpressCraft.Control.BaseClass(true, ac) || ""), $t);
                    if (ct === ExpressCraft.ComboBoxTypes.Default) {
                    }
                    return combo;
                },
                Button: function (cn, bt, ac) {
                    var $t;
                    if (ac === void 0) { ac = true; }
                    return ($t = document.createElement("button"), $t.className = (cn || "") + (ExpressCraft.Control.BaseClass(true, ac) || ""), $t.type = bt, $t);
                },
                Input: function (cn, it, ac) {
                    if (ac === void 0) { ac = true; }
                    var input = document.createElement("input");
                    input.className = (cn || "") + (ExpressCraft.Control.BaseClass(!System.String.isNullOrWhiteSpace(cn), ac) || "");
                    var ty = it;
                    if (Bridge.Browser.isIE && (Bridge.referenceEquals(ty, "text") || Bridge.referenceEquals(ty, "date") || Bridge.referenceEquals(ty, "color") || Bridge.referenceEquals(ty, 19) || Bridge.referenceEquals(ty, 3) || Bridge.referenceEquals(ty, 2))) {
                        return input;
                    }
                    input.type = it;

                    return input;
                },
                /**
                 * Returns Text Metrics for a given string
                 *
                 * @static
                 * @public
                 * @this ExpressCraft.Control
                 * @memberof ExpressCraft.Control
                 * @param   {string}                  t    the string
                 * @param   {string}                  f    the font used
                 * @return  {Retyped..TextMetrics}         TextMetrics
                 */
                GetTextMetrics: function (t, f) {
                    var $t;
                    if (Bridge.referenceEquals(f, "")) {
                        f = "8.25pt Tahoma";
                    }
                    var c = (ExpressCraft.Control.cva || (($t = document.createElement("canvas"), ExpressCraft.Control.cva = $t, $t))).getContext("2d");
                    c.font = f;
                    return c.measureText(t);
                },
                /**
                 * Returns text width
                 *
                 * @static
                 * @public
                 * @this ExpressCraft.Control
                 * @memberof ExpressCraft.Control
                 * @param   {string}    t    the string
                 * @param   {string}    f    the font used
                 * @return  {number}         double
                 */
                GetTextWidth: function (t, f) {
                    return ExpressCraft.Control.GetTextMetrics(t, f).width;
                },
                op_Implicit: function (control) {
                    if (ExpressCraft.Settings.AutoRender && !control.HasRendered) {
                        control.Render();
                    }
                    return control.Content;
                }
            }
        },
        fields: {
            Content: null,
            Name: null,
            HasRendered: false,
            _toolTip: null,
            _OnMouseEnterToolTip: null,
            _OnMouseLeaveToolTip: null,
            innerList: null,
            OnResize: null,
            OnLoaded: null,
            ContextMenu: null,
            LinkedForm: null
        },
        props: {
            ToolTip: {
                get: function () {
                    return this._toolTip;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._toolTip, value)) {
                        if (value != null) {
                            if (value.AttachedControl != null && !Bridge.referenceEquals(value.AttachedControl, this)) {
                                value = null;
                            } else {
                                value.AttachedControl = this;
                            }
                        }
                        this._toolTip = value;

                        if (this._toolTip != null && (!ExpressCraft.Helper.IsEmpty(this._toolTip.Heading) || !ExpressCraft.Helper.IsEmpty(this._toolTip.Description))) {
                            this._OnMouseEnterToolTip = Bridge.fn.bind(this, function (ev) {
                                if (!(Bridge.is(this, ExpressCraft.ToolTipControl))) {
                                    ExpressCraft.Form.ActiveToolTip = this._toolTip;
                                }
                            });
                            this._OnMouseLeaveToolTip = Bridge.fn.bind(this, function (ev) {
                                if (!(Bridge.is(this, ExpressCraft.ToolTipControl))) {
                                    ExpressCraft.Form.ActiveToolTip = null;
                                }
                            });

                            this.Content.addEventListener("moveenter", this._OnMouseEnterToolTip);
                            this.Content.addEventListener("mouseleave", this._OnMouseLeaveToolTip);
                            return;
                        }

                        if (!Bridge.staticEquals(this._OnMouseEnterToolTip, null)) {
                            this.Content.removeEventListener("MouseEnter", this._OnMouseEnterToolTip);
                            this._OnMouseEnterToolTip = null;
                        }
                        if (!Bridge.staticEquals(this._OnMouseLeaveToolTip, null)) {
                            this.Content.removeEventListener("MouseLeave", this._OnMouseLeaveToolTip);
                            this._OnMouseLeaveToolTip = null;
                        }
                    }
                }
            },
            Style: {
                get: function () {
                    return this.Content.style;
                }
            },
            ClassList: {
                get: function () {
                    return this.Content.classList;
                }
            },
            Width: {
                get: function () {
                    return this.Content.style.width;
                },
                set: function (value) {
                    var x = ExpressCraft.Helper.ToHtmlValue(value);
                    x = ExpressCraft.Vector2.pf(x);
                    if (!Bridge.referenceEquals(this.Content.style.width, x)) {
                        this.Content.style.width = x;
                        this.OnSizeChanged();
                    }
                }
            },
            Height: {
                get: function () {
                    return this.Content.style.height;
                },
                set: function (value) {
                    var x = ExpressCraft.Helper.ToHtmlValue(value);
                    x = ExpressCraft.Vector2.pf(x);
                    if (!Bridge.referenceEquals(x, this.Content.style.height)) {
                        this.Content.style.height = x;
                        this.OnSizeChanged();
                    }
                }
            },
            Left: {
                get: function () {
                    return this.Content.style.left;
                },
                set: function (value) {
                    var x = ExpressCraft.Helper.ToHtmlValue(value);
                    x = ExpressCraft.Vector2.pf(x);
                    if (!Bridge.referenceEquals(x, this.Content.style.left)) {
                        this.Content.style.left = x;
                        this.OnLocationChanged();
                    }
                }
            },
            Top: {
                get: function () {
                    return this.Content.style.top;
                },
                set: function (value) {
                    var x = ExpressCraft.Helper.ToHtmlValue(value);
                    x = ExpressCraft.Vector2.pf(x);
                    if (!Bridge.referenceEquals(this.Content.style.top, x)) {
                        this.Content.style.top = x;
                        this.OnLocationChanged();
                    }
                }
            },
            Size: {
                get: function () {
                    return new ExpressCraft.Vector2.$ctor1(this.Width, this.Height);
                },
                set: function (value) {
                    this.Width = value.X;
                    this.Height = value.Y;
                }
            },
            Location: {
                get: function () {
                    return new ExpressCraft.Vector2.$ctor1(this.Left, this.Top);
                },
                set: function (value) {
                    this.Left = value.X;
                    this.Top = value.Y;
                }
            },
            Bounds: {
                get: function () {
                    return new ExpressCraft.Vector4.$ctor1(this.Left, this.Top, this.Width, this.Height);
                },
                set: function (value) {
                    this.Left = value.X;
                    this.Top = value.Y;
                    this.Width = value.Z;
                    this.Height = value.M;
                }
            },
            Count: {
                get: function () {
                    throw new System.NotImplementedException.ctor();
                }
            },
            IsReadOnly: {
                get: function () {
                    throw new System.NotImplementedException.ctor();
                }
            }
        },
        alias: [
            "Count", "System$Collections$Generic$ICollection$1$ExpressCraft$Control$Count",
            "IsReadOnly", "System$Collections$Generic$ICollection$1$ExpressCraft$Control$IsReadOnly",
            "getItem", "System$Collections$Generic$IList$1$ExpressCraft$Control$getItem",
            "setItem", "System$Collections$Generic$IList$1$ExpressCraft$Control$setItem",
            "indexOf", "System$Collections$Generic$IList$1$ExpressCraft$Control$indexOf",
            "insert", "System$Collections$Generic$IList$1$ExpressCraft$Control$insert",
            "removeAt", "System$Collections$Generic$IList$1$ExpressCraft$Control$removeAt",
            "add", "System$Collections$Generic$ICollection$1$ExpressCraft$Control$add",
            "copyTo", "System$Collections$Generic$ICollection$1$ExpressCraft$Control$copyTo",
            "clear", "System$Collections$Generic$ICollection$1$ExpressCraft$Control$clear",
            "contains", "System$Collections$Generic$ICollection$1$ExpressCraft$Control$contains",
            "remove", "System$Collections$Generic$ICollection$1$ExpressCraft$Control$remove",
            "GetEnumerator", ["System$Collections$Generic$IEnumerable$1$ExpressCraft$Control$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"]
        ],
        ctors: {
            init: function () {
                this.HasRendered = false;
                this.innerList = new (System.Collections.Generic.List$1(ExpressCraft.Control)).ctor();
            },
            $ctor1: function (ac) {
                if (ac === void 0) { ac = true; }

                this.$initialize();
                this.Content = ExpressCraft.Control.Div(ac);
            },
            ctor: function (element) {
                this.$initialize();
                this.Content = element;
            },
            $ctor3: function (cn, ac) {
                if (ac === void 0) { ac = true; }

                this.$initialize();
                this.Content = ExpressCraft.Control.Div$1(cn, ac);
            },
            $ctor2: function (cn, ct, ac) {
                if (ac === void 0) { ac = true; }

                this.$initialize();
                this.Content = ExpressCraft.Control.ComboBox(cn, ct, ac);
            },
            $ctor4: function (cn, IsInput, it, ac) {
                if (ac === void 0) { ac = true; }

                this.$initialize();
                this.Content = (IsInput ? ExpressCraft.Control.Input(cn, it, ac) : ExpressCraft.Control.Button(cn, it, ac));
            }
        },
        methods: {
            getItem: function (index) {
                throw new System.NotImplementedException.ctor();
            },
            setItem: function (index, value) {
                throw new System.NotImplementedException.ctor();
            },
            SetData: function (name, value) {
                return this.SetAttribute("data-" + (name || ""), value);
            },
            GetData: function (name) {
                return this.GetAttribute("data-" + (name || ""));
            },
            SetAttribute: function (name, value) {
                this.Content.setAttribute(name, ExpressCraft.Helper.ToStr(value));

                return this;
            },
            GetAttribute: function (name) {
                return this.Content.getAttribute(name);
            },
            GetAttributei: function (name) {
                return parseInt(this.Content.getAttribute(name));
            },
            GetAttributef: function (name) {
                return parseFloat(this.Content.getAttribute(name));
            },
            OnLocationChanged: function () { },
            OnSizeChanged: function () { },
            Render: function () {
                this.HasRendered = true;
            },
            Focus: function () {
                setTimeout(Bridge.fn.bind(this, function (a) {
                    this.Content.focus();
                }), 0);
            },
            GetControlBase: function () {
                return this.Content;
            },
            ChangeState: function (s, sf) {
                if (sf === void 0) { sf = "disabled"; }
                if (s) {
                    this.Content.classList.remove(sf);
                } else {
                    this.Content.classList.add(sf);
                }
            },
            indexOf: function (item) {
                return this.innerList.indexOf(item);
            },
            insert: function (index, item) {
                var content = this.GetControlBase();
                this.innerList.insert(index, item);
                content.insertBefore(item.Content, content.childNodes[index]);
            },
            removeAt: function (index) {
                var control = this.innerList.getItem(index);
                this.remove(control);
            },
            add: function (item) {
                this.innerList.add(item);
                var content = this.GetControlBase();
                content.appendChild(item.Content);
            },
            copyTo: function (array, arrayIndex) {
                this.innerList.copyTo(array, arrayIndex);
            },
            clear: function () {
                this.innerList.clear();
                var content = this.GetControlBase();
                ExpressCraft.Helper.Empty(content);
            },
            contains: function (item) {
                return this.innerList.contains(item);
            },
            remove: function (item) {
                this.innerList.remove(item);
                var content = this.GetControlBase();
                content.removeChild(item.Content);

                return true;
            },
            GetEnumerator: function () {
                return this.innerList.GetEnumerator().$clone();
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return this.innerList.GetEnumerator().$clone();
            }
        }
    });

    Bridge.define("ExpressCraft.AceModeTypes", {
        $kind: "enum",
        statics: {
            fields: {
                abap: 0,
                abc: 1,
                actionscript: 2,
                ada: 3,
                apache_conf: 4,
                asciidoc: 5,
                assembly_x86: 6,
                autohotkey: 7,
                batchfile: 8,
                bro: 9,
                c_cpp: 10,
                c9search: 11,
                cirru: 12,
                clojure: 13,
                cobol: 14,
                coffee: 15,
                coldfusion: 16,
                csharp: 17,
                css: 18,
                curly: 19,
                d: 20,
                dart: 21,
                diff: 22,
                dockerfile: 23,
                dot: 24,
                drools: 25,
                dummy: 26,
                dummysyntax: 27,
                eiffel: 28,
                ejs: 29,
                elixir: 30,
                elm: 31,
                erlang: 32,
                forth: 33,
                fortran: 34,
                ftl: 35,
                gcode: 36,
                gherkin: 37,
                gitignore: 38,
                glsl: 39,
                gobstones: 40,
                golang: 41,
                groovy: 42,
                haml: 43,
                handlebars: 44,
                haskell: 45,
                haskell_cabal: 46,
                haxe: 47,
                hjson: 48,
                html: 49,
                html_elixir: 50,
                html_ruby: 51,
                ini: 52,
                io: 53,
                jack: 54,
                jade: 55,
                java: 56,
                javascript: 57,
                json: 58,
                jsoniq: 59,
                jsp: 60,
                jsx: 61,
                julia: 62,
                kotlin: 63,
                latex: 64,
                less: 65,
                liquid: 66,
                lisp: 67,
                livescript: 68,
                logiql: 69,
                lsl: 70,
                lua: 71,
                luapage: 72,
                lucene: 73,
                makefile: 74,
                markdown: 75,
                mask: 76,
                matlab: 77,
                maze: 78,
                mel: 79,
                mushcode: 80,
                mysql: 81,
                nix: 82,
                nsis: 83,
                objectivec: 84,
                ocaml: 85,
                pascal: 86,
                perl: 87,
                pgsql: 88,
                php: 89,
                powershell: 90,
                praat: 91,
                prolog: 92,
                properties: 93,
                protobuf: 94,
                python: 95,
                r: 96,
                razor: 97,
                rdoc: 98,
                rhtml: 99,
                rst: 100,
                ruby: 101,
                rust: 102,
                sass: 103,
                scad: 104,
                scala: 105,
                scheme: 106,
                scss: 107,
                sh: 108,
                sjs: 109,
                smarty: 110,
                snippets: 111,
                soy_template: 112,
                space: 113,
                sql: 114,
                sqlserver: 115,
                stylus: 116,
                svg: 117,
                swift: 118,
                tcl: 119,
                tex: 120,
                text: 121,
                textile: 122,
                toml: 123,
                tsx: 124,
                twig: 125,
                typescript: 126,
                vala: 127,
                vbscript: 128,
                velocity: 129,
                verilog: 130,
                vhdl: 131,
                wollok: 132,
                xml: 133,
                xquery: 134,
                yaml: 135,
                django: 136
            }
        }
    });

    Bridge.define("ExpressCraft.AceThemeTypes", {
        $kind: "enum",
        statics: {
            fields: {
                label: 0,
                chrome: 1,
                clouds: 2,
                crimson_editor: 3,
                dawn: 4,
                dreamweaver: 5,
                eclipse: 6,
                github: 7,
                solarized_light: 8,
                textmate: 9,
                tomorrow: 10,
                xcode: 11,
                clouds_midnight: 12,
                cobalt: 13,
                idle_fingers: 14,
                kr_theme: 15,
                merbivore: 16,
                merbivore_soft: 17,
                mono_industrial: 18,
                monokai: 19,
                pastel_on_dark: 20,
                solarized_dark: 21,
                terminal: 22,
                tomorrow_night: 23,
                tomorrow_night_blue: 24,
                tomorrow_night_bright: 25,
                tomorrow_night_eighties: 26,
                twilight: 27,
                vibrant_ink: 28
            }
        }
    });

    Bridge.define("ExpressCraft.App", {
        main: function Main () {
            var $t;
            ExpressCraft.Helper.AppendChild$2(document.head, ($t = document.createElement("link"), $t.id = "ExpressCraft", $t.rel = "Stylesheet", $t.type = "text/css", $t.href = "data:text/css;base64," + (ExpressCraft.Settings.ExpressCraftCssBase64 || ""), $t));
            ExpressCraft.Settings.Setup();

















        }
    });

    Bridge.define("ExpressCraft.Application", {
        statics: {
            fields: {
                MainForm: null,
                _applicationDefition: 0
            },
            props: {
                AplicationDefition: {
                    get: function () {
                        return ExpressCraft.Application._applicationDefition;
                    }
                }
            },
            ctors: {
                init: function () {
                    this._applicationDefition = ExpressCraft.ApplicationDefitnion.BridgeConsole;
                }
            },
            methods: {
                Close: function () {
                    if (ExpressCraft.Application.MainForm != null) {
                        ExpressCraft.Application.MainForm.Close();
                    }
                    window.close();
                    window.location.reload();
                },
                Run: function (_Mainform) {
                    ExpressCraft.Application.MainForm = _Mainform;
                    ExpressCraft.Application.MainForm.ShowStartNewLevel();
                }
            }
        }
    });

    Bridge.define("ExpressCraft.ApplicationDefitnion", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                BrowserConsole: 1,
                BridgeConsole: 2,
                ExpressCraftConsole: 3
            }
        }
    });

    Bridge.define("ExpressCraft.BarcodeQuaggaJS", {
        statics: {
            fields: {
                ExternalQuaggaJS: null
            },
            ctors: {
                init: function () {
                    this.ExternalQuaggaJS = new ExpressCraft.ExternalPlugin("https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js");
                }
            },
            methods: {
                Setup: function () {
                    ExpressCraft.BarcodeQuaggaJS.ExternalQuaggaJS.Setup(true, true);
                },
                DecodeSingle: function (source, onDetect, onNoDetect, locate, reader, sourceIsBase64) {
                    if (onNoDetect === void 0) { onNoDetect = null; }
                    if (locate === void 0) { locate = true; }
                    if (reader === void 0) { reader = 3; }
                    if (sourceIsBase64 === void 0) { sourceIsBase64 = false; }
                    if (!ExpressCraft.BarcodeQuaggaJS.ExternalQuaggaJS.SetupCompleted) {
                        return;
                    }

                    if (Bridge.staticEquals(onDetect, null)) {
                        return;
                    }

                    var codeName = System.Enum.format(ExpressCraft.BarcodeQuaggaJS.Readers, reader, "G").toLowerCase();
                    if (System.String.startsWith(codeName, "_")) {
                        codeName = codeName.substr(1);
                    }
                    if (sourceIsBase64 && !System.String.startsWith(source, "data:image")) {
                        source = "data:image/jpg;base64," + (source || "");
                    }
                    Quagga.decodeSingle({
                        decoder: {
                            readers: [codeName] // List of active readers
                        },
                        locate: locate,
                        src: source
                    }, function(ond, onnd) {
                        return function(result){
                            if(result.codeResult) {
                                ond(result.codeResult.code);
                            } else {
                                if(onnd != null)
                                {
                                    onnd();
                                }
                            }
                        }
                    }(onDetect, onNoDetect));
                }
            }
        }
    });

    Bridge.define("ExpressCraft.BarcodeQuaggaJS.Readers", {
        $kind: "nested enum",
        statics: {
            fields: {
                Code_128_Reader: 0,
                Ean_Reader: 1,
                Ean_8_Reader: 2,
                Code_39_Reader: 3,
                Code_39_Vin_Reader: 4,
                Codabar_Reader: 5,
                Upc_Reader: 6,
                Upc_e_Reader: 7,
                I2of5_Reader: 8,
                _2of5_Reader: 9,
                Code_93_Reader: 10
            }
        }
    });

    Bridge.define("ExpressCraft.Brush", {
        inherits: [System.IDisposable],
        alias: ["Dispose", "System$IDisposable$Dispose"],
        methods: {
            Dispose: function () {

            }
        }
    });

    Bridge.define("ExpressCraft.Color", {
        $kind: "struct",
        statics: {
            fields: {
                Empty: null,
                StateKnownColorValid: 0,
                StateARGBValueValid: 0,
                StateValueMask: 0,
                StateNameValid: 0,
                NotDefinedValue: System.Int64(0),
                ARGBAlphaShift: 0,
                ARGBRedShift: 0,
                ARGBGreenShift: 0,
                ARGBBlueShift: 0,
                q: 0
            },
            props: {
                Transparent: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Transparent);
                    }
                },
                AliceBlue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.AliceBlue);
                    }
                },
                AntiqueWhite: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.AntiqueWhite);
                    }
                },
                Aqua: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Aqua);
                    }
                },
                Aquamarine: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Aquamarine);
                    }
                },
                Azure: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Azure);
                    }
                },
                Beige: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Beige);
                    }
                },
                Bisque: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Bisque);
                    }
                },
                Black: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Black);
                    }
                },
                BlanchedAlmond: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.BlanchedAlmond);
                    }
                },
                Blue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Blue);
                    }
                },
                BlueViolet: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.BlueViolet);
                    }
                },
                Brown: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Brown);
                    }
                },
                BurlyWood: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.BurlyWood);
                    }
                },
                CadetBlue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.CadetBlue);
                    }
                },
                Chartreuse: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Chartreuse);
                    }
                },
                Chocolate: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Chocolate);
                    }
                },
                Coral: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Coral);
                    }
                },
                CornflowerBlue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.CornflowerBlue);
                    }
                },
                Cornsilk: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Cornsilk);
                    }
                },
                Crimson: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Crimson);
                    }
                },
                Cyan: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Cyan);
                    }
                },
                DarkBlue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DarkBlue);
                    }
                },
                DarkCyan: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DarkCyan);
                    }
                },
                DarkGoldenrod: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DarkGoldenrod);
                    }
                },
                DarkGray: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DarkGray);
                    }
                },
                DarkGreen: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DarkGreen);
                    }
                },
                DarkKhaki: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DarkKhaki);
                    }
                },
                DarkMagenta: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DarkMagenta);
                    }
                },
                DarkOliveGreen: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DarkOliveGreen);
                    }
                },
                DarkOrange: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DarkOrange);
                    }
                },
                DarkOrchid: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DarkOrchid);
                    }
                },
                DarkRed: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DarkRed);
                    }
                },
                DarkSalmon: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DarkSalmon);
                    }
                },
                DarkSeaGreen: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DarkSeaGreen);
                    }
                },
                DarkSlateBlue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DarkSlateBlue);
                    }
                },
                DarkSlateGray: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DarkSlateGray);
                    }
                },
                DarkTurquoise: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DarkTurquoise);
                    }
                },
                DarkViolet: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DarkViolet);
                    }
                },
                DeepPink: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DeepPink);
                    }
                },
                DeepSkyBlue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DeepSkyBlue);
                    }
                },
                DimGray: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DimGray);
                    }
                },
                DodgerBlue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.DodgerBlue);
                    }
                },
                Firebrick: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Firebrick);
                    }
                },
                FloralWhite: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.FloralWhite);
                    }
                },
                ForestGreen: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.ForestGreen);
                    }
                },
                Fuchsia: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Fuchsia);
                    }
                },
                Gainsboro: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Gainsboro);
                    }
                },
                GhostWhite: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.GhostWhite);
                    }
                },
                Gold: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Gold);
                    }
                },
                Goldenrod: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Goldenrod);
                    }
                },
                Gray: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Gray);
                    }
                },
                Green: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Green);
                    }
                },
                GreenYellow: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.GreenYellow);
                    }
                },
                Honeydew: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Honeydew);
                    }
                },
                HotPink: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.HotPink);
                    }
                },
                IndianRed: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.IndianRed);
                    }
                },
                Indigo: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Indigo);
                    }
                },
                Ivory: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Ivory);
                    }
                },
                Khaki: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Khaki);
                    }
                },
                Lavender: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Lavender);
                    }
                },
                LavenderBlush: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.LavenderBlush);
                    }
                },
                LawnGreen: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.LawnGreen);
                    }
                },
                LemonChiffon: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.LemonChiffon);
                    }
                },
                LightBlue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.LightBlue);
                    }
                },
                LightCoral: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.LightCoral);
                    }
                },
                LightCyan: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.LightCyan);
                    }
                },
                LightGoldenrodYellow: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.LightGoldenrodYellow);
                    }
                },
                LightGreen: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.LightGreen);
                    }
                },
                LightGray: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.LightGray);
                    }
                },
                LightPink: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.LightPink);
                    }
                },
                LightSalmon: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.LightSalmon);
                    }
                },
                LightSeaGreen: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.LightSeaGreen);
                    }
                },
                LightSkyBlue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.LightSkyBlue);
                    }
                },
                LightSlateGray: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.LightSlateGray);
                    }
                },
                LightSteelBlue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.LightSteelBlue);
                    }
                },
                LightYellow: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.LightYellow);
                    }
                },
                Lime: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Lime);
                    }
                },
                LimeGreen: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.LimeGreen);
                    }
                },
                Linen: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Linen);
                    }
                },
                Magenta: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Magenta);
                    }
                },
                Maroon: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Maroon);
                    }
                },
                MediumAquamarine: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.MediumAquamarine);
                    }
                },
                MediumBlue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.MediumBlue);
                    }
                },
                MediumOrchid: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.MediumOrchid);
                    }
                },
                MediumPurple: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.MediumPurple);
                    }
                },
                MediumSeaGreen: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.MediumSeaGreen);
                    }
                },
                MediumSlateBlue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.MediumSlateBlue);
                    }
                },
                MediumSpringGreen: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.MediumSpringGreen);
                    }
                },
                MediumTurquoise: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.MediumTurquoise);
                    }
                },
                MediumVioletRed: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.MediumVioletRed);
                    }
                },
                MidnightBlue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.MidnightBlue);
                    }
                },
                MintCream: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.MintCream);
                    }
                },
                MistyRose: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.MistyRose);
                    }
                },
                Moccasin: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Moccasin);
                    }
                },
                NavajoWhite: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.NavajoWhite);
                    }
                },
                Navy: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Navy);
                    }
                },
                OldLace: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.OldLace);
                    }
                },
                Olive: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Olive);
                    }
                },
                OliveDrab: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.OliveDrab);
                    }
                },
                Orange: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Orange);
                    }
                },
                OrangeRed: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.OrangeRed);
                    }
                },
                Orchid: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Orchid);
                    }
                },
                PaleGoldenrod: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.PaleGoldenrod);
                    }
                },
                PaleGreen: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.PaleGreen);
                    }
                },
                PaleTurquoise: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.PaleTurquoise);
                    }
                },
                PaleVioletRed: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.PaleVioletRed);
                    }
                },
                PapayaWhip: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.PapayaWhip);
                    }
                },
                PeachPuff: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.PeachPuff);
                    }
                },
                Peru: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Peru);
                    }
                },
                Pink: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Pink);
                    }
                },
                Plum: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Plum);
                    }
                },
                PowderBlue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.PowderBlue);
                    }
                },
                Purple: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Purple);
                    }
                },
                Red: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Red);
                    }
                },
                RosyBrown: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.RosyBrown);
                    }
                },
                RoyalBlue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.RoyalBlue);
                    }
                },
                SaddleBrown: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.SaddleBrown);
                    }
                },
                Salmon: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Salmon);
                    }
                },
                SandyBrown: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.SandyBrown);
                    }
                },
                SeaGreen: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.SeaGreen);
                    }
                },
                SeaShell: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.SeaShell);
                    }
                },
                Sienna: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Sienna);
                    }
                },
                Silver: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Silver);
                    }
                },
                SkyBlue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.SkyBlue);
                    }
                },
                SlateBlue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.SlateBlue);
                    }
                },
                SlateGray: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.SlateGray);
                    }
                },
                Snow: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Snow);
                    }
                },
                SpringGreen: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.SpringGreen);
                    }
                },
                SteelBlue: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.SteelBlue);
                    }
                },
                Tan: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Tan);
                    }
                },
                Teal: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Teal);
                    }
                },
                Thistle: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Thistle);
                    }
                },
                Tomato: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Tomato);
                    }
                },
                Turquoise: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Turquoise);
                    }
                },
                Violet: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Violet);
                    }
                },
                Wheat: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Wheat);
                    }
                },
                White: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.White);
                    }
                },
                WhiteSmoke: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.WhiteSmoke);
                    }
                },
                Yellow: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.Yellow);
                    }
                },
                YellowGreen: {
                    get: function () {
                        return new ExpressCraft.Color.$ctor1(ExpressCraft.KnownColor.YellowGreen);
                    }
                }
            },
            ctors: {
                init: function () {
                    this.Empty = new ExpressCraft.Color();
                    this.ARGBAlphaShift = 24;
                    this.ARGBRedShift = 16;
                    this.ARGBGreenShift = 8;
                    this.ARGBBlueShift = 0;
                    this.q = 255.0;
                },
                ctor: function () {
                    ExpressCraft.Color.Empty = new ExpressCraft.Color.ctor();
                    ExpressCraft.Color.StateKnownColorValid = 1;
                    ExpressCraft.Color.StateARGBValueValid = 2;
                    ExpressCraft.Color.StateValueMask = ExpressCraft.Color.StateARGBValueValid;
                    ExpressCraft.Color.StateNameValid = 8;
                    ExpressCraft.Color.NotDefinedValue = System.Int64(0);
                }
            },
            methods: {
                CheckByte: function (value) {
                    if ((value < 0) || (value > 255)) {
                        throw new System.ArgumentException.$ctor1("InvalidEx2BoundArgument");
                    }
                },
                MakeArgb: function (alpha, red, green, blue) {
                    return System.Int64((alpha << 24) | (red << 16) | (green << 8) | blue);
                },
                FromArgb: function (argb) {
                    return new ExpressCraft.Color.$ctor2(System.Int64(argb).and((System.Int64([-1,0]))), ExpressCraft.Color.StateARGBValueValid, null, 0);
                },
                FromArgb$3: function (alpha, red, green, blue) {
                    ExpressCraft.Color.CheckByte(alpha);
                    ExpressCraft.Color.CheckByte(red);
                    ExpressCraft.Color.CheckByte(green);
                    ExpressCraft.Color.CheckByte(blue);
                    return new ExpressCraft.Color.$ctor2(ExpressCraft.Color.MakeArgb((alpha & 255), (red & 255), (green & 255), (blue & 255)), ExpressCraft.Color.StateARGBValueValid, null, 0);
                },
                FromArgb$1: function (alpha, baseColor) {
                    ExpressCraft.Color.CheckByte(alpha);
                    return new ExpressCraft.Color.$ctor2(ExpressCraft.Color.MakeArgb((alpha & 255), baseColor.R, baseColor.G, baseColor.B), ExpressCraft.Color.StateARGBValueValid, null, 0);
                },
                FromArgb$2: function (red, green, blue) {
                    return ExpressCraft.Color.FromArgb$3(255, red, green, blue);
                },
                IsEnumValid: function (enumValue, value, minValue, maxValue) {
                    return ((value >= minValue) && (value <= maxValue));
                },
                FromKnownColor: function (color) {
                    return new ExpressCraft.Color.$ctor1(color);
                },
                FromHex: function (value) {
                    if (System.String.startsWith(value, "#")) {
                        return ExpressCraft.Color.FromHex(value.substr(1));
                    } else {
                        return ExpressCraft.Color.FromArgb(parseInt(value));
                    }
                },
                op_Implicit$1: function (color) {
                    return color.ToHTMLColor();
                },
                op_Implicit: function (hexValue) {
                    return ExpressCraft.Color.FromHex(hexValue);
                },
                op_Equality: function (left, right) {
                    if (((left.value.ne(right.value)) || (left.state !== right.state)) || (left.knownColor !== right.knownColor)) {
                        return false;
                    }
                    return ((Bridge.referenceEquals(left.name, right.name)) || (((left.name != null) && (right.name != null)) && System.String.equals(left.name, right.name)));
                },
                op_Inequality: function (left, right) {
                    return !(ExpressCraft.Color.op_Equality(left.$clone(), right.$clone()));
                },
                getDefaultValue: function () { return new ExpressCraft.Color(); }
            }
        },
        fields: {
            name: null,
            value: System.Int64(0),
            knownColor: 0,
            state: 0
        },
        props: {
            R: {
                get: function () {
                    return System.Int64.clipu8((this.Value.shr(16)).and(System.Int64(255)));
                }
            },
            G: {
                get: function () {
                    return System.Int64.clipu8((this.Value.shr(8)).and(System.Int64(255)));
                }
            },
            B: {
                get: function () {
                    return System.Int64.clipu8(this.Value.and(System.Int64(255)));
                }
            },
            A: {
                get: function () {
                    return System.Int64.clipu8((this.Value.shr(24)).and(System.Int64(255)));
                }
            },
            IsKnownColor: {
                get: function () {
                    return ((this.state & ExpressCraft.Color.StateKnownColorValid) > 0);
                }
            },
            IsEmpty: {
                get: function () {
                    return (this.state === 0);
                }
            },
            IsNamedColor: {
                get: function () {
                    if ((this.state & ExpressCraft.Color.StateNameValid) === 0) {
                        return this.IsKnownColor;
                    }
                    return true;
                }
            },
            IsSystemColor: {
                get: function () {
                    if (!this.IsKnownColor) {
                        return false;
                    }
                    if (this.knownColor > 26) {
                        return (this.knownColor > 167);
                    }
                    return true;
                }
            },
            NameAndARGBValue: {
                get: function () {
                    return System.String.format("{{Name={0}, ARGB=({1}, {2}, {3}, {4})}}", this.Name, Bridge.box(this.A, System.Byte), Bridge.box(this.R, System.Byte), Bridge.box(this.G, System.Byte), Bridge.box(this.B, System.Byte));
                }
            },
            Name: {
                get: function () {
                    if ((this.state & ExpressCraft.Color.StateNameValid) !== 0) {
                        return this.name;
                    }
                    if (!this.IsKnownColor) {
                        return System.Convert.toStringInBase(this.value, 16, 11);
                    }
                    var str = ExpressCraft.KnownColorTable.KnownColorToName(this.knownColor);
                    if (str != null) {
                        return str;
                    }
                    return Bridge.toString(this.knownColor);
                }
            },
            Value: {
                get: function () {
                    if ((this.state & ExpressCraft.Color.StateValueMask) !== 0) {
                        return this.value;
                    }
                    if (this.IsKnownColor) {
                        return System.Int64(ExpressCraft.KnownColorTable.KnownColorToArgb(this.knownColor));
                    }
                    return ExpressCraft.Color.NotDefinedValue;
                }
            }
        },
        ctors: {
            $ctor1: function (knownColor) {
                this.$initialize();
                this.value = System.Int64(0);
                this.state = ExpressCraft.Color.StateKnownColorValid;
                this.name = null;
                this.knownColor = Bridge.Int.sxs(knownColor & 65535);
            },
            $ctor2: function (value, state, name, knownColor) {
                this.$initialize();
                this.value = value;
                this.state = state;
                this.name = name;
                this.knownColor = Bridge.Int.sxs(knownColor & 65535);
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            componentToHex: function (value) {
                var x = value.toString(16);
                return ((x.length === 1 ? "0" : "") || "") + (x || "");
            },
            ToHTMLColor: function () {
                if (this.A !== 255) {
                    return System.String.format("#{0}{1}{2}{3}", this.componentToHex(this.A), this.componentToHex(this.R), this.componentToHex(this.G), this.componentToHex(this.B));
                } else {
                    return System.String.format("#{0}{1}{2}", this.componentToHex(this.R), this.componentToHex(this.G), this.componentToHex(this.B));
                }
            },
            GetBrightness: function () {
                var z = this.R / ExpressCraft.Color.q;
                var x = this.G / ExpressCraft.Color.q;
                var c = this.B / ExpressCraft.Color.q;
                var v = z;
                var b = z;
                if (x > v) {
                    v = x;
                }
                if (c > v) {
                    v = c;
                }
                if (x < b) {
                    b = x;
                }
                if (c < b) {
                    b = c;
                }
                return ((v + b) / 2.0);
            },
            GetHue: function () {
                if ((this.R === this.G) && (this.G === this.B)) {
                    return 0.0;
                }
                var z = this.R / ExpressCraft.Color.q;
                var x = this.G / ExpressCraft.Color.q;
                var c = this.B / ExpressCraft.Color.q;
                var v = 0.0;
                var b = z;
                var n = z;
                if (x > b) {
                    b = x;
                }
                if (c > b) {
                    b = c;
                }
                if (x < n) {
                    n = x;
                }
                if (c < n) {
                    n = c;
                }
                var num6 = b - n;
                if (z === b) {
                    v = (x - c) / num6;
                } else if (x === b) {
                    v = 2.0 + ((c - z) / num6);
                } else if (c === b) {
                    v = 4.0 + ((z - x) / num6);
                }
                v *= 60.0;
                if (v < 0.0) {
                    v += 360.0;
                }
                return v;
            },
            GetSaturation: function () {
                var z = this.R / ExpressCraft.Color.q;
                var x = this.G / ExpressCraft.Color.q;
                var c = this.B / ExpressCraft.Color.q;
                var v = 0.0;
                var b = z;
                var n = z;
                if (x > b) {
                    b = x;
                }
                if (c > b) {
                    b = c;
                }
                if (x < n) {
                    n = x;
                }
                if (c < n) {
                    n = c;
                }
                if (b === n) {
                    return v;
                }
                var m = (b + n) / 2.0;
                if (m <= 0.5) {
                    return ((b - n) / (b + n));
                }
                return ((b - n) / ((2.0 - b) - n));
            },
            ToArgb: function () {
                return System.Int64.clip32(this.Value);
            },
            ToKnownColor: function () {
                return this.knownColor;
            },
            toString: function () {
                var builder = new System.Text.StringBuilder("", 32);
                builder.append(Bridge.Reflection.getTypeName(Bridge.getType(this)));
                builder.append(" [");
                if ((this.state & ExpressCraft.Color.StateNameValid) !== 0) {
                    builder.append(this.Name);
                } else if ((this.state & ExpressCraft.Color.StateKnownColorValid) !== 0) {
                    builder.append(this.Name);
                } else if ((this.state & ExpressCraft.Color.StateValueMask) !== 0) {
                    builder.appendFormat("A={0}, R={1}, G={2}, B={3}", Bridge.box(this.A, System.Byte), Bridge.box(this.R, System.Byte), Bridge.box(this.G, System.Byte), Bridge.box(this.B, System.Byte));
                } else {
                    builder.append("Empty");
                }
                builder.append("]");
                return builder.toString();
            },
            equals: function (obj) {
                if (Bridge.is(obj, ExpressCraft.Color)) {
                    var color = System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj, ExpressCraft.Color), ExpressCraft.Color));
                    if (((this.value.equals(color.value)) && (this.state === color.state)) && (this.knownColor === color.knownColor)) {
                        return ((Bridge.referenceEquals(this.name, color.name)) || (((this.name != null) && (color.name != null)) && System.String.equals(this.name, this.name)));
                    }
                }
                return false;
            },
            getHashCode: function () {
                return ((Bridge.getHashCode(this.value) ^ Bridge.getHashCode(this.state)) ^ Bridge.getHashCode(this.knownColor));
            },
            $clone: function (to) {
                var s = to || new ExpressCraft.Color();
                s.name = this.name;
                s.value = this.value;
                s.knownColor = this.knownColor;
                s.state = this.state;
                return s;
            }
        }
    });

    Bridge.define("ExpressCraft.ComboBoxTypes", {
        $kind: "enum",
        statics: {
            fields: {
                Default: 0
            }
        }
    });

    Bridge.define("ExpressCraft.ConsoleLogType", {
        $kind: "enum",
        statics: {
            fields: {
                Log: 0,
                Debug: 1,
                Error: 2
            }
        }
    });

    Bridge.define("ExpressCraft.ContextItem", {
        fields: {
            Caption: null,
            OnItemClick: null,
            BeginGroup: false,
            Enabled: false
        },
        ctors: {
            init: function () {
                this.Caption = "";
                this.BeginGroup = false;
                this.Enabled = true;
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor2: function (caption, beginGroup) {
                if (beginGroup === void 0) { beginGroup = false; }

                this.$initialize();
                this.Caption = caption;
                this.BeginGroup = beginGroup;
            },
            $ctor1: function (caption, _OnItemClick, beginGroup) {
                if (beginGroup === void 0) { beginGroup = false; }

                this.$initialize();
                this.Caption = caption;
                this.BeginGroup = beginGroup;
                this.OnItemClick = _OnItemClick;
            }
        }
    });

    Bridge.define("ExpressCraft.DashStyle", {
        $kind: "enum",
        statics: {
            fields: {
                Solid: 0,
                Dash: 1,
                Dot: 2,
                DashDot: 3,
                DashDotDot: 4,
                Custom: 5
            }
        }
    });

    Bridge.define("ExpressCraft.DataColumn", {
        fields: {
            FieldName: null,
            DataType: 0,
            Self: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Self = this;
            }
        },
        methods: {
            GetDisplayValue$1: function (rowIndex, formatString) {
                switch (this.DataType) {
                    default: 
                    case ExpressCraft.DataType.Object: 
                        return System.String.format(formatString, [(Bridge.cast(this, ExpressCraft.DataColumnObject).Cells.getItem(rowIndex))]);
                    case ExpressCraft.DataType.DateTime: 
                        var obj = Bridge.cast(this, ExpressCraft.DataColumnDateTime).Cells.getItem(rowIndex);
                        if (obj == null) {
                            return "";
                        }
                        var d = { };
                        if (Bridge.is(obj, System.DateTime)) {
                            d.v = Bridge.cast(obj, System.DateTime);
                            if (Bridge.equals(d.v, System.DateTime.getMinValue())) {
                                return "";
                            }
                            return System.String.format(formatString, [Bridge.box(d.v, System.DateTime, System.DateTime.format)]);
                        }
                        if (System.DateTime.tryParse(obj, null, d)) {
                            if (Bridge.equals(d.v, System.DateTime.getMinValue())) {
                                return "";
                            }
                            return System.String.format(formatString, [Bridge.box(d.v, System.DateTime, System.DateTime.format)]);
                        }
                        var str = Bridge.as(obj, System.String);
                        if (System.String.isNullOrWhiteSpace(str)) {
                            return "";
                        }
                        return System.String.format(formatString, [str]);
                    case ExpressCraft.DataType.String: 
                        return System.String.format(formatString, [Bridge.cast(this, ExpressCraft.DataColumnString).Cells.getItem(rowIndex)]);
                    case ExpressCraft.DataType.Integer: 
                        return System.String.format(formatString, [Bridge.box(Bridge.cast(this, ExpressCraft.DataColumnInteger).Cells.getItem(rowIndex), System.Int32, System.Nullable.toString, System.Nullable.getHashCode)]);
                    case ExpressCraft.DataType.Long: 
                        return System.String.format(formatString, [Bridge.cast(this, ExpressCraft.DataColumnLong).Cells.getItem(rowIndex)]);
                    case ExpressCraft.DataType.Float: 
                        return System.String.format(formatString, [Bridge.box(Bridge.cast(this, ExpressCraft.DataColumnFloat).Cells.getItem(rowIndex), System.Single, System.Nullable.toStringFn(System.Single.format), System.Nullable.getHashCodeFn(System.Single.getHashCode))]);
                    case ExpressCraft.DataType.Double: 
                        return System.String.format(formatString, [Bridge.box(Bridge.cast(this, ExpressCraft.DataColumnDouble).Cells.getItem(rowIndex), System.Double, System.Nullable.toStringFn(System.Double.format), System.Nullable.getHashCodeFn(System.Double.getHashCode))]);
                    case ExpressCraft.DataType.Decimal: 
                        return System.String.format(formatString, [Bridge.cast(this, ExpressCraft.DataColumnDecimal).Cells.getItem(rowIndex)]);
                    case ExpressCraft.DataType.Byte: 
                        return System.String.format(formatString, [Bridge.box(Bridge.cast(this, ExpressCraft.DataColumnByte).Cells.getItem(rowIndex), System.Byte, System.Nullable.toString, System.Nullable.getHashCode)]);
                    case ExpressCraft.DataType.Short: 
                        return System.String.format(formatString, [Bridge.box(Bridge.cast(this, ExpressCraft.DataColumnShort).Cells.getItem(rowIndex), System.Int16, System.Nullable.toString, System.Nullable.getHashCode)]);
                    case ExpressCraft.DataType.Bool: 
                        return System.String.format(formatString, [Bridge.box(Bridge.cast(this, ExpressCraft.DataColumnBool).Cells.getItem(rowIndex), System.Boolean, System.Nullable.toStringFn(System.Boolean.toString), System.Nullable.getHashCode)]);
                }
            },
            GetDisplayValue: function (rowIndex) {
                if (this.Self.Cells.Count <= rowIndex) {
                    return null;
                }

                switch (this.DataType) {
                    default: 
                    case ExpressCraft.DataType.Object: 
                        return System.Convert.toString(Bridge.cast(this, ExpressCraft.DataColumnObject).Cells.getItem(rowIndex));
                    case ExpressCraft.DataType.DateTime: 
                        return System.Convert.toString(Bridge.box(Bridge.cast(this, ExpressCraft.DataColumnDateTime).Cells.getItem(rowIndex), System.DateTime, System.Nullable.toStringFn(System.DateTime.format), System.Nullable.getHashCode));
                    case ExpressCraft.DataType.String: 
                        return Bridge.cast(this, ExpressCraft.DataColumnString).Cells.getItem(rowIndex);
                    case ExpressCraft.DataType.Integer: 
                        return System.Convert.toString(Bridge.box(Bridge.cast(this, ExpressCraft.DataColumnInteger).Cells.getItem(rowIndex), System.Int32, System.Nullable.toString, System.Nullable.getHashCode));
                    case ExpressCraft.DataType.Long: 
                        return System.Convert.toString(Bridge.cast(this, ExpressCraft.DataColumnLong).Cells.getItem(rowIndex));
                    case ExpressCraft.DataType.Float: 
                        return System.Convert.toString(Bridge.box(Bridge.cast(this, ExpressCraft.DataColumnFloat).Cells.getItem(rowIndex), System.Single, System.Nullable.toStringFn(System.Single.format), System.Nullable.getHashCodeFn(System.Single.getHashCode)));
                    case ExpressCraft.DataType.Double: 
                        return System.Convert.toString(Bridge.box(Bridge.cast(this, ExpressCraft.DataColumnDouble).Cells.getItem(rowIndex), System.Double, System.Nullable.toStringFn(System.Double.format), System.Nullable.getHashCodeFn(System.Double.getHashCode)));
                    case ExpressCraft.DataType.Decimal: 
                        return System.Convert.toString(Bridge.cast(this, ExpressCraft.DataColumnDecimal).Cells.getItem(rowIndex));
                    case ExpressCraft.DataType.Byte: 
                        return System.Convert.toString(Bridge.box(Bridge.cast(this, ExpressCraft.DataColumnByte).Cells.getItem(rowIndex), System.Byte, System.Nullable.toString, System.Nullable.getHashCode));
                    case ExpressCraft.DataType.Bool: 
                        return System.Convert.toString(Bridge.box(Bridge.cast(this, ExpressCraft.DataColumnBool).Cells.getItem(rowIndex), System.Boolean, System.Nullable.toStringFn(System.Boolean.toString), System.Nullable.getHashCode));
                    case ExpressCraft.DataType.Short: 
                        return System.Convert.toString(Bridge.box(Bridge.cast(this, ExpressCraft.DataColumnShort).Cells.getItem(rowIndex), System.Int16, System.Nullable.toString, System.Nullable.getHashCode));
                }
            },
            GetCellValue: function (rowIndex) {
                if (this.Self.Cells.Count <= rowIndex) {
                    return null;
                }

                switch (this.DataType) {
                    default: 
                    case ExpressCraft.DataType.Object: 
                        return Bridge.cast(this, ExpressCraft.DataColumnObject).Cells.getItem(rowIndex);
                    case ExpressCraft.DataType.DateTime: 
                        return Bridge.box(Bridge.cast(this, ExpressCraft.DataColumnDateTime).Cells.getItem(rowIndex), System.DateTime, System.Nullable.toStringFn(System.DateTime.format), System.Nullable.getHashCode);
                    case ExpressCraft.DataType.String: 
                        return Bridge.cast(this, ExpressCraft.DataColumnString).Cells.getItem(rowIndex);
                    case ExpressCraft.DataType.Integer: 
                        return Bridge.box((Bridge.cast(this, ExpressCraft.DataColumnInteger).Cells.getItem(rowIndex)), System.Int32, System.Nullable.toString, System.Nullable.getHashCode);
                    case ExpressCraft.DataType.Long: 
                        return (Bridge.cast(this, ExpressCraft.DataColumnLong).Cells.getItem(rowIndex));
                    case ExpressCraft.DataType.Float: 
                        return Bridge.box((Bridge.cast(this, ExpressCraft.DataColumnFloat).Cells.getItem(rowIndex)), System.Single, System.Nullable.toStringFn(System.Single.format), System.Nullable.getHashCodeFn(System.Single.getHashCode));
                    case ExpressCraft.DataType.Double: 
                        return Bridge.box((Bridge.cast(this, ExpressCraft.DataColumnDouble).Cells.getItem(rowIndex)), System.Double, System.Nullable.toStringFn(System.Double.format), System.Nullable.getHashCodeFn(System.Double.getHashCode));
                    case ExpressCraft.DataType.Decimal: 
                        return (Bridge.cast(this, ExpressCraft.DataColumnDecimal).Cells.getItem(rowIndex));
                    case ExpressCraft.DataType.Byte: 
                        return Bridge.box((Bridge.cast(this, ExpressCraft.DataColumnByte).Cells.getItem(rowIndex)), System.Byte, System.Nullable.toString, System.Nullable.getHashCode);
                    case ExpressCraft.DataType.Bool: 
                        return Bridge.box((Bridge.cast(this, ExpressCraft.DataColumnBool).Cells.getItem(rowIndex)), System.Boolean, System.Nullable.toStringFn(System.Boolean.toString), System.Nullable.getHashCode);
                    case ExpressCraft.DataType.Short: 
                        return Bridge.box((Bridge.cast(this, ExpressCraft.DataColumnShort).Cells.getItem(rowIndex)), System.Int16, System.Nullable.toString, System.Nullable.getHashCode);
                }
            }
        }
    });

    Bridge.define("ExpressCraft.DataItem", {
        fields: {
            Text: null,
            Value: null
        },
        ctors: {
            $ctor1: function (text, value) {
                this.$initialize();
                this.Text = text;
                this.Value = value;
            },
            ctor: function (text) {
                this.$initialize();
                this.Text = text;
                this.Value = text;
            }
        }
    });

    Bridge.define("ExpressCraft.DataRow", {
        fields: {
            ParentTable: null,
            RowIndex: 0,
            batchData: null
        },
        ctors: {
            init: function () {
                this.RowIndex = -1;
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor2: function (columnLength) {
                this.$initialize();
                this.ParentTable = null;
                this.RowIndex = -1;
                this.batchData = System.Array.init(columnLength, null, System.Object);
            },
            $ctor1: function (parentTable, rowIndex) {
                if (rowIndex === void 0) { rowIndex = -1; }

                this.$initialize();
                this.ParentTable = parentTable;
                this.RowIndex = rowIndex;
                if (rowIndex === -1) {
                    this.batchData = System.Array.init(parentTable.ColumnCount, null, System.Object);
                }
            }
        },
        methods: {
            getItem: function (columnIndex) {
                return this.GetValue(columnIndex);
            },
            setItem: function (columnIndex, value) {
                this.SetValue(columnIndex, value);
            },
            GetOfflineDataRow: function () {
                var dr = new ExpressCraft.DataRow.$ctor2(this.ParentTable.ColumnCount);
                var data = System.Array.init(this.ParentTable.ColumnCount, null, System.Object);
                for (var i = 0; i < this.ParentTable.ColumnCount; i = (i + 1) | 0) {
                    data[System.Array.index(i, data)] = this.getItem(i);
                }
                dr.batchData = data;
                return dr;
            },
            SetValue$1: function (fieldName, value) {
                for (var i = 0; i < this.ParentTable.ColumnCount; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(this.ParentTable.Columns.getItem(i).FieldName, fieldName)) {
                        if (this.RowIndex === -1) {
                            if (!Bridge.referenceEquals(this.batchData[System.Array.index(i, this.batchData)], value)) {
                                this.batchData[System.Array.index(i, this.batchData)] = value;
                                this.ParentTable.RequireOnDataChangeEvent();
                            }

                            return;
                        }
                        var col = this.ParentTable.Columns.getItem(i);
                        if (!Bridge.referenceEquals(col.Cells._items[this.RowIndex], value)) {
                            col.Cells._items[this.RowIndex] = Bridge.unbox(value);
                            this.ParentTable.RequireOnDataChangeEvent();
                        }
                        return;
                    }
                }
            },
            SetValue: function (columnIndex, value) {
                if (this.RowIndex === -1) {
                    if (!Bridge.referenceEquals(this.batchData[System.Array.index(columnIndex, this.batchData)], value)) {
                        this.batchData[System.Array.index(columnIndex, this.batchData)] = value;
                        this.ParentTable.RequireOnDataChangeEvent();
                    }

                    return;
                }
                var col = this.ParentTable.Columns.getItem(columnIndex);
                if (!Bridge.referenceEquals(col.Cells._items[this.RowIndex], value)) {
                    col.Cells._items[this.RowIndex] = Bridge.unbox(value);
                    this.ParentTable.RequireOnDataChangeEvent();
                }
            },
            GetValue$1: function (fieldName) {
                for (var i = 0; i < this.ParentTable.ColumnCount; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(this.ParentTable.Columns.getItem(i).FieldName, fieldName)) {
                        if (this.RowIndex === -1) {
                            return this.batchData[System.Array.index(i, this.batchData)];
                        }
                        var col = this.ParentTable.Columns.getItem(i);
                        return col.Cells._items[this.RowIndex];
                    }
                }
                return null;
            },
            GetValue: function (columnIndex) {
                if (this.RowIndex === -1) {
                    return this.batchData[System.Array.index(columnIndex, this.batchData)];
                }
                var col = this.ParentTable.Columns.getItem(columnIndex);
                return col.Cells._items[this.RowIndex];
            }
        }
    });

    Bridge.define("ExpressCraft.DataTable", {
        fields: {
            Columns: null,
            _searchResults: null,
            _searchActive: false,
            _searchString: null,
            _inDataChange: false,
            _requestedOnDataChange: false,
            _ColCount: 0,
            _RowCount: 0,
            NewRows: null
        },
        events: {
            OnDataSourceChanged: null
        },
        props: {
            SearchString: {
                get: function () {
                    return this._searchString;
                }
            },
            ColumnCount: {
                get: function () {
                    return this._ColCount;
                }
            },
            RowCount: {
                get: function () {
                    if (this._searchActive) {
                        return this._searchResults.Count;
                    }
                    return this._RowCount;
                }
            }
        },
        ctors: {
            init: function () {
                this.Columns = new (System.Collections.Generic.List$1(ExpressCraft.DataColumn)).ctor();
                this._searchResults = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this._searchActive = false;
                this._inDataChange = false;
                this._requestedOnDataChange = false;
                this.NewRows = new (System.Collections.Generic.List$1(ExpressCraft.DataRow)).ctor();
            }
        },
        methods: {
            getItem: function (rowIndex) {
                return new ExpressCraft.DataRow.$ctor1(this, rowIndex);
            },
            Search: function (searchData, view) {
                if (view == null) {
                    this._searchString = "";
                    this._searchActive = false;
                    this._searchResults = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    this.RequireOnDataChangeEvent();

                    return;
                }
                this._searchString = searchData.toLowerCase();
                this._searchActive = !System.String.isNullOrWhiteSpace(this._searchString);


                if (this._searchActive) {
                    this._searchResults = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var count = view.ColumnCount();

                    var UseFormat = new (System.Collections.Generic.List$1(System.Tuple$2(System.Boolean,System.String))).ctor();
                    for (var x = 0; x < count; x = (x + 1) | 0) {
                        var gridCol = view.GetColumn(x);
                        if (gridCol.Visible) {
                            var FormatString = gridCol.FormatString;
                            UseFormat.add({ Item1: System.String.isNullOrWhiteSpace(FormatString), Item2: FormatString });
                        } else {
                            UseFormat.add({ Item1: false, Item2: "" });
                        }
                    }

                    for (var y = 0; y < this._RowCount; y = (y + 1) | 0) {
                        for (var x1 = 0; x1 < count; x1 = (x1 + 1) | 0) {
                            var gridCol1 = view.GetColumn(x1);
                            if (gridCol1.Visible) {
                                var Column = gridCol1.Column;
                                var helperWhatToDo = UseFormat.getItem(x1);

                                var value;

                                if (helperWhatToDo.Item1) {
                                    value = Column.GetDisplayValue(y);
                                } else {
                                    value = Column.GetDisplayValue$1(y, helperWhatToDo.Item2);
                                }

                                if (!System.String.isNullOrWhiteSpace(value) && System.String.startsWith(value.toLowerCase(), searchData)) {
                                    this._searchResults.add(y);
                                    break;
                                }
                            }
                        }
                    }
                } else {
                    this._searchResults = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                }

                this.RequireOnDataChangeEvent();
            },
            RequireOnDataChangeEvent: function () {
                if (!this._inDataChange) {
                    this._requestedOnDataChange = false;
                    if (!Bridge.staticEquals(this.OnDataSourceChanged, null)) {
                        this.OnDataSourceChanged(this, null);
                    }
                } else {
                    this._requestedOnDataChange = true;
                }
            },
            ClearRows: function () {
                this._RowCount = 0;
                for (var i = 0; i < this.Columns.Count; i = (i + 1) | 0) {
                    this.ClearCells(this.Columns.getItem(i));
                }
            },
            ClearCells$1: function (T, _column) {
                var _col = _column;
                _col.Cells = new (System.Collections.Generic.List$1(T)).ctor();
            },
            ClearCells: function (_column) {
                switch (_column.DataType) {
                    default: 
                    case ExpressCraft.DataType.Object: 
                        this.ClearCells$1(System.Object, _column);
                        break;
                    case ExpressCraft.DataType.DateTime: 
                        this.ClearCells$1(System.Nullable$1(System.DateTime), _column);
                        break;
                    case ExpressCraft.DataType.String: 
                        this.ClearCells$1(System.String, _column);
                        break;
                    case ExpressCraft.DataType.Integer: 
                        this.ClearCells$1(System.Nullable$1(System.Int32), _column);
                        break;
                    case ExpressCraft.DataType.Long: 
                        this.ClearCells$1(System.Nullable$1(System.Int64), _column);
                        break;
                    case ExpressCraft.DataType.Float: 
                        this.ClearCells$1(System.Nullable$1(System.Single), _column);
                        break;
                    case ExpressCraft.DataType.Double: 
                        this.ClearCells$1(System.Nullable$1(System.Double), _column);
                        break;
                    case ExpressCraft.DataType.Decimal: 
                        this.ClearCells$1(System.Nullable$1(System.Decimal), _column);
                        break;
                    case ExpressCraft.DataType.Bool: 
                        this.ClearCells$1(System.Nullable$1(System.Boolean), _column);
                        break;
                    case ExpressCraft.DataType.Byte: 
                        this.ClearCells$1(System.Nullable$1(System.Byte), _column);
                        break;
                    case ExpressCraft.DataType.Short: 
                        this.ClearCells$1(System.Nullable$1(System.Int16), _column);
                        break;
                }
                this.RequireOnDataChangeEvent();
            },
            GetColumnByDataType: function (type) {
                if (type === void 0) { type = 0; }
                switch (type) {
                    default: 
                    case ExpressCraft.DataType.Object: 
                        return new ExpressCraft.DataColumnObject();
                    case ExpressCraft.DataType.DateTime: 
                        return new ExpressCraft.DataColumnDateTime();
                    case ExpressCraft.DataType.String: 
                        return new ExpressCraft.DataColumnString();
                    case ExpressCraft.DataType.Integer: 
                        return new ExpressCraft.DataColumnInteger();
                    case ExpressCraft.DataType.Long: 
                        return new ExpressCraft.DataColumnLong();
                    case ExpressCraft.DataType.Float: 
                        return new ExpressCraft.DataColumnFloat();
                    case ExpressCraft.DataType.Double: 
                        return new ExpressCraft.DataColumnDouble();
                    case ExpressCraft.DataType.Decimal: 
                        return new ExpressCraft.DataColumnDecimal();
                    case ExpressCraft.DataType.Bool: 
                        return new ExpressCraft.DataColumnBool();
                    case ExpressCraft.DataType.Byte: 
                        return new ExpressCraft.DataColumnByte();
                    case ExpressCraft.DataType.Short: 
                        return new ExpressCraft.DataColumnShort();
                }
            },
            AddColumn: function (fieldName, type) {
                if (type === void 0) { type = 0; }
                var col = this.GetColumnByDataType(type);
                col.FieldName = fieldName;

                this.Columns.add(col);
                this._ColCount = this.Columns.Count;

                this.RequireOnDataChangeEvent();
            },
            BeginNewRow: function (EstimatedNewRows) {
                this.NewRows = new (System.Collections.Generic.List$1(ExpressCraft.DataRow)).$ctor2(EstimatedNewRows);
                this.BeginDataUpdate();
            },
            AddRow: function () {
                var dr = new ExpressCraft.DataRow.$ctor1(this, Bridge.identity(this._RowCount, (this._RowCount = (this._RowCount + 1) | 0)));
                var colLength = this.Columns.Count;
                for (var x = 0; x < colLength; x = (x + 1) | 0) {
                    var col = this.Columns.getItem(x);
                    col.Cells.add(null);
                }

                this.RequireOnDataChangeEvent();

                return dr;
            },
            AddRow$1: function (row) {
                if (row === void 0) { row = []; }
                if (row.length === this.ColumnCount) {
                    this._RowCount = (this._RowCount + 1) | 0;
                    var colLength = this.Columns.Count;
                    for (var x = 0; x < colLength; x = (x + 1) | 0) {
                        var col = this.Columns.getItem(x);
                        col.Cells.add(Bridge.unbox(row[System.Array.index(x, row)]));
                    }
                    this.RequireOnDataChangeEvent();
                }
            },
            NewRow: function () {
                var dr = new ExpressCraft.DataRow.$ctor1(this);

                this.NewRows.add(dr);

                return dr;
            },
            AcceptNewRows: function () {
                var $t, $t1, $t2;
                if (this.NewRows == null || this.NewRows.Count === 0) {
                    return;
                }
                var colLength = this.Columns.Count;
                var rowLength = this.NewRows.Count;
                var colN1 = (colLength - 1) | 0;

                for (var x = 0; x < colLength; x = (x + 1) | 0) {
                    var col = this.Columns.getItem(x);
                    var DataCells = System.Array.init(rowLength, null, System.Object);

                    if (x === 0) {
                        for (var y = 0; y < rowLength; y = (y + 1) | 0) {
                            this.NewRows.getItem(y).RowIndex = Bridge.identity(this._RowCount, (this._RowCount = (this._RowCount + 1) | 0));
                            DataCells[System.Array.index(y, DataCells)] = ($t = this.NewRows.getItem(y).batchData)[System.Array.index(x, $t)];
                        }
                    } else if (x === colN1) {
                        for (var y1 = 0; y1 < rowLength; y1 = (y1 + 1) | 0) {
                            DataCells[System.Array.index(y1, DataCells)] = ($t1 = this.NewRows.getItem(y1).batchData)[System.Array.index(x, $t1)];
                            this.NewRows.getItem(y1).batchData = null;
                        }
                    } else {
                        for (var y2 = 0; y2 < rowLength; y2 = (y2 + 1) | 0) {
                            DataCells[System.Array.index(y2, DataCells)] = ($t2 = this.NewRows.getItem(y2).batchData)[System.Array.index(x, $t2)];
                        }
                    }
                    col.Cells.AddRange(Bridge.unbox(DataCells));
                }
                this.NewRows.clear();

                this.EndDataUpdate();
            },
            BeginDataUpdate: function () {
                this._inDataChange = true;
                this._requestedOnDataChange = false;
            },
            EndDataUpdate: function () {
                this._inDataChange = false;
                if (this._requestedOnDataChange) {
                    this._requestedOnDataChange = false;
                    if (!Bridge.staticEquals(this.OnDataSourceChanged, null)) {
                        this.OnDataSourceChanged(this, null);
                    }
                }
            },
            RejectNewRows: function () {
                this.NewRows.clear();
                this._inDataChange = false;
            }
        }
    });

    Bridge.define("ExpressCraft.DataType", {
        $kind: "enum",
        statics: {
            fields: {
                Object: 0,
                DateTime: 1,
                String: 2,
                Integer: 3,
                Long: 4,
                Float: 5,
                Double: 6,
                Decimal: 7,
                Bool: 8,
                Byte: 9,
                Short: 10
            }
        }
    });

    Bridge.define("ExpressCraft.DateControl.DisplayMode", {
        $kind: "nested enum",
        statics: {
            fields: {
                Day: 0,
                Month: 1,
                Year: 2
            }
        }
    });

    Bridge.define("ExpressCraft.DialogResult", {
        fields: {
            ResultEnum: 0,
            CallBack: null
        },
        ctors: {
            init: function () {
                this.ResultEnum = ExpressCraft.DialogResultEnum.None;
            },
            ctor: function (resultEnum, callBack) {
                this.$initialize();
                this.ResultEnum = resultEnum;
                this.CallBack = callBack;
            }
        },
        methods: {
            InvokeIfResult: function (resultEnum) {
                if (resultEnum === this.ResultEnum && !Bridge.staticEquals(this.CallBack, null)) {
                    this.CallBack();
                }
            }
        }
    });

    Bridge.define("ExpressCraft.DialogResultEnum", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                OK: 1,
                Cancel: 2,
                Abort: 3,
                Send: 4,
                Ignore: 5,
                Yes: 6,
                No: 7
            }
        }
    });

    Bridge.define("ExpressCraft.ExternalPlugin", {
        fields: {
            SourceUrl: null,
            SetupCompleted: false,
            InLoad: false,
            OnReady: null
        },
        ctors: {
            init: function () {
                this.SetupCompleted = false;
                this.InLoad = false;
            },
            ctor: function (sourceUrl) {
                this.$initialize();
                this.SourceUrl = sourceUrl;
            }
        },
        methods: {
            Setup: function (async, defer) {
                var $t;
                if (async === void 0) { async = false; }
                if (defer === void 0) { defer = false; }
                if (!this.SetupCompleted) {
                    if (this.InLoad) {
                        return;
                    }
                    this.InLoad = true;
                    var script = ($t = document.createElement("script"), $t.onload = Bridge.fn.bind(this, function (ele) {
                        this.SetupCompleted = true;
                        this.InLoad = false;
                        if (!Bridge.staticEquals(this.OnReady, null)) {
                            this.OnReady();
                        }
                    }), $t.src = this.SourceUrl, $t);
                    if (async) {
                        script.async = async;
                    }
                    if (defer) {
                        script.defer = defer;
                    }
                    ExpressCraft.Helper.AppendChild$2(document.head, script);
                }
            },
            UsageCheck: function () {
                if (!this.SetupCompleted) {
                    throw new System.Exception("'" + (this.SourceUrl || "") + "' requires to be setup!");
                }
                if (this.InLoad) {
                    throw new System.Exception("'" + (this.SourceUrl || "") + "' is currently loading, Please try again in a few seconds!");
                }
            }
        }
    });

    Bridge.define("ExpressCraft.Firebase", {
        statics: {
            fields: {
                ExternalFireBase: null,
                DisplayName: null,
                PhotoURL: null,
                UserSignedIn: false
            },
            ctors: {
                init: function () {
                    this.ExternalFireBase = new ExpressCraft.ExternalPlugin("https://www.gstatic.com/firebasejs/3.6.8/firebase.js");
                }
            },
            methods: {
                Setup: function (OnReady) {
                    if (OnReady === void 0) { OnReady = null; }
                    ExpressCraft.Firebase.ExternalFireBase.OnReady = OnReady;
                    ExpressCraft.Firebase.ExternalFireBase.Setup();
                },
                InitializeApp: function (ApiKey, AuthDomain, DatabaseURL, ProjectId, StorageBucket, MessagingSenderId) {
                    ExpressCraft.Firebase.ExternalFireBase.UsageCheck();
                    if (System.String.isNullOrWhiteSpace(ApiKey)) {
                        throw new System.Exception(System.String.format("Invalid Firebase {0} !", ["ApiKey"]));
                    }
                    if (System.String.isNullOrWhiteSpace(AuthDomain)) {
                        throw new System.Exception(System.String.format("Invalid Firebase {0}!", ["AuthDomain"]));
                    }
                    if (System.String.isNullOrWhiteSpace(DatabaseURL)) {
                        throw new System.Exception(System.String.format("Invalid Firebase {0}!", ["DatabaseURL"]));
                    }
                    if (System.String.isNullOrWhiteSpace(ProjectId)) {
                        throw new System.Exception(System.String.format("Invalid Firebase {0}!", ["ProjectId"]));
                    }
                    if (System.String.isNullOrWhiteSpace(StorageBucket)) {
                        throw new System.Exception(System.String.format("Invalid Firebase {0}!", ["StorageBucket"]));
                    }
                    if (System.String.isNullOrWhiteSpace(MessagingSenderId)) {
                        throw new System.Exception(System.String.format("Invalid Firebase {0}!", ["MessagingSenderId"]));
                    }

                    			firebase.initializeApp({apiKey: ApiKey, authDomain: AuthDomain, databaseURL: DatabaseURL, projectId : ProjectId, storageBucket: StorageBucket, messagingSenderId: MessagingSenderId });
                    			firebase.auth().onAuthStateChanged(function(user) {
                    				if (user) {
                    					this.UserSignedIn = true;
                    					this.DisplayName = user.displayName;
                    					this.PhotoURL = user.photoURL;
                    				}else{
                    					this.UserSignedIn = false;
                    				}
                    			});
                    			
                },
                SignIn: function () {
                    			firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider());
                    			
                },
                SignOut: function () {
                    			firebase.auth().signOut();
                    			
                },
                DatabaseRef: function (name) {
                    var dataRef = firebase.database().ref(name);
                    dataRef.off();
                    return dataRef;
                },
                IsSignedInWithFirebase: function () {
                    return 
			if(firebase.auth().currentUser)
			{
				return true;
			}else
			{
				return false;
			};
                }
            }
        }
    });

    Bridge.define("ExpressCraft.FixedSplitterPosition", {
        $kind: "enum",
        statics: {
            fields: {
                Panel1: 0,
                Panel2: 1,
                None: 2
            }
        }
    });

    Bridge.define("ExpressCraft.Font", {
        fields: {
            FontString: null
        },
        ctors: {
            ctor: function (fontString) {
                this.$initialize();
                this.FontString = fontString;
            }
        }
    });

    Bridge.define("ExpressCraft.FormButtonType", {
        $kind: "enum",
        statics: {
            fields: {
                Close: 0,
                Maximize: 1,
                Minimize: 2,
                Restore: 3,
                Help: 4,
                Menu: 5
            }
        }
    });

    Bridge.define("ExpressCraft.FormCollection", {
        fields: {
            FormOwner: null,
            VisibleForms: null
        },
        ctors: {
            init: function () {
                this.VisibleForms = new (System.Collections.Generic.List$1(ExpressCraft.Form)).ctor();
            },
            ctor: function (formOwner) {
                this.$initialize();
                this.FormOwner = formOwner;
            }
        }
    });

    Bridge.define("ExpressCraft.FormStartPosition", {
        $kind: "enum",
        statics: {
            fields: {
                Manual: 0,
                Center: 1,
                WindowsDefaultLocation: 2
            }
        }
    });

    Bridge.define("ExpressCraft.Gmail", {
        statics: {
            fields: {
                ExternalGmail: null,
                ClientId: null,
                GoogleAuth: null,
                _oneTimeCall: null,
                _hasRan: false
            },
            ctors: {
                init: function () {
                    this.ExternalGmail = new ExpressCraft.ExternalPlugin("https://apis.google.com/js/api.js");
                    this._oneTimeCall = new (System.Collections.Generic.List$1(Function)).ctor();
                    this._hasRan = false;
                }
            },
            methods: {
                Authorize: function () {

                },
                PushEventsTimeCall: function () {

                },
                OnSignedIn: function (method) {

                },
                IsSignedIn: function () {
                    return false;


                },
                AccessToken: function () {
                    return null;



                },
                Fullname: function () {
                    return null;



                },
                Email: function () {
                    return null;



                },
                GetContentTypeFromFileName: function (filename) {
                    return null;



                },
                SendEmail: function (message) {












                },
                IconURL: function () {
                    return null;



                },
                Setup: function (clientId) {


                }
            }
        }
    });

    Bridge.define("ExpressCraft.GmailMessage", {
        fields: {
            ToEmail: null,
            Subject: null,
            Body: null,
            IsHTML: false,
            Attachments: null
        },
        ctors: {
            init: function () {
                this.Attachments = new (System.Collections.Generic.List$1(ExpressCraft.GmailMessageAttachment)).ctor();
            },
            ctor: function (toEmail, subject, body, isHTML) {
                this.$initialize();
                this.ToEmail = toEmail;
                this.Subject = subject;
                this.Body = body;
                this.IsHTML = isHTML;
            }
        }
    });

    Bridge.define("ExpressCraft.GmailMessageAttachment", {
        fields: {
            Filename: null,
            Data: null,
            IsBase64: false
        },
        ctors: {
            ctor: function (filename, data, isBase64) {
                if (isBase64 === void 0) { isBase64 = false; }

                this.$initialize();
                this.Filename = filename;
                this.Data = data;
                this.IsBase64 = isBase64;
            }
        }
    });

    Bridge.define("ExpressCraft.GoogleCloudPrint", {
        statics: {
            fields: {
                ExternalGoogleCloudPrint: null
            },
            ctors: {
                init: function () {
                    this.ExternalGoogleCloudPrint = new ExpressCraft.ExternalPlugin("https://www.google.com/cloudprint/client/cpgadget.js");
                }
            },
            methods: {
                Setup: function () {
                    ExpressCraft.GoogleCloudPrint.ExternalGoogleCloudPrint.Setup();
                }
            }
        },
        fields: {
            _source: null,
            _mimetype: null,
            _encoding: null,
            _title: null,
            _gadget: null
        },
        ctors: {
            init: function () {
                this._encoding = "";
            },
            ctor: function (source, title, gcpmt, encoding) {
                if (title === void 0) { title = ""; }
                if (gcpmt === void 0) { gcpmt = 0; }
                if (encoding === void 0) { encoding = ""; }

                this.$initialize();
                System.Object.call(this);
                this._title = title;
                this._source = source;
                this._encoding = encoding;
                this._mimetype = System.String.replaceAll(System.Enum.format(ExpressCraft.GoogleCloudPrintingMimeType, gcpmt, "G").toLowerCase(), "_", ".");
            }
        },
        methods: {
            Show: function () {
                ExpressCraft.GoogleCloudPrint.ExternalGoogleCloudPrint.UsageCheck();

                			this._gadget = new cloudprint.Gadget();
                			
                if (!System.String.isNullOrWhiteSpace(this._encoding)) {
                    				this._gadget.setPrintDocument(this._mimetype, this._title, this._source, this._encoding);
                    				
                } else {
                    				this._gadget.setPrintDocument(this._mimetype, this._title, this._source);
                    				
                }
                			this._gadget.openPrintDialog();
                			this._gadget.setOnCloseCallback(this.clearContent);
                			
            },
            clearContent: function () {
                try {
                    ExpressCraft.Helper.Delete$1(jQuery(".__gcp_dialog_container_cls").parent().get(0));
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
            },
            Close: function () {
                if (this._gadget != null) {
                    				this._gadget.closePrintDialog();
                    				this._gadget = null;
                    				
                }
            }
        }
    });

    Bridge.define("ExpressCraft.GoogleCloudPrintingMimeType", {
        $kind: "enum",
        statics: {
            fields: {
                Url: 0,
                DataUrl: 1,
                Google_Drawing: 2,
                Google_Drive: 3,
                Google_Kix: 4,
                Google_Mail: 5,
                Google_Presentation: 6,
                Google_Spreadsheet: 7
            }
        }
    });

    Bridge.define("ExpressCraft.Graphics", {
        statics: {
            fields: {
                cacheGetHeight: null
            },
            ctors: {
                init: function () {
                    this.cacheGetHeight = new (System.Collections.Generic.Dictionary$2(System.String,System.Single))();
                }
            },
            methods: {
                internalMeasureHeight: function (text, font) {
                    if (ExpressCraft.Graphics.cacheGetHeight.containsKey(font.FontString)) {
                        return ExpressCraft.Graphics.cacheGetHeight.get(font.FontString);
                    }

                    var div = new ExpressCraft.Control.$ctor1();
                    div.Content.textContent = text;
                    div.Left = -100;
                    div.Top = -100;
                    div.Style.font = font.FontString;

                    ExpressCraft.Helper.AppendChild$1(document.body, div);

                    var height = div.Content.getBoundingClientRect().height;

                    document.body.removeChild(ExpressCraft.Control.op_Implicit(div));

                    return (ExpressCraft.Graphics.cacheGetHeight.set(font.FontString, height), height);
                }
            }
        },
        fields: {
            _canvas: null,
            _context: null
        },
        ctors: {
            ctor: function (control) {
                this.$initialize();
                this._canvas = control.Canvas;
                this._context = this._canvas.getContext("2d");
            }
        },
        methods: {
            Clear: function (color) {
                this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);
                if (ExpressCraft.Color.op_Inequality(ExpressCraft.Color.Transparent.$clone(), color.$clone())) {
                    this.FillRectangle$3(new ExpressCraft.SolidBrush(color.$clone()), 0, 0, this._canvas.width, this._canvas.height);
                }
            },
            ApplyFill: function (brush) {
                if (Bridge.is(brush, ExpressCraft.SolidBrush)) {
                    this._context.fillStyle = brush.Color.ToHTMLColor();
                } else if (Bridge.is(brush, ExpressCraft.StyleBrush)) {
                    this._context.fillStyle = brush.Style;
                }
            },
            ApplyPen: function (pen) {
                if (Bridge.is(pen.Brush, ExpressCraft.SolidBrush)) {
                    this._context.strokeStyle = pen.Brush.Color.ToHTMLColor();
                } else if (Bridge.is(pen.Brush, ExpressCraft.StyleBrush)) {
                    this._context.strokeStyle = pen.Brush.Style;
                }
                var width = pen.Width;
                if (width < 0) {
                    width = 1;
                }
                this._context.lineWidth = width;

                if (pen.DashStyle !== ExpressCraft.DashStyle.Solid) {
                    switch (pen.DashStyle) {
                        case ExpressCraft.DashStyle.Dash: 
                            this._context.setLineDash(System.Array.init([2, 2], System.Double));
                            break;
                        case ExpressCraft.DashStyle.Dot: 
                            this._context.setLineDash(System.Array.init([1, 1], System.Double));
                            break;
                        case ExpressCraft.DashStyle.DashDot: 
                            this._context.setLineDash(System.Array.init([2, 1, 1, 1], System.Double));
                            break;
                        case ExpressCraft.DashStyle.DashDotDot: 
                            break;
                        case ExpressCraft.DashStyle.Custom: 
                            break;
                        default: 
                            break;
                    }
                }
            },
            FillRectangle$3: function (brush, x, y, width, height) {
                this.FillRectangle$2(brush, Bridge.Int.clip32(x), Bridge.Int.clip32(y), Bridge.Int.clip32(width), Bridge.Int.clip32(height));
            },
            FillRectangle$2: function (brush, x, y, width, height) {
                this.ApplyFill(brush);
                this._context.fillRect(x, y, width, height);
            },
            FillRectangle: function (brush, rect) {
                this.FillRectangle$2(brush, rect.X, rect.Y, rect.Width, rect.Height);
            },
            FillRectangle$1: function (brush, rect) {
                this.FillRectangle$3(brush, rect.X, rect.Y, rect.Width, rect.Height);
            },
            FillEllipse$3: function (brush, x, y, width, height) {
                var width_over_2 = width / 2;
                var width_two_thirds = width * 2 / 3;
                var height_over_2 = height / 2;

                x += width_over_2;
                y += height_over_2;

                this._context.beginPath();
                this._context.moveTo(x, y - height_over_2);
                this._context.bezierCurveTo(x + width_two_thirds, y - height_over_2, x + width_two_thirds, y + height_over_2, x, y + height_over_2);
                this._context.bezierCurveTo(x - width_two_thirds, y + height_over_2, x - width_two_thirds, y - height_over_2, x, y - height_over_2);
                this._context.closePath();
                this.ApplyFill(brush);
                this._context.fill();
            },
            FillEllipse$2: function (brush, x, y, width, height) {
                this.FillEllipse$3(brush, x, y, width, height);
            },
            FillEllipse: function (brush, rect) {
                this.FillEllipse$2(brush, rect.X, rect.Y, rect.Width, rect.Height);
            },
            FillEllipse$1: function (brush, rect) {
                this.FillEllipse$3(brush, rect.X, rect.Y, rect.Width, rect.Height);
            },
            DrawEllipse$3: function (pen, x, y, width, height) {
                var width_over_2 = width / 2;
                var width_two_thirds = width * 2 / 3;
                var height_over_2 = height / 2;

                x += width_over_2;
                y += height_over_2;

                this._context.beginPath();
                this.ApplyPen(pen);
                this._context.moveTo(x, y - height_over_2);
                this._context.bezierCurveTo(x + width_two_thirds, y - height_over_2, x + width_two_thirds, y + height_over_2, x, y + height_over_2);
                this._context.bezierCurveTo(x - width_two_thirds, y + height_over_2, x - width_two_thirds, y - height_over_2, x, y - height_over_2);
                this._context.closePath();
                this._context.stroke();
            },
            DrawEllipse$2: function (pen, x, y, width, height) {
                this.DrawEllipse$3(pen, x, y, width, height);
            },
            DrawEllipse: function (pen, rect) {
                this.DrawEllipse$2(pen, rect.X, rect.Y, rect.Width, rect.Height);
            },
            DrawEllipse$1: function (pen, rect) {
                this.DrawEllipse$3(pen, rect.X, rect.Y, rect.Width, rect.Height);
            },
            DrawRectangle$3: function (pen, x, y, width, height) {
                this.DrawRectangle$2(pen, Bridge.Int.clip32(x), Bridge.Int.clip32(y), Bridge.Int.clip32(width), Bridge.Int.clip32(height));
            },
            DrawRectangle$2: function (pen, x, y, width, height) {
                this.ApplyPen(pen);
                this._context.strokeRect(x, y, width, height);
            },
            DrawRectangle: function (pen, rect) {
                this.DrawRectangle$2(pen, rect.X, rect.Y, rect.Width, rect.Height);
            },
            DrawRectangle$1: function (pen, rect) {
                this.DrawRectangle$3(pen, rect.X, rect.Y, rect.Width, rect.Height);
            },
            DrawLine$3: function (pen, x1, y1, x2, y2) {
                this._context.beginPath();
                this._context.moveTo(x1, y1);
                this._context.lineTo(x2, y2);
                this.ApplyPen(pen);
                this._context.stroke();
            },
            DrawLine$1: function (pen, pt1, pt2) {
                this.DrawLine$3(pen, pt1.X, pt1.Y, pt2.X, pt2.Y);
            },
            DrawLine$2: function (pen, x1, y1, x2, y2) {
                this._context.beginPath();
                this._context.moveTo(x1, y1);
                this._context.lineTo(x2, y2);
                this.ApplyPen(pen);
                this._context.stroke();
            },
            DrawLine: function (pen, pt1, pt2) {
                this.DrawLine$2(pen, pt1.X, pt1.Y, pt2.X, pt2.Y);
            },
            DrawString$3: function (s, font, brush, layoutRectangle, format) {
                this.DrawString$6(s, font, brush, layoutRectangle.X, layoutRectangle.Y, format);
            },
            DrawString$2: function (s, font, brush, layoutRectangle) {
                this.DrawString$3(s, font, brush, layoutRectangle, null);
            },
            DrawString$1: function (s, font, brush, point, format) {
                this.DrawString$6(s, font, brush, point.X, point.Y, format);
            },
            DrawString$6: function (s, font, brush, x, y, format) {
                this.ApplyFill(brush);
                this._context.font = font.FontString;
                this._context.fillText(s, x, y);
            },
            DrawString$4: function (s, font, brush, x, y, maxWidth, alignmentCentre, baseIsTop) {
                if (alignmentCentre === void 0) { alignmentCentre = false; }
                if (baseIsTop === void 0) { baseIsTop = true; }
                this.ApplyFill(brush);
                if (baseIsTop) {
                    this._context.textBaseline = "top";
                }

                if (alignmentCentre) {
                    this._context.textAlign = "center";
                } else {
                    this._context.textAlign = "left";
                }

                this._context.font = font.FontString;
                this._context.fillText(s, x, y, maxWidth);
            },
            DrawString: function (s, font, brush, point) {
                this.DrawString$5(s, font, brush, point.X, point.Y);
            },
            DrawString$5: function (s, font, brush, x, y) {
                this.DrawString$6(s, font, brush, x, y, null);
            },
            DrawBezier$2: function (pen, x1, y1, x2, y2, x3, y3, x4, y4) {
                this._context.beginPath();
                this.ApplyPen(pen);
                this._context.moveTo(x1, y1);
                this._context.bezierCurveTo(x2, y2, x3, y3, x4, y4);
                this._context.closePath();
                this._context.stroke();
            },
            DrawBezier$1: function (pen, pt1, pt2, pt3, pt4) {
                this.DrawBezier$2(pen, pt1.X, pt1.Y, pt2.X, pt2.Y, pt3.X, pt3.Y, pt4.X, pt4.Y);
            },
            DrawBezier: function (pen, pt1, pt2, pt3, pt4) {
                this.DrawBezier$2(pen, pt1.X, pt1.Y, pt2.X, pt2.Y, pt3.X, pt3.Y, pt4.X, pt4.Y);
            },
            DrawBeziers$1: function (pen, points) {
                this._context.beginPath();
                this.ApplyPen(pen);
                var point = points[System.Array.index(0, points)];
                this._context.moveTo(point.X, point.Y);
                for (var i = 1; i < points.length; i = (i + 3) | 0) {
                    point = points[System.Array.index(i, points)];
                    var point2 = points[System.Array.index(((i + 1) | 0), points)];
                    var point3 = points[System.Array.index(((i + 2) | 0), points)];
                    this._context.bezierCurveTo(point.X, point.Y, point2.X, point2.Y, point3.X, point3.Y);
                }
                this._context.closePath();
                this._context.stroke();
            },
            DrawBeziers: function (pen, points) {
                this._context.beginPath();
                this.ApplyPen(pen);
                var point = points[System.Array.index(0, points)];
                this._context.moveTo(point.X, point.Y);
                for (var i = 1; i < points.length; i = (i + 3) | 0) {
                    point = points[System.Array.index(i, points)];
                    var point2 = points[System.Array.index(((i + 1) | 0), points)];
                    var point3 = points[System.Array.index(((i + 2) | 0), points)];
                    this._context.bezierCurveTo(point.X, point.Y, point2.X, point2.Y, point3.X, point3.Y);
                }
                this._context.closePath();
                this._context.stroke();
            },
            MeasureString$4: function (text, font, layoutArea, stringFormat, charactersFitted, linesFilled) {
                throw new System.NotImplementedException.ctor();
            },
            MeasureString$5: function (text, font, width) {
                throw new System.NotImplementedException.ctor();
            },
            MeasureString$6: function (text, font, width, format) {
                throw new System.NotImplementedException.ctor();
            },
            MeasureString$1: function (text, font, origin, stringFormat) {
                throw new System.NotImplementedException.ctor();
            },
            MeasureString$3: function (text, font, layoutArea, stringFormat) {
                throw new System.NotImplementedException.ctor();
            },
            MeasureString: function (text, font) {
                this._context.font = font.FontString;
                var size = this._context.measureText(text);
                var sp = document.createElement("span");
                sp.style.font = font.FontString;

                return new ExpressCraft.SizeF.ctor(size.width, ExpressCraft.Graphics.internalMeasureHeight(text, font));
            },
            MeasureString$2: function (text, font, layoutArea) {
                throw new System.NotImplementedException.ctor();
            },
            MeasureStringWidth: function (text, font) {
                this._context.font = font.FontString;
                var size = this._context.measureText(text);
                var sp = document.createElement("span");
                sp.style.font = font.FontString;
                return size.width;
            },
            MeasureStringHeight: function (text, font) {
                return ExpressCraft.Graphics.internalMeasureHeight(text, font);
            }
        }
    });

    Bridge.define("ExpressCraft.IPrintable", {
        $kind: "interface"
    });

    Bridge.define("ExpressCraft.GridViewCellApparence", {
        fields: {
            IsBold: false,
            Alignment: null,
            Forecolor: null
        },
        ctors: {
            init: function () {
                this.IsBold = false;
                this.Alignment = "left";
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (isBold) {
                this.$initialize();
                this.IsBold = isBold;
            },
            $ctor2: function (isBold, alignment) {
                this.$initialize();
                this.IsBold = isBold;
                this.Alignment = alignment;
            },
            $ctor3: function (isBold, alignment, forecolor) {
                this.$initialize();
                this.IsBold = isBold;
                this.Alignment = alignment;
                this.Forecolor = forecolor;
            }
        }
    });

    Bridge.define("ExpressCraft.GridViewCellDisplay", {
        fields: {
            UseDefaultElement: false
        },
        methods: {
            OnCreate: function (gridView, dataRowIndex, columnIndex) {
                return null;
            },
            OnCreateDefault: function (originalElement, gridView, dataRowIndex, columnIndex) {
                return originalElement;
            }
        }
    });

    Bridge.define("ExpressCraft.GridViewColumn", {
        fields: {
            Column: null,
            View: null,
            Caption: null,
            Visible: false,
            CachedX: 0,
            FormatString: null,
            HeadingApparence: null,
            BodyApparence: null,
            CellDisplay: null,
            SortedMode: 0,
            FilterEdit: null,
            filterValue: null,
            AllowEdit: false,
            ReadOnly: false,
            _width: 0
        },
        props: {
            FilterValue: {
                get: function () {
                    return this.filterValue;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this.filterValue, value)) {
                        this.filterValue = value;
                        if (this.View.ShowAutoFilterRow) {
                            this.View.CalculateVisibleRows();
                        }
                    }
                }
            },
            Width: {
                get: function () {
                    return this._width;
                },
                set: function (value) {
                    if (value < 24) {
                        value = 24;
                    }
                    if (this._width !== value) {
                        this._width = value;
                        this.View.RenderGrid();
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.FormatString = "";
                this.HeadingApparence = new ExpressCraft.GridViewCellApparence.ctor();
                this.BodyApparence = new ExpressCraft.GridViewCellApparence.ctor();
                this.SortedMode = ExpressCraft.GridViewSortMode.None;
                this.AllowEdit = true;
                this.ReadOnly = false;
            },
            ctor: function (view, width) {
                if (width === void 0) { width = 100; }

                this.$initialize();
                this.View = view;
                this._width = width;
            }
        },
        methods: {
            ValueMatchFilter: function (index) {
                if (this.filterValue == null) {
                    return true;
                }

                var abc = this.GetDisplayValueByDataRowHandle(index);

                switch (this.Column.DataType) {
                    default: 
                    case ExpressCraft.DataType.Object: 
                    case ExpressCraft.DataType.Integer: 
                    case ExpressCraft.DataType.Long: 
                    case ExpressCraft.DataType.Float: 
                    case ExpressCraft.DataType.Double: 
                    case ExpressCraft.DataType.Decimal: 
                    case ExpressCraft.DataType.Bool: 
                    case ExpressCraft.DataType.Byte: 
                    case ExpressCraft.DataType.Short: 
                        return Bridge.referenceEquals(abc, this.filterValue);
                    case ExpressCraft.DataType.DateTime: 
                    case ExpressCraft.DataType.String: 
                        return System.String.startsWith((System.String.concat(abc, "")), System.String.concat(this.filterValue, ""));
                }
            },
            GetDataColumnIndex: function () {
                var length = this.View.DataSource.ColumnCount;
                for (var i = 0; i < length; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(this.View.DataSource.Columns.getItem(i), this.Column)) {
                        return i;
                    }
                }
                return -1;
            },
            GetDisplayValueByDataRowHandle: function (RowHandle) {
                if (System.String.isNullOrWhiteSpace(this.FormatString)) {
                    return this.Column.GetDisplayValue(RowHandle);
                } else {
                    return this.Column.GetDisplayValue$1(RowHandle, this.FormatString);
                }
            },
            GetDisplayValue: function (RowHandle) {
                if (this.View.VisibleRowHandles != null) {
                    RowHandle = this.View.VisibleRowHandles.getItem(RowHandle);
                }

                if (System.String.isNullOrWhiteSpace(this.FormatString)) {
                    return this.Column.GetDisplayValue(RowHandle);
                } else {
                    return this.Column.GetDisplayValue$1(RowHandle, this.FormatString);
                }
            }
        }
    });

    Bridge.define("ExpressCraft.GridViewSortMode", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                Asc: 1,
                Desc: 2
            }
        }
    });

    Bridge.define("ExpressCraft.HardSoftList$1", function (T) { return {
        fields: {
            _hhl: null,
            _hl: null,
            SL: null,
            Limit: 0,
            HardLength: 0,
            DefaultValue: Bridge.getDefaultValue(T)
        },
        ctors: {
            init: function () {
                this._hhl = new (System.Collections.Generic.List$1(T)).ctor();
                this._hl = new (System.Collections.Generic.List$1(ExpressCraft.IndexValue$1(T))).ctor();
                this.SL = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.HardLength = 0;
            },
            ctor: function (defaultValue, limit) {
                if (limit === void 0) { limit = 10000; }

                this.$initialize();
                this.DefaultValue = defaultValue;
                this.Limit = limit;
            }
        },
        methods: {
            GetIndexValueByHardListIndex: function (index) {
                return this._hl.getItem(index);
            },
            ClearAll: function () {
                this._hhl = new (System.Collections.Generic.List$1(T)).ctor();
                this._hl = new (System.Collections.Generic.List$1(ExpressCraft.IndexValue$1(T))).ctor();
                this.SL = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.HardLength = 0;
            },
            ClearAllSetHardRange: function (value, Indexs) {
                if (Indexs === void 0) { Indexs = []; }
                this.HardLength = 0;
                if (Indexs == null || Indexs.length === 0) {
                    this.ClearAll();
                } else {
                    if (Indexs.length > this.Limit) {
                        this.HardLength = Indexs.length;
                        this._hl = new (System.Collections.Generic.List$1(ExpressCraft.IndexValue$1(T))).ctor();
                        this.SL = new (System.Collections.Generic.List$1(System.Int32)).ctor();

                        var max = 0;
                        for (var i = 0; i < this.HardLength; i = (i + 1) | 0) {
                            if (Indexs[System.Array.index(i, Indexs)] > max) {
                                max = Indexs[System.Array.index(i, Indexs)];
                            }
                        }
                        var length = (max + 1) | 0;
                        this._hhl = new (System.Collections.Generic.List$1(T)).$ctor2(length);

                        if (length === Indexs.length) {
                            for (var i1 = 0; i1 < this.HardLength; i1 = (i1 + 1) | 0) {
                                this._hhl.add(value);
                            }
                        } else {
                            for (var i2 = 0; i2 < length; i2 = (i2 + 1) | 0) {
                                this._hhl.add(this.DefaultValue);
                            }
                            for (var i3 = 0; i3 < this.HardLength; i3 = (i3 + 1) | 0) {
                                this._hhl.setItem(Indexs[System.Array.index(i3, Indexs)], value);
                            }
                        }
                    } else {
                        this._hhl = new (System.Collections.Generic.List$1(T)).ctor();
                        this.HardLength = Indexs.length;
                        this._hl = new (System.Collections.Generic.List$1(ExpressCraft.IndexValue$1(T))).$ctor2(this.HardLength);
                        for (var i4 = 0; i4 < this.HardLength; i4 = (i4 + 1) | 0) {
                            this._hl.add(new (ExpressCraft.IndexValue$1(T))(Indexs[System.Array.index(i4, Indexs)], value));
                        }
                        this.SL = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    }
                }
            },
            ClearSoftList: function () {
                this.SL = new (System.Collections.Generic.List$1(System.Int32)).ctor();
            },
            ClearAndAddOrSet: function (value, index, AddToSoftList) {
                if (AddToSoftList === void 0) { AddToSoftList = false; }
                this._hhl = new (System.Collections.Generic.List$1(T)).ctor();
                this._hl = new (System.Collections.Generic.List$1(ExpressCraft.IndexValue$1(T))).ctor();
                this.SL = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.HardLength = 0;
                this.AddOrSet(value, index, AddToSoftList);
            },
            GetHardOrSoftIndexValue: function (index, AddToSoftList) {
                if (AddToSoftList === void 0) { AddToSoftList = false; }
                var length = this.SL.Count;
                for (var i = 0; i < length; i = (i + 1) | 0) {
                    var slI = this.SL.getItem(i);
                    if (this._hl.getItem(slI).Index === index) {
                        return this._hl.getItem(slI);
                    }
                }

                length = this._hl.Count;

                for (var i1 = 0; i1 < length; i1 = (i1 + 1) | 0) {
                    var hli = this._hl.getItem(i1);
                    if (hli.Index === index) {
                        if (AddToSoftList) {
                            this.SL.add(i1);
                        }
                        return hli;
                    }
                }

                return null;
            },
            GetHardIndexValue: function (index) {
                var length = this._hl.Count;

                for (var i = 0; i < length; i = (i + 1) | 0) {
                    var hli = this._hl.getItem(i);
                    if (hli.Index === index.v) {
                        index.v = i;
                        return hli;
                    }
                }
                index.v = length;

                return null;
            },
            GetValue: function (index, AddToSoftList) {
                if (AddToSoftList === void 0) { AddToSoftList = false; }
                if (this.HardLength > this.Limit) {
                    return this._hhl.getItem(index);
                }
                var hiv = this.GetHardOrSoftIndexValue(index, AddToSoftList);
                if (hiv == null) {
                    return this.DefaultValue;
                }
                return hiv.Value;
            },
            GetIndex: function (index) {
                if (this.HardLength > this.Limit) {
                    return index;
                }

                var hiv = this.GetHardOrSoftIndexValue(index);
                if (hiv == null) {
                    return -1;
                }
                return hiv.Index;
            },
            AddOrSet: function (value, index, AddToSoftList) {
                if (AddToSoftList === void 0) { AddToSoftList = false; }
                if (this.HardLength > this.Limit) {
                    if (index >= this.HardLength) {
                        var addDiff = ((((index + 1) | 0)) - this._hhl.Count) | 0;
                        if (addDiff > 0) {
                            var data = System.Array.init(addDiff, function (){
                                return Bridge.getDefaultValue(T);
                            }, T);
                            for (var i = 0; i < addDiff; i = (i + 1) | 0) {
                                data[System.Array.index(i, data)] = this.DefaultValue;
                            }
                            this._hhl.AddRange(data);
                        }
                        this._hhl.add(value);
                        this.HardLength = this._hhl.Count;
                    } else {
                        this._hhl.setItem(index, value);
                    }
                    return;
                }

                var length = this.SL.Count;
                for (var i1 = 0; i1 < length; i1 = (i1 + 1) | 0) {
                    var hli = this._hl.getItem(this.SL.getItem(i1));
                    if (hli.Index === index) {
                        hli.Value = value;
                        return;
                    }
                }

                var hindex = { v : index };
                var hiv = this.GetHardIndexValue(hindex);
                if (hiv == null) {
                    this._hl.add(((hiv = new (ExpressCraft.IndexValue$1(T))(index, value))));
                } else {
                    hiv.Value = value;
                }

                if (AddToSoftList) {
                    this.SL.add(hindex.v);
                }
            },
            Remove: function (index, OnlySoftList) {
                if (OnlySoftList === void 0) { OnlySoftList = false; }
                if (this.HardLength > this.Limit) {
                    if (((this.HardLength - 1) | 0) > this.Limit) {
                        this._hhl.setItem(index, this.DefaultValue);
                    } else {
                        for (var i = 0; i < this.HardLength; i = (i + 1) | 0) {
                            if (i !== index && !Bridge.equals(this._hhl.getItem(i), this.DefaultValue)) {
                                this._hl.add(new (ExpressCraft.IndexValue$1(T))(i, this._hhl.getItem(i)));
                            }
                        }

                        this.HardLength = (this.HardLength - 1) | 0;
                    }
                } else {
                    var Length = this.SL.Count;
                    for (var i1 = 0; i1 < Length; i1 = (i1 + 1) | 0) {
                        var sli = this.SL.getItem(i1);
                        if (this._hl.getItem(sli).Index === index) {
                            this.SL.removeAt(i1);
                            if (OnlySoftList) {
                                return;
                            }
                            this._hl.removeAt(sli);
                            return;
                        }
                    }
                    var length = this._hl.Count;

                    for (var i2 = 0; i2 < length; i2 = (i2 + 1) | 0) {
                        var hli = this._hl.getItem(i2);
                        if (hli.Index === index) {
                            this._hl.removeAt(i2);
                            return;
                        }
                    }
                }
            }
        }
    }; });

    Bridge.define("ExpressCraft.Helper", {
        statics: {
            fields: {
                _notDesktop: false,
                _setupDesktop: false
            },
            props: {
                NotDesktop: {
                    get: function () {
                        var $t;
                        var result = ExpressCraft.Helper._setupDesktop ? ExpressCraft.Helper._notDesktop : ($t = (!Bridge.Browser.isDesktop || ExpressCraft.Helper.IsIPhone() || ExpressCraft.Helper.IsIPad()), ExpressCraft.Helper._notDesktop = $t, $t);
                        ExpressCraft.Helper._setupDesktop = true;
                        return result;
                    }
                }
            },
            methods: {
                IsIPhone: function () {
                    var r = false;
                    r = !!navigator.userAgent.match(/iPhone/i);
                    return r;
                },
                IsIPad: function () {
                    var r = false;
                    r = !!navigator.userAgent.match(/iPad/i);
                    return r;
                },
                IsTrue: function (value) {
                    return (Bridge.referenceEquals(((value = value.toLowerCase())), "true") || Bridge.referenceEquals(value, "1") || Bridge.referenceEquals(value, "on")) ? 1 : 0;
                },
                ToInt: function (value) {
                    return parseInt(value);
                },
                ToFloat: function (value) {
                    return parseFloat(value);
                },
                ToStr: function (value) {
                    return value;
                },
                IsFireFox: function () {
                    var value = false;

                    if(navigator.userAgent.toLowerCase().indexOf('firefox') > -1)
                    {
                        value = true;
                    }
                    			
                    return value;
                },
                FocusElement: function (element) {
                    setTimeout(function (arg) {
                        element.focus();
                    }, 0);
                },
                StripNonNumberString: function (value) {
                    if (System.String.isNullOrWhiteSpace(value)) {
                        return System.Decimal(0);
                    }

                    var builder = new System.Text.StringBuilder();

                    var AddedDigits = false;

                    for (var i = 0; i < value.length; i = (i + 1) | 0) {
                        if (System.Char.isDigit(value.charCodeAt(i)) || value.charCodeAt(i) === 46) {
                            builder.append(String.fromCharCode(value.charCodeAt(i)));
                            AddedDigits = true;
                        } else if (value.charCodeAt(i) === 45 && !AddedDigits) {
                            builder.append(String.fromCharCode(value.charCodeAt(i)));
                            AddedDigits = true;
                        }
                    }

                    var value1 = { v : System.Decimal(0) };
                    System.Decimal.tryParse(builder.toString(), null, value1);

                    return value1.v;
                },
                StripNonDateString: function (value) {
                    if (System.String.isNullOrWhiteSpace(value)) {
                        return System.DateTime.getMinValue();
                    }

                    try {
                        value = System.String.replaceAll(value.trim(), String.fromCharCode(92), String.fromCharCode(ExpressCraft.Settings.DateSeperator));

                        var startsWithPlus = (System.String.startsWith(value, "+"));
                        var startsWithMunus = !startsWithPlus && (System.String.startsWith(value, "-"));

                        if (startsWithMunus) {
                            value = value.substr(1);
                        }

                        value = System.String.replaceAll(value, String.fromCharCode(45), String.fromCharCode(ExpressCraft.Settings.DateSeperator));

                        var endsWithMonth = (startsWithPlus || startsWithMunus) && (System.String.endsWith(value.toLowerCase(), "m"));
                        var endsWithyear = !endsWithMonth && (startsWithPlus || startsWithMunus) && (System.String.endsWith(value.toLowerCase(), "y"));

                        if (Bridge.referenceEquals(value.toLowerCase(), "d")) {
                            return System.DateTime.getToday();
                        }

                        var builder = new System.Text.StringBuilder();

                        var Values = new (System.Collections.Generic.List$1(System.Int32)).ctor();

                        for (var i = 0; i < value.length; i = (i + 1) | 0) {
                            if (System.Char.isDigit(value.charCodeAt(i))) {
                                builder.append(String.fromCharCode(value.charCodeAt(i)));
                            } else {
                                if (value.charCodeAt(i) === ExpressCraft.Settings.DateSeperator) {
                                    Values.add(System.Int32.parse(builder.toString()));
                                    builder = new System.Text.StringBuilder();
                                }
                            }
                        }

                        if (builder.getLength() > 0) {
                            Values.add(System.Int32.parse(builder.toString()));
                        }

                        builder = null;
                        if (Values.Count >= 3) {
                            return System.DateTime.create(Values.getItem(ExpressCraft.Settings.YearPosition), Values.getItem(ExpressCraft.Settings.MonthPosition), Values.getItem(ExpressCraft.Settings.DayPosition));
                        } else if (Values.Count === 1) {
                            if (ExpressCraft.Settings.DayPosition === ExpressCraft.Settings.DatePosition.First) {
                                if (startsWithPlus || startsWithMunus) {
                                    var date = System.DateTime.getToday();
                                    if (endsWithMonth) {
                                        date = System.DateTime.addMonths(date, startsWithMunus ? ((-Values.getItem(0)) | 0) : Values.getItem(0));
                                    } else if (endsWithyear) {
                                        if (startsWithMunus) {
                                            date = System.DateTime.addYears(date, ((-Values.getItem(0)) | 0));
                                        } else {
                                            date = System.DateTime.addYears(date, Values.getItem(0));
                                        }
                                    } else {
                                        date = System.DateTime.addDays(date, startsWithMunus ? ((-Values.getItem(0)) | 0) : Values.getItem(0));
                                    }
                                    if (System.DateTime.getHour(date) === 23) {
                                        System.DateTime.addHours(date, 1);
                                    }
                                    return date;
                                } else {
                                    return System.DateTime.create(System.DateTime.getYear(System.DateTime.getToday()), System.DateTime.getMonth(System.DateTime.getToday()), Values.getItem(0));
                                }
                            } else if (ExpressCraft.Settings.MonthPosition === ExpressCraft.Settings.DatePosition.First) {
                                return System.DateTime.create(System.DateTime.getYear(System.DateTime.getToday()), Values.getItem(0), System.DateTime.getDay(System.DateTime.getToday()));
                            } else if (ExpressCraft.Settings.YearPosition === ExpressCraft.Settings.DatePosition.First) {
                                return System.DateTime.create(Values.getItem(0), System.DateTime.getMonth(System.DateTime.getToday()), System.DateTime.getDay(System.DateTime.getToday()));
                            }
                        } else if (Values.Count === 2) {
                            if (ExpressCraft.Settings.DayPosition === ExpressCraft.Settings.DatePosition.First && ExpressCraft.Settings.MonthPosition === ExpressCraft.Settings.DatePosition.Second) {
                                return System.DateTime.create(System.DateTime.getYear(System.DateTime.getToday()), Values.getItem(1), Values.getItem(0));
                            } else if (ExpressCraft.Settings.DayPosition === ExpressCraft.Settings.DatePosition.Second && ExpressCraft.Settings.MonthPosition === ExpressCraft.Settings.DatePosition.First) {
                                return System.DateTime.create(System.DateTime.getYear(System.DateTime.getToday()), Values.getItem(0), Values.getItem(1));
                            } else if (ExpressCraft.Settings.YearPosition === ExpressCraft.Settings.DatePosition.Second && ExpressCraft.Settings.MonthPosition === ExpressCraft.Settings.DatePosition.First) {
                                return System.DateTime.create(Values.getItem(1), Values.getItem(0), System.DateTime.getDay(System.DateTime.getToday()));
                            } else if (ExpressCraft.Settings.YearPosition === ExpressCraft.Settings.DatePosition.First && ExpressCraft.Settings.MonthPosition === ExpressCraft.Settings.DatePosition.Second) {
                                return System.DateTime.create(Values.getItem(0), Values.getItem(1), System.DateTime.getDay(System.DateTime.getToday()));
                            }
                        }
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }

                    return System.DateTime.getMinValue();
                },
                AddTax: function (value, taxPercent) {
                    if (taxPercent === void 0) { taxPercent = System.Decimal(-1.0); }
                    if (value.equalsT(System.Decimal(0))) {
                        return value;
                    }

                    if (taxPercent.equalsT(System.Decimal(-1))) {
                        taxPercent = ExpressCraft.Settings.TaxPercent;
                    }
                    if (taxPercent.equalsT(System.Decimal(0))) {
                        return value;
                    }

                    return value.mul((System.Decimal(1).add(taxPercent)));
                },
                GetPortionTax: function (value, taxPercent) {
                    if (taxPercent === void 0) { taxPercent = System.Decimal(-1.0); }
                    if (value.equalsT(System.Decimal(0))) {
                        return value;
                    }

                    if (taxPercent.equalsT(System.Decimal(-1))) {
                        taxPercent = ExpressCraft.Settings.TaxPercent;
                    }
                    if (taxPercent.equalsT(System.Decimal(0))) {
                        return System.Decimal(0);
                    }

                    return value.sub(value.div((System.Decimal(1).add(taxPercent))));
                },
                DeductTax: function (value, taxPercent) {
                    if (taxPercent === void 0) { taxPercent = System.Decimal(-1.0); }
                    if (value.equalsT(System.Decimal(0))) {
                        return value;
                    }

                    if (taxPercent.equalsT(System.Decimal(-1))) {
                        taxPercent = ExpressCraft.Settings.TaxPercent;
                    }
                    if (taxPercent.equalsT(System.Decimal(0))) {
                        return value;
                    }

                    return value.sub(ExpressCraft.Helper.GetPortionTax(value, taxPercent));
                },
                IsNumber: function (value) {
                    return Bridge.is(value, System.SByte) || Bridge.is(value, System.Byte) || Bridge.is(value, System.Int16) || Bridge.is(value, System.UInt16) || Bridge.is(value, System.Int32) || Bridge.is(value, System.UInt32) || Bridge.is(value, System.Int64) || Bridge.is(value, System.UInt64) || Bridge.is(value, System.Single) || Bridge.is(value, System.Double) || Bridge.is(value, System.Decimal);
                },
                Empty: function (element) {
                    			var len = element.childNodes.length;
                    			while(len--)
                    			{
                    				element.removeChild(element.lastChild);
                    			};
                    			
                },
                GetClientMouseLocation: function (e) {
                    var x = 0;
                    var y = 0;
                    			  if (!e) var e = window.event;

                    			  if (e.pageX || e.pageY) {
                    				x = e.pageX;
                    				y = e.pageY;
                    			  } else if (e.clientX || e.clientY) {
                    				x = e.clientX + document.body.scrollLeft +
                    								   document.documentElement.scrollLeft;
                    				y = e.clientY + document.body.scrollTop +
                    								   document.documentElement.scrollTop;
                    			  }
                    			
                    return new ExpressCraft.Vector2.$ctor1(x, y);
                },
                SetChecked: function (input, value) {
                    ExpressCraft.Helper.SetChecked$1(input.Content, value);
                },
                SetChecked$1: function (input, value) {
                    var check = false;
                    if (value != null) {
                        if (Bridge.is(value, System.Boolean) || ExpressCraft.Helper.IsNumber(value)) {
                            check = System.Nullable.getValue(Bridge.cast(Bridge.unbox(value, System.Boolean), System.Boolean));
                        } else if (Bridge.is(value, System.String)) {
                            var strValue = Bridge.cast(value, System.String);
                            check = (Bridge.referenceEquals(strValue, "1") || System.String.compare(strValue.toLowerCase(), "true") === 0);
                        }
                    }
                    if (!check) {
                        input.removeAttribute(ExpressCraft.GridViewCellDisplayCheckBox.resource_checked);
                    } else {
                        input.setAttribute(ExpressCraft.GridViewCellDisplayCheckBox.resource_checked, null);
                    }
                },
                /**
                 * IE does not support .remove on Element use delete
                 *
                 * @static
                 * @public
                 * @this ExpressCraft.Helper
                 * @memberof ExpressCraft.Helper
                 * @param   {Retyped..Element}    c
                 * @return  {void}
                 */
                Delete: function (c) {
                    if (c != null && c.parentElement != null && c.parentElement.contains(c)) {
                        c.parentElement.removeChild(c);
                    }
                },
                /**
                 * IE does not support .remove on Element use delete
                 *
                 * @static
                 * @public
                 * @this ExpressCraft.Helper
                 * @memberof ExpressCraft.Helper
                 * @param   {Retyped..HTMLElement}    c
                 * @return  {void}
                 */
                Delete$1: function (c) {
                    if (c != null && c.parentElement != null && c.parentElement.contains(c)) {
                        c.parentElement.removeChild(c);
                    }
                },
                ToPx: function (i) {
                    return i + 'px';
                },
                Log: function (jso) {
                    console.log(Bridge.unbox(jso));
                },
                AppendChildren$2: function (c, Nodes) {
                    if (Nodes === void 0) { Nodes = []; }
                    if (Nodes != null && Nodes.length > 0) {
                        for (var i = 0; i < Nodes.length; i = (i + 1) | 0) {
                            if (Nodes[System.Array.index(i, Nodes)] != null) {
                                c.appendChild(Nodes[System.Array.index(i, Nodes)]);
                            }
                        }
                    }
                },
                AppendChildren: function (c, Nodes) {
                    if (Nodes === void 0) { Nodes = []; }
                    ExpressCraft.Helper.AppendChildren$1(c.Content, Nodes);

                    return c;
                },
                AppendChildren$1: function (c, Nodes) {
                    if (Nodes === void 0) { Nodes = []; }
                    if (Nodes != null && Nodes.length > 0) {
                        for (var i = 0; i < Nodes.length; i = (i + 1) | 0) {
                            if (Nodes[System.Array.index(i, Nodes)] != null) {
                                c.appendChild(ExpressCraft.Control.op_Implicit(Nodes[System.Array.index(i, Nodes)]));
                            }
                        }
                    }
                },
                AppendChildrenTabIndex$1: function (c, Nodes) {
                    if (Nodes === void 0) { Nodes = []; }
                    if (Nodes != null && Nodes.length > 0) {
                        for (var i = 0; i < Nodes.length; i = (i + 1) | 0) {
                            if (Nodes[System.Array.index(i, Nodes)] != null) {
                                Nodes[System.Array.index(i, Nodes)].Content.tabIndex = i;
                                c.appendChild(ExpressCraft.Control.op_Implicit(Nodes[System.Array.index(i, Nodes)]));
                            }
                        }
                    }
                },
                AppendChildrenTabIndex: function (c, Nodes) {
                    if (Nodes === void 0) { Nodes = []; }
                    ExpressCraft.Helper.AppendChildrenTabIndex$1(c.Content, Nodes);
                },
                AppendChild: function (c, Node) {
                    ExpressCraft.Helper.AppendChild$1(c.Content, Node);
                    return c;
                },
                AppendChild$1: function (c, b) {
                    c.appendChild(ExpressCraft.Control.op_Implicit(b));
                },
                AppendChild$2: function (c, b) {
                    c.appendChild(b);
                },
                SetBounds: function (c, left, top, width, height) {
                    ExpressCraft.Helper.SetBounds$1(c.Content, left, top, width, height);

                    return c;
                },
                SetBounds$1: function (c, left, top, width, height) {
                    c.style.left = ExpressCraft.Helper.ToHtmlValue(left);
                    c.style.top = ExpressCraft.Helper.ToHtmlValue(top);
                    c.style.width = ExpressCraft.Helper.ToHtmlValue(width);
                    c.style.height = ExpressCraft.Helper.ToHtmlValue(height);
                },
                SetBoundsFull: function (c) {
                    ExpressCraft.Helper.SetBoundsFull$1(c.Content);

                    return c;
                },
                SetBoundsFull$1: function (c) {
                    ExpressCraft.Helper.SetBounds$1(c, 0, 0, "100%", "100%");
                },
                SetSize: function (c, width, height) {
                    ExpressCraft.Helper.SetSize$1(c.Content, width, height);

                    return c;
                },
                SetSize$1: function (c, width, height) {
                    c.style.width = ExpressCraft.Helper.ToHtmlValue(width);
                    c.style.height = ExpressCraft.Helper.ToHtmlValue(height);
                },
                ToHtmlValue: function (value) {
                    if (Bridge.is(value, System.String)) {
                        return ExpressCraft.Vector2.pf(value);
                    } else {
                        if (Bridge.is(value, System.Int32)) {
                            return ExpressCraft.Helper.ToPx(Bridge.box(value, System.Int32));
                        } else {
                            return ExpressCraft.Helper.ToPx(Bridge.box(value, System.Single, System.Single.format, System.Single.getHashCode));
                        }
                    }
                },
                SetImage: function (c, str, useURL, useResource, center) {
                    if (useURL === void 0) { useURL = true; }
                    if (useResource === void 0) { useResource = true; }
                    if (center === void 0) { center = true; }
                    if (!System.String.startsWith(str, "url(")) {
                        str = useURL ? ExpressCraft.Control.GetImageStringURI(str, useResource) : ExpressCraft.Control.GetImageString(str);
                    }
                    ExpressCraft.Helper.SetImage$1(c.Content, str, useURL, center);
                },
                SetImage$1: function (c, str, useURL, center) {
                    if (useURL === void 0) { useURL = true; }
                    if (center === void 0) { center = true; }
                    if (System.String.isNullOrWhiteSpace(str)) {
                        c.style.background = "";
                        c.style.backgroundSize = "";
                        return;
                    } else if (!System.String.startsWith(str, "url(")) {
                        str = useURL ? ExpressCraft.Control.GetImageStringURI(str) : ExpressCraft.Control.GetImageString(str);
                    }
                    c.style.background = str;
                    if (center) {
                        c.style.backgroundSize = "100% 100%";
                    }
                },
                SetLocation$1: function (c, left, top) {
                    ExpressCraft.Helper.SetLocation$2(c.Content, ExpressCraft.Helper.ToPx(Bridge.box(left, System.Int32)), ExpressCraft.Helper.ToPx(Bridge.box(top, System.Int32)));
                },
                SetLocation: function (c, left, top) {
                    ExpressCraft.Helper.SetLocation$2(c.Content, left, top);
                },
                SetLocation$2: function (c, left, top) {
                    c.style.left = ExpressCraft.Helper.ToHtmlValue(left);
                    c.style.top = ExpressCraft.Helper.ToHtmlValue(top);
                },
                /**
                 * HtmlEscape XSS
                 *
                 * @static
                 * @public
                 * @this ExpressCraft.Helper
                 * @memberof ExpressCraft.Helper
                 * @param   {System.Object}    obj
                 * @return  {string}
                 */
                HtmlEscape: function (obj) {
                    return ExpressCraft.Helper.HtmlEscape$1((Bridge.as(obj, System.String)));
                },
                /**
                 * HtmlEscape XSS
                 *
                 * @static
                 * @public
                 * @this ExpressCraft.Helper
                 * @memberof ExpressCraft.Helper
                 * @param   {string}    input
                 * @return  {string}
                 */
                HtmlEscape$1: function (input) {
                    return !System.String.isNullOrEmpty(input) ? System.String.replaceAll(System.String.replaceAll(ExpressCraft.Helper.HtmlUrlEscape(input), "\\/", "&#x2F"), "\"", "&quot") : "";
                },
                /**
                 * HtmlUrlUnescape XSS
                 *
                 * @static
                 * @public
                 * @this ExpressCraft.Helper
                 * @memberof ExpressCraft.Helper
                 * @param   {string}    input
                 * @return  {string}
                 */
                HtmlUrlUnescape: function (input) {
                    return !System.String.isNullOrEmpty(input) ? System.String.replaceAll(System.String.replaceAll(System.String.replaceAll(System.String.replaceAll(input, "&amp", "&"), "&lt", "<"), "&gt", ">"), "&#x27", "'") : "";
                },
                /**
                 * HtmlUrlEscape XSS
                 *
                 * @static
                 * @public
                 * @this ExpressCraft.Helper
                 * @memberof ExpressCraft.Helper
                 * @param   {string}    input
                 * @return  {string}
                 */
                HtmlUrlEscape: function (input) {
                    return !System.String.isNullOrEmpty(input) ? System.String.replaceAll(System.String.replaceAll(System.String.replaceAll(System.String.replaceAll(input, "&", "&amp"), "<", "&lt"), ">", "&gt"), "'", "&#x27") : "";
                },
                /**
                 * HtmlUnescape XSS
                 *
                 * @static
                 * @public
                 * @this ExpressCraft.Helper
                 * @memberof ExpressCraft.Helper
                 * @param   {string}    input
                 * @return  {string}
                 */
                HtmlUnescape: function (input) {
                    return !ExpressCraft.Helper.IsEmpty(input) ? System.String.replaceAll(System.String.replaceAll(ExpressCraft.Helper.HtmlUrlUnescape(input), "&#x2F", "\\/"), "&quot", "\"") : "";
                },
                ExchangeClass: function (control, oldClass, newClass) {
                    ExpressCraft.Helper.ExchangeClass$1(control.Content, oldClass, newClass);
                },
                ExchangeClass$1: function (control, oldClass, newClass) {
                    if (!ExpressCraft.Helper.IsEmpty(oldClass) && control.classList.contains(oldClass)) {
                        control.classList.remove(oldClass);
                    }
                    if (!ExpressCraft.Helper.IsEmpty(newClass) && !control.classList.contains(newClass)) {
                        control.classList.add(newClass);
                    }
                },
                IsEmpty: function (value) {
                    return System.String.isNullOrWhiteSpace(value);
                },
                StopAndLog: function (sw, logName) {
                    if (logName === void 0) { logName = "Task"; }
                    sw.stop();
                    ExpressCraft.ConsoleForm.Log((logName || "") + " took " + sw.milliseconds() + "ms to finish");
                }
            }
        }
    });

    Bridge.define("ExpressCraft.Helper.DataTableJson", {
        $kind: "nested class",
        statics: {
            methods: {
                FromExternal: function (o) {
                    var x;
                    x = Bridge.merge(Bridge.createInstance(ExpressCraft.Helper.DataTableJson), o);
                    return x;
                },
                Parse: function (o) {
                    var dt = new ExpressCraft.DataTable();
                    var length = o.fieldNames.length;
                    for (var i = 0; i < length; i = (i + 1) | 0) {
                        dt.AddColumn(o.fieldNames[i], o.dataTypes[i]);
                    }
                    if (o.rows != null) {
                        length = o.rows.length;
                        dt.BeginNewRow(length);

                        for (var i1 = 0; i1 < length; i1 = (i1 + 1) | 0) {
                            var dr = dt.NewRow();
                            dr.batchData = o.rows[i1];
                        }
                        dt.AcceptNewRows();
                    }
                    return dt;
                }
            }
        },
        fields: {
            fieldNames: null,
            rows: null,
            dataTypes: null
        },
        methods: {
            ToTable: function () {
                var dt = new ExpressCraft.DataTable();

                for (var i = 0; i < this.fieldNames.length; i = (i + 1) | 0) {
                    dt.AddColumn(this.fieldNames[System.Array.index(i, this.fieldNames)], this.dataTypes[System.Array.index(i, this.dataTypes)]);
                }

                if (this.rows != null) {
                    dt.BeginNewRow(this.rows.length);

                    for (var i1 = 0; i1 < this.rows.length; i1 = (i1 + 1) | 0) {
                        var dr = dt.NewRow();
                        dr.batchData = this.rows[System.Array.index(i1, this.rows)];
                    }
                    dt.AcceptNewRows();
                }

                return dt;
            }
        }
    });

    Bridge.define("ExpressCraft.IndexValue$1", function (T) { return {
        fields: {
            Index: 0,
            Value: Bridge.getDefaultValue(T)
        },
        ctors: {
            ctor: function (index, value) {
                this.$initialize();
                this.Index = index;
                this.Value = value;
            }
        }
    }; });

    Bridge.define("ExpressCraft.IPages", {
        $kind: "interface"
    });

    Bridge.define("ExpressCraft.KeyCodes", {
        statics: {
            fields: {
                Modifiers: 0,
                None: 0,
                LButton: 0,
                RButton: 0,
                Cancel: 0,
                MButton: 0,
                XButton1: 0,
                XButton2: 0,
                Back: 0,
                Tab: 0,
                LineFeed: 0,
                Clear: 0,
                Return: 0,
                Enter: 0,
                ShiftKey: 0,
                ControlKey: 0,
                Menu: 0,
                Pause: 0,
                Capital: 0,
                CapsLock: 0,
                KanaMode: 0,
                HanguelMode: 0,
                HangulMode: 0,
                JunjaMode: 0,
                FinalMode: 0,
                HanjaMode: 0,
                KanjiMode: 0,
                Escape: 0,
                IMEConvert: 0,
                IMENonconvert: 0,
                IMEAccept: 0,
                IMEAceept: 0,
                IMEModeChange: 0,
                Space: 0,
                Prior: 0,
                PageUp: 0,
                Next: 0,
                PageDown: 0,
                End: 0,
                Home: 0,
                Left: 0,
                Up: 0,
                Right: 0,
                Down: 0,
                Select: 0,
                Print: 0,
                Execute: 0,
                Snapshot: 0,
                PrintScreen: 0,
                Insert: 0,
                Delete: 0,
                Help: 0,
                D0: 0,
                D1: 0,
                D2: 0,
                D3: 0,
                D4: 0,
                D5: 0,
                D6: 0,
                D7: 0,
                D8: 0,
                D9: 0,
                A: 0,
                B: 0,
                C: 0,
                D: 0,
                E: 0,
                F: 0,
                G: 0,
                H: 0,
                I: 0,
                J: 0,
                K: 0,
                L: 0,
                M: 0,
                N: 0,
                O: 0,
                P: 0,
                Q: 0,
                R: 0,
                S: 0,
                T: 0,
                U: 0,
                V: 0,
                W: 0,
                X: 0,
                Y: 0,
                Z: 0,
                LWin: 0,
                RWin: 0,
                Apps: 0,
                Sleep: 0,
                NumPad0: 0,
                NumPad1: 0,
                NumPad2: 0,
                NumPad3: 0,
                NumPad4: 0,
                NumPad5: 0,
                NumPad6: 0,
                NumPad7: 0,
                NumPad8: 0,
                NumPad9: 0,
                Multiply: 0,
                Add: 0,
                Separator: 0,
                Subtract: 0,
                Decimal: 0,
                Divide: 0,
                F1: 0,
                F2: 0,
                F3: 0,
                F4: 0,
                F5: 0,
                F6: 0,
                F7: 0,
                F8: 0,
                F9: 0,
                F10: 0,
                F11: 0,
                F12: 0,
                F13: 0,
                F14: 0,
                F15: 0,
                F16: 0,
                F17: 0,
                F18: 0,
                F19: 0,
                F20: 0,
                F21: 0,
                F22: 0,
                F23: 0,
                F24: 0,
                NumLock: 0,
                Scroll: 0,
                LShiftKey: 0,
                RShiftKey: 0,
                LControlKey: 0,
                RControlKey: 0,
                LMenu: 0,
                RMenu: 0,
                BrowserBack: 0,
                BrowserForward: 0,
                BrowserRefresh: 0,
                BrowserStop: 0,
                BrowserSearch: 0,
                BrowserFavorites: 0,
                BrowserHome: 0,
                VolumeMute: 0,
                VolumeDown: 0,
                VolumeUp: 0,
                MediaNextTrack: 0,
                MediaPreviousTrack: 0,
                MediaStop: 0,
                MediaPlayPause: 0,
                LaunchMail: 0,
                SelectMedia: 0,
                LaunchApplication1: 0,
                LaunchApplication2: 0,
                OemSemicolon: 0,
                Oem1: 0,
                Oemplus: 0,
                Oemcomma: 0,
                OemMinus: 0,
                OemPeriod: 0,
                OemQuestion: 0,
                Oem2: 0,
                Oemtilde: 0,
                Oem3: 0,
                OemOpenBrackets: 0,
                Oem4: 0,
                OemPipe: 0,
                Oem5: 0,
                OemCloseBrackets: 0,
                Oem6: 0,
                OemQuotes: 0,
                Oem7: 0,
                Oem8: 0,
                OemBackslash: 0,
                Oem102: 0,
                ProcessKey: 0,
                Packet: 0,
                Attn: 0,
                Crsel: 0,
                Exsel: 0,
                EraseEof: 0,
                Play: 0,
                Zoom: 0,
                NoName: 0,
                Pa1: 0,
                OemClear: 0,
                KeyCode: 0,
                Shift: 0,
                Control: 0,
                Alt: 0
            },
            ctors: {
                init: function () {
                    this.Modifiers = -65536;
                    this.None = 0;
                    this.LButton = 1;
                    this.RButton = 2;
                    this.Cancel = 3;
                    this.MButton = 4;
                    this.XButton1 = 5;
                    this.XButton2 = 6;
                    this.Back = 8;
                    this.Tab = 9;
                    this.LineFeed = 10;
                    this.Clear = 12;
                    this.Return = 13;
                    this.Enter = 13;
                    this.ShiftKey = 16;
                    this.ControlKey = 17;
                    this.Menu = 18;
                    this.Pause = 19;
                    this.Capital = 20;
                    this.CapsLock = 20;
                    this.KanaMode = 21;
                    this.HanguelMode = 21;
                    this.HangulMode = 21;
                    this.JunjaMode = 23;
                    this.FinalMode = 24;
                    this.HanjaMode = 25;
                    this.KanjiMode = 25;
                    this.Escape = 27;
                    this.IMEConvert = 28;
                    this.IMENonconvert = 29;
                    this.IMEAccept = 30;
                    this.IMEAceept = 30;
                    this.IMEModeChange = 31;
                    this.Space = 32;
                    this.Prior = 33;
                    this.PageUp = 33;
                    this.Next = 34;
                    this.PageDown = 34;
                    this.End = 35;
                    this.Home = 36;
                    this.Left = 37;
                    this.Up = 38;
                    this.Right = 39;
                    this.Down = 40;
                    this.Select = 41;
                    this.Print = 42;
                    this.Execute = 43;
                    this.Snapshot = 44;
                    this.PrintScreen = 44;
                    this.Insert = 45;
                    this.Delete = 46;
                    this.Help = 47;
                    this.D0 = 48;
                    this.D1 = 49;
                    this.D2 = 50;
                    this.D3 = 51;
                    this.D4 = 52;
                    this.D5 = 53;
                    this.D6 = 54;
                    this.D7 = 55;
                    this.D8 = 56;
                    this.D9 = 57;
                    this.A = 65;
                    this.B = 66;
                    this.C = 67;
                    this.D = 68;
                    this.E = 69;
                    this.F = 70;
                    this.G = 71;
                    this.H = 72;
                    this.I = 73;
                    this.J = 74;
                    this.K = 75;
                    this.L = 76;
                    this.M = 77;
                    this.N = 78;
                    this.O = 79;
                    this.P = 80;
                    this.Q = 81;
                    this.R = 82;
                    this.S = 83;
                    this.T = 84;
                    this.U = 85;
                    this.V = 86;
                    this.W = 87;
                    this.X = 88;
                    this.Y = 89;
                    this.Z = 90;
                    this.LWin = 91;
                    this.RWin = 92;
                    this.Apps = 93;
                    this.Sleep = 95;
                    this.NumPad0 = 96;
                    this.NumPad1 = 97;
                    this.NumPad2 = 98;
                    this.NumPad3 = 99;
                    this.NumPad4 = 100;
                    this.NumPad5 = 101;
                    this.NumPad6 = 102;
                    this.NumPad7 = 103;
                    this.NumPad8 = 104;
                    this.NumPad9 = 105;
                    this.Multiply = 106;
                    this.Add = 107;
                    this.Separator = 108;
                    this.Subtract = 109;
                    this.Decimal = 110;
                    this.Divide = 111;
                    this.F1 = 112;
                    this.F2 = 113;
                    this.F3 = 114;
                    this.F4 = 115;
                    this.F5 = 116;
                    this.F6 = 117;
                    this.F7 = 118;
                    this.F8 = 119;
                    this.F9 = 120;
                    this.F10 = 121;
                    this.F11 = 122;
                    this.F12 = 123;
                    this.F13 = 124;
                    this.F14 = 125;
                    this.F15 = 126;
                    this.F16 = 127;
                    this.F17 = 128;
                    this.F18 = 129;
                    this.F19 = 130;
                    this.F20 = 131;
                    this.F21 = 132;
                    this.F22 = 133;
                    this.F23 = 134;
                    this.F24 = 135;
                    this.NumLock = 144;
                    this.Scroll = 145;
                    this.LShiftKey = 160;
                    this.RShiftKey = 161;
                    this.LControlKey = 162;
                    this.RControlKey = 163;
                    this.LMenu = 164;
                    this.RMenu = 165;
                    this.BrowserBack = 166;
                    this.BrowserForward = 167;
                    this.BrowserRefresh = 168;
                    this.BrowserStop = 169;
                    this.BrowserSearch = 170;
                    this.BrowserFavorites = 171;
                    this.BrowserHome = 172;
                    this.VolumeMute = 173;
                    this.VolumeDown = 174;
                    this.VolumeUp = 175;
                    this.MediaNextTrack = 176;
                    this.MediaPreviousTrack = 177;
                    this.MediaStop = 178;
                    this.MediaPlayPause = 179;
                    this.LaunchMail = 180;
                    this.SelectMedia = 181;
                    this.LaunchApplication1 = 182;
                    this.LaunchApplication2 = 183;
                    this.OemSemicolon = 186;
                    this.Oem1 = 186;
                    this.Oemplus = 187;
                    this.Oemcomma = 188;
                    this.OemMinus = 189;
                    this.OemPeriod = 190;
                    this.OemQuestion = 191;
                    this.Oem2 = 191;
                    this.Oemtilde = 192;
                    this.Oem3 = 192;
                    this.OemOpenBrackets = 219;
                    this.Oem4 = 219;
                    this.OemPipe = 220;
                    this.Oem5 = 220;
                    this.OemCloseBrackets = 221;
                    this.Oem6 = 221;
                    this.OemQuotes = 222;
                    this.Oem7 = 222;
                    this.Oem8 = 223;
                    this.OemBackslash = 226;
                    this.Oem102 = 226;
                    this.ProcessKey = 229;
                    this.Packet = 231;
                    this.Attn = 246;
                    this.Crsel = 247;
                    this.Exsel = 248;
                    this.EraseEof = 249;
                    this.Play = 250;
                    this.Zoom = 251;
                    this.NoName = 252;
                    this.Pa1 = 253;
                    this.OemClear = 254;
                    this.KeyCode = 65535;
                    this.Shift = 65536;
                    this.Control = 131072;
                    this.Alt = 262144;
                }
            }
        }
    });

    Bridge.define("ExpressCraft.KnownColor", {
        $kind: "enum",
        statics: {
            fields: {
                ActiveBorder: 1,
                ActiveCaption: 2,
                ActiveCaptionText: 3,
                AliceBlue: 28,
                AntiqueWhite: 29,
                AppWorkspace: 4,
                Aqua: 30,
                Aquamarine: 31,
                Azure: 32,
                Beige: 33,
                Bisque: 34,
                Black: 35,
                BlanchedAlmond: 36,
                Blue: 37,
                BlueViolet: 38,
                Brown: 39,
                BurlyWood: 40,
                ButtonFace: 168,
                ButtonHighlight: 169,
                ButtonShadow: 170,
                CadetBlue: 41,
                Chartreuse: 42,
                Chocolate: 43,
                Control: 5,
                ControlDark: 6,
                ControlDarkDark: 7,
                ControlLight: 8,
                ControlLightLight: 9,
                ControlText: 10,
                Coral: 44,
                CornflowerBlue: 45,
                Cornsilk: 46,
                Crimson: 47,
                Cyan: 48,
                DarkBlue: 49,
                DarkCyan: 50,
                DarkGoldenrod: 51,
                DarkGray: 52,
                DarkGreen: 53,
                DarkKhaki: 54,
                DarkMagenta: 55,
                DarkOliveGreen: 56,
                DarkOrange: 57,
                DarkOrchid: 58,
                DarkRed: 59,
                DarkSalmon: 60,
                DarkSeaGreen: 61,
                DarkSlateBlue: 62,
                DarkSlateGray: 63,
                DarkTurquoise: 64,
                DarkViolet: 65,
                DeepPink: 66,
                DeepSkyBlue: 67,
                Desktop: 11,
                DimGray: 68,
                DodgerBlue: 69,
                Firebrick: 70,
                FloralWhite: 71,
                ForestGreen: 72,
                Fuchsia: 73,
                Gainsboro: 74,
                GhostWhite: 75,
                Gold: 76,
                Goldenrod: 77,
                GradientActiveCaption: 171,
                GradientInactiveCaption: 172,
                Gray: 78,
                GrayText: 12,
                Green: 79,
                GreenYellow: 80,
                Highlight: 13,
                HighlightText: 14,
                Honeydew: 81,
                HotPink: 82,
                HotTrack: 15,
                InactiveBorder: 16,
                InactiveCaption: 17,
                InactiveCaptionText: 18,
                IndianRed: 83,
                Indigo: 84,
                Info: 19,
                InfoText: 20,
                Ivory: 85,
                Khaki: 86,
                Lavender: 87,
                LavenderBlush: 88,
                LawnGreen: 89,
                LemonChiffon: 90,
                LightBlue: 91,
                LightCoral: 92,
                LightCyan: 93,
                LightGoldenrodYellow: 94,
                LightGray: 95,
                LightGreen: 96,
                LightPink: 97,
                LightSalmon: 98,
                LightSeaGreen: 99,
                LightSkyBlue: 100,
                LightSlateGray: 101,
                LightSteelBlue: 102,
                LightYellow: 103,
                Lime: 104,
                LimeGreen: 105,
                Linen: 106,
                Magenta: 107,
                Maroon: 108,
                MediumAquamarine: 109,
                MediumBlue: 110,
                MediumOrchid: 111,
                MediumPurple: 112,
                MediumSeaGreen: 113,
                MediumSlateBlue: 114,
                MediumSpringGreen: 115,
                MediumTurquoise: 116,
                MediumVioletRed: 117,
                Menu: 21,
                MenuBar: 173,
                MenuHighlight: 174,
                MenuText: 22,
                MidnightBlue: 118,
                MintCream: 119,
                MistyRose: 120,
                Moccasin: 121,
                NavajoWhite: 122,
                Navy: 123,
                OldLace: 124,
                Olive: 125,
                OliveDrab: 126,
                Orange: 127,
                OrangeRed: 128,
                Orchid: 129,
                PaleGoldenrod: 130,
                PaleGreen: 131,
                PaleTurquoise: 132,
                PaleVioletRed: 133,
                PapayaWhip: 134,
                PeachPuff: 135,
                Peru: 136,
                Pink: 137,
                Plum: 138,
                PowderBlue: 139,
                Purple: 140,
                Red: 141,
                RosyBrown: 142,
                RoyalBlue: 143,
                SaddleBrown: 144,
                Salmon: 145,
                SandyBrown: 146,
                ScrollBar: 23,
                SeaGreen: 147,
                SeaShell: 148,
                Sienna: 149,
                Silver: 150,
                SkyBlue: 151,
                SlateBlue: 152,
                SlateGray: 153,
                Snow: 154,
                SpringGreen: 155,
                SteelBlue: 156,
                Tan: 157,
                Teal: 158,
                Thistle: 159,
                Tomato: 160,
                Transparent: 27,
                Turquoise: 161,
                Violet: 162,
                Wheat: 163,
                White: 164,
                WhiteSmoke: 165,
                Window: 24,
                WindowFrame: 25,
                WindowText: 26,
                Yellow: 166,
                YellowGreen: 167
            }
        }
    });

    Bridge.define("ExpressCraft.KnownColorTable", {
        statics: {
            fields: {
                AlphaShift: 0,
                BlueShift: 0,
                colorNameTable: null,
                colorTable: null,
                GreenShift: 0,
                RedShift: 0,
                Win32BlueShift: 0,
                Win32GreenShift: 0,
                Win32RedShift: 0
            },
            ctors: {
                init: function () {
                    this.AlphaShift = 24;
                    this.BlueShift = 0;
                    this.GreenShift = 8;
                    this.RedShift = 16;
                    this.Win32BlueShift = 16;
                    this.Win32GreenShift = 8;
                    this.Win32RedShift = 0;
                }
            },
            methods: {
                GetColorName: function (index) {
                    ExpressCraft.KnownColorTable.EnsureColorNameTable();
                    return ExpressCraft.KnownColorTable.colorNameTable[System.Array.index(index, ExpressCraft.KnownColorTable.colorNameTable)];
                },
                ArgbToKnownColor: function (targetARGB) {
                    ExpressCraft.KnownColorTable.EnsureColorTable();
                    for (var i = 0; i < ExpressCraft.KnownColorTable.colorTable.length; i = (i + 1) | 0) {
                        var num2 = ExpressCraft.KnownColorTable.colorTable[System.Array.index(i, ExpressCraft.KnownColorTable.colorTable)];
                        if (num2 === targetARGB) {
                            var color = ExpressCraft.Color.FromKnownColor(i);
                            if (!color.IsSystemColor) {
                                return color.$clone();
                            }
                        }
                    }
                    return ExpressCraft.Color.FromArgb(targetARGB);
                },
                Encode: function (alpha, red, green, blue) {
                    return ((((red << 16) | (green << 8)) | blue) | (alpha << 24));
                },
                EnsureColorNameTable: function () {
                    if (ExpressCraft.KnownColorTable.colorNameTable == null) {
                        ExpressCraft.KnownColorTable.InitColorNameTable();
                    }
                },
                EnsureColorTable: function () {
                    if (ExpressCraft.KnownColorTable.colorTable == null) {
                        ExpressCraft.KnownColorTable.InitColorTable();
                    }
                },
                FromWin32Value: function (value) {
                    return ExpressCraft.KnownColorTable.Encode(255, value & 255, (value >> 8) & 255, (value >> 16) & 255);
                },
                InitColorNameTable: function () {
                    var s = System.Array.init(175, null, System.String);
                    s[System.Array.index(1, s)] = "ActiveBorder";
                    s[System.Array.index(2, s)] = "ActiveCaption";
                    s[System.Array.index(3, s)] = "ActiveCaptionText";
                    s[System.Array.index(4, s)] = "AppWorkspace";
                    s[System.Array.index(168, s)] = "ButtonFace";
                    s[System.Array.index(169, s)] = "ButtonHighlight";
                    s[System.Array.index(170, s)] = "ButtonShadow";
                    s[System.Array.index(5, s)] = "Control";
                    s[System.Array.index(6, s)] = "ControlDark";
                    s[System.Array.index(7, s)] = "ControlDarkDark";
                    s[System.Array.index(8, s)] = "ControlLight";
                    s[System.Array.index(9, s)] = "ControlLightLight";
                    s[System.Array.index(10, s)] = "ControlText";
                    s[System.Array.index(11, s)] = "Desktop";
                    s[System.Array.index(171, s)] = "GradientActiveCaption";
                    s[System.Array.index(172, s)] = "GradientInactiveCaption";
                    s[System.Array.index(12, s)] = "GrayText";
                    s[System.Array.index(13, s)] = "Highlight";
                    s[System.Array.index(14, s)] = "HighlightText";
                    s[System.Array.index(15, s)] = "HotTrack";
                    s[System.Array.index(16, s)] = "InactiveBorder";
                    s[System.Array.index(17, s)] = "InactiveCaption";
                    s[System.Array.index(18, s)] = "InactiveCaptionText";
                    s[System.Array.index(19, s)] = "Info";
                    s[System.Array.index(20, s)] = "InfoText";
                    s[System.Array.index(21, s)] = "Menu";
                    s[System.Array.index(173, s)] = "MenuBar";
                    s[System.Array.index(174, s)] = "MenuHighlight";
                    s[System.Array.index(22, s)] = "MenuText";
                    s[System.Array.index(23, s)] = "ScrollBar";
                    s[System.Array.index(24, s)] = "Window";
                    s[System.Array.index(25, s)] = "WindowFrame";
                    s[System.Array.index(26, s)] = "WindowText";
                    s[System.Array.index(27, s)] = "Transparent";
                    s[System.Array.index(28, s)] = "AliceBlue";
                    s[System.Array.index(29, s)] = "AntiqueWhite";
                    s[System.Array.index(30, s)] = "Aqua";
                    s[System.Array.index(31, s)] = "Aquamarine";
                    s[System.Array.index(32, s)] = "Azure";
                    s[System.Array.index(33, s)] = "Beige";
                    s[System.Array.index(34, s)] = "Bisque";
                    s[System.Array.index(35, s)] = "Black";
                    s[System.Array.index(36, s)] = "BlanchedAlmond";
                    s[System.Array.index(37, s)] = "Blue";
                    s[System.Array.index(38, s)] = "BlueViolet";
                    s[System.Array.index(39, s)] = "Brown";
                    s[System.Array.index(40, s)] = "BurlyWood";
                    s[System.Array.index(41, s)] = "CadetBlue";
                    s[System.Array.index(42, s)] = "Chartreuse";
                    s[System.Array.index(43, s)] = "Chocolate";
                    s[System.Array.index(44, s)] = "Coral";
                    s[System.Array.index(45, s)] = "CornflowerBlue";
                    s[System.Array.index(46, s)] = "Cornsilk";
                    s[System.Array.index(47, s)] = "Crimson";
                    s[System.Array.index(48, s)] = "Cyan";
                    s[System.Array.index(49, s)] = "DarkBlue";
                    s[System.Array.index(50, s)] = "DarkCyan";
                    s[System.Array.index(51, s)] = "DarkGoldenrod";
                    s[System.Array.index(52, s)] = "DarkGray";
                    s[System.Array.index(53, s)] = "DarkGreen";
                    s[System.Array.index(54, s)] = "DarkKhaki";
                    s[System.Array.index(55, s)] = "DarkMagenta";
                    s[System.Array.index(56, s)] = "DarkOliveGreen";
                    s[System.Array.index(57, s)] = "DarkOrange";
                    s[System.Array.index(58, s)] = "DarkOrchid";
                    s[System.Array.index(59, s)] = "DarkRed";
                    s[System.Array.index(60, s)] = "DarkSalmon";
                    s[System.Array.index(61, s)] = "DarkSeaGreen";
                    s[System.Array.index(62, s)] = "DarkSlateBlue";
                    s[System.Array.index(63, s)] = "DarkSlateGray";
                    s[System.Array.index(64, s)] = "DarkTurquoise";
                    s[System.Array.index(65, s)] = "DarkViolet";
                    s[System.Array.index(66, s)] = "DeepPink";
                    s[System.Array.index(67, s)] = "DeepSkyBlue";
                    s[System.Array.index(68, s)] = "DimGray";
                    s[System.Array.index(69, s)] = "DodgerBlue";
                    s[System.Array.index(70, s)] = "Firebrick";
                    s[System.Array.index(71, s)] = "FloralWhite";
                    s[System.Array.index(72, s)] = "ForestGreen";
                    s[System.Array.index(73, s)] = "Fuchsia";
                    s[System.Array.index(74, s)] = "Gainsboro";
                    s[System.Array.index(75, s)] = "GhostWhite";
                    s[System.Array.index(76, s)] = "Gold";
                    s[System.Array.index(77, s)] = "Goldenrod";
                    s[System.Array.index(78, s)] = "Gray";
                    s[System.Array.index(79, s)] = "Green";
                    s[System.Array.index(80, s)] = "GreenYellow";
                    s[System.Array.index(81, s)] = "Honeydew";
                    s[System.Array.index(82, s)] = "HotPink";
                    s[System.Array.index(83, s)] = "IndianRed";
                    s[System.Array.index(84, s)] = "Indigo";
                    s[System.Array.index(85, s)] = "Ivory";
                    s[System.Array.index(86, s)] = "Khaki";
                    s[System.Array.index(87, s)] = "Lavender";
                    s[System.Array.index(88, s)] = "LavenderBlush";
                    s[System.Array.index(89, s)] = "LawnGreen";
                    s[System.Array.index(90, s)] = "LemonChiffon";
                    s[System.Array.index(91, s)] = "LightBlue";
                    s[System.Array.index(92, s)] = "LightCoral";
                    s[System.Array.index(93, s)] = "LightCyan";
                    s[System.Array.index(94, s)] = "LightGoldenrodYellow";
                    s[System.Array.index(95, s)] = "LightGray";
                    s[System.Array.index(96, s)] = "LightGreen";
                    s[System.Array.index(97, s)] = "LightPink";
                    s[System.Array.index(98, s)] = "LightSalmon";
                    s[System.Array.index(99, s)] = "LightSeaGreen";
                    s[System.Array.index(100, s)] = "LightSkyBlue";
                    s[System.Array.index(101, s)] = "LightSlateGray";
                    s[System.Array.index(102, s)] = "LightSteelBlue";
                    s[System.Array.index(103, s)] = "LightYellow";
                    s[System.Array.index(104, s)] = "Lime";
                    s[System.Array.index(105, s)] = "LimeGreen";
                    s[System.Array.index(106, s)] = "Linen";
                    s[System.Array.index(107, s)] = "Magenta";
                    s[System.Array.index(108, s)] = "Maroon";
                    s[System.Array.index(109, s)] = "MediumAquamarine";
                    s[System.Array.index(110, s)] = "MediumBlue";
                    s[System.Array.index(111, s)] = "MediumOrchid";
                    s[System.Array.index(112, s)] = "MediumPurple";
                    s[System.Array.index(113, s)] = "MediumSeaGreen";
                    s[System.Array.index(114, s)] = "MediumSlateBlue";
                    s[System.Array.index(115, s)] = "MediumSpringGreen";
                    s[System.Array.index(116, s)] = "MediumTurquoise";
                    s[System.Array.index(117, s)] = "MediumVioletRed";
                    s[System.Array.index(118, s)] = "MidnightBlue";
                    s[System.Array.index(119, s)] = "MintCream";
                    s[System.Array.index(120, s)] = "MistyRose";
                    s[System.Array.index(121, s)] = "Moccasin";
                    s[System.Array.index(122, s)] = "NavajoWhite";
                    s[System.Array.index(123, s)] = "Navy";
                    s[System.Array.index(124, s)] = "OldLace";
                    s[System.Array.index(125, s)] = "Olive";
                    s[System.Array.index(126, s)] = "OliveDrab";
                    s[System.Array.index(127, s)] = "Orange";
                    s[System.Array.index(128, s)] = "OrangeRed";
                    s[System.Array.index(129, s)] = "Orchid";
                    s[System.Array.index(130, s)] = "PaleGoldenrod";
                    s[System.Array.index(131, s)] = "PaleGreen";
                    s[System.Array.index(132, s)] = "PaleTurquoise";
                    s[System.Array.index(133, s)] = "PaleVioletRed";
                    s[System.Array.index(134, s)] = "PapayaWhip";
                    s[System.Array.index(135, s)] = "PeachPuff";
                    s[System.Array.index(136, s)] = "Peru";
                    s[System.Array.index(137, s)] = "Pink";
                    s[System.Array.index(138, s)] = "Plum";
                    s[System.Array.index(139, s)] = "PowderBlue";
                    s[System.Array.index(140, s)] = "Purple";
                    s[System.Array.index(141, s)] = "Red";
                    s[System.Array.index(142, s)] = "RosyBrown";
                    s[System.Array.index(143, s)] = "RoyalBlue";
                    s[System.Array.index(144, s)] = "SaddleBrown";
                    s[System.Array.index(145, s)] = "Salmon";
                    s[System.Array.index(146, s)] = "SandyBrown";
                    s[System.Array.index(147, s)] = "SeaGreen";
                    s[System.Array.index(148, s)] = "SeaShell";
                    s[System.Array.index(149, s)] = "Sienna";
                    s[System.Array.index(150, s)] = "Silver";
                    s[System.Array.index(151, s)] = "SkyBlue";
                    s[System.Array.index(152, s)] = "SlateBlue";
                    s[System.Array.index(153, s)] = "SlateGray";
                    s[System.Array.index(154, s)] = "Snow";
                    s[System.Array.index(155, s)] = "SpringGreen";
                    s[System.Array.index(156, s)] = "SteelBlue";
                    s[System.Array.index(157, s)] = "Tan";
                    s[System.Array.index(158, s)] = "Teal";
                    s[System.Array.index(159, s)] = "Thistle";
                    s[System.Array.index(160, s)] = "Tomato";
                    s[System.Array.index(161, s)] = "Turquoise";
                    s[System.Array.index(162, s)] = "Violet";
                    s[System.Array.index(163, s)] = "Wheat";
                    s[System.Array.index(164, s)] = "White";
                    s[System.Array.index(165, s)] = "WhiteSmoke";
                    s[System.Array.index(166, s)] = "Yellow";
                    s[System.Array.index(167, s)] = "YellowGreen";
                    ExpressCraft.KnownColorTable.colorNameTable = s;
                },
                InitColorTable: function () {
                    var c = System.Array.init(175, 0, System.Int32);

                    c[System.Array.index(27, c)] = 16777215;
                    c[System.Array.index(28, c)] = -984833;
                    c[System.Array.index(29, c)] = -332841;
                    c[System.Array.index(30, c)] = -16711681;
                    c[System.Array.index(31, c)] = -8388652;
                    c[System.Array.index(32, c)] = -983041;
                    c[System.Array.index(33, c)] = -657956;
                    c[System.Array.index(34, c)] = -6972;
                    c[System.Array.index(35, c)] = -16777216;
                    c[System.Array.index(36, c)] = -5171;
                    c[System.Array.index(37, c)] = -16776961;
                    c[System.Array.index(38, c)] = -7722014;
                    c[System.Array.index(39, c)] = -5952982;
                    c[System.Array.index(40, c)] = -2180985;
                    c[System.Array.index(41, c)] = -10510688;
                    c[System.Array.index(42, c)] = -8388864;
                    c[System.Array.index(43, c)] = -2987746;
                    c[System.Array.index(44, c)] = -32944;
                    c[System.Array.index(45, c)] = -10185235;
                    c[System.Array.index(46, c)] = -1828;
                    c[System.Array.index(47, c)] = -2354116;
                    c[System.Array.index(48, c)] = -16711681;
                    c[System.Array.index(49, c)] = -16777077;
                    c[System.Array.index(50, c)] = -16741493;
                    c[System.Array.index(51, c)] = -4684277;
                    c[System.Array.index(52, c)] = -5658199;
                    c[System.Array.index(53, c)] = -16751616;
                    c[System.Array.index(54, c)] = -4343957;
                    c[System.Array.index(55, c)] = -7667573;
                    c[System.Array.index(56, c)] = -11179217;
                    c[System.Array.index(57, c)] = -29696;
                    c[System.Array.index(58, c)] = -6737204;
                    c[System.Array.index(59, c)] = -7667712;
                    c[System.Array.index(60, c)] = -1468806;
                    c[System.Array.index(61, c)] = -7357301;
                    c[System.Array.index(62, c)] = -12042869;
                    c[System.Array.index(63, c)] = -13676721;
                    c[System.Array.index(64, c)] = -16724271;
                    c[System.Array.index(65, c)] = -7077677;
                    c[System.Array.index(66, c)] = -60269;
                    c[System.Array.index(67, c)] = -16728065;
                    c[System.Array.index(68, c)] = -9868951;
                    c[System.Array.index(69, c)] = -14774017;
                    c[System.Array.index(70, c)] = -5103070;
                    c[System.Array.index(71, c)] = -1296;
                    c[System.Array.index(72, c)] = -14513374;
                    c[System.Array.index(73, c)] = -65281;
                    c[System.Array.index(74, c)] = -2302756;
                    c[System.Array.index(75, c)] = -460545;
                    c[System.Array.index(76, c)] = -10496;
                    c[System.Array.index(77, c)] = -2448096;
                    c[System.Array.index(78, c)] = -8355712;
                    c[System.Array.index(79, c)] = -16744448;
                    c[System.Array.index(80, c)] = -5374161;
                    c[System.Array.index(81, c)] = -983056;
                    c[System.Array.index(82, c)] = -38476;
                    c[System.Array.index(83, c)] = -3318692;
                    c[System.Array.index(84, c)] = -11861886;
                    c[System.Array.index(85, c)] = -16;
                    c[System.Array.index(86, c)] = -989556;
                    c[System.Array.index(87, c)] = -1644806;
                    c[System.Array.index(88, c)] = -3851;
                    c[System.Array.index(89, c)] = -8586240;
                    c[System.Array.index(90, c)] = -1331;
                    c[System.Array.index(91, c)] = -5383962;
                    c[System.Array.index(92, c)] = -1015680;
                    c[System.Array.index(93, c)] = -2031617;
                    c[System.Array.index(94, c)] = -329006;
                    c[System.Array.index(95, c)] = -2894893;
                    c[System.Array.index(96, c)] = -7278960;
                    c[System.Array.index(97, c)] = -18751;
                    c[System.Array.index(98, c)] = -24454;
                    c[System.Array.index(99, c)] = -14634326;
                    c[System.Array.index(100, c)] = -7876870;
                    c[System.Array.index(101, c)] = -8943463;
                    c[System.Array.index(102, c)] = -5192482;
                    c[System.Array.index(103, c)] = -32;
                    c[System.Array.index(104, c)] = -16711936;
                    c[System.Array.index(105, c)] = -13447886;
                    c[System.Array.index(106, c)] = -331546;
                    c[System.Array.index(107, c)] = -65281;
                    c[System.Array.index(108, c)] = -8388608;
                    c[System.Array.index(109, c)] = -10039894;
                    c[System.Array.index(110, c)] = -16777011;
                    c[System.Array.index(111, c)] = -4565549;
                    c[System.Array.index(112, c)] = -7114533;
                    c[System.Array.index(113, c)] = -12799119;
                    c[System.Array.index(114, c)] = -8689426;
                    c[System.Array.index(115, c)] = -16713062;
                    c[System.Array.index(116, c)] = -12004916;
                    c[System.Array.index(117, c)] = -3730043;
                    c[System.Array.index(118, c)] = -15132304;
                    c[System.Array.index(119, c)] = -655366;
                    c[System.Array.index(120, c)] = -6943;
                    c[System.Array.index(121, c)] = -6987;
                    c[System.Array.index(122, c)] = -8531;
                    c[System.Array.index(123, c)] = -16777088;
                    c[System.Array.index(124, c)] = -133658;
                    c[System.Array.index(125, c)] = -8355840;
                    c[System.Array.index(126, c)] = -9728477;
                    c[System.Array.index(127, c)] = -23296;
                    c[System.Array.index(128, c)] = -47872;
                    c[System.Array.index(129, c)] = -2461482;
                    c[System.Array.index(130, c)] = -1120086;
                    c[System.Array.index(131, c)] = -6751336;
                    c[System.Array.index(132, c)] = -5247250;
                    c[System.Array.index(133, c)] = -2396013;
                    c[System.Array.index(134, c)] = -4139;
                    c[System.Array.index(135, c)] = -9543;
                    c[System.Array.index(136, c)] = -3308225;
                    c[System.Array.index(137, c)] = -16181;
                    c[System.Array.index(138, c)] = -2252579;
                    c[System.Array.index(139, c)] = -5185306;
                    c[System.Array.index(140, c)] = -8388480;
                    c[System.Array.index(141, c)] = -65536;
                    c[System.Array.index(142, c)] = -4419697;
                    c[System.Array.index(143, c)] = -12490271;
                    c[System.Array.index(144, c)] = -7650029;
                    c[System.Array.index(145, c)] = -360334;
                    c[System.Array.index(146, c)] = -744352;
                    c[System.Array.index(147, c)] = -13726889;
                    c[System.Array.index(148, c)] = -2578;
                    c[System.Array.index(149, c)] = -6270419;
                    c[System.Array.index(150, c)] = -4144960;
                    c[System.Array.index(151, c)] = -7876885;
                    c[System.Array.index(152, c)] = -9807155;
                    c[System.Array.index(153, c)] = -9404272;
                    c[System.Array.index(154, c)] = -1286;
                    c[System.Array.index(155, c)] = -16711809;
                    c[System.Array.index(156, c)] = -12156236;
                    c[System.Array.index(157, c)] = -2968436;
                    c[System.Array.index(158, c)] = -16744320;
                    c[System.Array.index(159, c)] = -2572328;
                    c[System.Array.index(160, c)] = -40121;
                    c[System.Array.index(161, c)] = -12525360;
                    c[System.Array.index(162, c)] = -1146130;
                    c[System.Array.index(163, c)] = -663885;
                    c[System.Array.index(164, c)] = -1;
                    c[System.Array.index(165, c)] = -657931;
                    c[System.Array.index(166, c)] = -256;
                    c[System.Array.index(167, c)] = -6632142;
                    ExpressCraft.KnownColorTable.colorTable = c;
                },
                KnownColorToArgb: function (color) {
                    ExpressCraft.KnownColorTable.EnsureColorTable();
                    if (color <= ExpressCraft.KnownColor.MenuHighlight) {
                        return ExpressCraft.KnownColorTable.colorTable[System.Array.index(color, ExpressCraft.KnownColorTable.colorTable)];
                    }
                    return 0;
                },
                KnownColorToName: function (color) {
                    ExpressCraft.KnownColorTable.EnsureColorNameTable();
                    if (color <= ExpressCraft.KnownColor.MenuHighlight) {
                        return ExpressCraft.KnownColorTable.colorNameTable[System.Array.index(color, ExpressCraft.KnownColorTable.colorNameTable)];
                    }
                    return null;
                }
            }
        }
    });

    Bridge.define("ExpressCraft.Layout", {
        $kind: "enum",
        statics: {
            fields: {
                Portrait: 0,
                Landscape: 1
            }
        }
    });

    Bridge.define("ExpressCraft.LayoutColumn", {
        fields: {
            Groups: null
        },
        ctors: {
            init: function () {
                this.Groups = new (System.Collections.Generic.List$1(ExpressCraft.LayoutGroup)).ctor();
            },
            ctor: function (groups) {
                if (groups === void 0) { groups = []; }
                var $t;

                this.$initialize();
                if (groups != null && groups.length > 0) {
                    $t = Bridge.getEnumerator(groups);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (item != null) {
                                this.Groups.add(item);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        }
    });

    Bridge.define("ExpressCraft.LayoutContainer", {
        statics: {
            fields: {
                TabIndex: 0
            },
            ctors: {
                init: function () {
                    this.TabIndex = 2;
                }
            }
        },
        fields: {
            Columns: null,
            ColumnWidth: 0,
            ControlMargin: 0,
            appliedLayout: false,
            ButtinWidth: 0,
            Controls: null,
            ControlEditable: null
        },
        ctors: {
            init: function () {
                this.Columns = new (System.Collections.Generic.List$1(ExpressCraft.LayoutColumn)).ctor();
                this.appliedLayout = false;
                this.ButtinWidth = 73;
                this.Controls = new (System.Collections.Generic.List$1(ExpressCraft.LayoutControl)).ctor();
                this.ControlEditable = new (System.Collections.Generic.List$1(ExpressCraft.LayoutControl)).ctor();
            },
            $ctor1: function (columnWidth, controlMargin, columns) {
                if (columnWidth === void 0) { columnWidth = 500; }
                if (controlMargin === void 0) { controlMargin = 6; }
                if (columns === void 0) { columns = []; }
                var $t;

                this.$initialize();
                this.ColumnWidth = columnWidth;
                this.ControlMargin = controlMargin;

                if (columns != null && columns.length > 0) {
                    $t = Bridge.getEnumerator(columns);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (item != null) {
                                this.Columns.add(item);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            $ctor2: function (columnWidth, controlMargin, buttonWidth, columns) {
                if (columnWidth === void 0) { columnWidth = 500; }
                if (controlMargin === void 0) { controlMargin = 6; }
                if (buttonWidth === void 0) { buttonWidth = 73; }
                if (columns === void 0) { columns = []; }
                var $t;

                this.$initialize();
                this.ColumnWidth = columnWidth;
                this.ControlMargin = controlMargin;
                this.ButtinWidth = buttonWidth;

                if (columns != null && columns.length > 0) {
                    $t = Bridge.getEnumerator(columns);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (item != null) {
                                this.Columns.add(item);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            ctor: function (columns) {
                if (columns === void 0) { columns = []; }
                var $t;

                this.$initialize();
                this.ColumnWidth = 500;
                this.ControlMargin = 6;

                if (columns != null && columns.length > 0) {
                    $t = Bridge.getEnumerator(columns);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (item != null) {
                                this.Columns.add(item);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        },
        methods: {
            AddInput: function (linkField, input) {
                var cl = new ExpressCraft.LayoutControl.ctor(linkField, input);
                this.Controls.add(cl);
                if (!input.Readonly) {
                    this.ControlEditable.add(cl);
                }
            },
            AppliedLayout: function () {
                return this.appliedLayout;
            },
            GetControl: function (name, allowReadonly) {
                if (allowReadonly === void 0) { allowReadonly = false; }
                name = name.toLowerCase();

                if (allowReadonly) {
                    for (var i = 0; i < this.Controls.Count; i = (i + 1) | 0) {
                        if (Bridge.referenceEquals(this.Controls.getItem(i).LinkFieldName.toLowerCase(), name)) {
                            return this.Controls.getItem(i);
                        }
                    }
                } else {
                    for (var i1 = 0; i1 < this.ControlEditable.Count; i1 = (i1 + 1) | 0) {
                        if (Bridge.referenceEquals(this.ControlEditable.getItem(i1).LinkFieldName.toLowerCase(), name)) {
                            return this.ControlEditable.getItem(i1);
                        }
                    }
                }

                return null;
            },
            GetText: function (name, allowReadyOnly) {
                var $t, $t1;
                if (allowReadyOnly === void 0) { allowReadyOnly = false; }
                return ($t = this.GetControl(name, allowReadyOnly)) != null && ($t1 = $t.Input) != null ? $t1.Text : null;
            },
            GetEditValue: function (name, allowReadyOnly) {
                var $t, $t1;
                if (allowReadyOnly === void 0) { allowReadyOnly = false; }
                return ($t = this.GetControl(name, allowReadyOnly)) != null && ($t1 = $t.Input) != null ? $t1.GetEditValue() : null;
            },
            SetText: function (name, value, allowReadyOnly) {
                var $t;
                if (allowReadyOnly === void 0) { allowReadyOnly = false; }
                var input = ($t = this.GetControl(name, allowReadyOnly)) != null ? $t.Input : null;
                if (input != null) {
                    input.Text = value;
                }
            },
            Focus: function () {
                if (ExpressCraft.Helper.NotDesktop) {
                    return;
                }
                if (this.Controls == null || this.Controls.Count === 0) {
                    return;
                }
                var input = System.Linq.Enumerable.from(this.Controls).firstOrDefault(null, null).Input;
                var x = input.GetInput();

                if (x != null) {
                    ExpressCraft.Helper.FocusElement(x);
                } else {
                    ExpressCraft.Helper.FocusElement(input.Content);
                }
            },
            CreateLoadSQL: function () {
                var builderSQL = new System.Text.StringBuilder();

                var length = this.Controls.Count;
                for (var i = 0; i < length; i = (i + 1) | 0) {
                    if (this.Controls.getItem(i) == null || this.Controls.getItem(i).Input == null || System.String.isNullOrWhiteSpace(this.Controls.getItem(i).LinkFieldName)) {
                        continue;
                    }
                    builderSQL.append("`" + (this.Controls.getItem(i).LinkFieldName || "") + "`, ");

                    var control = this.Controls.getItem(i);

                    if (Bridge.is(control.Input, ExpressCraft.SearchInput)) {
                        var search = control.Input;

                        var editValue = (System.String.concat(search.EditValue, ""));
                        if (Bridge.referenceEquals(search.DisplayMember, search.ValueMember) || search.ValueMember == null) {
                        } else {

                        }

                        continue;
                    } else if (control.Input.Controller != null) {
                        if (Bridge.is(control.Input.Controller, ExpressCraft.CheckEdit)) {

                            continue;
                        }
                    }

                    if (control.Input.IsNumericType()) {

                    } else if (control.Input.IsDateType()) {

                    } else {
                    }
                }

                return builderSQL.toString();
            },
            ApplyReadOnly: function (documentreadonly) {
                var length = this.ControlEditable.Count;
                for (var i = 0; i < length; i = (i + 1) | 0) {
                    this.ApplyReadOnlyOnControl(documentreadonly, this.ControlEditable.getItem(i).Input);
                }
            },
            ApplyReadOnlyOnControl: function (documentreadonly, input) {
                if (input.Controller != null) {
                    if (Bridge.is(input.Controller, ExpressCraft.CheckEdit)) {
                        input.Enabled = !documentreadonly;
                    }
                } else {
                    if (Bridge.is(input, ExpressCraft.TextInputDropDown)) {
                        input.GetInput().readOnly = documentreadonly;
                    }
                    input.Readonly = documentreadonly;
                }
            },
            OnControlCreated: function (Control) { },
            Apply: function (parent, documentreadonly) {
                var $t, $t1, $t2, $t3;
                if (documentreadonly === void 0) { documentreadonly = false; }
                if (parent == null) {
                    throw new System.ArgumentNullException.ctor();
                }

                if (this.appliedLayout) {
                    return;
                }
                this.appliedLayout = true;

                var leftMargin = 10;
                var topMargin = 5;

                var leftLabel = 15;

                var currentLeft = leftMargin;
                var AppendX = 0;
                var AppendY = 0;

                var EditStartX = 125;

                if (ExpressCraft.Helper.NotDesktop) {
                    EditStartX = 15;
                }

                var XIncrement = (leftMargin + this.ColumnWidth) | 0;

                var inputHeight;
                if (ExpressCraft.Helper.NotDesktop) {
                    this.ButtinWidth = 0;
                    inputHeight = 45;
                } else {
                    inputHeight = 20;
                }
                var GroupLabelIncrement = (this.ControlMargin + (ExpressCraft.Helper.NotDesktop ? (((inputHeight - 30) | 0)) : (((inputHeight - 4) | 0)))) | 0;
                var RowIncrement = (inputHeight + this.ControlMargin) | 0;

                var TinyLabelIncrement = (inputHeight - 8) | 0;

                $t = Bridge.getEnumerator(this.Columns);
                try {
                    while ($t.moveNext()) {
                        var column = $t.Current;
                        var autoDiv = new ExpressCraft.Control.$ctor1();
                        var y = topMargin;
                        if (ExpressCraft.Helper.NotDesktop) {
                            autoDiv.Width = "(100% - 12px)";
                            autoDiv.Top = AppendY;
                        } else {
                            autoDiv.Top = y;
                            autoDiv.Width = this.ColumnWidth;
                        }
                        autoDiv.Left = AppendX;

                        var docFragment = document.createDocumentFragment();

                        var groups = column.Groups;

                        $t1 = Bridge.getEnumerator(groups);
                        try {
                            while ($t1.moveNext()) {
                                var group = $t1.Current;
                                if (!System.String.isNullOrWhiteSpace(group.GroupLabel)) {
                                    var label = ExpressCraft.Control.Label$2(group.GroupLabel, currentLeft, y, true);
                                    if (ExpressCraft.Helper.NotDesktop) {
                                        label.style.fontSize = "14px";
                                    }
                                    docFragment.appendChild(label);
                                    y += GroupLabelIncrement;
                                }
                                var rows = group.Rows;

                                $t2 = Bridge.getEnumerator(rows);
                                try {
                                    while ($t2.moveNext()) {
                                        var row = $t2.Current;
                                        if (Bridge.is(row, ExpressCraft.LayoutRowControl)) {
                                            var height = row.Height;

                                            var control = row.Control;

                                            if (control != null) {
                                                control.Height = height;
                                                control.Left = (currentLeft + leftLabel) | 0;
                                                control.Top = y;

                                                if (ExpressCraft.Helper.NotDesktop) {
                                                    control.Width = "(100% - " + System.Single.format((currentLeft + (leftLabel * 2.0))) + "px)";
                                                } else {
                                                    control.Width = (((this.ColumnWidth - currentLeft) | 0) - (leftLabel)) | 0;
                                                }

                                                docFragment.appendChild(ExpressCraft.Control.op_Implicit(control));

                                                y += this.ControlMargin;
                                            }

                                            y += height;

                                            continue;
                                        }

                                        if (!System.String.isNullOrWhiteSpace(row.Label)) {
                                            var label1 = ExpressCraft.Control.Label$2(row.Label, ((currentLeft + leftLabel) | 0) + System.Decimal.toFloat(row.Offset), y, row.Bold);
                                            if (ExpressCraft.Helper.NotDesktop) {
                                                label1.style.fontSize = "12px";
                                                y += (GroupLabelIncrement - 5) | 0;
                                            }
                                            docFragment.appendChild(label1);
                                        }

                                        if (Bridge.is(row, ExpressCraft.LayoutRowGap)) {
                                            y += row.Height;
                                            continue;
                                        }

                                        if (row.Button != null && !ExpressCraft.Helper.NotDesktop) {
                                            row.Button.Location = new ExpressCraft.Vector2.$ctor1(((((this.ColumnWidth - this.ButtinWidth) | 0) + 6) | 0), y);
                                            row.Button.Width = this.ButtinWidth;
                                            docFragment.appendChild(ExpressCraft.Control.op_Implicit(row.Button));
                                        }

                                        var controls = row.Controls;
                                        var HasTinyLabel = false;

                                        if (controls.Count > 0) {
                                            var TotalPercent = System.Decimal(0);

                                            TotalPercent = System.Decimal(0);
                                            var AddWidth = 0;
                                            $t3 = Bridge.getEnumerator(controls);
                                            try {
                                                while ($t3.moveNext()) {
                                                    var control1 = $t3.Current;
                                                    if (control1.Percent.gt(System.Decimal(1.0)) || control1.Percent.lte(System.Decimal(0.0))) {
                                                        control1.Percent = System.Decimal(1.0);
                                                    }

                                                    TotalPercent = TotalPercent.add(control1.Percent);

                                                    if (TotalPercent.gt(System.Decimal(1.0))) {
                                                        if (Bridge.is(control1.Input, ExpressCraft.MemoInput)) {
                                                            y += (ExpressCraft.Helper.ToInt(control1.Input.Height) + this.ControlMargin) | 0;
                                                        } else {
                                                            y += RowIncrement;
                                                        }

                                                        if (row.NoGap) {
                                                            y -= (this.ControlMargin + 1) | 0;
                                                        }

                                                        if (HasTinyLabel) {
                                                            y += TinyLabelIncrement;
                                                            HasTinyLabel = false;
                                                        }

                                                        TotalPercent = TotalPercent.sub(System.Decimal(1.0));
                                                        AddWidth = 0;
                                                    }
                                                    var Add = (((((((currentLeft + AddWidth) | 0) + EditStartX) | 0) + this.ButtinWidth) | 0) + System.Decimal.toFloat(row.Offset));
                                                    var o100Percent = "((100% - " + (ExpressCraft.Helper.ToPx(Bridge.box(Add, System.Single, System.Single.format, System.Single.getHashCode)) || "") + ") * " + (TotalPercent.sub(control1.Percent)) + ")";
                                                    var o100Percent2 = "(100% - " + (ExpressCraft.Helper.ToPx(Bridge.box(Add, System.Single, System.Single.format, System.Single.getHashCode)) || "") + ")";

                                                    var width = "(" + (o100Percent2 || "") + " * " + control1.Percent + ")";
                                                    var loc = new ExpressCraft.Vector2.$ctor1("(" + (o100Percent || "") + " + " + (ExpressCraft.Helper.ToPx(Bridge.box((Add - this.ButtinWidth), System.Single, System.Single.format, System.Single.getHashCode)) || "") + ")", y);
                                                    if (!row.NoGap) {
                                                        AddWidth = (AddWidth + 6) | 0;
                                                    }

                                                    if (control1.Input.Controller != null) {
                                                        control1.Input.Controller.Width = width;
                                                        control1.Input.Controller.Location = loc.$clone();
                                                        control1.Input.Content.tabIndex = ExpressCraft.LayoutContainer.TabIndex;
                                                        control1.Input.ClassList.remove("control");
                                                        if (Bridge.is(control1.Input.Controller, ExpressCraft.CheckEdit)) {
                                                            var span = control1.Input.Controller.span;
                                                            span.style.top = "0";
                                                            span.style.left = ExpressCraft.Helper.ToPx(Bridge.box((((inputHeight - 2) | 0)), System.Int32));

                                                            span.style.position = "absolute";

                                                            span.style.whiteSpace = "pre";
                                                            if (ExpressCraft.Helper.NotDesktop) {
                                                                span.style.fontSize = "14px";
                                                                span.style.whiteSpace = "normal";
                                                            }

                                                            if (Bridge.referenceEquals(control1.Input.Content.type, "checkbox")) {
                                                                control1.Input.Width = ExpressCraft.Helper.ToPx(Bridge.box((((inputHeight - 4) | 0)), System.Int32));
                                                                control1.Input.Height = ExpressCraft.Helper.ToPx(Bridge.box((((inputHeight - 4) | 0)), System.Int32));
                                                            }
                                                        }

                                                        docFragment.appendChild(ExpressCraft.Control.op_Implicit(control1.Input.Controller));
                                                    } else {
                                                        control1.Input.Width = width;
                                                        control1.Input.Location = loc.$clone();
                                                        control1.Input.GetInput().tabIndex = ExpressCraft.LayoutContainer.TabIndex;

                                                        docFragment.appendChild(ExpressCraft.Control.op_Implicit(control1.Input));
                                                    }
                                                    if (ExpressCraft.Helper.NotDesktop) {
                                                        control1.Input.Height = inputHeight;
                                                        control1.Input.Style.fontSize = "14px";

                                                        if (control1.Input.GetInput() != null) {
                                                            control1.Input.GetInput().style.fontSize = "14px";
                                                        }
                                                    }

                                                    this.OnControlCreated(control1);

                                                    if (!row.NoGap && !row.HideTinyLabel && !System.String.isNullOrWhiteSpace(control1.TinyLabel)) {
                                                        var label2 = ExpressCraft.Control.Label$2(control1.TinyLabel, 0, y + (((inputHeight + 3) | 0)), false, true);
                                                        label2.style.left = "calc(" + (o100Percent || "") + " + " + (ExpressCraft.Helper.ToPx(Bridge.box((Add - this.ButtinWidth), System.Single, System.Single.format, System.Single.getHashCode)) || "") + ")";
                                                        docFragment.appendChild(label2);
                                                        if (ExpressCraft.Helper.NotDesktop) {
                                                            label2.style.fontSize = "12px";
                                                        }
                                                        HasTinyLabel = true;
                                                    }

                                                    if (row.UsePlaceholder && !System.String.isNullOrWhiteSpace(control1.TinyLabel)) {
                                                        control1.Input.SetAttribute("placeholder", control1.TinyLabel);
                                                        if (control1.Input.ToolTip == null) {
                                                            if (System.String.isNullOrWhiteSpace(row.Label) && System.String.isNullOrWhiteSpace(group.GroupLabel)) {
                                                                control1.Input.ToolTip = new ExpressCraft.ToolTip.ctor(control1.TinyLabel);
                                                            } else {
                                                                control1.Input.ToolTip = new ExpressCraft.ToolTip.$ctor1(System.String.isNullOrWhiteSpace(row.Label) ? group.GroupLabel : row.Label, control1.TinyLabel);
                                                            }
                                                        }
                                                    }

                                                    ExpressCraft.LayoutContainer.TabIndex = (ExpressCraft.LayoutContainer.TabIndex + 1) | 0;

                                                    if (!control1.Input.Readonly) {
                                                        this.ApplyReadOnlyOnControl(documentreadonly, control1.Input);
                                                        this.ControlEditable.add(control1);
                                                    }
                                                    this.Controls.add(control1);
                                                }
                                            } finally {
                                                if (Bridge.is($t3, System.IDisposable)) {
                                                    $t3.System$IDisposable$Dispose();
                                                }
                                            }

                                            if (HasTinyLabel) {
                                                y += TinyLabelIncrement;
                                            }
                                            var last = System.Linq.Enumerable.from(row.Controls).lastOrDefault(null, null);
                                            if (last != null && Bridge.is(last.Input, ExpressCraft.MemoInput)) {
                                                y += (ExpressCraft.Helper.ToInt(last.Input.Height) + this.ControlMargin) | 0;
                                            } else {
                                                y += RowIncrement;
                                            }
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t2, System.IDisposable)) {
                                        $t2.System$IDisposable$Dispose();
                                    }
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }

                        autoDiv.Height = y;
                        if (!ExpressCraft.Helper.NotDesktop) {
                            AppendX = (AppendX + XIncrement) | 0;
                        } else {
                            AppendY = (AppendY + Bridge.Int.clip32(y)) | 0;
                        }
                        ExpressCraft.Helper.AppendChild$2(autoDiv.Content, docFragment);
                        ExpressCraft.Helper.AppendChild$1(parent.Content, autoDiv);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                var LastControl = System.Linq.Enumerable.from(this.Controls).lastOrDefault(null, null);
                if (LastControl != null) {
                    var FirstControl = System.Linq.Enumerable.from(this.Controls).firstOrDefault(null, null);

                    var PreventDefaultMoveForward = function (ev) {
                        if (ev.keyCode === 9 && !ev.shiftKey) {
                            ev.preventDefault();
                            var x = FirstControl.Input.GetInput();
                            if (x != null) {
                                ExpressCraft.Helper.FocusElement(x);
                            } else {
                                ExpressCraft.Helper.FocusElement(LastControl.Input.Content);
                            }
                        }
                    };

                    var PreventDefaultMoveBack = function (ev) {
                        if (ev.keyCode === 9 && ev.shiftKey) {
                            ev.preventDefault();
                            var x = LastControl.Input.GetInput();
                            if (x != null) {
                                ExpressCraft.Helper.FocusElement(x);
                            } else {
                                ExpressCraft.Helper.FocusElement(LastControl.Input.Content);
                            }
                        }
                    };

                    LastControl.Input.Content.onkeydown = PreventDefaultMoveForward;
                    FirstControl.Input.Content.onkeydown = PreventDefaultMoveBack;
                }
            }
        }
    });

    Bridge.define("ExpressCraft.LayoutControl", {
        fields: {
            LinkFieldName: null,
            Input: null,
            TinyLabel: null,
            Percent: System.Decimal(0.0),
            /**
             * Calculated
             *
             * @instance
             * @public
             * @memberof ExpressCraft.LayoutControl
             * @function Width
             * @type string
             */
            Width: null,
            /**
             * Calculated
             *
             * @instance
             * @public
             * @memberof ExpressCraft.LayoutControl
             * @function LineNumber
             * @type System.Decimal
             */
            LineNumber: System.Decimal(0.0)
        },
        ctors: {
            $ctor2: function (linkFieldName, input, tinyLabel, percent) {
                if (tinyLabel === void 0) { tinyLabel = ""; }
                if (percent === void 0) { percent = System.Decimal(1.0); }

                this.$initialize();
                this.LinkFieldName = linkFieldName;
                this.Input = input;
                this.TinyLabel = tinyLabel;
                this.Percent = percent;
            },
            $ctor1: function (linkFieldName, input, percent) {
                if (percent === void 0) { percent = System.Decimal(1.0); }

                ExpressCraft.LayoutControl.$ctor2.call(this, linkFieldName, input, "", percent);
            },
            ctor: function (linkFieldName, input) {
                ExpressCraft.LayoutControl.$ctor2.call(this, linkFieldName, input, "");
            }
        }
    });

    Bridge.define("ExpressCraft.LayoutGroup", {
        fields: {
            Rows: null,
            GroupLabel: null
        },
        ctors: {
            init: function () {
                this.Rows = new (System.Collections.Generic.List$1(ExpressCraft.LayoutRow)).ctor();
            },
            ctor: function (rows) {
                if (rows === void 0) { rows = []; }
                var $t;

                this.$initialize();
                this.GroupLabel = "";
                if (rows != null && rows.length > 0) {
                    $t = Bridge.getEnumerator(rows);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (item != null) {
                                this.Rows.add(item);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            $ctor1: function (groupLabel, rows) {
                if (rows === void 0) { rows = []; }
                var $t;

                this.$initialize();
                this.GroupLabel = groupLabel;
                if (rows != null && rows.length > 0) {
                    $t = Bridge.getEnumerator(rows);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (item != null) {
                                this.Rows.add(item);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        }
    });

    Bridge.define("ExpressCraft.LayoutRow", {
        fields: {
            Controls: null,
            Label: null,
            Button: null,
            /**
             * If this is true - tiny labels are ignored
             *
             * @instance
             * @public
             * @memberof ExpressCraft.LayoutRow
             * @function NoGap
             * @type boolean
             */
            NoGap: false,
            UsePlaceholder: false,
            HideTinyLabel: false,
            Offset: System.Decimal(0.0),
            Bold: false
        },
        ctors: {
            init: function () {
                this.Controls = new (System.Collections.Generic.List$1(ExpressCraft.LayoutControl)).ctor();
                this.NoGap = false;
                this.UsePlaceholder = false;
                this.HideTinyLabel = false;
                this.Offset = System.Decimal(0);
                this.Bold = false;
            },
            $ctor2: function (label, controls) {
                if (controls === void 0) { controls = []; }
                var $t;

                this.$initialize();
                this.Label = label;
                if (controls != null && controls.length > 0) {
                    $t = Bridge.getEnumerator(controls);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (item != null) {
                                this.Controls.add(item);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            ctor: function (controls) {
                if (controls === void 0) { controls = []; }

                ExpressCraft.LayoutRow.$ctor2.call(this, "", controls);
            },
            $ctor1: function (offset, controls) {
                if (controls === void 0) { controls = []; }

                ExpressCraft.LayoutRow.$ctor2.call(this, "", controls);
                this.Offset = offset;
            },
            $ctor3: function (label, button, controls) {
                if (controls === void 0) { controls = []; }

                ExpressCraft.LayoutRow.$ctor2.call(this, label, controls);
                this.Button = button;
            }
        }
    });

    Bridge.define("ExpressCraft.MessageBoxButtons", {
        $kind: "enum",
        statics: {
            fields: {
                Auto: 0,
                Ok: 1,
                YesNo: 2,
                YesNoCancel: 3,
                AbortSendCancel: 4
            }
        }
    });

    Bridge.define("ExpressCraft.MessageBoxLayout", {
        $kind: "enum",
        statics: {
            fields: {
                Information: 0,
                Exclamation: 1,
                Question: 2,
                Error: 3
            }
        }
    });

    Bridge.define("ExpressCraft.MouseMoveAction", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                Move: 1,
                TopLeftResize: 2,
                LeftResize: 3,
                BottomLeftResize: 4,
                BottomResize: 5,
                BottomRightResize: 6,
                RightResize: 7,
                TopResize: 8,
                TopRightResize: 9
            }
        }
    });

    Bridge.define("ExpressCraft.Network", {
        statics: {
            methods: {
                GetAjaxOptions: function (JsonFile, Async) {
                    if (Async === void 0) { Async = true; }
                    return { async: Async, url: ExpressCraft.Settings.NetworkURL, cache: false, data: JsonFile == null ? "" : JSON.stringify(Bridge.unbox(JsonFile)), dataType: "json", contentType: "application/json", type: "POST" };
                },
                InvokeMethodUI: function (interfaceName, method, Success, Error, $arguments) {
                    if (Success === void 0) { Success = null; }
                    if (Error === void 0) { Error = null; }
                    if ($arguments === void 0) { $arguments = []; }

                },
                InvokeMethodUIControl: function (interfaceName, method, progressControl, Success, Error, $arguments) {
                    if (Success === void 0) { Success = null; }
                    if (Error === void 0) { Error = null; }
                    if ($arguments === void 0) { $arguments = []; }

                },
                InvokeMethod: function (interfaceName, method, Success, Error, $arguments) {
                    if (Success === void 0) { Success = null; }
                    if (Error === void 0) { Error = null; }
                    if ($arguments === void 0) { $arguments = []; }
                    ExpressCraft.Network.PostJson(new ExpressCraft.Network.MethodRequest(interfaceName, method, $arguments), Success, Error);
                },
                PostJson: function (JsonFile, Success, Error, Async) {
                    if (Success === void 0) { Success = null; }
                    if (Error === void 0) { Error = null; }
                    if (Async === void 0) { Async = true; }

                },
                PostJsonProgressControl: function (JsonFile, progressControl, Success, Error, Async) {
                    if (Success === void 0) { Success = null; }
                    if (Error === void 0) { Error = null; }
                    if (Async === void 0) { Async = true; }

                },
                PostJsonProgressForm: function (JsonFile, Success, Error, Async) {
                    if (Success === void 0) { Success = null; }
                    if (Error === void 0) { Error = null; }
                    if (Async === void 0) { Async = true; }

                }
            }
        }
    });

    Bridge.define("ExpressCraft.Network.MethodRequest", {
        $kind: "nested class",
        fields: {
            Method: null,
            Arguments: null,
            Interface: null
        },
        ctors: {
            ctor: function (interfaceName, method, $arguments) {
                if ($arguments === void 0) { $arguments = []; }

                this.$initialize();
                this.Method = method;
                this.Arguments = $arguments;
                this.Interface = interfaceName;
            }
        }
    });

    Bridge.define("ExpressCraft.PageSize", {
        $kind: "enum",
        statics: {
            fields: {
                A4: 0,
                A5: 1
            }
        }
    });

    Bridge.define("ExpressCraft.PdfSourceType", {
        $kind: "enum",
        statics: {
            fields: {
                Url: 0,
                Base64: 1
            }
        }
    });

    Bridge.define("ExpressCraft.Pen", {
        inherits: [System.IDisposable],
        fields: {
            Brush: null,
            Width: 0,
            DashStyle: 0
        },
        alias: ["Dispose", "System$IDisposable$Dispose"],
        ctors: {
            $ctor2: function (color) {
                ExpressCraft.Pen.$ctor3.call(this, color, 1);

            },
            $ctor3: function (color, width) {
                this.$initialize();
                this.Width = width;
                this.Brush = new ExpressCraft.SolidBrush(color.$clone());
            },
            $ctor1: function (brush, width) {
                this.$initialize();
                this.Width = width;
                this.Brush = brush;
            },
            ctor: function (brush) {
                ExpressCraft.Pen.$ctor1.call(this, brush, 1);

            }
        },
        methods: {
            Dispose: function () {

            }
        }
    });

    Bridge.define("ExpressCraft.Point", {
        fields: {
            X: 0,
            Y: 0
        }
    });

    Bridge.define("ExpressCraft.PointF", {
        fields: {
            X: 0,
            Y: 0
        }
    });

    Bridge.define("ExpressCraft.Rectangle", {
        fields: {
            X: 0,
            Y: 0,
            Width: 0,
            Height: 0
        }
    });

    Bridge.define("ExpressCraft.RectangleF", {
        fields: {
            X: 0,
            Y: 0,
            Width: 0,
            Height: 0
        }
    });

    Bridge.define("ExpressCraft.ResourceManager", {
        statics: {
            fields: {
                cacheResourceString: null
            },
            ctors: {
                init: function () {
                    this.cacheResourceString = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                }
            },
            methods: {
                GetResourceString: function (name) {
                    var $t;
                    if (ExpressCraft.ResourceManager.cacheResourceString.containsKey(name)) {
                        return ExpressCraft.ResourceManager.cacheResourceString.get(name);
                    }
                    return (($t = ExpressCraft.Settings.GetStyleRuleValue$1(ExpressCraft.Settings.resourceManangerSheets, "content", "." + (name || "")), ExpressCraft.ResourceManager.cacheResourceString.set(name, $t), $t));
                }
            }
        }
    });

    Bridge.define("ExpressCraft.RibbonControl.RibbonType", {
        $kind: "nested enum",
        statics: {
            fields: {
                Full: 0,
                Compact: 1
            }
        }
    });

    Bridge.define("ExpressCraft.RibbonGroup.RenderInfo", {
        $kind: "nested class",
        fields: {
            Left: 0,
            Width: 0,
            IsSmall: false,
            FirstItem: null,
            SecondItem: null,
            ThirdItem: null,
            BeginGroup: false
        },
        ctors: {
            init: function () {
                this.IsSmall = false;
                this.BeginGroup = false;
            }
        }
    });

    Bridge.define("ExpressCraft.Settings", {
        statics: {
            fields: {
                NetworkURL: null,
                ResourceURL: null,
                AutoRender: false,
                Font: null,
                TaxPercent: System.Decimal(0.0),
                AlignFormToGrid: false,
                AlignmentForForm: 0,
                DefaultFont: null,
                /**
                 * Only for firefox - as no error with number input
                 *
                 * @static
                 * @public
                 * @memberof ExpressCraft.Settings
                 * @default true
                 * @type boolean
                 */
                OnFocusSelectAll: false,
                DefaultStyleSheet: null,
                PluginStyleSheet: null,
                resourceManangerSheets: null,
                GridViewAutoColumnGenerateFormatAsDate: false,
                GridViewAutoColumnFormatDates: false,
                GridViewBlurOnScroll: false,
                GridViewRowScrollPadding: 0,
                GridViewScrollDelayed: false,
                GridViewScrollDelayMS: 0,
                ContextMenuStartingZIndex: 0,
                ContextMenuMinWidth: 0,
                MessageFormTextMaximumHeightInPx: 0,
                MessageFormTextMinimumHeightInPx: 0,
                MessageFormMinimumWidthInPx: 0,
                DayPosition: 0,
                MonthPosition: 0,
                YearPosition: 0,
                DisableTextPopupEditor: false,
                ExpressCraftCssBase64: null,
                DateSeperator: 0,
                ConsoleDefaultSize: null,
                MessageFormBeep: false,
                MaximumPixelScrollingRows: 0,
                OnSendError: null,
                IsChrome: false,
                AllowCloseWithoutQuestion: false,
                OnApplicationClose: null,
                ShowExceptionDialog: false,
                FormFadeDuration: 0,
                _dpi: 0,
                _dpiSetup: false,
                /**
                 * Increase Render Speed
                 *
                 * @static
                 * @public
                 * @memberof ExpressCraft.Settings
                 * @type boolean
                 */
                RemoveAttributesOffElementsWhenLoseFocus: false,
                ToolTipPopupDelayMs: 0,
                ToolTipPopupStayOpenDelayPerWordMs: 0
            },
            ctors: {
                init: function () {
                    this.ConsoleDefaultSize = new ExpressCraft.Vector2();
                    this.NetworkURL = "Host.ashx";
                    this.ResourceURL = "./images/";
                    this.AutoRender = true;
                    this.Font = "8.25pt \"Tahoma\"";
                    this.TaxPercent = System.Decimal(0.1);
                    this.AlignFormToGrid = false;
                    this.AlignmentForForm = 0;
                    this.DefaultFont = "8.25pt \"Tahoma\"";
                    this.OnFocusSelectAll = true;
                    this.resourceManangerSheets = new (System.Collections.Generic.List$1(StyleSheet)).ctor();
                    this.GridViewAutoColumnGenerateFormatAsDate = false;
                    this.GridViewAutoColumnFormatDates = true;
                    this.GridViewBlurOnScroll = false;
                    this.GridViewRowScrollPadding = 0;
                    this.GridViewScrollDelayed = false;
                    this.GridViewScrollDelayMS = 25;
                    this.ContextMenuStartingZIndex = 500;
                    this.ContextMenuMinWidth = 200;
                    this.MessageFormTextMaximumHeightInPx = 500;
                    this.MessageFormTextMinimumHeightInPx = 32;
                    this.MessageFormMinimumWidthInPx = 195;
                    this.DayPosition = ExpressCraft.Settings.DatePosition.First;
                    this.MonthPosition = ExpressCraft.Settings.DatePosition.Second;
                    this.YearPosition = ExpressCraft.Settings.DatePosition.Third;
                    this.DisableTextPopupEditor = false;
                    this.ExpressCraftCssBase64 = "";
                    this.DateSeperator = 47;
                    this.ConsoleDefaultSize = new ExpressCraft.Vector2.$ctor1(540, 240);
                    this.MessageFormBeep = false;
                    this.MaximumPixelScrollingRows = 500000;
                    this.IsChrome = Bridge.Browser.isChrome;
                    this.AllowCloseWithoutQuestion = false;
                    this.ShowExceptionDialog = true;
                    this.FormFadeDuration = 100;
                    this._dpiSetup = false;
                    this.ToolTipPopupDelayMs = 1000;
                    this.ToolTipPopupStayOpenDelayPerWordMs = 250;
                }
            },
            methods: {
                GetCmToPixel: function (pixel) {
                    var ppcm = ExpressCraft.Settings.GetPixelPerCm();
                    if (pixel === 0 || ppcm === 0) {
                        return 0;
                    }
                    return ((Bridge.Int.div(pixel, ppcm)) | 0);
                },
                GetPixelPerCm: function () {
                    if (ExpressCraft.Settings._dpiSetup) {
                        return ExpressCraft.Settings._dpi;
                    }

                    var div = new ExpressCraft.Control.$ctor1();
                    div.Top = "-1000cm";
                    div.Left = "-1000cm";
                    div.Height = "1000cm";
                    div.Width = "1000cm";

                    ExpressCraft.Helper.AppendChild$1(document.body, div);
                    ExpressCraft.Settings._dpi = Bridge.Int.clip32(div.Content.getBoundingClientRect().height / 1000.0);
                    document.body.removeChild(ExpressCraft.Control.op_Implicit(div));
                    ExpressCraft.Settings._dpiSetup = true;
                    return ExpressCraft.Settings._dpi;
                },
                Setup: function () {
                    ExpressCraft.Settings.SetupStyleDefaults();
                },
                SetupStyleDefaults: function () {
                    try {
                        var sheets = document.styleSheets;
                        for (var i = 0; i < sheets.length; i = (i + 1) >>> 0) {
                            var ownerNode = sheets[i].ownerNode;
                            if (ownerNode == null) {
                                continue;
                            }
                            if (Bridge.referenceEquals(ownerNode.id.toLowerCase(), "expresscraft")) {
                                ExpressCraft.Settings.DefaultStyleSheet = sheets[i];
                            }
                            if (Bridge.referenceEquals(ownerNode.id.toLowerCase(), "expresscraftplugin")) {
                                ExpressCraft.Settings.PluginStyleSheet = sheets[i];
                            }
                            if (Bridge.referenceEquals(ownerNode.id.toLowerCase(), "resourcemanager")) {
                                ExpressCraft.Settings.resourceManangerSheets.add(sheets[i]);
                            }
                        }
                        if (ExpressCraft.Settings.DefaultStyleSheet == null) {
                            return;
                        }
                        var df = ExpressCraft.Settings.GetExpressStyleRuleValue("font", ".control");
                        if (df != null) {
                            ExpressCraft.Settings.DefaultFont = df;
                        }
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }
                },
                GetStyleRuleValue$1: function (cssFile, style, className) {
                    var $t;
                    try {
                        if (cssFile != null) {
                            $t = Bridge.getEnumerator(cssFile);
                            try {
                                while ($t.moveNext()) {
                                    var item = $t.Current;
                                    var value = ExpressCraft.Settings.GetStyleRuleValue(item, style, className);
                                    if (value != null) {
                                        return value;
                                    }
                                }
                            } finally {
                                if (Bridge.is($t, System.IDisposable)) {
                                    $t.System$IDisposable$Dispose();
                                }
                            }
                        }
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }
                    return null;
                },
                GetStyleRuleValue: function (cssFile, style, className) {
                    try {
                        if (cssFile != null) {
                            var pStyles = cssFile;
                            if (pStyles.cssRules) {
                                for (var i = 0; i < pStyles.cssRules.length; i = (i + 1) | 0) {
                                    var rule = pStyles.cssRules[i];
                                    if (rule.selectorText && !Bridge.referenceEquals(rule.selectorText.split(44).indexOf(className), -1)) {
                                        return rule.style[style];
                                    }
                                }
                            }
                        }
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }
                    return null;
                },
                GetExpressStyleRuleValue: function (style, className) {
                    var value = ExpressCraft.Settings.GetStyleRuleValue(ExpressCraft.Settings.PluginStyleSheet, style, className);
                    if (value == null) {
                        value = ExpressCraft.Settings.GetStyleRuleValue(ExpressCraft.Settings.DefaultStyleSheet, style, className);
                    }
                    return value;
                }
            }
        }
    });

    Bridge.define("ExpressCraft.Settings.DatePosition", {
        $kind: "nested enum",
        statics: {
            fields: {
                First: 0,
                Second: 1,
                Third: 2
            }
        }
    });

    Bridge.define("ExpressCraft.SheetCell", {
        fields: {
            _value: null,
            _sheet: null
        },
        props: {
            Value: {
                get: function () {
                    return this._value;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._value, value)) {
                        this._value = value;
                        this._sheet != null ? this._sheet.RequestRefresh() : null;
                    }
                }
            }
        },
        ctors: {
            ctor: function (sheet) {
                this.$initialize();
                this._sheet = sheet;
            }
        }
    });

    Bridge.define("ExpressCraft.SheetColumn", {
        fields: {
            _width: 0,
            _sheet: null
        },
        props: {
            Width: {
                get: function () {
                    return this._width;
                },
                set: function (value) {
                    if (this._width !== value) {
                        this._width = value;
                        this._sheet != null ? this._sheet.RequestRefresh() : null;
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this._width = 100;
            },
            ctor: function (sheet) {
                this.$initialize();
                this._sheet = sheet;
            }
        }
    });

    Bridge.define("ExpressCraft.SheetRow", {
        fields: {
            _height: 0,
            _sheet: null
        },
        props: {
            Height: {
                get: function () {
                    return this._height;
                },
                set: function (value) {
                    if (this._height !== value) {
                        this._height = value;
                        this._sheet != null ? this._sheet.RequestRefresh() : null;
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this._height = 22;
            },
            ctor: function (sheet) {
                this.$initialize();
                this._sheet = sheet;
            }
        }
    });

    Bridge.define("ExpressCraft.Size", {
        fields: {
            Width: 0,
            Height: 0
        }
    });

    Bridge.define("ExpressCraft.SizeF", {
        fields: {
            Width: 0,
            Height: 0
        },
        ctors: {
            $ctor1: function (width, height) {
                this.$initialize();
                this.Width = width;
                this.Height = height;
            },
            ctor: function (width, height) {
                this.$initialize();
                this.Width = width;
                this.Height = height;
            }
        },
        methods: {
            toString: function () {
                return System.String.format("{0}, {1}", Bridge.box(this.Width, System.Single, System.Single.format, System.Single.getHashCode), Bridge.box(this.Height, System.Single, System.Single.format, System.Single.getHashCode));
            }
        }
    });

    Bridge.define("ExpressCraft.SliderLocation", {
        $kind: "enum",
        statics: {
            fields: {
                Left: 0,
                Right: 1
            }
        }
    });

    Bridge.define("ExpressCraft.SortSetting", {
        fields: {
            Column: null,
            SortMode: 0
        }
    });

    Bridge.define("ExpressCraft.StringFormat");

    Bridge.define("ExpressCraft.TextBlock", {
        fields: {
            OriginalSource: null,
            MaxWidth: 0,
            ComputedHeight: 0,
            LinesComputed: 0,
            ElelemtsOverMax: false,
            MaxCalculatedWidth: 0
        },
        ctors: {
            init: function () {
                this.ElelemtsOverMax = false;
                this.MaxCalculatedWidth = 0;
            },
            ctor: function (source, maxWidth) {
                this.$initialize();
                this.OriginalSource = source;
                this.MaxWidth = maxWidth;
            }
        },
        methods: {
            ComputeString: function () {
                this.ElelemtsOverMax = false;
                var Lines = System.String.split(this.OriginalSource, System.Array.init([13, 10], System.Char).map(function (i) {{ return String.fromCharCode(i); }}));

                var sizePerChar = ExpressCraft.Control.GetTextWidth("M", ExpressCraft.Settings.DefaultFont);

                this.LinesComputed = 0;

                for (var i = 0; i < Lines.length; i = (i + 1) | 0) {
                    var line = Lines[System.Array.index(i, Lines)];

                    var lineWidth = ExpressCraft.Control.GetTextWidth(this.OriginalSource, ExpressCraft.Settings.DefaultFont);

                    if (lineWidth > this.MaxWidth) {
                        this.ElelemtsOverMax = true;
                        this.MaxCalculatedWidth = this.MaxWidth;
                        var yy = 0;
                        for (var x = 0; x < line.length; x = (x + 1) | 0) {
                            yy = (yy + 1) | 0;

                            if (yy * sizePerChar > this.MaxWidth) {
                                this.LinesComputed = (this.LinesComputed + 1) | 0;
                                yy = 0;
                            }
                        }

                        if (yy > 0) {
                            this.LinesComputed = (this.LinesComputed + 1) | 0;
                        }
                    } else {
                        this.LinesComputed = (this.LinesComputed + 1) | 0;
                        if (lineWidth > this.MaxCalculatedWidth) {
                            this.MaxCalculatedWidth = lineWidth;
                        }
                    }
                }
                this.ComputedHeight = this.GetFontSize(ExpressCraft.Settings.DefaultFont) * this.LinesComputed;
            },
            GetFontSize: function (fontWithSize) {
                var strs = System.String.split(fontWithSize, System.Array.init([32], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), null, 1);

                for (var i = 0; i < strs.length; i = (i + 1) | 0) {
                    if (System.String.endsWith(strs[System.Array.index(i, strs)], "pt")) {
                        return parseFloat(strs[System.Array.index(i, strs)]) * 1.333333;
                    } else if (System.String.endsWith(strs[System.Array.index(i, strs)], "px")) {
                        return parseFloat(strs[System.Array.index(i, strs)]);
                    }
                }

                return 10.9999971;
            }
        }
    });

    Bridge.define("ExpressCraft.TileViewState", {
        $kind: "enum",
        statics: {
            fields: {
                Hidden: 0,
                Visible: 1
            }
        }
    });

    Bridge.define("ExpressCraft.ToolTip", {
        fields: {
            Description: null,
            Heading: null,
            AttachedControl: null
        },
        ctors: {
            ctor: function (content) {
                this.$initialize();
                this.Description = content;
            },
            $ctor1: function (heading, description) {
                this.$initialize();
                this.Description = description;
                this.Heading = heading;
            }
        },
        methods: {
            GetWordCount: function () {
                var fullContent = System.String.concat(this.Heading, " ", this.Description).trim();
                var length = fullContent.length;
                var prevChar = 0;
                var builder = new System.Text.StringBuilder();
                var current;
                var WordCount = 1;
                for (var i = 0; i < length; i = (i + 1) | 0) {
                    current = fullContent.charCodeAt(i);
                    if (System.Char.isWhiteSpace(String.fromCharCode(current))) {
                        if (System.Char.isWhiteSpace(String.fromCharCode(prevChar))) {
                            prevChar = current;
                            continue;
                        } else {
                            WordCount = (WordCount + 1) | 0;
                        }
                    }
                    prevChar = current;
                }
                return WordCount;
            }
        }
    });

    Bridge.define("ExpressCraft.Vector2", {
        $kind: "struct",
        statics: {
            methods: {
                /**
                 * adds calc to (100% - 50px) turns to calc(100% - 50px)
                 *
                 * @static
                 * @this ExpressCraft.Vector2
                 * @memberof ExpressCraft.Vector2
                 * @param   {string}    a
                 * @return  {string}
                 */
                pf: function (a) {
                    return !System.String.isNullOrWhiteSpace(a) && System.String.startsWith(a, "(") && System.String.endsWith(a, ")") ? "calc" + (a || "") : a;
                },
                getDefaultValue: function () { return new ExpressCraft.Vector2(); }
            }
        },
        fields: {
            X: null,
            Y: null
        },
        props: {
            Xi: {
                get: function () {
                    return this.X;
                },
                set: function (value) {
                    this.X = value;
                }
            },
            Yi: {
                get: function () {
                    return this.Y;
                },
                set: function (value) {
                    this.Y = value;
                }
            },
            Xf: {
                get: function () {
                    return this.X;
                },
                set: function (value) {
                    this.X = value;
                }
            },
            Yf: {
                get: function () {
                    return this.Y;
                },
                set: function (value) {
                    this.Y = value;
                }
            }
        },
        ctors: {
            $ctor1: function (x, y) {
                this.$initialize();
                this.X = x;
                this.Y = y;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1955977157, this.X, this.Y]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, ExpressCraft.Vector2)) {
                    return false;
                }
                return Bridge.equals(this.X, o.X) && Bridge.equals(this.Y, o.Y);
            },
            $clone: function (to) {
                var s = to || new ExpressCraft.Vector2();
                s.X = this.X;
                s.Y = this.Y;
                return s;
            }
        }
    });

    Bridge.define("ExpressCraft.Vector4", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new ExpressCraft.Vector4(); }
            }
        },
        fields: {
            X: null,
            Y: null,
            Z: null,
            M: null
        },
        props: {
            Xi: {
                get: function () {
                    return this.X;
                },
                set: function (value) {
                    this.X = value;
                }
            },
            Yi: {
                get: function () {
                    return this.Y;
                },
                set: function (value) {
                    this.Y = value;
                }
            },
            Zi: {
                get: function () {
                    return this.Z;
                },
                set: function (value) {
                    this.Z = value;
                }
            },
            Mi: {
                get: function () {
                    return this.M;
                },
                set: function (value) {
                    this.M = value;
                }
            },
            Xf: {
                get: function () {
                    return this.X;
                },
                set: function (value) {
                    this.X = value;
                }
            },
            Yf: {
                get: function () {
                    return this.Y;
                },
                set: function (value) {
                    this.Y = value;
                }
            },
            Zf: {
                get: function () {
                    return this.Z;
                },
                set: function (value) {
                    this.Z = value;
                }
            },
            Mf: {
                get: function () {
                    return this.M;
                },
                set: function (value) {
                    this.M = value;
                }
            }
        },
        ctors: {
            $ctor1: function (x, y, z, m) {
                this.$initialize();
                this.X = x;
                this.Y = y;
                this.Z = z;
                this.M = m;
            },
            $ctor2: function (a, b) {
                this.$initialize();
                this.X = a.X;
                this.Y = a.Y;
                this.Z = b.X;
                this.M = b.Y;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1956108229, this.X, this.Y, this.Z, this.M]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, ExpressCraft.Vector4)) {
                    return false;
                }
                return Bridge.equals(this.X, o.X) && Bridge.equals(this.Y, o.Y) && Bridge.equals(this.Z, o.Z) && Bridge.equals(this.M, o.M);
            },
            $clone: function (to) {
                var s = to || new ExpressCraft.Vector4();
                s.X = this.X;
                s.Y = this.Y;
                s.Z = this.Z;
                s.M = this.M;
                return s;
            }
        }
    });

    Bridge.define("ExpressCraft.WindowStateType", {
        $kind: "enum",
        statics: {
            fields: {
                Normal: 0,
                Minimized: 1,
                Maximized: 2
            }
        }
    });

    Bridge.define("ExpressCraft.xaml.XAMLDefinitions", {
        statics: {
            fields: {
                HasLoaded: false,
                XAMLFiles: null
            },
            ctors: {
                init: function () {
                    this.XAMLFiles = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                }
            },
            methods: {
                BuildUI: function (page) {
                    if (!ExpressCraft.xaml.XAMLDefinitions.HasLoaded) {
                        return;
                    }

                    var fileName = (Bridge.Reflection.getTypeName(Bridge.getType(page)).toLowerCase() || "") + ".xaml";

                    if (ExpressCraft.xaml.XAMLDefinitions.XAMLFiles.containsKey(fileName)) {
                        var file = ExpressCraft.xaml.XAMLDefinitions.XAMLFiles.get(fileName);

                        var xmlDoc = new DOMParser();
                        var document = xmlDoc.parseFromString(file, "text/xml");

                        ExpressCraft.xaml.XAMLDefinitions.ApplyDocument(page, document.documentElement, Bridge.Reflection.getMembers(Bridge.getType(page), 8, 36), page, true);
                    }
                },
                GetNamespace: function (namespaceURI) {
                    if (System.String.isNullOrWhiteSpace(namespaceURI) || !System.String.contains(namespaceURI,"clr-namespace:") || !System.String.contains(namespaceURI,";")) {
                        return namespaceURI;
                    }
                    return System.Linq.Enumerable.from(System.String.split(System.String.replaceAll(namespaceURI, "clr-namespace:", ""), [59].map(function (i) {{ return String.fromCharCode(i); }}))).firstOrDefault(null, null);
                },
                ApplyDocument: function (control, element, pageMethods, Page, parent) {
                    if (parent === void 0) { parent = false; }
                    var child = null;
                    if (!parent) {
                        var x = ExpressCraft.xaml.XAMLDefinitions.GetNamespace(element.namespaceURI);
                        if (System.String.isNullOrWhiteSpace(x)) {
                            x = element.tagName;

                        } else {
                            x = (x || "") + "." + (element.tagName || "");
                        }
                        child = Bridge.unbox(Bridge.createInstance(Bridge.Reflection.getType(x)));
                    } else {
                        child = control;
                    }
                    var fields = Bridge.Reflection.getMembers(Bridge.getType(child), 4, 28);
                    var props = Bridge.Reflection.getMembers(Bridge.getType(child), 16, 28);

                    var events = Bridge.Reflection.getMembers(Bridge.getType(child), 2, 28);
                    for (var i = 0; i < element.attributes.length; i = (i + 1) >>> 0) {
                        try {
                            var attribute = element.attributes[i];
                            var found = false;
                            for (var j = 0; j < fields.length; j = (j + 1) | 0) {
                                if (Bridge.referenceEquals(fields[System.Array.index(j, fields)].n, attribute.nodeName)) {
                                    Bridge.Reflection.fieldAccess(fields[System.Array.index(j, fields)], child, attribute.value);
                                    found = true;
                                    break;
                                }
                            }

                            if (!found) {
                                for (var j1 = 0; j1 < props.length; j1 = (j1 + 1) | 0) {
                                    if (Bridge.referenceEquals(props[System.Array.index(j1, props)].n, attribute.nodeName)) {
                                        Bridge.Reflection.midel(props[System.Array.index(j1, props)].s, child)(attribute.value);
                                        found = true;
                                        break;
                                    }
                                }
                            }
                            if (!found && !System.String.isNullOrWhiteSpace(attribute.nodeName)) {
                                for (var j2 = 0; j2 < events.length; j2 = (j2 + 1) | 0) {
                                    if (Bridge.referenceEquals(events[System.Array.index(j2, events)].n, attribute.nodeName)) {
                                        for (var jj = 0; jj < pageMethods.length; jj = (jj + 1) | 0) {
                                            if (Bridge.referenceEquals(pageMethods[System.Array.index(jj, pageMethods)].n, attribute.value)) {
                                                Bridge.Reflection.midel(events[System.Array.index(j2, events)].ad, child)(Bridge.Reflection.midel(pageMethods[System.Array.index(jj, pageMethods)], Page));



                                                break;
                                            }
                                        }
                                        break;
                                    }
                                }
                            }
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);

                        }

                    }

                    if (element.childElementCount > 0) {
                        for (var i1 = 0; i1 < element.childElementCount; i1 = (i1 + 1) >>> 0) {
                            ExpressCraft.xaml.XAMLDefinitions.ApplyDocument(child, element.children[i1], pageMethods, Page, false);
                        }
                    }

                    if (!parent) {
                        control.add(child);
                    }
                },
                Load: function (ass) {
                    var $t;
                    if (ExpressCraft.xaml.XAMLDefinitions.HasLoaded) {
                        return;
                    }

                    try {

                        $t = Bridge.getEnumerator(ass.getManifestResourceNames());
                        try {
                            while ($t.moveNext()) {
                                var item = $t.Current;
                                if (!System.String.endsWith(item.toLowerCase(), ".xaml")) {
                                    continue;
                                }
                                var doc = window.atob(ass.getManifestResourceDataAsBase64(item));
                                if (System.String.startsWith(doc, "Ã¯Â»Â¿")) {
                                    doc = doc.substr(("Ã¯Â»Â¿").length);
                                }
                                var name = item;
                                if (System.String.startsWith(name, (ass.name || "") + ".")) {
                                    name = name.substr(((ass.name.length + 1) | 0));
                                }
                                ExpressCraft.xaml.XAMLDefinitions.XAMLFiles.set(name.toLowerCase(), doc);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);

                    }

                    ExpressCraft.xaml.XAMLDefinitions.HasLoaded = true;
                }
            }
        }
    });

    Bridge.define("ExpressCraft.AceCodeEditor", {
        inherits: [ExpressCraft.Control],
        statics: {
            fields: {
                ExternalAceCodeEditor: null
            },
            ctors: {
                init: function () {
                    this.ExternalAceCodeEditor = new ExpressCraft.ExternalPlugin("https://cdnjs.cloudflare.com/ajax/libs/ace/1.0.0/ace.js");
                }
            },
            methods: {
                Setup: function () {
                    ExpressCraft.AceCodeEditor.ExternalAceCodeEditor.Setup();
                }
            }
        },
        fields: {
            editor: null,
            _modeType: 0,
            _themeType: 0,
            OnFocus: null,
            OnBlur: null
        },
        props: {
            ReadOnly: {
                get: function () {
                    return this.editor.getReadOnly();
                },
                set: function (value) {
                    this.editor.setReadOnly(value);
                }
            },
            Source: {
                get: function () {
                    return this.editor.getValue();
                },
                set: function (value) {
                    this.editor.setValue(value);
                }
            }
        },
        ctors: {
            ctor: function (modeType, themeType) {
                if (modeType === void 0) { modeType = 17; }
                if (themeType === void 0) { themeType = 11; }

                this.$initialize();
                ExpressCraft.Control.$ctor1.call(this);
                this._modeType = modeType;
                this._themeType = themeType;
            }
        },
        methods: {
            ClearSelection: function () {
                this.editor.clearSelection();
            },
            Render: function () {
                ExpressCraft.AceCodeEditor.ExternalAceCodeEditor.UsageCheck();

                var theme = System.Enum.format(ExpressCraft.AceThemeTypes, this._themeType, "G");
                var mode = System.Enum.format(ExpressCraft.AceModeTypes, this._modeType, "G");

                			this.editor = ace.edit(this.Content);
                			this.editor.setTheme("ace/theme/" + theme);
                			this.editor.getSession().setMode("ace/mode/" + mode);
                            this.editor.on("focus", function() {
                                if(this.OnFocus != null)
                                {
                                    this.OnFocus();                    
                                }            
                            });
                            this.editor.on("blur", function() {
                                if(this.OnBlur != null)
                                {
                                    this.OnBlur();                    
                                }            
                            });
                			
                this.OnResize = function (cont) {
                    				this.editor.resize(true);
                    				
                };

                this.Content.addEventListener("mousedown", function (ev) {
                    ExpressCraft.Form.InExternalMouseEvent = true;
                });

                this.Content.addEventListener("mouseup", function (ev) {
                    ExpressCraft.Form.InExternalMouseEvent = false;
                });

                ExpressCraft.Control.prototype.Render.call(this);
            }
        }
    });

    Bridge.define("ExpressCraft.Form", {
        inherits: [ExpressCraft.Control],
        statics: {
            fields: {
                WindowHolder: null,
                MinimizedForms: null,
                WindowLoader: null,
                _activeToolTip: null,
                _toolTipTimerHandle: 0,
                _activeToolTipMouseMove: null,
                _activeToolTipControl: null,
                _oepntoolTipTimerHandle: 0,
                KeyHooks: null,
                ResizeCorners: 0,
                MovingForm: null,
                Parent: null,
                Mouse_Down: false,
                MenuOpen: false,
                FormOverLay: null,
                _hasSetup: false,
                InExternalMouseEvent: false,
                InErrorDialog: false,
                standAloneForms: null,
                FormCollections: null,
                ShowBodyOverLay: false,
                Window_DefaultHeight: 0,
                Window_DefaultWidth: 0,
                _ActiveForm: null,
                _PrevActiveForm: null,
                MoveAction: 0,
                WindowHolderSelectionBoxX: 0,
                WindowHolderSelectionBoxY: 0,
                WindowHolderSelectionBoxXOff: 0,
                WindowHolderSelectionBoxYOff: 0,
                LoadingCount: 0,
                ToClean: null
            },
            props: {
                ActiveToolTip: {
                    get: function () {
                        return ExpressCraft.Form._activeToolTip;
                    },
                    set: function (value) {
                        if (!Bridge.referenceEquals(ExpressCraft.Form._activeToolTip, value)) {
                            if (value != null && value.AttachedControl != null && value.AttachedControl.Content != null) {
                                if (!Bridge.staticEquals(ExpressCraft.Form._activeToolTipMouseMove, null)) {
                                    value.AttachedControl.Content.removeEventListener("mousemove", ExpressCraft.Form._activeToolTipMouseMove);
                                    ExpressCraft.Form._activeToolTipMouseMove = null;
                                }
                            }
                            if (ExpressCraft.Form._activeToolTipControl != null) {
                                ExpressCraft.Form._activeToolTipControl.Close();
                                ExpressCraft.Form._activeToolTipControl = null;
                            }
                            if (ExpressCraft.Form._toolTipTimerHandle > -1) {
                                clearTimeout(ExpressCraft.Form._toolTipTimerHandle);
                                ExpressCraft.Form._toolTipTimerHandle = -1;
                            }

                            ExpressCraft.Form._activeToolTip = value;

                            var messageLength;
                            if (ExpressCraft.Form._activeToolTip != null && ((messageLength = ExpressCraft.Form._activeToolTip.GetWordCount())) > 0 && ExpressCraft.Form._activeToolTip.AttachedControl != null) {
                                ExpressCraft.Form._activeToolTipMouseMove = function (ev) {
                                    if (ExpressCraft.Form._toolTipTimerHandle > -1) {
                                        clearTimeout(ExpressCraft.Form._toolTipTimerHandle);
                                    }
                                    ExpressCraft.Form._toolTipTimerHandle = Bridge.Int.clip32(setTimeout(function (ab) {
                                        if (ExpressCraft.Form._activeToolTipControl != null) {
                                            ExpressCraft.Form._activeToolTipControl.Close();
                                            ExpressCraft.Form._activeToolTipControl = null;
                                        }
                                        if (ExpressCraft.Form._oepntoolTipTimerHandle > -1) {
                                            clearTimeout(ExpressCraft.Form._oepntoolTipTimerHandle);
                                            ExpressCraft.Form._oepntoolTipTimerHandle = -1;
                                        }
                                        ExpressCraft.Form._activeToolTipControl = new ExpressCraft.ToolTipControl(ExpressCraft.Form._activeToolTip);
                                        ExpressCraft.Form._activeToolTipControl.Show(ev);

                                        ExpressCraft.Form._oepntoolTipTimerHandle = Bridge.Int.clip32(setTimeout(function (ab2) {
                                            if (ExpressCraft.Form._activeToolTipControl != null) {
                                                ExpressCraft.Form._activeToolTipControl.Close();
                                                ExpressCraft.Form._activeToolTipControl = null;
                                            }
                                        }, Math.max(1000, Bridge.Int.mul(messageLength, Math.max(ExpressCraft.Settings.ToolTipPopupStayOpenDelayPerWordMs, 10)))));

                                        if (!Bridge.staticEquals(ExpressCraft.Form._activeToolTipMouseMove, null)) {
                                            value.AttachedControl.Content.removeEventListener("mousemove", ExpressCraft.Form._activeToolTipMouseMove);
                                            ExpressCraft.Form._activeToolTipMouseMove = null;
                                        }
                                    }, Math.max(1, ExpressCraft.Settings.ToolTipPopupDelayMs)));
                                };
                                value.AttachedControl.Content.addEventListener("mousemove", ExpressCraft.Form._activeToolTipMouseMove);
                            }
                        }
                    }
                },
                ActiveForm: {
                    get: function () {
                        return ExpressCraft.Form._ActiveForm;
                    },
                    set: function (value) {
                        if (!Bridge.referenceEquals(ExpressCraft.Form._ActiveForm, value)) {
                            ExpressCraft.Form._PrevActiveForm = ExpressCraft.Form._ActiveForm;

                            if (ExpressCraft.Form._ActiveForm != null) {
                                ExpressCraft.Form._ActiveForm.OnLostFocus();
                                if (ExpressCraft.Form._ActiveForm.Content != null) {
                                    if (ExpressCraft.Form._ActiveForm.InDesign) {
                                        ExpressCraft.Form._ActiveForm.BodyOverLay.style.visibility = "collapse";
                                        return;
                                    }
                                    ExpressCraft.Form._ActiveForm.BodyOverLay.style.visibility = "visible";
                                }
                            }
                            ExpressCraft.Form._ActiveForm = value;
                            if (ExpressCraft.Form._ActiveForm != null) {
                                ExpressCraft.Form._ActiveForm.OnGotFocus();
                                if (ExpressCraft.Form._ActiveForm.Content != null) {
                                    ExpressCraft.Form._ActiveForm.BodyOverLay.style.visibility = "collapse";
                                    ExpressCraft.Form._ActiveForm.BringToFront();
                                }
                            }
                            if (Bridge.is(ExpressCraft.Form._PrevActiveForm, ExpressCraft.FormPopup) && ((ExpressCraft.Form._ActiveForm != null && !(Bridge.is(ExpressCraft.Form._ActiveForm, ExpressCraft.FormPopup))) || ExpressCraft.Form._ActiveForm == null)) {
                                ExpressCraft.Form.CloseFormPopups();
                            }
                        }
                    }
                }
            },
            ctors: {
                init: function () {
                    this.MinimizedForms = new (System.Collections.Generic.List$1(ExpressCraft.Form)).ctor();
                    this._toolTipTimerHandle = -1;
                    this._oepntoolTipTimerHandle = -1;
                    this.KeyHooks = new (System.Collections.Generic.List$1(Function)).ctor();
                    this.ResizeCorners = 2;
                    this.Mouse_Down = false;
                    this.MenuOpen = false;
                    this._hasSetup = false;
                    this.InExternalMouseEvent = false;
                    this.InErrorDialog = false;
                    this.standAloneForms = new ExpressCraft.FormCollection(null);
                    this.FormCollections = new (System.Collections.Generic.List$1(ExpressCraft.FormCollection)).ctor();
                    this.ShowBodyOverLay = false;
                    this.Window_DefaultHeight = 480;
                    this.Window_DefaultWidth = 640;
                    this.MoveAction = ExpressCraft.MouseMoveAction.Move;
                    this.LoadingCount = 0;
                    this.ToClean = new (System.Collections.Generic.List$1(ExpressCraft.Form)).ctor();
                }
            },
            methods: {
                MidleOfAction: function () {
                    return ExpressCraft.Form.MovingForm != null;
                },
                GetActiveFormCollection: function () {
                    for (var i = (ExpressCraft.Form.FormCollections.Count - 1) | 0; i >= 0; i = (i - 1) | 0) {
                        var frmCol = ExpressCraft.Form.FormCollections.getItem(i);
                        if (frmCol.FormOwner == null) {
                            for (var x = 0; x < frmCol.VisibleForms.Count; x = (x + 1) | 0) {
                                if (frmCol.VisibleForms.getItem(x) != null) {
                                    frmCol.VisibleForms.getItem(x).Close();
                                }
                            }
                            ExpressCraft.Form.FormCollections.removeAt(i);
                        } else {
                            return frmCol;
                        }
                    }

                    return null;
                },
                SetBodyOverLay: function () {
                    var ActiveCollection = ExpressCraft.Form.GetActiveFormCollection();
                    if (ActiveCollection == null) {
                        return;
                    }

                    ActiveCollection.FormOwner.ShowBodyOverLayStyle();

                    var VisibleForms = ActiveCollection.VisibleForms;

                    for (var i = 0; i < VisibleForms.Count; i = (i + 1) | 0) {
                        var form = VisibleForms.getItem(i);
                        if (form != null) {
                            form.ShowBodyOverLayStyle();
                        }
                    }
                },
                ChangeStateTextSelection: function (element, state) {
                    element.style.userSelect = state ? "text" : "none";
                },
                PerformFocusShake: function () {
                    if (ExpressCraft.Form.ActiveForm != null) {
                        var form = ExpressCraft.Form.ActiveForm;
                        form.Heading.classList.add("form-heading-flash");
                        setTimeout(function (ab) {
                            form.Heading.classList.remove("form-heading-flash");
                        }, 800);
                    }
                },
                DisableStateDrag: function (element) {
                    if (element) {
                        element.ondragstart = function (ev) {
                            ev.preventDefault();
                        };
                    } else {
                        var el = element;
                        el.style.webkitUserDrag = "none";
                    }
                },
                SetupHideElementsOnView: function () {
                    window.onblur = function (ev) {
                        if (document.body.contains(ExpressCraft.Form.WindowHolder)) {
                            document.body.removeChild(ExpressCraft.Form.WindowHolder);
                        }
                    };

                    window.onfocus = function (ev) {
                        if (!document.body.contains(ExpressCraft.Form.WindowHolder)) {
                            document.body.appendChild(ExpressCraft.Form.WindowHolder);
                        }
                    };
                },
                CloseFormPopups: function () {
                    try {
                        var x = ExpressCraft.Form.GetActiveFormCollection();

                        for (var i = 0; i < x.VisibleForms.Count; i = (i + 1) | 0) {
                            if (x.VisibleForms.getItem(i) != null && Bridge.is(x.VisibleForms.getItem(i), ExpressCraft.FormPopup) && x.VisibleForms.getItem(i).IsContentVisible()) {
                                x.VisibleForms.getItem(i).Close();
                            }
                        }
                        if (Bridge.is(x.FormOwner, ExpressCraft.FormPopup)) {
                            x.FormOwner.Close();
                        }
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }
                },
                BeginLoading: function () {
                    ExpressCraft.Form.LoadingCount = (ExpressCraft.Form.LoadingCount + 1) | 0;
                    ExpressCraft.Form.SetCursor("wait");
                    ExpressCraft.Form.WindowLoader.style.visibility = "visible";
                    ExpressCraft.Form.WindowLoader.style.opacity = "0.4";
                },
                EndLoading: function () {
                    ExpressCraft.Form.LoadingCount = (ExpressCraft.Form.LoadingCount - 1) | 0;
                    if (ExpressCraft.Form.LoadingCount === 0) {
                        ExpressCraft.Form.SetCursor("default");
                        ExpressCraft.Form.WindowLoader.style.visibility = "hidden";
                        ExpressCraft.Form.WindowLoader.style.opacity = "0";
                    }
                },
                Setup: function (parent) {
                    if (parent === void 0) { parent = null; }
                    if (ExpressCraft.Form._hasSetup) {
                        return;
                    }
                    ExpressCraft.Form._hasSetup = true;

                    if (parent == null) {
                        ExpressCraft.Form.Parent = document.body;
                    } else {
                        ExpressCraft.Form.Parent = parent;
                    }

                    ExpressCraft.Form.WindowHolder = ExpressCraft.Control.Div$1("form-container");

                    ExpressCraft.Form.FormOverLay = ExpressCraft.Control.Div$1("system-form-collection-overlay");

                    ExpressCraft.Form.WindowLoader = document.createElement("div");
                    ExpressCraft.Form.WindowLoader.className = "ajax-loading-screen";
                    ExpressCraft.Form.WindowLoader.style.visibility = "hidden";
                    ExpressCraft.Form.WindowLoader.style.opacity = "0";
                    ExpressCraft.Form.WindowLoader.style.backgroundColor = "white";
                    ExpressCraft.Helper.SetBoundsFull$1(ExpressCraft.Form.WindowLoader);
                    ExpressCraft.Form.WindowLoader.style.position = "fixed";
                    ExpressCraft.Form.WindowLoader.style.zIndex = "100000";
                    ExpressCraft.Form.WindowLoader.oncontextmenu = function (ev) {
                        ev.preventDefault();
                    };
                    ExpressCraft.Form.WindowLoader.onmousedown = function (ev) {
                        ev.preventDefault();
                        ev.stopPropagation();
                    };
                    ExpressCraft.Form.WindowLoader.style.transition = "opacity 1s ease";

                    document.body.appendChild(ExpressCraft.Form.WindowLoader);

                    ExpressCraft.Form.FormOverLay.onmousedown = function (ev) {
                        if (Bridge.is(ExpressCraft.Form.ActiveForm, ExpressCraft.FormPopup)) {
                            ExpressCraft.Form.CloseFormPopups();
                        }

                        if (document.activeElement != null) {
                            document.activeElement.focus();
                            ev.preventDefault();
                            ExpressCraft.Form.SetCursor("default");
                        }
                    };
                    ExpressCraft.Form.FormOverLay.onclick = function (ev) {
                        ExpressCraft.Form.PerformFocusShake();
                    };
                    ExpressCraft.Form.FormOverLay.oncontextmenu = function (ev) {
                        ev.stopPropagation();
                        ev.preventDefault();
                    };
                    ExpressCraft.Form.FormOverLay.style.visibility = "visible";

                    window.onkeydown = function (ev) {
                        var length = ExpressCraft.Form.KeyHooks.Count;
                        for (var i = 0; i < length; i = (i + 1) | 0) {
                            if (!Bridge.staticEquals(ExpressCraft.Form.KeyHooks.getItem(i), null)) {
                                ExpressCraft.Form.KeyHooks.getItem(i)(ev);
                            }
                        }
                    };

                    window.onresize = function (ev) {
                        if (ExpressCraft.Form.FormCollections == null) {
                            return;
                        }

                        for (var i = 0; i < ExpressCraft.Form.FormCollections.Count; i = (i + 1) | 0) {
                            if (ExpressCraft.Form.FormCollections.getItem(i) == null) {
                                continue;
                            }
                            var fc = ExpressCraft.Form.FormCollections.getItem(i);
                            if (fc.FormOwner != null) {
                                fc.FormOwner.Resizing();
                            }
                            for (var x = 0; x < fc.VisibleForms.Count; x = (x + 1) | 0) {
                                if (fc.VisibleForms.getItem(x) != null) {
                                    fc.VisibleForms.getItem(x).Resizing();
                                }
                            }
                        }

                        ExpressCraft.Form.CalculateMinmizedFormsLocation();
                    };

                    window.onmousemove = function (ev) {
                        if (ExpressCraft.Form.InExternalMouseEvent) {
                            return;
                        }

                        var mev = ev;

                        if (ExpressCraft.Form.MovingForm != null) {
                            ev.preventDefault();
                            ev.stopImmediatePropagation();
                            ev.stopPropagation();

                            if (!ExpressCraft.Form.MovingForm.DisableBoxShadow) {
                                ExpressCraft.Form.MovingForm.Style.boxShadow = "none";
                            }

                            if (System.String.equals(ExpressCraft.Form.MovingForm.BodyOverLay.style.visibility, "collapse")) {
                                if (ExpressCraft.Form.MovingForm.InDesign) {
                                    ExpressCraft.Form._ActiveForm.BodyOverLay.style.visibility = "collapse";
                                } else {
                                    ExpressCraft.Form.MovingForm.BodyOverLay.style.visibility = "visible";
                                }

                                ExpressCraft.Form.MovingForm.Heading.focus();
                            }

                            var mousePos = ExpressCraft.Helper.GetClientMouseLocation(ev);

                            var mX;
                            var mY;

                            var newX = (((mX = mousePos.Xf)) + ExpressCraft.Form.MovingForm.prev_px);
                            var newY = (((mY = mousePos.Yf)) + ExpressCraft.Form.MovingForm.prev_py);

                            if (ExpressCraft.Form.MovingForm.windowState === ExpressCraft.WindowStateType.Maximized && ExpressCraft.Form.MoveAction === ExpressCraft.MouseMoveAction.Move) {
                                ExpressCraft.Form.MovingForm.changeWindowState();
                                newX = mousePos.Xf - (((Bridge.Int.div(ExpressCraft.Form.MovingForm.prev_width, 2)) | 0));
                                ExpressCraft.Form.MovingForm.prev_px = newX - mousePos.Xf;
                            }

                            var x = parseFloat(ExpressCraft.Form.MovingForm.Style.left);
                            var y = parseFloat(ExpressCraft.Form.MovingForm.Style.top);
                            var w = parseFloat(ExpressCraft.Form.MovingForm.Style.width);
                            var h = parseFloat(ExpressCraft.Form.MovingForm.Style.height);

                            var px = x;
                            var py = y;
                            var pw = w;
                            var ph = h;

                            if (newY < 1) {
                                newY = 1;
                            }
                            if (newX < 1) {
                                newX = 1;
                            }

                            if (mX < 1) {
                                mX = 1;
                            }
                            if (mY < 1) {
                                mY = 1;
                            }

                            switch (ExpressCraft.Form.MoveAction) {
                                case ExpressCraft.MouseMoveAction.Move: 
                                    x = newX;
                                    y = newY;
                                    break;
                                case ExpressCraft.MouseMoveAction.TopLeftResize: 
                                    w -= newX - x;
                                    h -= newY - y;
                                    if (w < ExpressCraft.Form.MovingForm.MinWidth) {
                                        newX -= ExpressCraft.Form.MovingForm.MinWidth - w;
                                        w = ExpressCraft.Form.MovingForm.MinWidth;
                                    }
                                    if (h < ExpressCraft.Form.MovingForm.MinHeight) {
                                        newY -= ExpressCraft.Form.MovingForm.MinHeight - h;
                                        h = ExpressCraft.Form.MovingForm.MinHeight;
                                    }
                                    x = newX;
                                    y = newY;
                                    break;
                                case ExpressCraft.MouseMoveAction.TopResize: 
                                    h -= newY - y;
                                    if (h < ExpressCraft.Form.MovingForm.MinHeight) {
                                        newY -= ExpressCraft.Form.MovingForm.MinHeight - h;
                                        h = ExpressCraft.Form.MovingForm.MinHeight;
                                    }
                                    y = newY;
                                    break;
                                case ExpressCraft.MouseMoveAction.TopRightResize: 
                                    h -= newY - y;
                                    w = mX - x;
                                    if (h < ExpressCraft.Form.MovingForm.MinHeight) {
                                        newY -= ExpressCraft.Form.MovingForm.MinHeight - h;
                                        h = ExpressCraft.Form.MovingForm.MinHeight;
                                    }
                                    if (w < ExpressCraft.Form.MovingForm.MinWidth) {
                                        w = ExpressCraft.Form.MovingForm.MinWidth;
                                    }
                                    y = newY;
                                    break;
                                case ExpressCraft.MouseMoveAction.LeftResize: 
                                    w -= newX - x;
                                    if (w < ExpressCraft.Form.MovingForm.MinWidth) {
                                        newX -= ExpressCraft.Form.MovingForm.MinWidth - w;
                                        w = ExpressCraft.Form.MovingForm.MinWidth;
                                    }
                                    x = newX;
                                    break;
                                case ExpressCraft.MouseMoveAction.BottomLeftResize: 
                                    w -= newX - x;
                                    h = mY - y;
                                    if (w < ExpressCraft.Form.MovingForm.MinWidth) {
                                        newX -= ExpressCraft.Form.MovingForm.MinWidth - w;
                                        w = ExpressCraft.Form.MovingForm.MinWidth;
                                    }
                                    if (h < ExpressCraft.Form.MovingForm.MinHeight) {
                                        h = ExpressCraft.Form.MovingForm.MinHeight;
                                    }
                                    x = newX;
                                    break;
                                case ExpressCraft.MouseMoveAction.BottomResize: 
                                    h = mY - y;
                                    if (h < ExpressCraft.Form.MovingForm.MinHeight) {
                                        h = ExpressCraft.Form.MovingForm.MinHeight;
                                    }
                                    break;
                                case ExpressCraft.MouseMoveAction.RightResize: 
                                    w = mX - x;
                                    if (w < ExpressCraft.Form.MovingForm.MinWidth) {
                                        w = ExpressCraft.Form.MovingForm.MinWidth;
                                    }
                                    break;
                                case ExpressCraft.MouseMoveAction.BottomRightResize: 
                                    w = mX - x;
                                    h = mY - y;
                                    if (h < ExpressCraft.Form.MovingForm.MinHeight) {
                                        h = ExpressCraft.Form.MovingForm.MinHeight;
                                    }
                                    if (w < ExpressCraft.Form.MovingForm.MinWidth) {
                                        w = ExpressCraft.Form.MovingForm.MinWidth;
                                    }
                                    break;
                            }
                            var changed = false;
                            if (px !== x) {
                                if (ExpressCraft.Settings.AlignFormToGrid && ExpressCraft.Form.MoveAction === ExpressCraft.MouseMoveAction.Move && ExpressCraft.Settings.AlignmentForForm > 1 && x !== 0) {
                                    x = Bridge.Int.mul((Bridge.Int.clip32(x / ExpressCraft.Settings.AlignmentForForm)), ExpressCraft.Settings.AlignmentForForm);
                                    if (px !== x) {
                                        ExpressCraft.Form.MovingForm.Style.left = x + 'px';
                                    }
                                } else {
                                    ExpressCraft.Form.MovingForm.Style.left = x + 'px';
                                }
                            }

                            if (py !== y) {
                                if (ExpressCraft.Settings.AlignFormToGrid && ExpressCraft.Form.MoveAction === ExpressCraft.MouseMoveAction.Move && ExpressCraft.Settings.AlignmentForForm > 1 && y !== 0) {
                                    y = Bridge.Int.mul((Bridge.Int.clip32(y / ExpressCraft.Settings.AlignmentForForm)), ExpressCraft.Settings.AlignmentForForm);
                                    if (py !== y) {
                                        ExpressCraft.Form.MovingForm.Style.top = y + 'px';
                                    }
                                } else {
                                    ExpressCraft.Form.MovingForm.Style.top = y + 'px';
                                }
                            }

                            if (pw !== w) {
                                changed = true;
                                ExpressCraft.Form.MovingForm.Style.width = w + 'px';
                            }

                            if (ph !== h) {
                                changed = true;
                                ExpressCraft.Form.MovingForm.Style.height = h + 'px';
                            }

                            if (changed) {
                                ExpressCraft.Form.MovingForm.Resizing();
                            }
                        }
                    };

                    window.onmouseup = function (ev) {
                        ExpressCraft.Form.InExternalMouseEvent = false;
                        if (ExpressCraft.Form.MovingForm != null) {
                            if (!ExpressCraft.Form.MovingForm.DisableBoxShadow) {
                                ExpressCraft.Form.MovingForm.Style.boxShadow = null;
                            }
                            ExpressCraft.Form.MovingForm.BodyOverLay.style.visibility = "collapse";
                        }

                        ExpressCraft.Form.MovingForm = null;
                        ExpressCraft.Form.Mouse_Down = false;
                        ExpressCraft.Form.MoveAction = ExpressCraft.MouseMoveAction.Move;
                        ExpressCraft.Form.SetCursor("default");
                    };
                    window.onbeforeunload = function (ev) {
                        if (!ExpressCraft.Settings.AllowCloseWithoutQuestion) {
                            return 'Would you like to close this application?';
                        }
                    };
                    window.onunload = function (ev) {
                        if (!Bridge.staticEquals(ExpressCraft.Settings.OnApplicationClose, null)) {
                            ExpressCraft.Settings.OnApplicationClose();
                        }
                    };

                    var window2 = window;

                    var errorFunc = function (message, url, lineNumber, columnNumber, error) {
                        if (ExpressCraft.Form.InErrorDialog) {
                            return false;
                        }
                        try {
                            ExpressCraft.Form.InErrorDialog = true;
                            var errStr;
                            if (System.String.isNullOrWhiteSpace(message) || Bridge.referenceEquals(message, "Script error.")) {
                                errStr = "Script Error: See Browser Console for Detail's";
                            } else {
                                errStr = "Script Error: " + (message || "");
                            }

                            if (ExpressCraft.Application.AplicationDefition === ExpressCraft.ApplicationDefitnion.ExpressCraftConsole) {
                                ExpressCraft.ConsoleForm.Log(errStr, ExpressCraft.ConsoleLogType.Error);
                            }

                            if (ExpressCraft.Settings.ShowExceptionDialog) {
                                var msgBox = new ExpressCraft.MessageBoxForm.ctor(errStr, ExpressCraft.MessageBoxLayout.Error);
                                msgBox.ShowDialog();
                            }
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                        } finally {
                            ExpressCraft.Form.InErrorDialog = false;
                        }

                        return false;
                    };

                    window2.onerror = errorFunc;

                    ExpressCraft.Form.WindowHolder.appendChild(ExpressCraft.Form.FormOverLay);

                    ExpressCraft.Helper.AppendChildren$2(ExpressCraft.Form.Parent, [ExpressCraft.Form.WindowHolder]);
                },
                SetCursor: function (cursor) {
                    document.body.style.cursor = cursor;
                    var x = document.body.style.backgroundColor;
                    document.body.style.backgroundColor = "white";
                    document.body.style.backgroundColor = x;
                },
                CalculateMinmizedFormsLocation: function () {
                    var $t, $t1;
                    if (ExpressCraft.Form.MinimizedForms.Count > 0 && ExpressCraft.Form.MinimizedForms.contains(null)) {
                        ExpressCraft.Form.MinimizedForms.remove(null);
                    }
                    var RemoveList = new (System.Collections.Generic.List$1(ExpressCraft.Form)).ctor();
                    var count = 0;
                    var widthTotal = 0;
                    var y = 30;

                    var viewSize = ExpressCraft.Form.Parent.getBoundingClientRect();

                    $t = Bridge.getEnumerator(ExpressCraft.Form.MinimizedForms);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (item.Content == null || item.windowState !== ExpressCraft.WindowStateType.Minimized) {
                                RemoveList.add(item);
                            } else {
                                var ToIncrement = 3 + ExpressCraft.Helper.ToFloat(item.Width);

                                if (widthTotal + ToIncrement > viewSize.width) {
                                    widthTotal = 0;
                                    count = 0;
                                    y = (y + 33) | 0;
                                }

                                item.Location = new ExpressCraft.Vector2.$ctor1(widthTotal, "(100% - " + (((y + 2) | 0)) + "px)");

                                count = (count + 1) | 0;

                                widthTotal += ToIncrement;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    $t1 = Bridge.getEnumerator(RemoveList);
                    try {
                        while ($t1.moveNext()) {
                            var item1 = $t1.Current;
                            ExpressCraft.Form.MinimizedForms.remove(item1);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                },
                ClearZIndex: function () {
                    var x = ExpressCraft.Form.GetActiveFormCollection().FormOwner;
                    ExpressCraft.Form.WindowHolder.style.zIndex = "-" + System.Double.format(ExpressCraft.Form.WindowHolder.childElementCount);
                    var Found = false;

                    for (var i = 0; i < ExpressCraft.Form.WindowHolder.childElementCount; i = (i + 1) >>> 0) {
                        if (Found || Bridge.referenceEquals(x.Content, ExpressCraft.Form.WindowHolder.children[i])) {
                            ExpressCraft.Form.WindowHolder.children[i].style.zIndex = "";
                            Found = true;
                        } else {
                            ExpressCraft.Form.WindowHolder.children[i].style.zIndex = System.Double.format((i - ExpressCraft.Form.WindowHolder.childElementCount - 1));
                        }
                    }
                },
                ApplyZIndex: function () {
                    ExpressCraft.Form.WindowHolder.style.zIndex = "";
                    for (var i = 0; i < ExpressCraft.Form.WindowHolder.childElementCount; i = (i + 1) >>> 0) {
                        ExpressCraft.Form.WindowHolder.children[i].style.zIndex = Bridge.toString(i);
                    }
                },
                CalculateZOrder$1: function (formCollection, zIndex) {
                    var TopMostForms = new (System.Collections.Generic.List$1(ExpressCraft.Form)).ctor();

                    var VisibleForms = formCollection.VisibleForms;
                    if (VisibleForms != null) {
                        for (var i = 0; i < VisibleForms.Count; i = (i + 1) | 0) {
                            if (VisibleForms.getItem(i).Content == null) {
                                ExpressCraft.Form.ToClean.add(VisibleForms.getItem(i));
                            } else {
                                if (VisibleForms.getItem(i).TopMost) {
                                    TopMostForms.add(VisibleForms.getItem(i));
                                }
                            }
                        }
                        for (var i1 = 0; i1 < ExpressCraft.Form.ToClean.Count; i1 = (i1 + 1) | 0) {
                            if (VisibleForms.contains(ExpressCraft.Form.ToClean.getItem(i1))) {
                                VisibleForms.remove(ExpressCraft.Form.ToClean.getItem(i1));
                                ExpressCraft.Form.ToClean.setItem(i1, null);
                            }
                        }

                        ExpressCraft.Form.ToClean.remove(null);

                        if (formCollection.FormOwner != null) {
                            formCollection.FormOwner.ManagePlaceHolders();
                            formCollection.FormOwner.Style.zIndex = Bridge.toString(zIndex);
                            zIndex = (zIndex + 1) | 0;

                        }

                        for (var i2 = 0; i2 < TopMostForms.Count; i2 = (i2 + 1) | 0) {
                            var form = TopMostForms.getItem(i2);
                            VisibleForms.remove(form);
                            VisibleForms.add(form);
                        }
                        var length = VisibleForms.Count;
                        for (var i3 = 0; i3 < length; i3 = (i3 + 1) | 0) {
                            if (VisibleForms.getItem(i3) != null && VisibleForms.getItem(i3).Content != null) {
                                VisibleForms.getItem(i3).ManagePlaceHolders();
                                VisibleForms.getItem(i3).Style.zIndex = Bridge.toString(zIndex);
                                zIndex = (zIndex + 1) | 0;

                            }
                        }
                    }

                    return zIndex;
                },
                CalculateZOrder: function () {
                    ExpressCraft.Form.GetActiveFormCollection();

                    if (ExpressCraft.Form.FormCollections == null && ExpressCraft.Form.standAloneForms.VisibleForms.Count === 0) {
                        return;
                    }
                    ExpressCraft.Form.FormCollections.remove(null);
                    var count = ExpressCraft.Form.FormCollections.Count;
                    var zIndex = 1;


                    ExpressCraft.Form.FormOverLay.style.opacity = count === 0 ? "" : count === 1 ? "0" : "0.4";

                    for (var x = 0; x < count; x = (x + 1) | 0) {
                        if (x === ((count - 1) | 0)) {
                            ExpressCraft.Form.FormOverLay.style.zIndex = Bridge.toString(zIndex);
                            zIndex = (zIndex + 1) | 0;
                        }
                        zIndex = ExpressCraft.Form.CalculateZOrder$1(ExpressCraft.Form.FormCollections.getItem(x), zIndex);
                    }
                    zIndex = ExpressCraft.Form.CalculateZOrder$1(ExpressCraft.Form.standAloneForms, zIndex);


                    if (ExpressCraft.Form.ActiveForm != null) {
                        ExpressCraft.Form.ActiveForm.Body.focus();
                    }
                }
            }
        },
        fields: {
            _disableBoxShadow: false,
            InDesign: false,
            PreviousSizeChange: false,
            PreviousMoveChange: false,
            PreviousShowMax: false,
            PreviousShowMin: false,
            PreviousOpacity: null,
            HasRemovedPlaceHolder: false,
            AllowSizeChange: false,
            AllowMoveChange: false,
            ForReuse: false,
            _IsDialog: false,
            Children: null,
            StartPosition: 0,
            TopMost: false,
            DialogResult: 0,
            Heading: null,
            ButtonClose: null,
            ButtonExpand: null,
            ButtonMinimize: null,
            ButtonMenu: null,
            HeadingTitle: null,
            Body: null,
            BodyOverLay: null,
            prev_px: 0,
            prev_py: 0,
            prev_width: 0,
            prev_height: 0,
            prev_top: 0,
            prev_left: 0,
            MinWidth: 0,
            MinHeight: 0,
            windowState: 0,
            _prevwindowState: 0,
            OnFormClosed: null,
            previousDisplay: null,
            DialogResults: null,
            _seperateInstance: false,
            closeAction: null,
            InClose: false,
            InDialogResult: false
        },
        props: {
            DisableBoxShadow: {
                get: function () {
                    return this._disableBoxShadow;
                },
                set: function (value) {
                    this._disableBoxShadow = value;
                    if (this._disableBoxShadow) {
                        this.Content.style.boxShadow = "none";
                    } else {
                        this.Content.style.boxShadow = null;
                    }
                }
            },
            HasSetup: {
                get: function () {
                    return ExpressCraft.Form._hasSetup;
                }
            },
            Controls: {
                get: function () {
                    return this.Body.children;
                }
            },
            ShowMinimize: {
                get: function () {
                    return this.ButtonMinimize != null;
                },
                set: function (value) {
                    this.ChangeHeadingButton(ExpressCraft.FormButtonType.Minimize, value);
                }
            },
            BodyStyle: {
                get: function () {
                    return this.Body.style;
                }
            },
            ShowClose: {
                get: function () {
                    return this.ButtonClose != null;
                },
                set: function (value) {
                    this.ChangeHeadingButton(ExpressCraft.FormButtonType.Close, value);
                }
            },
            ShowMaximize: {
                get: function () {
                    return this.ButtonExpand != null;
                },
                set: function (value) {
                    this.ChangeHeadingButton(ExpressCraft.FormButtonType.Maximize, value);
                }
            },
            ShowMenu: {
                get: function () {
                    return this.ButtonMenu != null;
                },
                set: function (value) {
                    this.ChangeHeadingButton(ExpressCraft.FormButtonType.Menu, value);
                }
            },
            WindowState: {
                get: function () {
                    return this.windowState;
                },
                set: function (value) {
                    this.SetWindowState(value);
                }
            },
            Text: {
                get: function () {
                    return this.HeadingTitle.innerHTML;
                },
                set: function (value) {
                    this.HeadingTitle.innerHTML = value;
                }
            },
            BackColor: {
                get: function () {
                    return this.Body.style.backgroundColor;
                },
                set: function (value) {
                    this.Body.style.backgroundColor = value;
                }
            },
            ForeColor: {
                get: function () {
                    return this.Body.style.color;
                },
                set: function (value) {
                    this.Body.style.color = value;
                }
            }
        },
        ctors: {
            init: function () {
                this.InDesign = false;
                this.PreviousSizeChange = true;
                this.PreviousMoveChange = true;
                this.PreviousShowMax = true;
                this.PreviousShowMin = true;
                this.PreviousOpacity = "";
                this.AllowSizeChange = true;
                this.AllowMoveChange = true;
                this.ForReuse = false;
                this._IsDialog = false;
                this.Children = new (System.Collections.Generic.List$1(ExpressCraft.Control)).ctor();
                this.StartPosition = ExpressCraft.FormStartPosition.WindowsDefaultLocation;
                this.TopMost = false;
                this.DialogResult = ExpressCraft.DialogResultEnum.None;
                this.MinWidth = 200;
                this.MinHeight = 50;
                this._prevwindowState = ExpressCraft.WindowStateType.Normal;
                this.DialogResults = new (System.Collections.Generic.List$1(ExpressCraft.DialogResult)).ctor();
                this._seperateInstance = false;
                this.InClose = false;
                this.InDialogResult = false;
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.Control.$ctor3.call(this, "form-base");
                this.Heading = ExpressCraft.Control.Div$1("form-heading");

                this.Heading.oncontextmenu = function (ev) {
                    ev.stopPropagation();
                    ev.preventDefault();
                };

                this.HeadingTitle = ExpressCraft.Control.Span$1("form-heading-title");

                this.Body = ExpressCraft.Control.Div$1("form-body");

                this.Body.oncontextmenu = Bridge.fn.bind(this, function (ev) {
                    if (Bridge.referenceEquals(ev.target, this.Body)) {
                        ev.stopPropagation();
                        ev.preventDefault();
                    }
                });

                this.BackColor = "#F0F0F0";

                this.BodyOverLay = ExpressCraft.Control.Div$1("form-body-overlay");

                this.BodyOverLay.style.opacity = ExpressCraft.Form.ShowBodyOverLay ? "0.5" : "0";

                this.ChangeHeadingButton(ExpressCraft.FormButtonType.Close);
                if (!ExpressCraft.Helper.NotDesktop) {
                    this.ChangeHeadingButton(ExpressCraft.FormButtonType.Maximize);
                    this.ChangeHeadingButton(ExpressCraft.FormButtonType.Minimize);
                }

                if (ExpressCraft.Helper.NotDesktop) {
                    this.Heading.style.height = "50px";
                    this.HeadingTitle.style.fontSize = "14px";

                    this.Body.style.top = "50px";
                    this.Body.style.height = "calc(100% - 50px)";

                    this.BodyOverLay.style.top = "50px";
                    this.BodyOverLay.style.height = "calc(100% - 50px)";
                }

                this.BodyOverLay.style.visibility = "collapse";

                this.Content.addEventListener("mousedown", Bridge.fn.bind(this, function (ev) {
                    if (ExpressCraft.Form.InExternalMouseEvent) {
                        return;
                    }
                    var mev = ev;

                    mev.stopPropagation();
                    mev.stopImmediatePropagation();

                    if (!this.IsActiveFormCollection()) {
                        return;
                    }

                    ExpressCraft.Form.Mouse_Down = true;

                    ExpressCraft.Form.MovingForm = this;
                    ExpressCraft.Form.ActiveForm = this;

                    ExpressCraft.Form.SetBodyOverLay();

                    var clientRec = this.Content.getBoundingClientRect();

                    var mousePos = ExpressCraft.Helper.GetClientMouseLocation(ev);

                    this.prev_px = clientRec.left - mousePos.Xf;
                    this.prev_py = clientRec.top - mousePos.Yf;

                    var width = clientRec.width;
                    var height = clientRec.height;

                    var X = mousePos.Xf - clientRec.left;
                    var Y = mousePos.Yf - clientRec.top;

                    if (this.windowState === ExpressCraft.WindowStateType.Maximized) {
                        ExpressCraft.Form.SetCursor("default");
                        ExpressCraft.Form.MoveAction = ExpressCraft.MouseMoveAction.Move;
                    } else if (this.windowState === ExpressCraft.WindowStateType.Minimized) {
                        ExpressCraft.Form.SetCursor("default");
                        ExpressCraft.Form.MoveAction = ExpressCraft.MouseMoveAction.None;
                        this.changeWindowState();
                    } else {
                        if (this.InDesign) {
                            return;
                        }

                        if (this.HeadingTitle != null && Bridge.referenceEquals(ev.target, this.HeadingTitle)) {
                            ExpressCraft.Form.SetCursor("default");
                            ExpressCraft.Form.MoveAction = ExpressCraft.MouseMoveAction.Move;
                        } else {
                            if (this.AllowSizeChange) {
                                if (X <= ExpressCraft.Form.ResizeCorners && Y <= ExpressCraft.Form.ResizeCorners) {
                                    ExpressCraft.Form.SetCursor("nwse-resize");
                                    ExpressCraft.Form.MoveAction = ExpressCraft.MouseMoveAction.TopLeftResize;
                                } else if (Y <= ExpressCraft.Form.ResizeCorners && X >= width - ExpressCraft.Form.ResizeCorners) {
                                    ExpressCraft.Form.SetCursor("nesw-resize");
                                    ExpressCraft.Form.MoveAction = ExpressCraft.MouseMoveAction.TopRightResize;
                                } else if (Y <= ExpressCraft.Form.ResizeCorners) {
                                    ExpressCraft.Form.SetCursor("n-resize");
                                    ExpressCraft.Form.MoveAction = ExpressCraft.MouseMoveAction.TopResize;
                                } else if (X <= ExpressCraft.Form.ResizeCorners && Y >= height - ExpressCraft.Form.ResizeCorners) {
                                    ExpressCraft.Form.SetCursor("nesw-resize");
                                    ExpressCraft.Form.MoveAction = ExpressCraft.MouseMoveAction.BottomLeftResize;
                                } else if (Y >= height - ExpressCraft.Form.ResizeCorners && X >= width - ExpressCraft.Form.ResizeCorners) {
                                    ExpressCraft.Form.SetCursor("nwse-resize");
                                    ExpressCraft.Form.MoveAction = ExpressCraft.MouseMoveAction.BottomRightResize;
                                } else if (Y >= height - ExpressCraft.Form.ResizeCorners) {
                                    ExpressCraft.Form.SetCursor("s-resize");
                                    ExpressCraft.Form.MoveAction = ExpressCraft.MouseMoveAction.BottomResize;
                                } else if (X <= ExpressCraft.Form.ResizeCorners) {
                                    ExpressCraft.Form.SetCursor("w-resize");
                                    ExpressCraft.Form.MoveAction = ExpressCraft.MouseMoveAction.LeftResize;
                                } else if (X >= width - ExpressCraft.Form.ResizeCorners) {
                                    ExpressCraft.Form.SetCursor("e-resize");
                                    ExpressCraft.Form.MoveAction = ExpressCraft.MouseMoveAction.RightResize;
                                } else {
                                    ExpressCraft.Form.SetCursor("default");
                                    ExpressCraft.Form.MoveAction = ExpressCraft.MouseMoveAction.Move;
                                }
                            }
                        }
                    }

                    if (!this.AllowMoveChange && ExpressCraft.Form.MoveAction === ExpressCraft.MouseMoveAction.Move) {
                        ExpressCraft.Form.SetCursor("default");
                        ExpressCraft.Form.MoveAction = ExpressCraft.MouseMoveAction.None;
                    }
                }));

                this.Heading.addEventListener("dblclick", Bridge.fn.bind(this, function (ev) {
                    if (this.AllowSizeChange) {
                        this.changeWindowState();
                    }

                    ev.preventDefault();
                    ev.stopPropagation();
                }));

                this.Content.addEventListener("mouseleave", function (ev) {
                    if (ExpressCraft.Form.MovingForm == null) {
                        ExpressCraft.Form.SetCursor("default");
                    }
                });

                this.Body.addEventListener("mouseenter", function (ev) {
                    ExpressCraft.Form.SetCursor("default");
                });

                this.Content.addEventListener("mousemove", Bridge.fn.bind(this, function (ev) {
                    if (ExpressCraft.Form.InExternalMouseEvent) {
                        return;
                    }

                    if (Bridge.referenceEquals(ev.target, this.HeadingTitle)) {
                        return;
                    }
                    var mev = ev;

                    var width = this.Content.clientWidth;
                    var height = this.Content.clientHeight;
                    var X = mev.pageX - this.Content.offsetLeft;
                    var Y = mev.pageY - this.Content.offsetTop;

                    if (ExpressCraft.Form.MovingForm != null && ExpressCraft.Form.MoveAction === ExpressCraft.MouseMoveAction.Move) {
                        ExpressCraft.Form.SetCursor("default");
                        return;
                    } else if (this.windowState === ExpressCraft.WindowStateType.Maximized) {
                        ExpressCraft.Form.SetCursor("default");
                        return;
                    }
                    if (this.InDesign) {
                        return;
                    }

                    if (this.AllowSizeChange) {
                        if (ExpressCraft.Form.MoveAction === ExpressCraft.MouseMoveAction.TopLeftResize || X <= ExpressCraft.Form.ResizeCorners && Y <= ExpressCraft.Form.ResizeCorners) {
                            ExpressCraft.Form.SetCursor("nwse-resize");
                        } else if (ExpressCraft.Form.MoveAction === ExpressCraft.MouseMoveAction.TopRightResize || Y <= ExpressCraft.Form.ResizeCorners && X >= ((width - ExpressCraft.Form.ResizeCorners) | 0)) {
                            ExpressCraft.Form.SetCursor("nesw-resize");
                        } else if (Y <= ExpressCraft.Form.ResizeCorners || ExpressCraft.Form.MoveAction === ExpressCraft.MouseMoveAction.TopResize) {
                            ExpressCraft.Form.SetCursor("n-resize");
                        } else if (ExpressCraft.Form.MoveAction === ExpressCraft.MouseMoveAction.BottomLeftResize || X <= ExpressCraft.Form.ResizeCorners && Y >= ((height - ExpressCraft.Form.ResizeCorners) | 0)) {
                            ExpressCraft.Form.SetCursor("nesw-resize");
                        } else if (ExpressCraft.Form.MoveAction === ExpressCraft.MouseMoveAction.BottomRightResize || Y >= ((height - ExpressCraft.Form.ResizeCorners) | 0) && X >= ((width - ExpressCraft.Form.ResizeCorners) | 0)) {
                            ExpressCraft.Form.SetCursor("nwse-resize");
                        } else if (ExpressCraft.Form.MoveAction === ExpressCraft.MouseMoveAction.BottomResize || Y >= ((height - ExpressCraft.Form.ResizeCorners) | 0)) {
                            ExpressCraft.Form.SetCursor("s-resize");
                        } else if (ExpressCraft.Form.MoveAction === ExpressCraft.MouseMoveAction.LeftResize || X <= ExpressCraft.Form.ResizeCorners) {
                            ExpressCraft.Form.SetCursor("w-resize");
                        } else if (ExpressCraft.Form.MoveAction === ExpressCraft.MouseMoveAction.RightResize || X >= ((width - ExpressCraft.Form.ResizeCorners) | 0)) {
                            ExpressCraft.Form.SetCursor("e-resize");
                        } else {
                            ExpressCraft.Form.SetCursor("default");
                        }
                    } else {
                        ExpressCraft.Form.SetCursor("default");
                    }
                }));

                this.Heading.addEventListener("mousedown", Bridge.fn.bind(this, function (ev) {
                    ExpressCraft.Form.SetBodyOverLay();
                    if (!this.IsActiveFormCollection()) {
                        return;
                    }

                    if (this.windowState === ExpressCraft.WindowStateType.Maximized) {
                        ExpressCraft.Form.MovingForm = this;
                        ExpressCraft.Form.SetCursor("default");

                        ExpressCraft.Form.MoveAction = ExpressCraft.MouseMoveAction.Move;
                    } else {
                        ExpressCraft.Form.MovingForm = this;
                    }

                    ExpressCraft.Form.ActiveForm = this;
                }));

                this.Body.addEventListener("mousedown", Bridge.fn.bind(this, function (ev) {
                    if (ExpressCraft.Form.InExternalMouseEvent) {
                        return;
                    }
                    if (!this.IsActiveFormCollection()) {
                        return;
                    }

                    ExpressCraft.Form.ActiveForm = this;
                    ExpressCraft.Form.MovingForm = null;
                    ev.stopPropagation();
                }));

                this.Body.addEventListener("mousemove", Bridge.fn.bind(this, function (ev) {
                    if (ExpressCraft.Form.InExternalMouseEvent) {
                        return;
                    }

                    if (ExpressCraft.Form.MovingForm == null) {
                        if (!this.IsActiveFormCollection()) {
                            return;
                        }
                        ev.stopPropagation();
                    }
                }));

                this.BodyOverLay.addEventListener("mousedown", Bridge.fn.bind(this, function (ev) {
                    if (this.InDesign) {
                        this.BodyOverLay.style.visibility = "collapse";
                        return;
                    }
                    if (!this.IsActiveFormCollection()) {
                        return;
                    }
                    this.BodyOverLay.style.visibility = "collapse";
                    ExpressCraft.Form.ActiveForm = this;
                }));

                this.Body.addEventListener("mouseleave", Bridge.fn.bind(this, function (ev) {
                    if (this.InDesign) {
                        this.BodyOverLay.style.visibility = "collapse";
                        return;
                    }

                    if (ExpressCraft.Form.MovingForm == null) {
                        ExpressCraft.Form.SetBodyOverLay();
                    }
                }));

                this.BodyOverLay.addEventListener("mouseenter", Bridge.fn.bind(this, function (ev) {
                    if (this.InDesign) {
                        this.BodyOverLay.style.visibility = "collapse";
                        return;
                    }
                    if (ExpressCraft.Form.MovingForm == null && this.IsActiveFormCollection()) {
                        ExpressCraft.Form.SetCursor("default");
                        this.BodyOverLay.style.visibility = "collapse";
                    } else {
                        this.BodyOverLay.style.visibility = "visible";
                    }
                }));

                this.Content.style.width = ExpressCraft.Helper.ToPx(Bridge.box(ExpressCraft.Form.Window_DefaultWidth, System.Int32));
                this.Content.style.height = ExpressCraft.Helper.ToPx(Bridge.box(ExpressCraft.Form.Window_DefaultHeight, System.Int32));

                ExpressCraft.Helper.AppendChild$2(this.Content, this.Heading);
                ExpressCraft.Helper.AppendChild$2(this.Content, this.Body);
                ExpressCraft.Helper.AppendChild$2(this.Content, this.BodyOverLay);

                ExpressCraft.Helper.AppendChild$2(this.Heading, this.HeadingTitle);

                this.closeAction = Bridge.fn.bind(this, function () {
                    ExpressCraft.Helper.Empty(this.Content);
                    if (this.Content != null) {
                        ExpressCraft.Helper.Delete$1(this.Content);
                        this.Content = null;
                    }
                });

                this.Initialise();
            }
        },
        methods: {
            IsDialog: function () {
                return this._IsDialog;
            },
            LinkchildToForm: function (child) {
                if (child == null) {
                    return;
                }
                this.Children.add(child);
                child.LinkedForm = this;
            },
            LinkchildrenToForm: function (children) {
                if (children === void 0) { children = []; }
                if (children == null || children.length === 0) {
                    return;
                }
                this.Children.AddRange(children);
                for (var i = 0; i < children.length; i = (i + 1) | 0) {
                    if (children[System.Array.index(i, children)] != null) {
                        children[System.Array.index(i, children)].LinkedForm = this;
                    }
                }
            },
            AppendChild: function (node) {
                this.Body.appendChild(ExpressCraft.Control.op_Implicit(node));

                return this;
            },
            AppendChild$1: function (node) {
                this.Body.appendChild(node);

                return this;
            },
            AppendChildren: function (node) {
                if (node === void 0) { node = []; }
                ExpressCraft.Helper.AppendChildren$1(this.Body, node);

                return this;
            },
            AppendChildren$1: function (node) {
                if (node === void 0) { node = []; }
                ExpressCraft.Helper.AppendChildren$2(this.Body, node);

                return this;
            },
            ResizeChildren: function (parent) {
                if (!Bridge.staticEquals(this.OnResize, null)) {
                    this.OnResize(this);
                }
                this.OnResizing();

                for (var x = 0; x < parent.children.length; x = (x + 1) >>> 0) {
                    if (!parent.children[x].classList.contains("control")) {
                        continue;
                    }
                    for (var i = 0; i < this.Children.Count; i = (i + 1) | 0) {
                        if (this.Children.getItem(i) != null && !Bridge.staticEquals(this.Children.getItem(i).OnResize, null)) {
                            if (Bridge.referenceEquals(this.Children.getItem(i).Content, parent.children[x])) {
                                this.Children.getItem(i).OnResize(this.Children.getItem(i));
                                break;
                            }
                        }
                    }
                    this.ResizeChildren(parent.children[x]);
                }
            },
            Resizing: function () {
                if (!Bridge.staticEquals(this.OnResize, null)) {
                    this.OnResize(this);
                }
                this.OnResizing();

                for (var i = 0; i < this.Children.Count; i = (i + 1) | 0) {
                    if (this.Children.getItem(i) != null && !Bridge.staticEquals(this.Children.getItem(i).OnResize, null)) {
                        this.Children.getItem(i).OnResize(this.Children.getItem(i));
                    }
                }
            },
            OnResizing: function () { },
            IsContentVisible: function () {
                return this.Content != null && System.String.equals(this.Content.style.visibility, "visible");
            },
            ChangeHeadingButton: function (button, visible) {
                if (visible === void 0) { visible = true; }
                switch (button) {
                    case ExpressCraft.FormButtonType.Minimize: 
                        if (this.ButtonMinimize != null) {
                            ExpressCraft.Helper.Delete$1(this.ButtonMinimize);
                            this.ButtonMinimize = null;
                        }
                        if (visible) {
                            this.ButtonMinimize = this.CreateFormButton(button);
                        }
                        break;
                    case ExpressCraft.FormButtonType.Maximize: 
                        if (this.ButtonExpand != null) {
                            ExpressCraft.Helper.Delete$1(this.ButtonExpand);
                            this.ButtonExpand = null;
                        }
                        if (visible) {
                            this.ButtonExpand = this.CreateFormButton(button);
                        }
                        break;
                    case ExpressCraft.FormButtonType.Close: 
                        if (this.ButtonClose != null) {
                            ExpressCraft.Helper.Delete$1(this.ButtonClose);
                            this.ButtonClose = null;
                        }
                        if (visible) {
                            this.ButtonClose = this.CreateFormButton(button);
                        }
                        break;
                    case ExpressCraft.FormButtonType.Menu: 
                        if (this.ButtonMenu != null) {
                            ExpressCraft.Helper.Delete$1(this.ButtonMenu);
                            this.ButtonMenu = null;
                        }
                        if (visible) {
                            this.ButtonMenu = this.CreateFormButton(button);
                        }
                        break;
                    default: 
                        break;
                }

                this.CalculateButtonLocations();
            },
            Initialise: function () { },
            OnShowing: function () { },
            OnShowed: function () { },
            OnClosing: function () { },
            OnClosed: function () { },
            ShowBodyOverLayStyle: function () {
                if (this.BodyOverLay != null && System.String.equals(this.BodyOverLay.style.visibility, "collapse")) {
                    if (this.InDesign) {
                        return;
                    }
                    this.BodyOverLay.style.visibility = "visible";
                }
            },
            OnGotFocus: function () { },
            OnLostFocus: function () { },
            SetWindowState: function (State) {
                if (State === this.windowState) {
                    return;
                }

                this._prevwindowState = this.windowState;

                if (this._prevwindowState === ExpressCraft.WindowStateType.Minimized) {
                    this.Body.style.opacity = this.PreviousOpacity;
                    this.AllowSizeChange = this.PreviousSizeChange;
                    this.AllowMoveChange = this.PreviousMoveChange;
                    this.ShowMaximize = this.PreviousShowMax;
                    this.ShowMinimize = this.PreviousShowMin;
                    this.HeadingTitle.style.left = "";
                    this.HeadingTitle.style.marginRight = "";
                    this.HeadingTitle.style.transform = "";

                    if (this.ButtonMinimize != null) {
                        this.ButtonMinimize.innerHTML = "-";
                    }
                    this.Heading.classList.remove("form-heading-min");

                    ExpressCraft.Form.MinimizedForms.remove(this);

                    this.Body.style.display = this.previousDisplay;

                    ExpressCraft.Form.CalculateMinmizedFormsLocation();
                }

                if (!this.AllowSizeChange) {
                    return;
                }

                if (((this.windowState = State)) === ExpressCraft.WindowStateType.Normal) {
                    ExpressCraft.Helper.SetBounds(this, this.prev_left, this.prev_top, this.prev_width, this.prev_height);
                    this.Resizing();
                    this.Style.borderWidth = "1px";
                } else if (this.windowState === ExpressCraft.WindowStateType.Maximized) {
                    if (this._prevwindowState === ExpressCraft.WindowStateType.Normal) {
                        this.prev_left = ExpressCraft.Helper.ToInt(this.Left);
                        this.prev_top = ExpressCraft.Helper.ToInt(this.Top);
                        this.prev_width = ExpressCraft.Helper.ToInt(this.Width);
                        this.prev_height = ExpressCraft.Helper.ToInt(this.Height);
                    }

                    this.Style.borderWidth = "0";

                    ExpressCraft.Helper.SetBounds(this, 0, 0, "100%", "100%");
                } else if (this.windowState === ExpressCraft.WindowStateType.Minimized) {
                    this.PreviousSizeChange = this.AllowSizeChange;
                    this.PreviousMoveChange = this.AllowMoveChange;
                    this.PreviousOpacity = this.Body.style.opacity;
                    this.PreviousShowMax = this.ShowMaximize;
                    this.PreviousShowMin = this.ShowMinimize;

                    this.AllowSizeChange = false;
                    this.Body.style.opacity = "0";
                    this.ShowMaximize = false;
                    this.ShowMinimize = false;
                    this.AllowMoveChange = false;

                    if (this._prevwindowState === ExpressCraft.WindowStateType.Normal) {
                        this.prev_left = ExpressCraft.Helper.ToInt(this.Left);
                        this.prev_top = ExpressCraft.Helper.ToInt(this.Top);
                        this.prev_width = ExpressCraft.Helper.ToInt(this.Width);
                        this.prev_height = ExpressCraft.Helper.ToInt(this.Height);
                    } else {
                        this.Style.borderWidth = "1px";
                    }

                    this.HeadingTitle.style.marginRight = "0";
                    this.HeadingTitle.style.left = "3px";
                    this.HeadingTitle.style.transform = "translate(0, -50%)";

                    var offset = (this.ShowClose ? 45.5 : 0);

                    this.Width = Math.max(ExpressCraft.Control.GetTextWidth(this.Text, "10pt Tahoma") + 32, 100) + offset;
                    this.Height = 30;

                    this.Heading.classList.add("form-heading-min");

                    if (this.ButtonMinimize != null) {
                        this.ButtonMinimize.innerHTML = "+";
                    }

                    this.previousDisplay = this.Body.style.display;
                    this.Body.style.display = "none";

                    ExpressCraft.Form.MinimizedForms.add(this);

                    ExpressCraft.Form.CalculateMinmizedFormsLocation();
                }

                this.Resizing();
            },
            changeWindowState: function () {
                if (this.windowState === ExpressCraft.WindowStateType.Maximized) {
                    this.SetWindowState(ExpressCraft.WindowStateType.Normal);
                } else if (this.windowState === ExpressCraft.WindowStateType.Minimized) {
                    this.SetWindowState(this._prevwindowState);
                } else {
                    this.SetWindowState(ExpressCraft.WindowStateType.Maximized);
                }
            },
            CalculateButtonLocations: function () {
                var RightOffset = 0;
                var append = 45.5;

                if (ExpressCraft.Helper.NotDesktop) {
                    append = 65.5;
                }

                if (this.ShowClose) {
                    if (ExpressCraft.Helper.NotDesktop) {
                        this.ButtonClose.style.left = "calc(100% - " + System.Single.format(append) + "px)";
                    }
                    RightOffset += append;
                    if (!this.Heading.contains(this.ButtonClose)) {
                        ExpressCraft.Helper.AppendChild$2(this.Heading, this.ButtonClose);
                    }
                }

                if (this.ShowMaximize) {
                    RightOffset += append;
                    this.ButtonExpand.style.left = "calc(100% - " + System.Single.format(RightOffset) + "px)";
                    if (!this.Heading.contains(this.ButtonExpand)) {
                        ExpressCraft.Helper.AppendChild$2(this.Heading, this.ButtonExpand);
                    }
                }
                if (this.ShowMinimize) {
                    RightOffset += append;
                    this.ButtonMinimize.style.left = "calc(100% - " + System.Single.format(RightOffset) + "px)";
                    if (!this.Heading.contains(this.ButtonMinimize)) {
                        ExpressCraft.Helper.AppendChild$2(this.Heading, this.ButtonMinimize);
                    }
                }

                if (this.ShowMenu) {
                    this.ButtonMenu.style.left = "0";
                    if (!this.Heading.contains(this.ButtonMenu)) {
                        ExpressCraft.Helper.AppendChild$2(this.Heading, this.ButtonMenu);
                    }
                }
            },
            CreateFormButton: function (Type) {
                var butt = ExpressCraft.Control.Div$1("form-heading-button");

                switch (Type) {
                    case ExpressCraft.FormButtonType.Close: 
                        butt.classList.add("form-heading-button-close");
                        butt.innerHTML = "&times;";
                        butt.onmousedown = Bridge.fn.bind(this, function (ev) {
                            if (ExpressCraft.Form.MovingForm != null) {
                                return;
                            }
                            ExpressCraft.Form.Mouse_Down = true;

                            ev.stopPropagation();
                            ev.preventDefault();

                            ExpressCraft.Form.ActiveForm = this;
                        });
                        butt.onmouseup = Bridge.fn.bind(this, function (ev) {
                            if (ExpressCraft.Form.MovingForm != null) {
                                return;
                            }

                            ev.stopPropagation();
                            ev.preventDefault();

                            if (this.InDesign) {
                                return;
                            }

                            this.Close();
                        });
                        break;
                    case ExpressCraft.FormButtonType.Maximize: 
                        butt.innerHTML = "&#9633;";
                        butt.onmouseup = Bridge.fn.bind(this, function (ev) {
                            if (ExpressCraft.Form.MovingForm != null) {
                                return;
                            }

                            ev.stopPropagation();
                            ev.preventDefault();

                            ExpressCraft.Form.Mouse_Down = false;

                            this.changeWindowState();
                        });
                        break;
                    case ExpressCraft.FormButtonType.Minimize: 
                        butt.innerHTML = "-";
                        butt.onmouseup = Bridge.fn.bind(this, function (ev) {
                            if (ExpressCraft.Form.MovingForm != null) {
                                return;
                            }

                            ev.stopPropagation();
                            ev.preventDefault();

                            if (Bridge.referenceEquals(butt.innerHTML, "-")) {
                                butt.innerHTML = "+";
                                this.WindowState = ExpressCraft.WindowStateType.Minimized;
                            } else {
                                this.WindowState = this._prevwindowState === ExpressCraft.WindowStateType.Minimized ? ExpressCraft.WindowStateType.Normal : this._prevwindowState;
                                butt.innerHTML = "-";
                            }

                            ExpressCraft.Form.Mouse_Down = false;
                        });
                        break;
                    case ExpressCraft.FormButtonType.Restore: 
                        break;
                    case ExpressCraft.FormButtonType.Help: 
                        break;
                    default: 
                        butt.onmouseup = function (ev) {
                            if (ExpressCraft.Form.MovingForm != null) {
                                return;
                            }

                            ev.stopPropagation();
                            ev.preventDefault();

                            ExpressCraft.Form.Mouse_Down = false;
                        };
                        break;
                    case ExpressCraft.FormButtonType.Menu: 
                        butt.innerHTML = "&#9776;";
                        butt.onmouseup = Bridge.fn.bind(this, function (ev) {
                            if (ExpressCraft.Form.MovingForm != null) {
                                return;
                            }

                            ev.stopPropagation();
                            ev.preventDefault();

                            ExpressCraft.Form.Mouse_Down = false;

                            this.OnMenuClick();
                        });
                        break;
                }

                butt.onmouseenter = function (ev) {
                    if (ExpressCraft.Form.MovingForm != null) {
                        return;
                    }
                    ExpressCraft.Form.SetCursor("default");
                };

                butt.ondblclick = function (ev) {
                    ev.stopPropagation();
                };

                butt.onmousemove = function (ev) {
                    if (ExpressCraft.Form.MovingForm != null) {
                        return;
                    }

                    ev.stopImmediatePropagation();
                    ev.preventDefault();
                };

                if (Type !== ExpressCraft.FormButtonType.Close) {
                    butt.onmousedown = Bridge.fn.bind(this, function (ev) {
                        if (ExpressCraft.Form.MovingForm != null) {
                            return;
                        }

                        ExpressCraft.Form.Mouse_Down = true;

                        ev.stopPropagation();
                        ev.preventDefault();

                        ExpressCraft.Form.ActiveForm = this;
                    });
                }

                if (ExpressCraft.Helper.NotDesktop) {
                    butt.style.width = "65px";
                    butt.style.height = "49px";
                    butt.style.fontSize = "16pt";
                    butt.style.lineHeight = "49px";
                    ExpressCraft.Helper.ExchangeClass$1(butt, "primary", "primary");
                    butt.style.filter = "brightness(110%)";
                }

                return butt;
            },
            OnMenuClick: function () { },
            TitleBarHeight: function () {
                return this.Heading.clientHeight;
            },
            TitleBarWidth: function () {
                return this.Heading.clientWidth;
            },
            ClientX: function () {
                return this.Body.clientLeft;
            },
            ClientY: function () {
                return this.Body.clientTop;
            },
            GetFormCollectionFromForm: function (form) {
                if (form._seperateInstance) {
                    var visibleForms = ExpressCraft.Form.standAloneForms.VisibleForms;
                    for (var x = 0; x < visibleForms.Count; x = (x + 1) | 0) {
                        if (Bridge.referenceEquals(visibleForms.getItem(x), this)) {
                            return ExpressCraft.Form.standAloneForms;
                        }
                    }
                } else {
                    for (var i = 0; i < ExpressCraft.Form.FormCollections.Count; i = (i + 1) | 0) {
                        if (Bridge.referenceEquals(this, ExpressCraft.Form.FormCollections.getItem(i).FormOwner)) {
                            return ExpressCraft.Form.FormCollections.getItem(i);
                        }
                        var visibleForms1 = ExpressCraft.Form.FormCollections.getItem(i).VisibleForms;
                        for (var x1 = 0; x1 < visibleForms1.Count; x1 = (x1 + 1) | 0) {
                            if (Bridge.referenceEquals(visibleForms1.getItem(x1), this)) {
                                return ExpressCraft.Form.FormCollections.getItem(i);
                            }
                        }
                    }
                }

                return null;
            },
            IsActiveFormCollection: function () {
                if (this._seperateInstance) {
                    return Bridge.referenceEquals(this.GetFormCollectionFromForm(this), ExpressCraft.Form.standAloneForms);
                } else {
                    return Bridge.referenceEquals(this.GetFormCollectionFromForm(this), ExpressCraft.Form.GetActiveFormCollection());
                }
            },
            IsVisible: function () {
                return this.GetFormCollectionFromForm(this) != null;
            },
            ShowStartNewLevel: function () {
                if (!this.HasSetup) {
                    ExpressCraft.Form.Setup();
                }

                if (this.IsVisible()) {
                    throw new System.Exception("Invalid request to open form as a dialog that is already visible!");
                }

                ExpressCraft.Form.FormCollections.add(new ExpressCraft.FormCollection(this));
                ExpressCraft.Helper.AppendChild$1(ExpressCraft.Form.WindowHolder, this);

                ExpressCraft.Form.CalculateZOrder();

                if (this.StartPosition === ExpressCraft.FormStartPosition.Center) {
                    this.CentreForm();
                }

                this.OnShowed();

                this.Resizing();

                ExpressCraft.Form.ActiveForm = this;

                ExpressCraft.Helper.FocusElement(this.Body);
            },
            ShowDialog: function (dialogResults) {
                if (dialogResults === void 0) { dialogResults = []; }
                if (!this.HasSetup) {
                    ExpressCraft.Form.Setup();
                }

                this.InDialogResult = false;

                if (this.ButtonMinimize != null) {
                    ExpressCraft.Helper.Delete$1(this.ButtonMinimize);
                }
                if (this.ButtonExpand != null) {
                    ExpressCraft.Helper.Delete$1(this.ButtonExpand);
                }
                if (this.ButtonClose != null) {
                    ExpressCraft.Helper.Delete$1(this.ButtonClose);
                }

                this._IsDialog = true;
                if (this.StartPosition !== ExpressCraft.FormStartPosition.Manual) {
                    if (!ExpressCraft.Helper.NotDesktop) {
                        this.StartPosition = ExpressCraft.FormStartPosition.Center;
                    }
                }
                this.ShowStartNewLevel();

                if (dialogResults != null && dialogResults.length > 0) {
                    this.DialogResults.AddRange(dialogResults);
                }
            },
            MinZero$1: function (input) {
                return input < 0 ? 0 : input;
            },
            MinZero: function (input) {
                return input < 0 ? 0 : input;
            },
            CentreForm: function () {
                if (ExpressCraft.Form.WindowHolder == null) {
                    return;
                }

                this.Content.style.left = ExpressCraft.Helper.ToPx(Bridge.box(this.MinZero$1((((Bridge.Int.div(ExpressCraft.Form.WindowHolder.clientWidth, 2)) | 0)) - (((Bridge.Int.div(parseInt(ExpressCraft.Helper.ToHtmlValue(this.Width)), 2)) | 0))), System.Single, System.Single.format, System.Single.getHashCode));
                this.Content.style.top = ExpressCraft.Helper.ToPx(Bridge.box(this.MinZero$1((((Bridge.Int.div(ExpressCraft.Form.WindowHolder.clientHeight, 2)) | 0)) - (((Bridge.Int.div(parseInt(ExpressCraft.Helper.ToHtmlValue(this.Height)), 2)) | 0))), System.Single, System.Single.format, System.Single.getHashCode));
            },
            Render: function () {
                if (!this.HasRendered) {
                    ExpressCraft.Control.prototype.Render.call(this);
                    this.OnShowing();
                    this.Shown();
                }
            },
            Shown: function () {
                this.InClose = false;
                if (this.Children == null) {
                    return;
                }
                for (var i = 0; i < this.Children.Count; i = (i + 1) | 0) {
                    if (this.Children.getItem(i) != null && !Bridge.staticEquals(this.Children.getItem(i).OnLoaded, null)) {
                        this.Children.getItem(i).OnLoaded(this.Children.getItem(i));
                    }
                }
                this.Children.remove(null);
            },
            Show: function (seperateInstance) {
                if (seperateInstance === void 0) { seperateInstance = false; }
                if (!this.HasSetup) {
                    ExpressCraft.Form.Setup();
                }

                if (this._IsDialog) {
                    return;
                }
                this._seperateInstance = seperateInstance;
                if (!seperateInstance && (ExpressCraft.Form.FormCollections == null || ExpressCraft.Form.FormCollections.Count === 0)) {
                    this.ShowStartNewLevel();
                    return;
                }

                var activeCollect = !seperateInstance ? ExpressCraft.Form.GetActiveFormCollection() : ExpressCraft.Form.standAloneForms;
                var visbileForms = activeCollect.VisibleForms;

                if (!visbileForms.contains(this)) {
                    visbileForms.add(this);
                    ExpressCraft.Helper.AppendChild$1(ExpressCraft.Form.WindowHolder, this);

                    this.Content.style.visibility = "visible";

                    ExpressCraft.Form.CalculateZOrder();

                    if (this.StartPosition !== ExpressCraft.FormStartPosition.Manual && this.windowState === ExpressCraft.WindowStateType.Normal) {
                        if (this.StartPosition === ExpressCraft.FormStartPosition.Center || (activeCollect == null || visbileForms == null || visbileForms.Count === 0 || visbileForms.getItem(((visbileForms.Count - 1) | 0)).windowState !== ExpressCraft.WindowStateType.Normal || visbileForms.getItem(((visbileForms.Count - 1) | 0)).Content == null)) {
                            this.CentreForm();
                        } else if (this.StartPosition === ExpressCraft.FormStartPosition.WindowsDefaultLocation) {
                            var obj = visbileForms.getItem(((visbileForms.Count - 1) | 0));

                            var x = Bridge.box(parseInt(ExpressCraft.Helper.ToHtmlValue(obj.Left)), System.Int32);
                            var y = Bridge.box(parseInt(ExpressCraft.Helper.ToHtmlValue(obj.Top)), System.Int32);

                            if (isNaN(Bridge.unbox(x))) {
                                x = Bridge.box(0, System.Int32);
                            }
                            if (isNaN(Bridge.unbox(y))) {
                                y = Bridge.box(0, System.Int32);
                            }

                            var rec = ExpressCraft.Form.WindowHolder.getBoundingClientRect();

                            var pw25 = rec.width * 0.15;
                            var ph25 = rec.height * 0.15;

                            var pw75 = rec.width * 0.55;
                            var ph75 = rec.height * 0.55;

                            if (System.Nullable.getValue(Bridge.cast(Bridge.unbox(x, System.Int32), System.Int32)) < pw25) {
                                x = Bridge.box(Bridge.Int.clip32(pw25), System.Int32);
                            }
                            if (System.Nullable.getValue(Bridge.cast(Bridge.unbox(y, System.Int32), System.Int32)) < ph25) {
                                y = Bridge.box(Bridge.Int.clip32(ph25), System.Int32);
                            }

                            if (System.Nullable.getValue(Bridge.cast(Bridge.unbox(x, System.Int32), System.Int32)) > pw75) {
                                x = Bridge.box(Bridge.Int.clip32(pw25), System.Int32);
                            }
                            if (System.Nullable.getValue(Bridge.cast(Bridge.unbox(y, System.Int32), System.Int32)) > ph75) {
                                y = Bridge.box(Bridge.Int.clip32(ph25), System.Int32);
                            }
                            x = Bridge.box((System.Nullable.getValue(Bridge.cast(Bridge.unbox(x, System.Int32), System.Int32)) + 10) | 0, System.Int32);
                            y = Bridge.box((System.Nullable.getValue(Bridge.cast(Bridge.unbox(y, System.Int32), System.Int32)) + 10) | 0, System.Int32);

                            this.Content.style.left = ExpressCraft.Helper.ToPx(Bridge.box(this.MinZero(System.Nullable.getValue(Bridge.cast(Bridge.unbox(x, System.Int32), System.Int32))), System.Int32));
                            this.Content.style.top = ExpressCraft.Helper.ToPx(Bridge.box(this.MinZero(System.Nullable.getValue(Bridge.cast(Bridge.unbox(x, System.Int32), System.Int32))), System.Int32));
                        }
                    }

                    this.OnShowed();

                    this.Resizing();
                }

                ExpressCraft.Form.ActiveForm = this;

                if (ExpressCraft.Helper.NotDesktop) {
                    setTimeout(Bridge.fn.bind(this, function (a) {
                        this.Content.focus();
                        this.Content.click();
                    }), 0);
                }
            },
            BringToFront: function () {
                var activeCollect = ExpressCraft.Form.GetActiveFormCollection();
                if (activeCollect != null) {
                    if (Bridge.referenceEquals(activeCollect.FormOwner, this)) {
                        return;
                    }
                    var visibleForms = activeCollect.VisibleForms;
                    if (visibleForms != null && visibleForms.Count > 1) {
                        visibleForms.remove(this);
                        visibleForms.add(this);
                    }

                    ExpressCraft.Form.CalculateZOrder();
                }
            },
            SetZIndex: function (zIndex) {
                this.Content.style.zIndex = Bridge.toString((Bridge.identity(zIndex.v, (zIndex.v = (zIndex.v + 1) | 0))));
            },
            GetControlBase: function () {
                return this.Body;
            },
            ManagePlaceHolders: function () {
                if (!ExpressCraft.Settings.RemoveAttributesOffElementsWhenLoseFocus) {
                    return;
                }

                var shouldHidePlaceholders = !Bridge.referenceEquals(ExpressCraft.Form.ActiveForm, this);

                if (shouldHidePlaceholders !== this.HasRemovedPlaceHolder) {
                    this.HasRemovedPlaceHolder = shouldHidePlaceholders;
                    var que = new (System.Collections.Generic.Queue$1(HTMLElement)).ctor();
                    que.Enqueue(this.Body);

                    while (que.Count > 0) {
                        var element = que.Dequeue();
                        if (shouldHidePlaceholders) {
                            var a = element.getAttribute("placeholder");
                            if (!System.String.isNullOrWhiteSpace(a)) {
                                element.removeAttribute("placeholder");
                                element.setAttribute("data-placeholder", a);
                            }
                        } else {
                            var a1 = element.getAttribute("data-placeholder");
                            if (!System.String.isNullOrWhiteSpace(a1)) {
                                element.removeAttribute("data-placeholder");
                                element.setAttribute("placeholder", a1);
                            }
                        }
                        var length = Bridge.Int.clip32(element.childElementCount);
                        if (length > 0) {
                            for (var i = 0; System.Int64(i).lt(System.Int64(length)); i = (i + 1) >>> 0) {
                                que.Enqueue(element.children[i]);
                            }
                        }
                    }
                }
            },
            Close: function () {
                if (this._IsDialog && this.InDialogResult) {
                    return;
                }

                this.InClose = true;

                this.OnClosing();

                ExpressCraft.Form.ToClean.add(this);

                var ownerFormCollection = this.GetFormCollectionFromForm(this);

                if (ownerFormCollection != null) {
                    if (Bridge.referenceEquals(ownerFormCollection.FormOwner, this)) {
                        ownerFormCollection.FormOwner = null;
                        for (var i = 0; i < ownerFormCollection.VisibleForms.Count; i = (i + 1) | 0) {
                            if (Bridge.referenceEquals(ownerFormCollection.VisibleForms.getItem(i), this)) {
                                continue;
                            }
                            ownerFormCollection.VisibleForms.getItem(i).Close();
                        }
                        if (ExpressCraft.Form.FormCollections.Count === 1) {
                            ExpressCraft.Form.FormCollections = new (System.Collections.Generic.List$1(ExpressCraft.FormCollection)).ctor();
                        }
                    } else {
                        ownerFormCollection.VisibleForms.remove(this);
                    }
                }

                if (this.Content != null) {
                    if (!this.ForReuse) {
                        if (ExpressCraft.Settings.FormFadeDuration > 0) {

                        } else {
                            this.closeAction();
                        }
                        this.closeAction();
                    } else {
                        this.Content.style.visibility = "collapse";
                    }
                }

                ExpressCraft.Form.CalculateZOrder();

                ExpressCraft.Form.ActiveForm = ExpressCraft.Form._PrevActiveForm;
                if (this._IsDialog) {
                    this.InDialogResult = true;
                    if (this.DialogResult !== ExpressCraft.DialogResultEnum.None && this.DialogResults != null && this.DialogResults.Count > 0) {
                        for (var i1 = 0; i1 < this.DialogResults.Count; i1 = (i1 + 1) | 0) {
                            this.DialogResults.getItem(i1).InvokeIfResult(this.DialogResult);
                        }
                    }
                }

                if (!Bridge.staticEquals(this.OnFormClosed, null)) {
                    this.OnFormClosed();
                }
                this.OnClosed();

                if (this.WindowState === ExpressCraft.WindowStateType.Minimized) {
                    ExpressCraft.Form.MinimizedForms.remove(this);
                    ExpressCraft.Form.CalculateMinmizedFormsLocation();
                }

                this.InClose = false;
            }
        }
    });

    Bridge.define("ExpressCraft.CalculatorControl", {
        inherits: [ExpressCraft.Control],
        fields: {
            DisplayInput: null,
            btnClose: null,
            btnBack: null,
            btnCE: null,
            btnC: null,
            btnPTAX: null,
            btnMTAX: null,
            btnTAX: null,
            btnDbl: null,
            btn7: null,
            btn8: null,
            btn9: null,
            btnDiv: null,
            btnSqrt: null,
            btn4: null,
            btn5: null,
            btn6: null,
            btnMul: null,
            btnPer: null,
            btn1: null,
            btn2: null,
            btn3: null,
            btnMinus: null,
            btn1OverX: null,
            btn0: null,
            btnplusOrNeg: null,
            btnDot: null,
            btnPlus: null,
            btnEq: null,
            Value: System.Decimal(0.0),
            _commands: null,
            current_command: null,
            OnEqual: null,
            OnClose: null,
            DontRefresh: false
        },
        ctors: {
            init: function () {
                this._commands = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.current_command = "";
                this.DontRefresh = false;
            },
            ctor: function (startingValue, CloseButtonVisible) {
                if (CloseButtonVisible === void 0) { CloseButtonVisible = false; }
                var $t;

                this.$initialize();
                ExpressCraft.Control.$ctor1.call(this);
                this.Value = startingValue;

                this.current_command = this.Value.toString();

                var doc = document.createDocumentFragment();

                var AddHeight = (ExpressCraft.Helper.NotDesktop ? 45 : 22);


                doc.appendChild(((this.DisplayInput = ($t = new ExpressCraft.MemoInput(), $t.Readonly = true, $t.Bounds = new ExpressCraft.Vector4.$ctor1(4, 4, "(100% - 8px)", AddHeight), $t))).Content);

                if (ExpressCraft.Helper.NotDesktop) {
                    this.DisplayInput.Style.fontSize = "14px";
                    this.DisplayInput.Height = 45;
                }

                var buttons = new (System.Collections.Generic.List$1(ExpressCraft.SimpleButton)).ctor();

                buttons.AddRange(System.Array.init([(this.btnPTAX = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "+TAX", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddOperator), $t)), (this.btn7 = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "7", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddTextToCommand), $t)), (this.btn8 = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "8", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddTextToCommand), $t)), (this.btn9 = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "9", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddTextToCommand), $t)), (this.btnDiv = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "/", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddOperator), $t)), (this.btnSqrt = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "sqrt", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddOperator), $t)), (this.btnMTAX = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "-TAX", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddOperator), $t)), (this.btn4 = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "4", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddTextToCommand), $t)), (this.btn5 = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "5", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddTextToCommand), $t)), (this.btn6 = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "6", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddTextToCommand), $t)), (this.btnMul = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "*", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddOperator), $t)), (this.btnPer = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "%", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddOperator), $t)), (this.btnTAX = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "TAX", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddOperator), $t)), (this.btn1 = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "1", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddTextToCommand), $t)), (this.btn2 = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "2", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddTextToCommand), $t)), (this.btn3 = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "3", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddTextToCommand), $t)), (this.btnMinus = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "-", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddOperator), $t)), (this.btn1OverX = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "1/x", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddOperator), $t)), (this.btnDbl = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "Dbl", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddOperator), $t)), (this.btn0 = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "0", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddTextToCommand), $t)), (this.btnplusOrNeg = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "+/-", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddOperator), $t)), (this.btnDot = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = ".", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddTextToCommand), $t)), (this.btnPlus = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "+", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddOperator), $t)), (this.btnEq = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "=", $t.ItemClick = Bridge.fn.cacheBind(this, this.AddOperator), $t))], ExpressCraft.SimpleButton));
                var index = 0;
                var y = 0;
                var yOffset = (28 + AddHeight) | 0;
                this.btnClose = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "&times;", $t.Size = new ExpressCraft.Vector2.$ctor1("((100% - 28px) * 0.1666666666666667)", "((100% - " + yOffset + "px) * 0.2)"), $t.Location = new ExpressCraft.Vector2.$ctor1("(((100% - 28px) * " + (System.Decimal("0.8333333333333335")) + ") + " + (24) + "px)", "(((100% - " + yOffset + "px) * " + (System.Decimal(y).mul(System.Decimal(0.2))) + ") + " + (((((((Bridge.Int.mul(y, 4)) + 8) | 0)) + AddHeight) | 0)) + "px)"), $t.ItemClick = Bridge.fn.bind(this, function (ev) {
                    if (!Bridge.staticEquals(this.OnClose, null)) {
                        this.OnClose();
                    }
                }), $t);
                if (ExpressCraft.Helper.NotDesktop) {
                    this.btnClose.Style.fontSize = "26px";
                    this.btnClose.Style.fontWeight = "bold";
                }
                this.btnBack = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "Back", $t.Size = new ExpressCraft.Vector2.$ctor1("(((100% - 24px) - ((100% - 28px) * 0.1666666666666667)) * 0.333)", "((100% - " + yOffset + "px) * 0.2)"), $t.Location = new ExpressCraft.Vector2.$ctor1("(((((100% - 24px) - ((100% - 28px) * 0.1666666666666667)) * 0.333) * 0) + 4px)", "(((100% - " + yOffset + "px) * " + (System.Decimal(y).mul(System.Decimal(0.2))) + ") + " + (((((((Bridge.Int.mul(y, 4)) + 8) | 0)) + AddHeight) | 0)) + "px)"), $t.ItemClick = Bridge.fn.cacheBind(this, this.Back), $t);
                if (ExpressCraft.Helper.NotDesktop) {
                    this.btnBack.Style.fontSize = "14px";
                }
                this.btnCE = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "CE", $t.Size = new ExpressCraft.Vector2.$ctor1("(((100% - 24px) - ((100% - 28px) * 0.1666666666666667)) * 0.333)", "((100% - " + yOffset + "px) * 0.2)"), $t.Location = new ExpressCraft.Vector2.$ctor1("(((((100% - 24px) - ((100% - 28px) * 0.1666666666666667)) * 0.333) * 1) + 8px)", "(((100% - " + yOffset + "px) * " + (System.Decimal(y).mul(System.Decimal(0.2))) + ") + " + (((((((Bridge.Int.mul(y, 4)) + 8) | 0)) + AddHeight) | 0)) + "px)"), $t.ItemClick = Bridge.fn.bind(this, function (ev) {
                    this.current_command = "";
                    this.RefreshValue();
                }), $t);
                if (ExpressCraft.Helper.NotDesktop) {
                    this.btnCE.Style.fontSize = "14px";
                }
                this.btnC = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "C", $t.Size = new ExpressCraft.Vector2.$ctor1("((((100% - 24px) - ((100% - 28px) * 0.1666666666666667)) * 0.333) + 4px)", "((100% - " + yOffset + "px) * 0.2)"), $t.Location = new ExpressCraft.Vector2.$ctor1("(((((100% - 24px) - ((100% - 28px) * 0.1666666666666667)) * 0.333) * 2) + 12px)", "(((100% - " + yOffset + "px) * " + (System.Decimal(y).mul(System.Decimal(0.2))) + ") + " + (((((((Bridge.Int.mul(y, 4)) + 8) | 0)) + AddHeight) | 0)) + "px)"), $t.ItemClick = Bridge.fn.bind(this, function (ev) {
                    this._commands = new (System.Collections.Generic.List$1(System.String)).ctor();
                    this.current_command = "";
                    this.RefreshValue();
                }), $t);
                if (ExpressCraft.Helper.NotDesktop) {
                    this.btnC.Style.fontSize = "14px";
                }

                ExpressCraft.Helper.AppendChildren$2(doc, [this.btnClose.Content, this.btnBack.Content, this.btnCE.Content, this.btnC.Content]);

                y = (y + 1) | 0;

                for (var i = 0; i < buttons.Count; i = (i + 1) | 0) {
                    buttons.getItem(i).Size = new ExpressCraft.Vector2.$ctor1("((100% - 28px) * 0.1666666666666667)", "((100% - " + yOffset + "px) * 0.2)");
                    buttons.getItem(i).Location = new ExpressCraft.Vector2.$ctor1("(((100% - 28px) * " + (System.Decimal(index).mul(System.Decimal("0.1666666666666667"))) + ") + " + ((((Bridge.Int.mul(index, 4)) + 4) | 0)) + "px)", "(((100% - " + yOffset + "px) * " + (System.Decimal(y).mul(System.Decimal(0.2))) + ") + " + (((((((Bridge.Int.mul(y, 4)) + 8) | 0)) + AddHeight) | 0)) + "px)");
                    if (ExpressCraft.Helper.NotDesktop) {
                        buttons.getItem(i).Style.fontSize = "14px";
                    }

                    doc.appendChild(buttons.getItem(i).Content);
                    index = (index + 1) | 0;
                    if (index === 6) {
                        index = 0;
                        y = (y + 1) | 0;
                    }
                }

                this.btnDbl.Style.fontSize = "6.5pt";
                this.btnTAX.Style.fontSize = "6.5pt";
                this.btnPTAX.Style.fontSize = "6.5pt";
                this.btnMTAX.Style.fontSize = "6.5pt";

                this.btnClose.Style.color = "red";
                this.btnClose.Style.fontWeight = "bold";

                if (!CloseButtonVisible) {
                    this.btnClose.Style.visibility = "hidden";
                }

                this.RefreshValue();

                this.Content.appendChild(doc);
            }
        },
        methods: {
            AddTextToCommand: function (button) {
                if (Bridge.referenceEquals(button.Text, ".") && System.String.contains(this.current_command,".")) {
                    return;
                }

                if (Bridge.referenceEquals(this.current_command, "0")) {
                    this.current_command = "";
                }

                this.current_command = (this.current_command || "") + (button.Text || "");

                this.RefreshValue();
            },
            CalculateAndClose: function () {
                var x = this.Calculate();

                if (!Bridge.staticEquals(this.OnEqual, null)) {
                    this.OnEqual(x);
                }
                if (!this.DontRefresh) {
                    if (!Bridge.staticEquals(this.OnClose, null)) {
                        this.OnClose();
                    }
                }
            },
            Calculate: function () {
                var previousValue = System.Decimal(0);

                var previousOp = "";
                var length = this._commands.Count;

                for (var i = 0; i < length; i = (i + 1) | 0) {
                    var command = this._commands.getItem(i);

                    if (System.String.endsWith(command, "%")) {
                        command = command.substr(0, ((command.length - 1) | 0));
                    }

                    var tryDec = { };
                    if (System.Decimal.tryParse(command, null, tryDec)) {
                        if (!Bridge.referenceEquals(previousOp, "")) {
                            if (System.String.endsWith(this._commands.getItem(i), "%")) {
                                try {
                                    tryDec.v = previousValue.mul((tryDec.v.div(System.Decimal(100))));
                                } catch ($e1) {
                                    $e1 = System.Exception.create($e1);
                                    tryDec.v = System.Decimal(0);
                                }
                            }

                            if (Bridge.referenceEquals(previousOp, "+")) {
                                previousValue = previousValue.add(tryDec.v);
                            } else if (Bridge.referenceEquals(previousOp, "-")) {
                                previousValue = previousValue.sub(tryDec.v);
                            } else if (Bridge.referenceEquals(previousOp, "/")) {
                                try {
                                    previousValue = previousValue.div(tryDec.v);
                                } catch ($e2) {
                                    $e2 = System.Exception.create($e2);
                                    previousValue = System.Decimal(0);
                                }
                            } else if (Bridge.referenceEquals(previousOp, "*")) {
                                previousValue = previousValue.mul(tryDec.v);
                            } else if (Bridge.referenceEquals(previousOp, "*")) {
                                previousValue = previousValue.mul(tryDec.v);
                            }

                            previousOp = "";
                        } else {
                            previousValue = tryDec.v;
                        }
                    } else {
                        previousOp = command;
                        if (Bridge.referenceEquals(previousOp, "+TAX")) {
                            previousValue = ExpressCraft.Helper.AddTax(previousValue);
                            previousOp = "";
                        } else if (Bridge.referenceEquals(previousOp, "-TAX")) {
                            previousValue = ExpressCraft.Helper.DeductTax(previousValue);
                            previousOp = "";
                        } else if (Bridge.referenceEquals(previousOp, "TAX")) {
                            previousValue = ExpressCraft.Helper.GetPortionTax(previousValue);
                            previousOp = "";
                        } else if (Bridge.referenceEquals(previousOp, "Dbl")) {
                            previousValue = previousValue.mul(System.Decimal(2));
                            previousOp = "";
                        } else if (Bridge.referenceEquals(previousOp, "sqrt")) {
                            try {
                                previousValue = System.Decimal(Math.sqrt(System.Decimal.toFloat(previousValue)), null, System.Double);
                            } catch ($e3) {
                                $e3 = System.Exception.create($e3);
                                previousValue = System.Decimal(0);
                            }
                            previousOp = "";
                        } else if (Bridge.referenceEquals(previousOp, "1/x")) {
                            try {
                                previousValue = System.Decimal(1.0).div(previousValue);
                            } catch ($e4) {
                                $e4 = System.Exception.create($e4);
                                previousValue = System.Decimal(0);
                            }

                            previousOp = "";
                        } else if (Bridge.referenceEquals(previousOp, "+/-")) {
                            previousValue = previousValue.neg();
                            previousOp = "";
                        }
                    }
                }

                return previousValue;
            },
            RefreshValue: function () {
                if (this.DontRefresh) {
                    return;
                }
                var builder = new System.Text.StringBuilder();

                var length = this._commands.Count;

                for (var i = 0; i < length; i = (i + 1) | 0) {
                    builder.append((this._commands.getItem(i) || "") + " ");
                }
                builder.append(this.current_command);
                this.DisplayInput.Text = "";
                this.DisplayInput.Text = builder.toString();
            },
            IsAllNumbers: function (value) {
                var x = { };
                return System.Decimal.tryParse(value, null, x);
            },
            Back: function (button) {
                if (!Bridge.referenceEquals(this.current_command, "")) {
                    this.current_command = this.current_command.substr(0, ((this.current_command.length - 1) | 0));
                } else {
                    if (this._commands.Count > 0) {
                        var x = System.Linq.Enumerable.from(this._commands).last();
                        if (this.IsAllNumbers(x)) {
                            this.current_command = x;
                            this.current_command = this.current_command.substr(0, ((this.current_command.length - 1) | 0));
                        } else {
                            this.current_command = "";
                        }
                        this._commands.removeAt(((this._commands.Count - 1) | 0));
                    }
                }
                this.RefreshValue();
            },
            IsSingleOperator: function (x) {
                return (System.String.contains(x,"TAX") || Bridge.referenceEquals(x, "Dbl") || Bridge.referenceEquals(x, "1/x") || Bridge.referenceEquals(x, "+/-") || Bridge.referenceEquals(x, "sqrt"));
            },
            AddOperator: function (button) {
                if (this.IsSingleOperator(button.Text)) {
                    if (this._commands.Count > 0) {
                        var x = System.Linq.Enumerable.from(this._commands).last();
                        if (!this.IsSingleOperator(x)) {
                            if (Bridge.referenceEquals(this.current_command, "") && !this.IsAllNumbers(x)) {
                                return;
                            }
                        }
                    }

                    if (!Bridge.referenceEquals(this.current_command, "")) {
                        this._commands.add(this.current_command);
                        this.current_command = "";
                    }

                    this._commands.add(button.Text);

                    this.RefreshValue();
                } else {
                    if (Bridge.referenceEquals(this.current_command, "")) {
                        if (Bridge.referenceEquals(button.Text, "=")) {
                            this.CalculateAndClose();
                            return;
                        } else {
                            if (this._commands.Count > 0) {
                                var x1 = System.Linq.Enumerable.from(this._commands).last();
                                if (!this.IsSingleOperator(x1)) {
                                    return;
                                }
                            } else {
                                return;
                            }
                        }
                    }

                    if (Bridge.referenceEquals(button.Text, "%")) {
                        if (this._commands.Count > 0) {
                            var x2 = System.Linq.Enumerable.from(this._commands).last();

                            if (!this.IsSingleOperator(x2)) {
                                this.current_command = (this.current_command || "") + "%";
                                this._commands.add(this.current_command);
                                this.current_command = "";
                            } else {
                                return;
                            }
                        }
                    } else {
                        this._commands.add(this.current_command);
                        this.current_command = "";

                        if (Bridge.referenceEquals(button.Text, "=")) {
                            this.CalculateAndClose();
                        } else {
                            this._commands.add(button.Text);
                        }
                    }
                    this.RefreshValue();
                }
            }
        }
    });

    Bridge.define("ExpressCraft.CanvasControl", {
        inherits: [ExpressCraft.Control],
        fields: {
            Context: null,
            Canvas: null,
            ClearOnResize: false
        },
        ctors: {
            init: function () {
                this.ClearOnResize = true;
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.Control.ctor.call(this, document.createElement("canvas"));
                this.Canvas = this.Content;

                this.Context = this.Canvas.getContext("2d");

                this.OnResize = Bridge.fn.bind(this, function (sender) {
                    var bounds = this.Content.getBoundingClientRect();
                    this.Canvas.width = Bridge.Int.clipu32(bounds.width);
                    this.Canvas.height = Bridge.Int.clipu32(bounds.height);

                    this.Refresh();
                });
            }
        },
        methods: {
            Render: function () {
                ExpressCraft.Control.prototype.Render.call(this);

                this.Refresh();
            },
            /**
             * Refresh control..
             *
             * @instance
             * @public
             * @this ExpressCraft.CanvasControl
             * @memberof ExpressCraft.CanvasControl
             * @return  {void}
             */
            Refresh: function () {
                if (this.ClearOnResize) {
                    this.OnClear();
                }
                this.OnPaint();
            },
            CreateGraphics: function () {
                return new ExpressCraft.Graphics(this);
            },
            OnClear: function () {
                this.Context.clearRect(0, 0, this.Canvas.width, this.Canvas.height);
            },
            OnPaint: function () {

            }
        }
    });

    Bridge.define("ExpressCraft.CheckEdit", {
        inherits: [ExpressCraft.Control],
        statics: {
            methods: {
                op_Implicit: function (checkEdit) {
                    return checkEdit.Edit;
                }
            }
        },
        fields: {
            Edit: null,
            span: null,
            OnCheckChanged: null
        },
        props: {
            Checked: {
                get: function () {
                    return ExpressCraft.Helper.IsTrue(this.Edit.Text) === 1;
                },
                set: function (value) {
                    this.Edit.Text = System.Boolean.toString(value);
                }
            },
            Text: {
                get: function () {
                    return this.span.innerHTML;
                },
                set: function (value) {
                    this.span.innerHTML = value;
                }
            }
        },
        ctors: {
            ctor: function (label) {
                if (label === void 0) { label = ""; }
                var $t;

                this.$initialize();
                ExpressCraft.Control.ctor.call(this, ($t = document.createElement("label"), $t.className = ExpressCraft.Control.BaseClass(false, true), $t));
                this.Edit = new ExpressCraft.TextInput.$ctor2("checkbox");
                this.Edit.Controller = this;
                this.Edit.OnTextChanged = Bridge.fn.bind(this, function (sender) {
                    if (!Bridge.staticEquals(this.OnCheckChanged, null)) {
                        this.OnCheckChanged(this);
                    }
                });
                this.span = document.createElement("span");

                this.Text = label;

                ExpressCraft.Helper.AppendChildren$2(this.Content, [ExpressCraft.Control.op_Implicit(this.Edit), this.span]);
            }
        }
    });

    Bridge.define("ExpressCraft.TextInput", {
        inherits: [ExpressCraft.Control],
        statics: {
            methods: {
                FixInput: function (type) {
                    if (Bridge.referenceEquals(type, "date") || (ExpressCraft.Helper.IsFireFox() && !Bridge.referenceEquals(type, "password") && !Bridge.referenceEquals(type, "checkbox") && !Bridge.referenceEquals(type, "radio"))) {
                        return "text";
                    } else {
                        return type;
                    }
                }
            }
        },
        fields: {
            prevText: null,
            OnTextChanged: null,
            OnKeyDown: null,
            OnKeyUp: null,
            OnKeyPress: null,
            OnGotFocus: null,
            OnLostFocus: null,
            OnValidateData: null,
            DisableFocus: false,
            IsSubmit: false,
            GoNext: false,
            OnFocusDontSelectAll: false,
            _displayFormat: null,
            Controller: null,
            Type: null,
            DisableFocusPopup: false,
            IsOverride: false,
            PreZIndex: null,
            enabled: false,
            _readonly: false
        },
        props: {
            DisplayFormat: {
                get: function () {
                    return this._displayFormat;
                },
                set: function (value) {
                    this.SetDisplayFormat(value);
                }
            },
            Text: {
                get: function () {
                    if (this.IsOverride) {
                        return this.GetValue();
                    } else {
                        if (Bridge.referenceEquals(this.Type, "checkbox") || Bridge.referenceEquals(this.Type, "radio")) {
                            return System.Boolean.toString(this.Content.checked);
                        } else {
                            return this.Content.value;
                        }
                    }
                },
                set: function (value) {
                    if (this.IsOverride) {
                        this.SetValue(value);
                    } else {
                        if (Bridge.referenceEquals(this.Type, "checkbox") || Bridge.referenceEquals(this.Type, "radio")) {
                            value = value.toLowerCase();
                            this.Content.checked = ExpressCraft.Helper.IsTrue(value) === 1;
                        } else {
                            this.Content.value = value;
                            this.formatText();
                        }
                    }

                    this.CheckTextChanged();
                }
            },
            Enabled: {
                get: function () {
                    return this.enabled;
                },
                set: function (value) {
                    this.enabled = value;

                    if (Bridge.is(this, ExpressCraft.TextInputDropDown)) {
                        var inp = this;
                        inp.UsedEdit.Enabled = value;
                    } else if (Bridge.is(this, ExpressCraft.RadioElement)) {
                        var inp1 = this;
                        if (inp1.labelElement != null) {
                            inp1.ProcessIsEnabled();
                        }
                    }


                    if (this.enabled) {
                        this.Content.removeAttribute("disabled");
                    } else {
                        this.Content.setAttribute("disabled", "");
                    }
                }
            },
            Readonly: {
                get: function () {
                    return this._readonly;
                },
                set: function (value) {
                    this._readonly = value;
                    if (this._readonly) {
                        this.Content.setAttribute("readonly", System.Boolean.toString((this._readonly)));
                    } else {
                        this.Content.removeAttribute("readonly");
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.prevText = "";
                this._displayFormat = "";
                this.IsOverride = false;
                this.enabled = true;
                this._readonly = false;
            },
            $ctor1: function (overrideElement, addInputControl, addEventsOnControl) {
                if (addInputControl === void 0) { addInputControl = true; }
                if (addEventsOnControl === void 0) { addEventsOnControl = true; }

                this.$initialize();
                ExpressCraft.Control.ctor.call(this, overrideElement);
                overrideElement.className = ((addInputControl ? "inputcontrol" : "") || "") + (ExpressCraft.Control.BaseClass(addInputControl) || "");
                this.IsOverride = true;
                if (addEventsOnControl) {
                    this.addEvents();
                }
            },
            ctor: function () {
                ExpressCraft.TextInput.$ctor2.call(this, "text", true);

            },
            $ctor2: function (type, ac) {
                if (type === void 0) { type = "text"; }
                if (ac === void 0) { ac = true; }

                this.$initialize();
                ExpressCraft.Control.$ctor4.call(this, "inputcontrol", true, ExpressCraft.TextInput.FixInput(type), ac);
                this.Type = type;

                if (Bridge.referenceEquals(this.Type, "number")) {
                    this.Content.style.textAlign = "right";
                    this.Content.style.textIndent = "3px";
                    this.Content.style.paddingRight = "3px";

                    this.DisplayFormat = "n2";
                } else if (Bridge.referenceEquals(this.Type, "date")) {
                    var str = System.Array.init(3, null, System.String);
                    str[System.Array.index(ExpressCraft.Settings.DayPosition, str)] = "dd";
                    str[System.Array.index(ExpressCraft.Settings.MonthPosition, str)] = "MM";
                    str[System.Array.index(ExpressCraft.Settings.YearPosition, str)] = "yyyy";
                    var builder = new System.Text.StringBuilder();

                    for (var i = 0; i < 3; i = (i + 1) | 0) {
                        builder.append((str[System.Array.index(i, str)] || "") + String.fromCharCode(ExpressCraft.Settings.DateSeperator));
                    }
                    builder.setLength((builder.getLength() - 1) | 0);
                    this.DisplayFormat = builder.toString();
                }

                this.addEvents();

                this.formatText();
            }
        },
        methods: {
            ValidateData: function () {
                if (Bridge.is(this, ExpressCraft.TextInputDropDown)) {
                    var c = this;
                    if (c.UsedEdit != null && !Bridge.staticEquals(c.OnValidateData, null)) {
                        c.OnValidateData(c.UsedEdit);
                    }
                }
                if (!Bridge.staticEquals(this.OnValidateData, null)) {
                    this.OnValidateData(this);
                }
            },
            SetDisplayFormat: function (value) {
                this._displayFormat = value;
                this.formatText();
            },
            GetDisplayFormat: function () {
                return this._displayFormat;
            },
            GetValue: function () {
                return this.Content.innerHTML;
            },
            SetValue: function (value) {
                this.Content.innerHTML = value;
            },
            SetDateTime: function (date) {
                this.SetDate(System.String.format("{0:" + (this.GetDisplayFormat() || "") + "}", [Bridge.box(date, System.DateTime, System.DateTime.format)]));
            },
            OnFocus: function () { },
            GetInput: function () {
                if (Bridge.is(this.Content, HTMLInputElement)) {
                    return this.Content;
                } else {
                    return this.Content;
                }
            },
            GetNumberValue: function () {
                var value = ExpressCraft.Helper.StripNonNumberString(this.Text);
                return value;
            },
            GetEditValue: function () {
                if (Bridge.is(this, ExpressCraft.SearchInput)) {
                    var value = Bridge.cast(this, ExpressCraft.SearchInput).EditValue;
                    if (value == null) {
                        return Bridge.box(0, System.Int32);
                    }
                    return value;
                } else {
                    if (Bridge.referenceEquals(this.Type, "number")) {
                        var value1 = ExpressCraft.Helper.StripNonNumberString(this.Text);
                        return value1;
                    } else if (Bridge.referenceEquals(this.Type, "date")) {
                        var date = this.GetDateTime();
                        return Bridge.box(date, System.DateTime, System.DateTime.format);
                    } else {
                        return this.Text;
                    }
                }
            },
            Scroll: function (value, parent) {
                if (parent == null) {
                    return;
                }
                parent.scrollTop = value;
            },
            GetDisplayValue: function () {
                if (System.String.isNullOrWhiteSpace(this.DisplayFormat)) {
                    return this.Text;
                } else {
                    if (Bridge.referenceEquals(this.Type, "number")) {
                        var value = ExpressCraft.Helper.StripNonNumberString(this.Text);
                        if (System.String.startsWith(this.DisplayFormat.toLowerCase(), "c")) {
                            var wasNeg = false;
                            if (value.lt(System.Decimal(0))) {
                                wasNeg = true;
                                value = value.neg();
                            }

                            return ((wasNeg ? "-" : "") || "") + (System.String.format("${0:" + (System.String.replaceAll(System.String.replaceAll(this.DisplayFormat, "c", "n"), "C", "N") || "") + "}", [value]) || "");
                        } else if (System.String.startsWith(this.DisplayFormat.toLowerCase(), "p")) {
                            return System.String.format("{0:" + (this.DisplayFormat || "") + "}", [value.equalsT(System.Decimal(0)) ? System.Decimal(0) : value.div(System.Decimal(100.0))]);
                        } else {
                            return System.String.format("{0:" + (this.DisplayFormat || "") + "}", [value]);
                        }
                    } else if (Bridge.referenceEquals(this.Type, "date")) {
                        var value1 = ExpressCraft.Helper.StripNonDateString(this.Text);
                        if (Bridge.equals(value1, System.DateTime.getMinValue())) {
                            return "";
                        } else {
                            return System.String.format("{0:" + (this.DisplayFormat || "") + "}", [Bridge.box(value1, System.DateTime, System.DateTime.format)]);
                        }
                    } else {
                        return System.String.format("{0:" + (this.DisplayFormat || "") + "}", [this.Text]);
                    }
                }
            },
            formatText: function () {
                var input = this.GetInput();
                if (input != null && !Bridge.referenceEquals(input, document.activeElement)) {
                    if (!System.String.isNullOrWhiteSpace(this.DisplayFormat)) {
                        input.type = "text";
                        var newText = this.GetDisplayValue();

                        if (!Bridge.referenceEquals(newText, this.Text)) {
                            this.Text = newText;
                        }
                    }
                }
            },
            addEvents: function () {
                if (!this.IsOverride) {
                    var input = this.GetInput();
                    if (input != null) {
                        if (!System.String.isNullOrWhiteSpace(this.DisplayFormat)) {
                            if (Bridge.referenceEquals(this.Type, "password")) {
                                return;
                            }
                            input.type = "text";
                        }
                    }
                }

                this.Content.onblur = Bridge.fn.bind(this, function (ev) {
                    this.Content.style.zIndex = this.PreZIndex;

                    this.formatText();

                    if (!Bridge.staticEquals(this.OnLostFocus, null)) {
                        this.OnLostFocus(this);
                    }
                });
                this.Content.onfocus = Bridge.fn.bind(this, function (ev) {
                    if (this.DisableFocus) {
                        this.Content.blur();
                        return;
                    }

                    this.PreZIndex = this.Content.style.zIndex;
                    this.Content.style.zIndex = "10000";

                    this.OnFocus();
                    var input1 = this.GetInput();
                    if (input1 != null) {
                        if (!System.String.isNullOrWhiteSpace(this.DisplayFormat)) {
                            if (Bridge.referenceEquals(this.Type, "number")) {
                                try {
                                    this.Text = ExpressCraft.Helper.StripNonNumberString(this.Text).toString();
                                } catch ($e1) {
                                    $e1 = System.Exception.create($e1);
                                    this.Text = "0.00";
                                }
                            }

                            if (!ExpressCraft.Helper.IsFireFox() && !this.Readonly && !Bridge.referenceEquals(this.Type, "date")) {
                                input1.type = this.Type;
                            }
                        }
                        if (!Bridge.referenceEquals(this.Type, "checkbox") && ExpressCraft.Settings.OnFocusSelectAll && !this.OnFocusDontSelectAll) {
                            input1.select();
                        }
                    }



                    if (!Bridge.staticEquals(this.OnGotFocus, null)) {
                        this.OnGotFocus(this);
                    }

                    if (!this.DisableFocusPopup && !this.Readonly && this.Enabled && ExpressCraft.Helper.NotDesktop && !(Bridge.is(this, ExpressCraft.TextInputDropDown)) && this.Controller == null) {
                        if (!ExpressCraft.Settings.DisableTextPopupEditor) {
                            new ExpressCraft.TextForm(this).ShowPopup(new ExpressCraft.Vector2.$ctor1(0, 0));
                        }
                    }
                });
                this.Content.onchange = Bridge.fn.bind(this, function (ev) {
                    this.CheckTextChanged();
                });
                this.Content.oncontextmenu = function (ev) {
                    ev.stopPropagation();
                };
                this.Content.onkeypress = Bridge.fn.bind(this, function (ev) {
                    this.CheckTextChanged();
                    if (!Bridge.staticEquals(this.OnKeyPress, null)) {
                        this.OnKeyPress(this, ev);
                    }
                });
                this.Content.onkeydown = Bridge.fn.bind(this, function (ev) {
                    this.CheckTextChanged();
                    if (!Bridge.staticEquals(this.OnKeyDown, null)) {
                        this.OnKeyDown(this, ev);
                    }
                });
                this.Content.onkeyup = Bridge.fn.bind(this, function (ev) {
                    this.CheckTextChanged();
                    if (!Bridge.staticEquals(this.OnKeyUp, null)) {
                        this.OnKeyUp(this, ev);
                    }
                });
                this.Content.addEventListener("paste", Bridge.fn.bind(this, function () {
                    this.CheckTextChanged();
                }));
                this.Content.addEventListener("cut", Bridge.fn.bind(this, function () {
                    this.CheckTextChanged();
                }));
            },
            CheckTextChanged: function () {
                if (!Bridge.referenceEquals(this.Text, this.prevText)) {
                    if (!Bridge.staticEquals(this.OnTextChanged, null)) {
                        this.OnTextChanged(this);
                    }
                    this.prevText = this.Text;
                }
            },
            Render: function () {
                ExpressCraft.Control.prototype.Render.call(this);
                this.prevText = this.Text;
            },
            SetDate: function (date) {
                if (!System.String.isNullOrWhiteSpace(date)) {
                    var dd = ExpressCraft.Helper.StripNonDateString(date);
                    if (Bridge.equals(dd, System.DateTime.getMinValue())) {
                        this.Text = "";
                    } else {
                        this.Text = System.String.format("{0:" + (this.DisplayFormat || "") + "}", [Bridge.box(dd, System.DateTime, System.DateTime.format)]);
                    }
                } else {
                    this.Text = "";
                }
            },
            GetDate: function () {
                if (!System.String.isNullOrWhiteSpace(this.Text)) {
                    var dd = ExpressCraft.Helper.StripNonDateString(this.Text);
                    if (Bridge.equals(dd, System.DateTime.getMinValue())) {
                        return "";
                    } else {
                        return System.String.format("{0:" + (this.DisplayFormat || "") + "}", [Bridge.box(dd, System.DateTime, System.DateTime.format)]);
                    }
                } else {
                    return "";
                }
            },
            GetDateTime: function () {
                return ExpressCraft.Helper.StripNonDateString(this.Text);
            },
            IsNumericType: function () {
                return Bridge.referenceEquals(this.Type, "number");
            },
            IsDateType: function () {
                return Bridge.referenceEquals(this.Type, "date");
            }
        }
    });

    Bridge.define("ExpressCraft.ComboBoxEdit", {
        inherits: [ExpressCraft.Control],
        fields: {
            ComboBoxBase: null,
            previousSelectedIndex: 0,
            SelectedIndexChanged: null,
            enabled: false,
            _readonly: false
        },
        props: {
            Text: {
                get: function () {
                    if (this.ComboBoxBase.selectedIndex === -1) {
                        return "";
                    }
                    return this.ComboBoxBase.options[this.ComboBoxBase.selectedIndex].innerHTML;
                },
                set: function (value) {
                    for (var i = 0; System.Int64(i).lt(System.Int64(this.ComboBoxBase.options.length)); i = (i + 1) | 0) {
                        if (Bridge.referenceEquals(this.ComboBoxBase.options[i].innerHTML, value)) {
                            this.ComboBoxBase.selectedIndex = i;
                        }
                    }
                    this.ComboBoxBase.selectedIndex = -1;
                }
            },
            Value: {
                get: function () {
                    if (this.ComboBoxBase.selectedIndex === -1) {
                        return "";
                    }
                    return this.ComboBoxBase.options[this.ComboBoxBase.selectedIndex].value;
                },
                set: function (value) {
                    for (var i = 0; System.Int64(i).lt(System.Int64(this.ComboBoxBase.options.length)); i = (i + 1) | 0) {
                        if (Bridge.referenceEquals(this.ComboBoxBase.options[i].value, value)) {
                            this.ComboBoxBase.selectedIndex = i;
                        }
                    }
                    this.ComboBoxBase.selectedIndex = -1;
                }
            },
            Enabled: {
                get: function () {
                    return this.enabled;
                },
                set: function (value) {
                    this.enabled = value;
                    this.Content.setAttribute("disabled", System.Boolean.toString((!this.enabled)));
                }
            },
            Readonly: {
                get: function () {
                    return this._readonly;
                },
                set: function (value) {
                    this._readonly = value;
                    this.Content.setAttribute("readonly", System.Boolean.toString((this._readonly)));
                }
            }
        },
        ctors: {
            init: function () {
                this.previousSelectedIndex = -1;
                this.enabled = true;
                this._readonly = false;
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.Control.$ctor2.call(this, "inputcontrol", ExpressCraft.ComboBoxTypes.Default);
                this.ComboBoxBase = this.Content;

                this.Content.oncontextmenu = function (ev) {
                    ev.stopPropagation();
                };

                this.ComboBoxBase.onchange = Bridge.fn.bind(this, function (ev) {
                    if (this.previousSelectedIndex !== this.ComboBoxBase.selectedIndex) {
                        if (!Bridge.staticEquals(this.SelectedIndexChanged, null)) {
                            this.SelectedIndexChanged(this);
                        }

                        this.previousSelectedIndex = this.ComboBoxBase.selectedIndex;
                    }
                    ev.stopPropagation();
                });
            }
        },
        methods: {
            FillData: function (dataitems) {
                var $t;
                if (dataitems === void 0) { dataitems = []; }
                jQuery(this.ComboBoxBase).empty();

                if (dataitems == null) {
                    for (var i = 0; i < dataitems.length; i = (i + 1) | 0) {
                        ExpressCraft.Helper.AppendChild$2(this.ComboBoxBase, ($t = document.createElement("option"), $t.innerHTML = dataitems[System.Array.index(i, dataitems)].Text, $t.value = dataitems[System.Array.index(i, dataitems)].Value, $t));
                    }
                }
            },
            Render: function () {
                ExpressCraft.Control.prototype.Render.call(this);
            }
        }
    });

    Bridge.define("ExpressCraft.ContextMenu", {
        inherits: [ExpressCraft.Control],
        statics: {
            fields: {
                TotalContextHandles: 0,
                MainContextMenu: null
            },
            ctors: {
                init: function () {
                    this.TotalContextHandles = 0;
                }
            }
        },
        fields: {
            /**
             * For internal use only - so if we click on document - we can close all context menus ---
             *
             * @instance
             * @protected
             * @memberof ExpressCraft.ContextMenu
             * @type ExpressCraft.ContextMenu
             */
            SubContextOpened: null,
            ContextItems: null,
            Visible: false
        },
        ctors: {
            init: function () {
                this.ContextItems = new (System.Collections.Generic.List$1(ExpressCraft.ContextItem)).ctor();
                this.Visible = false;
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.Control.$ctor3.call(this, "contextmenu");
                this.Content.onmouseleave = Bridge.fn.bind(this, function (ev) {
                    this.Close();
                });
            }
        },
        methods: {
            RenderContextMenu: function () {
                var x = 0;
                var ii = -1;

                ExpressCraft.Helper.Empty(this.Content);

                for (var i = 0; i < this.ContextItems.Count; i = (i + 1) | 0) {
                    var y = this.ContextItems.getItem(i).Caption.length;
                    if (y > x) {
                        x = y;
                        ii = i;
                    }
                }

                if (ii === -1) {
                    return;
                }
                var calwidth = Bridge.Int.clip32(ExpressCraft.Control.GetTextWidth(this.ContextItems.getItem(ii).Caption, ExpressCraft.Settings.DefaultFont));
                if (calwidth < ExpressCraft.Settings.ContextMenuMinWidth) {
                    calwidth = ExpressCraft.Settings.ContextMenuMinWidth;
                }
                var width = (((((((calwidth + 34) | 0) + 8) | 0) + 2) | 0));

                var top = 1;

                for (var i1 = 0; i1 < this.ContextItems.Count; i1 = (i1 + 1) | 0) {
                    var contextItem = { v : this.ContextItems.getItem(i1) };
                    var y1 = contextItem.v.Caption.length;
                    var item = ExpressCraft.Control.Label$1(contextItem.v.Caption, 1, top, ((width - 2) | 0), false, false, "contextitem");

                    item.onclick = (function ($me, contextItem) {
                        return Bridge.fn.bind($me, function (ev) {
                            if (contextItem.v.Enabled) {
                                if (!Bridge.staticEquals(contextItem.v.OnItemClick, null)) {
                                    contextItem.v.OnItemClick(contextItem.v);
                                }
                                this.Close();
                            }
                        });
                    })(this, contextItem);

                    ExpressCraft.Helper.AppendChild$2(this.Content, item);

                    top = (top + 24) | 0;

                    if (this.ContextItems.getItem(i1).BeginGroup && i1 !== this.ContextItems.Count) {
                        top = (top + 1) | 0;
                        var sep = ExpressCraft.Control.Div$1("contextitemseperator");

                        sep.style.top = ExpressCraft.Helper.ToPx(Bridge.box(top, System.Int32));
                        sep.style.width = ExpressCraft.Helper.ToPx(Bridge.box(calwidth, System.Int32));

                        ExpressCraft.Helper.AppendChild$2(this.Content, sep);

                        top = (top + 2) | 0;
                    }
                }

                top = (top + 1) | 0;

                ExpressCraft.Helper.SetSize$1(this.Content, width, top);
            },
            Show: function (Location) {
                if (ExpressCraft.ContextMenu.MainContextMenu != null) {
                    ExpressCraft.ContextMenu.MainContextMenu.Close();
                    ExpressCraft.ContextMenu.MainContextMenu = null;
                }
                ExpressCraft.ContextMenu.MainContextMenu = this;

                if (this.Visible) {
                    this.Close();
                }
                if (!this.Visible) {
                    ExpressCraft.Helper.SetLocation$2(this.Content, ((Location.Xi - 5) | 0), ((Location.Yi - 5) | 0));
                    this.RenderContextMenu();

                    ExpressCraft.ContextMenu.TotalContextHandles = (ExpressCraft.ContextMenu.TotalContextHandles + 1) | 0;
                    this.Content.style.zIndex = Bridge.toString((((ExpressCraft.ContextMenu.TotalContextHandles + ExpressCraft.Settings.ContextMenuStartingZIndex) | 0)));
                    ExpressCraft.Helper.AppendChild$1(document.body, this);
                    this.Visible = true;
                }
            },
            Close: function () {
                if (this.Visible) {
                    ExpressCraft.ContextMenu.TotalContextHandles = (ExpressCraft.ContextMenu.TotalContextHandles - 1) | 0;
                    document.body.removeChild(ExpressCraft.Control.op_Implicit(this));
                    this.Visible = false;
                }

                if (this.SubContextOpened != null) {
                    this.SubContextOpened.Close();
                    this.SubContextOpened = null;
                }
            }
        }
    });

    Bridge.define("ExpressCraft.DataColumnBool", {
        inherits: [ExpressCraft.DataColumn],
        fields: {
            Cells: null
        },
        ctors: {
            init: function () {
                this.Cells = new (System.Collections.Generic.List$1(System.Nullable$1(System.Boolean))).ctor();
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.DataColumn.ctor.call(this);
                this.DataType = ExpressCraft.DataType.Bool;
            }
        }
    });

    Bridge.define("ExpressCraft.DataColumnByte", {
        inherits: [ExpressCraft.DataColumn],
        fields: {
            Cells: null
        },
        ctors: {
            init: function () {
                this.Cells = new (System.Collections.Generic.List$1(System.Nullable$1(System.Byte))).ctor();
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.DataColumn.ctor.call(this);
                this.DataType = ExpressCraft.DataType.Byte;
            }
        }
    });

    Bridge.define("ExpressCraft.DataColumnDateTime", {
        inherits: [ExpressCraft.DataColumn],
        fields: {
            Cells: null
        },
        ctors: {
            init: function () {
                this.Cells = new (System.Collections.Generic.List$1(System.Nullable$1(System.DateTime))).ctor();
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.DataColumn.ctor.call(this);
                this.DataType = ExpressCraft.DataType.DateTime;
            }
        }
    });

    Bridge.define("ExpressCraft.DataColumnDecimal", {
        inherits: [ExpressCraft.DataColumn],
        fields: {
            Cells: null
        },
        ctors: {
            init: function () {
                this.Cells = new (System.Collections.Generic.List$1(System.Nullable$1(System.Decimal))).ctor();
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.DataColumn.ctor.call(this);
                this.DataType = ExpressCraft.DataType.Decimal;
            }
        }
    });

    Bridge.define("ExpressCraft.DataColumnDouble", {
        inherits: [ExpressCraft.DataColumn],
        fields: {
            Cells: null
        },
        ctors: {
            init: function () {
                this.Cells = new (System.Collections.Generic.List$1(System.Nullable$1(System.Double))).ctor();
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.DataColumn.ctor.call(this);
                this.DataType = ExpressCraft.DataType.Double;
            }
        }
    });

    Bridge.define("ExpressCraft.DataColumnFloat", {
        inherits: [ExpressCraft.DataColumn],
        fields: {
            Cells: null
        },
        ctors: {
            init: function () {
                this.Cells = new (System.Collections.Generic.List$1(System.Nullable$1(System.Single))).ctor();
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.DataColumn.ctor.call(this);
                this.DataType = ExpressCraft.DataType.Float;
            }
        }
    });

    Bridge.define("ExpressCraft.DataColumnInteger", {
        inherits: [ExpressCraft.DataColumn],
        fields: {
            Cells: null
        },
        ctors: {
            init: function () {
                this.Cells = new (System.Collections.Generic.List$1(System.Nullable$1(System.Int32))).ctor();
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.DataColumn.ctor.call(this);
                this.DataType = ExpressCraft.DataType.Integer;
            }
        }
    });

    Bridge.define("ExpressCraft.DataColumnLong", {
        inherits: [ExpressCraft.DataColumn],
        fields: {
            Cells: null
        },
        ctors: {
            init: function () {
                this.Cells = new (System.Collections.Generic.List$1(System.Nullable$1(System.Int64))).ctor();
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.DataColumn.ctor.call(this);
                this.DataType = ExpressCraft.DataType.Long;
            }
        }
    });

    Bridge.define("ExpressCraft.DataColumnObject", {
        inherits: [ExpressCraft.DataColumn],
        fields: {
            Cells: null
        },
        ctors: {
            init: function () {
                this.Cells = new (System.Collections.Generic.List$1(System.Object)).ctor();
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.DataColumn.ctor.call(this);
                this.DataType = ExpressCraft.DataType.Object;
            }
        }
    });

    Bridge.define("ExpressCraft.DataColumnShort", {
        inherits: [ExpressCraft.DataColumn],
        fields: {
            Cells: null
        },
        ctors: {
            init: function () {
                this.Cells = new (System.Collections.Generic.List$1(System.Nullable$1(System.Int16))).ctor();
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.DataColumn.ctor.call(this);
                this.DataType = ExpressCraft.DataType.Short;
            }
        }
    });

    Bridge.define("ExpressCraft.DataColumnString", {
        inherits: [ExpressCraft.DataColumn],
        fields: {
            Cells: null
        },
        ctors: {
            init: function () {
                this.Cells = new (System.Collections.Generic.List$1(System.String)).ctor();
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.DataColumn.ctor.call(this);
                this.DataType = ExpressCraft.DataType.String;
            }
        }
    });

    Bridge.define("ExpressCraft.DateControl", {
        inherits: [ExpressCraft.Control],
        statics: {
            fields: {
                Days: null
            },
            ctors: {
                init: function () {
                    this.Days = System.Array.init(["MO", "TU", "WE", "TH", "FR", "SA", "SU"], System.String);
                }
            }
        },
        fields: {
            btnTop: null,
            btnSelectedRange: null,
            btnToday: null,
            btnLeft: null,
            btnRight: null,
            ContentRange: null,
            SelectedYear: 0,
            SelectedMonth: 0,
            SelectedDay: 0,
            _activeDisplayMode: 0,
            OnDateChanged: null,
            OnRequestToClose: null
        },
        props: {
            ActiveDisplayMode: {
                get: function () {
                    return this._activeDisplayMode;
                },
                set: function (value) {
                    if (this._activeDisplayMode !== value) {
                        this._activeDisplayMode = value;
                        this.RefreshView();
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this._activeDisplayMode = ExpressCraft.DateControl.DisplayMode.Day;
            },
            ctor: function (startDate) {
                var $t;
                this.$initialize();
                ExpressCraft.Control.$ctor1.call(this);
                this.Size = new ExpressCraft.Vector2.$ctor1(230, 245);


                var doc = document.createDocumentFragment();

                this.Content.onkeydown = Bridge.fn.cacheBind(this, this.BlockTabEvent);

                this.btnTop = new ExpressCraft.SimpleButton.ctor();
                this.btnTop.Style.transform = "translate(-50%, 0)";
                this.btnTop.Style.left = "50%";
                this.btnTop.Style.marginRight = "50%";
                this.btnTop.Top = 6;
                this.btnTop.Width = "auto";
                this.btnTop.Style.borderColor = "transparent";
                this.btnTop.Content.onkeydown = Bridge.fn.cacheBind(this, this.BlockTabEvent);

                this.btnSelectedRange = ($t = new ExpressCraft.SimpleButton.ctor(), $t.ItemClick = Bridge.fn.bind(this, function (ev) {
                    this.MoveUp();
                }), $t);

                this.btnSelectedRange.Style.transform = "translate(-50%, 0)";
                this.btnSelectedRange.Style.left = "50%";
                this.btnSelectedRange.Style.marginRight = "50%";
                this.btnSelectedRange.Top = 30;
                this.btnSelectedRange.Width = "auto";
                this.btnSelectedRange.Style.borderColor = "transparent";
                this.btnSelectedRange.Content.onkeydown = Bridge.fn.cacheBind(this, this.BlockTabEvent);

                this.btnLeft = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "<", $t.Location = new ExpressCraft.Vector2.$ctor1(14, 36), $t.Size = new ExpressCraft.Vector2.$ctor1(13, 13), $t.ItemClick = Bridge.fn.bind(this, function (ev) {
                    this.MoveLeft();
                }), $t);
                this.btnLeft.Content.onkeydown = Bridge.fn.cacheBind(this, this.BlockTabEvent);

                this.btnRight = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = ">", $t.Location = new ExpressCraft.Vector2.$ctor1("(100% - 26px)", 36), $t.Size = new ExpressCraft.Vector2.$ctor1(13, 13), $t.ItemClick = Bridge.fn.bind(this, function (ev) {
                    this.MoveRight();
                }), $t);
                this.btnRight.Content.onkeydown = Bridge.fn.cacheBind(this, this.BlockTabEvent);

                this.btnLeft.Style.borderRadius = "50%";
                this.btnRight.Style.borderRadius = "50%";

                this.btnLeft.Style.lineHeight = "0";
                this.btnRight.Style.lineHeight = "0";

                if (ExpressCraft.Helper.NotDesktop) {
                    this.btnSelectedRange.Style.fontSize = "14px";
                    this.btnSelectedRange.Height = 36;
                    this.btnSelectedRange.Top = 42;

                    this.btnTop.Style.fontSize = "14px";
                    this.btnTop.Height = 36;

                    this.btnLeft.Size = new ExpressCraft.Vector2.$ctor1(36, 36);
                    this.btnLeft.Style.fontSize = "14px";
                    this.btnLeft.Top = 20;

                    this.btnRight.Size = new ExpressCraft.Vector2.$ctor1(36, 36);
                    this.btnRight.Style.fontSize = "14px";
                    this.btnRight.Top = 20;
                    this.btnRight.Left = "(100% - 50px)";

                    this.ContentRange = ($t = new ExpressCraft.Control.$ctor1(), $t.Size = new ExpressCraft.Vector2.$ctor1("(100% - 20px)", "(100% - 147px)"), $t.Location = new ExpressCraft.Vector2.$ctor1(11, 90), $t);
                } else {
                    this.ContentRange = ($t = new ExpressCraft.Control.$ctor1(), $t.Size = new ExpressCraft.Vector2.$ctor1("(100% - 20px)", "(100% - 92px)"), $t.Location = new ExpressCraft.Vector2.$ctor1(11, 60), $t);
                }

                this.ContentRange.Content.onkeydown = Bridge.fn.cacheBind(this, this.BlockTabEvent);

                this.btnToday = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "Today", $t.Width = 50, $t.ItemClick = Bridge.fn.bind(this, function (ev) {
                    this.ActiveDisplayMode = ExpressCraft.DateControl.DisplayMode.Day;
                    this.SetViewDateTime(System.DateTime.getToday());

                    if (!Bridge.staticEquals(this.OnDateChanged, null)) {
                        this.OnDateChanged(System.DateTime.getToday());
                    }

                    if (Bridge.equals(this.GetViewDateTime(), System.DateTime.getToday())) {
                        if (!Bridge.staticEquals(this.OnRequestToClose, null)) {
                            this.OnRequestToClose();
                        }
                    }
                }), $t);

                this.btnToday.Style.transform = "translate(-50%, 0)";
                this.btnToday.Style.left = "50%";
                this.btnToday.Style.marginRight = "50%";

                if (ExpressCraft.Helper.NotDesktop) {
                    this.btnToday.Top = "(100% - 51px)";
                    this.btnToday.Style.fontSize = "14px";
                    this.btnToday.Height = 45;
                    this.btnToday.Style.minWidth = "60px";
                    this.btnToday.Width = "(100% * 0.1428)";
                } else {
                    this.btnToday.Top = "(100% - 26px)";
                }

                this.btnToday.Content.onkeydown = Bridge.fn.cacheBind(this, this.BlockTabEvent);

                ExpressCraft.Helper.AppendChildren$1(doc, [this.btnTop, this.btnLeft, this.btnSelectedRange, this.btnRight, this.ContentRange, this.btnToday]);
                if (Bridge.equals(startDate, System.DateTime.getMinValue())) {
                    startDate = System.DateTime.getToday();
                }

                this.Content.appendChild(doc);

                this.SetViewDateTime(startDate);
            }
        },
        methods: {
            GetViewDateTime: function () {
                return System.DateTime.create(this.SelectedYear, this.SelectedMonth, this.SelectedDay);
            },
            SetViewDateTime: function (date) {
                var newSelectedYear = System.DateTime.getYear(date);
                var newSelectedMonth = System.DateTime.getMonth(date);
                var newSelectedDay = System.DateTime.getDay(date);

                if (newSelectedYear !== this.SelectedYear || newSelectedMonth !== this.SelectedMonth || newSelectedDay !== this.SelectedDay || Bridge.equals(date, System.DateTime.getToday())) {
                    this.SelectedYear = newSelectedYear;
                    this.SelectedMonth = newSelectedMonth;
                    this.SelectedDay = newSelectedDay;

                    if (!Bridge.staticEquals(this.OnDateChanged, null)) {
                        this.OnDateChanged(date);
                    }

                    this.RefreshView();
                }
            },
            RefreshView: function () {
                var $t;
                var date = this.GetViewDateTime();
                this.btnTop.Text = System.DateTime.format(date, "ddd, dd MMM yyyy");

                var doc = document.createDocumentFragment();

                switch (this._activeDisplayMode) {
                    case ExpressCraft.DateControl.DisplayMode.Day: 
                        this.btnSelectedRange.Text = System.DateTime.format(date, "MMM yyyy");
                        var startDate = System.DateTime.create(System.DateTime.getYear(date), System.DateTime.getMonth(date), 1);
                        var endDate = System.DateTime.addDays(System.DateTime.addMonths(startDate, 1), -1);
                        var TotalDays = (System.DateTime.subdd(endDate, startDate)).getDays();
                        var startDayIndex = ((System.DateTime.getDayOfWeek(startDate) === System.DayOfWeek.Sunday ? 7 : System.DateTime.getDayOfWeek(startDate)) - 1) | 0;
                        var offsetStart = 0;
                        var row = 1;
                        var startOutside = startDayIndex === 0 ? startDate : System.DateTime.addDays(startDate, ((-startDayIndex) | 0));
                        var endDayIndex = ((System.DateTime.getDayOfWeek(endDate) === System.DayOfWeek.Sunday ? 7 : System.DateTime.getDayOfWeek(endDate)) - 1) | 0;
                        for (var i = 0; i < 42; i = (i + 1) | 0) {
                            var curDate = { v : startOutside };

                            var btn = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = Bridge.toString(System.DateTime.getDay(curDate.v)), $t.Bounds = new ExpressCraft.Vector4.$ctor1("(100% * " + System.Double.format((offsetStart * 0.1428)) + ")", "(((100% - " + (ExpressCraft.Helper.NotDesktop ? 29 : 16) + "px) * " + System.Double.format(((((row - 1) | 0)) * 0.1666)) + ") + " + (ExpressCraft.Helper.NotDesktop ? 29 : 16) + "px)", "(100% * 0.1428)", "((100% - " + (ExpressCraft.Helper.NotDesktop ? 29 : 16) + "px) * " + System.Double.format(0.1666) + ")"), $t.ItemClick = (function ($me, curDate) {
                                return Bridge.fn.bind($me, function (ev) {
                                    if (Bridge.equals(this.GetViewDateTime(), curDate.v)) {
                                        if (!Bridge.staticEquals(this.OnRequestToClose, null)) {
                                            this.OnRequestToClose();
                                        }
                                    }
                                    this.SetViewDateTime(curDate.v);
                                });
                            })(this, curDate), $t);
                            if (ExpressCraft.Helper.NotDesktop) {
                                btn.Style.fontSize = "14px";
                                btn.Style.fontWeight = "bold";
                            }
                            if (Bridge.equals(curDate.v, date)) {
                                btn.ClassList.add("simplebutton-active");
                            }
                            btn.Style.borderColor = "transparent";

                            if (System.DateTime.lt(curDate.v, startDate) || System.DateTime.gt(curDate.v, endDate)) {
                                btn.Style.color = "rgb(211, 211, 211)";
                            } else if (System.DateTime.getDayOfWeek(curDate.v) === System.DayOfWeek.Saturday || System.DateTime.getDayOfWeek(curDate.v) === System.DayOfWeek.Sunday) {
                                btn.Style.color = "rgb(191, 11, 11)";
                                btn.Style.filter = "brightness(110%)";
                            } else {
                                btn.Style.filter = "brightness(110%)";
                            }
                            btn.Content.onkeydown = Bridge.fn.cacheBind(this, this.BlockTabEvent);

                            doc.appendChild(ExpressCraft.Control.op_Implicit(btn));

                            offsetStart = (offsetStart + 1) | 0;

                            if (offsetStart > 6) {
                                row = (row + 1) | 0;
                                offsetStart = 0;
                            }

                            startOutside = System.DateTime.addDays(System.DateTime.getDate(startOutside), 1);
                            if (System.DateTime.getHour(startOutside) === 23) {
                                startOutside = System.DateTime.addHours(startOutside, 1);
                            }
                        }
                        for (var x = 0; x < 7; x = (x + 1) | 0) {
                            var label = ExpressCraft.Control.Label(ExpressCraft.DateControl.Days[System.Array.index(x, ExpressCraft.DateControl.Days)], 0, 0);
                            ExpressCraft.Helper.SetLocation$2(label, "(100% * " + System.Double.format((x * 0.1428)) + " + ((100% * 0.1428) * 0.45) - 6px)", 0);
                            if (ExpressCraft.Helper.NotDesktop) {
                                label.style.fontSize = "14px";
                            }

                            doc.appendChild(label);
                        }
                        break;
                    case ExpressCraft.DateControl.DisplayMode.Month: 
                        break;
                    case ExpressCraft.DateControl.DisplayMode.Year: 
                        break;
                    default: 
                        break;
                }

                ExpressCraft.Helper.Empty(this.ContentRange.Content);
                ExpressCraft.Helper.AppendChild$2(this.ContentRange.Content, doc);
            },
            BlockTabEvent: function (ev) {
                if (ev.keyCode === 9) {
                    if (!Bridge.staticEquals(this.OnRequestToClose, null)) {
                        this.OnRequestToClose();
                    }
                    ev.preventDefault();
                }
            },
            MoveLeft: function () {
                this.MoveLeftOrRight(-1);
            },
            MoveUp: function () {
                return;
            },
            MoveLeftOrRight: function (timesValue) {
                var date = this.GetViewDateTime();

                switch (this._activeDisplayMode) {
                    default: 
                    case ExpressCraft.DateControl.DisplayMode.Day: 
                        date = System.DateTime.addMonths(date, (Bridge.Int.mul(1, timesValue)));
                        break;
                    case ExpressCraft.DateControl.DisplayMode.Month: 
                        date = System.DateTime.addMonths(date, (Bridge.Int.mul(12, timesValue)));
                        break;
                    case ExpressCraft.DateControl.DisplayMode.Year: 
                        date = System.DateTime.addYears(date, (Bridge.Int.mul(120, timesValue)));
                        break;
                }

                this.SetViewDateTime(date);
            },
            MoveRight: function () {
                this.MoveLeftOrRight(1);
            }
        }
    });

    Bridge.define("ExpressCraft.SimpleButton", {
        inherits: [ExpressCraft.Control],
        fields: {
            ItemClick: null,
            ParentForm: null,
            DialogResult: 0,
            _imageElement: null,
            _image: null,
            _useBase64Image: false,
            _imageRightAlign: false,
            _buttonImageSize: 0,
            enabled: false
        },
        events: {
            Click: null
        },
        props: {
            Image: {
                get: function () {
                    return this._image;
                },
                set: function (value) {
                    value = ((value || "") + "").trim();
                    if (!Bridge.referenceEquals(value, this._image)) {
                        this._image = value;
                        this._ProcessButtonImage();
                    }
                }
            },
            UseBase64Image: {
                get: function () {
                    return this._useBase64Image;
                },
                set: function (value) {
                    if (this._useBase64Image !== value) {
                        this._useBase64Image = value;
                        this._ProcessButtonImage();
                    }
                }
            },
            ImageRightAlign: {
                get: function () {
                    return this._imageRightAlign;
                },
                set: function (value) {
                    if (this._imageRightAlign !== value) {
                        this._imageRightAlign = value;
                        this._ProcessButtonImage();
                    }

                }
            },
            ButtonImageSize: {
                get: function () {
                    return this._buttonImageSize;
                },
                set: function (value) {
                    if (this._buttonImageSize !== value) {
                        this._buttonImageSize = value;
                        this._ProcessButtonImage();
                    }

                }
            },
            Text: {
                get: function () {
                    return this.Content.innerHTML;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this.Text, value)) {
                        this.Content.innerHTML = value;

                        if (this._imageElement != null) {
                            ExpressCraft.Helper.Delete$1(this._imageElement);
                            this._imageElement = null;
                        }
                        this._ProcessButtonImage();
                    }
                }
            },
            Enabled: {
                get: function () {
                    return this.enabled;
                },
                set: function (value) {
                    this.enabled = value;
                    if (this.enabled) {
                        this.Content.removeAttribute("disabled");
                    } else {
                        this.Content.setAttribute("disabled", System.Boolean.toString((!this.enabled)));
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.DialogResult = ExpressCraft.DialogResultEnum.None;
                this.enabled = true;
            },
            ctor: function () {
                ExpressCraft.SimpleButton.$ctor1.call(this, "button", true);

            },
            $ctor1: function (button, ac) {
                if (button === void 0) { button = "button"; }
                if (ac === void 0) { ac = true; }

                this.$initialize();
                ExpressCraft.Control.$ctor4.call(this, "simplebutton", false, button, ac);
                this.Content.oncontextmenu = function (ev) {
                    ev.stopPropagation();
                    ev.preventDefault();
                };

                if (ac) {
                    this.Style.font = ExpressCraft.Settings.Font;
                }

                ExpressCraft.Helper.SetSize(this, "69px", "20px");

                this.Content.onclick = Bridge.fn.bind(this, function (ev) {
                    if (this.enabled) {
                        this.Content.blur();

                        if (this.DialogResult !== ExpressCraft.DialogResultEnum.None && this.ParentForm != null && this.ParentForm.IsDialog()) {
                            this.ParentForm.DialogResult = this.DialogResult;
                        }

                        if (!Bridge.staticEquals(this.ItemClick, null)) {
                            this.ItemClick(this);
                        }

                        if (!Bridge.staticEquals(this.Click, null)) {
                            this.Click(this, { });
                        }

                        if (this.DialogResult !== ExpressCraft.DialogResultEnum.None && this.ParentForm.DialogResult !== ExpressCraft.DialogResultEnum.None && this.ParentForm != null && this.ParentForm.IsDialog()) {
                            this.ParentForm.Close();
                        }
                    }

                    ev.stopPropagation();
                    ev.stopImmediatePropagation();
                });
                this.Content.ondblclick = function (ev) {
                    ev.stopPropagation();
                    ev.stopImmediatePropagation();
                };
                this.Content.onmousedown = function (ev) {
                    ev.stopPropagation();
                    ev.stopImmediatePropagation();
                };
                this.Content.onmouseup = function (ev) {
                    ev.stopPropagation();
                    ev.stopImmediatePropagation();
                };
            }
        },
        methods: {
            _ProcessButtonImage: function () {
                if (System.String.isNullOrWhiteSpace(this._image)) {
                    if (this._imageElement != null) {
                        ExpressCraft.Helper.Delete$1(this._imageElement);
                        this._imageElement = null;
                    }
                } else {
                    if (this._imageElement == null) {
                        this._imageElement = document.createElement("img");
                    } else {
                        ExpressCraft.Helper.Delete$1(this._imageElement);
                    }
                    ExpressCraft.Helper.SetImage$1(this._imageElement, this._image, !this._useBase64Image, false);
                    var padding = this._buttonImageSize === 0 ? "16px" : ExpressCraft.Helper.ToPx(Bridge.box(this._buttonImageSize, System.Int32));

                    this._imageElement.style.height = padding;
                    this._imageElement.style.position = "absolute";
                    this._imageElement.style.top = "1px";

                    if (!this._imageRightAlign) {
                        this._imageElement.style.backgroundPosition = "left";
                        this._imageElement.style.paddingLeft = padding;
                        this._imageElement.style.paddingRight = "";

                        this._imageElement.style.left = "1px";

                        if (this.Content.lastChild == null) {
                            this.Content.appendChild(this._imageElement);
                        } else {
                            this.Content.insertBefore(this._imageElement, this.Content.lastChild);
                        }
                    } else {
                        this._imageElement.style.right = "1px";
                        this._imageElement.style.left = "";
                        this._imageElement.style.backgroundPosition = "right";
                        this._imageElement.style.paddingRight = padding;
                        this._imageElement.style.paddingLeft = "";

                        this.Content.appendChild(this._imageElement);
                    }
                }
            }
        }
    });

    Bridge.define("ExpressCraft.GridLookupEdit", {
        inherits: [ExpressCraft.Control],
        fields: {
            gridView: null,
            FieldName: null,
            DisplayName: null,
            Visible: false
        },
        ctors: {
            ctor: function () {
                var $t;
                this.$initialize();
                ExpressCraft.Control.$ctor2.call(this, "inputcontrol", ExpressCraft.ComboBoxTypes.Default);
                this.gridView = ($t = new ExpressCraft.GridView.$ctor1(true, true), $t.Size = new ExpressCraft.Vector2.$ctor1(250, 400), $t);
                this.gridView.ContextMenu = null;
                this.gridView.OnFocusedRowChanged = Bridge.fn.bind(this, function (rowHandle, PrevRowhandle) {
                    var $t1;
                    ExpressCraft.Helper.Empty(this.Content);

                    if (rowHandle > -1) {
                        ExpressCraft.Helper.AppendChild$2(this.Content, ($t1 = document.createElement("option"), $t1.innerHTML = (Bridge.as(this.gridView.GetRowCellValue$3(rowHandle, this.DisplayName), System.String)), $t1.value = (Bridge.as(this.gridView.GetRowCellValue$3(rowHandle, this.FieldName), System.String)), $t1));
                    }
                    if (this.Visible) {
                        this.ClosePopup();
                    }
                });

                this.gridView.Content.onmouseleave = Bridge.fn.bind(this, function (ev) {
                    this.ClosePopup();
                });
                this.Content.onmousedown = Bridge.fn.bind(this, function (ev) {
                    ev.preventDefault();
                    ev.stopImmediatePropagation();
                    if (this.Visible) {
                        this.ClosePopup();
                    } else {
                        this.ShowPopup();
                    }
                });
            }
        },
        methods: {
            ShowPopup: function () {
                if (this.Visible) {
                    return;
                }
                var x = this.Content.getBoundingClientRect();
                this.gridView.Location = new ExpressCraft.Vector2.$ctor1(x.left, x.top + x.height);

                ExpressCraft.ContextMenu.TotalContextHandles = (ExpressCraft.ContextMenu.TotalContextHandles + 1) | 0;
                ExpressCraft.Helper.AppendChild$1(this.Content.parentElement, this.gridView);

                this.gridView.RenderGrid();

                this.gridView.Content.style.zIndex = Bridge.toString((((ExpressCraft.ContextMenu.TotalContextHandles + ExpressCraft.Settings.ContextMenuStartingZIndex) | 0)));
                this.Visible = true;
            },
            ClosePopup: function () {
                if (this.Visible) {
                    this.gridView.Content.parentElement.removeChild(ExpressCraft.Control.op_Implicit(this.gridView));
                    ExpressCraft.ContextMenu.TotalContextHandles = (ExpressCraft.ContextMenu.TotalContextHandles - 1) | 0;
                    this.Visible = false;
                }
            }
        }
    });

    Bridge.define("ExpressCraft.GridView", {
        inherits: [ExpressCraft.Control,ExpressCraft.IPrintable],
        fields: {
            GridFindPanel: null,
            GridHeader: null,
            GridHeaderContainer: null,
            GridBodyContainer: null,
            GridBody: null,
            BottonOfTable: null,
            RightOfTable: null,
            RightOfTableHeader: null,
            SearchTextInput: null,
            btnFind: null,
            btnClear: null,
            btnClose: null,
            _showFindPanelContextItem: null,
            _findPanelVisible: false,
            _highlighSearchResults: false,
            _dataSource: null,
            OnFocusedRowChanged: null,
            OnFocusedColumnChanged: null,
            OnRowDoubleClick: null,
            OnCustomRowStyle: null,
            OnRowClick: null,
            OnDoubleClick: null,
            OnCellRowMouseDown: null,
            SelectedRows: null,
            VisibleRowHandles: null,
            _allowRowDrag: false,
            AutoGenerateColumnsFromSource: false,
            AllowMultiSelection: false,
            showAutoFilterRow: false,
            UnitHeight: 0,
            _columnAutoWidth: false,
            _focusedcolumn: 0,
            _focusedDataHandle: 0,
            _columnHeadersVisible: false,
            _useEditForm: false,
            SortSettings: null,
            Columns: null,
            PrevRenderGridScrollId: 0,
            clickTimeDiff: null,
            headingClass: null,
            cellClass: null,
            CacheRow: null,
            CountOfDeletion: 0,
            _searchTimer: 0,
            _useDrawNotDom: false,
            DragIndex: 0,
            ResizeIndex: 0,
            ResizePageX: 0,
            ResizeSpan: null,
            OnColumnOnClick: null,
            OnColumnDragStart: null,
            OnColumnDragOver: null,
            OnColumnDrop: null,
            OnColumnMouseDown: null,
            OnColumnMouseMove: null,
            OnColumnMouseLeave: null,
            OnRowDragStart: null,
            lastId: 0,
            PrevScroll: 0,
            FilterRowOnChange: null,
            RenderTime: 0,
            renderGridInternal: null,
            _disableRender: false
        },
        props: {
            FindPanelVisible: {
                get: function () {
                    return this._findPanelVisible;
                },
                set: function (value) {
                    if (this._findPanelVisible !== value) {
                        if (value) {
                            this.ShowFindPanel();
                        } else {
                            this.CloseFindPanel();
                        }

                    }

                }
            },
            HighlighSearchResults: {
                get: function () {
                    return this._highlighSearchResults;
                },
                set: function (value) {
                    if (this._highlighSearchResults !== value) {
                        this._highlighSearchResults = value;
                        this.RenderGrid();
                    }
                }
            },
            AllowRowDrag: {
                get: function () {
                    return this._allowRowDrag;
                },
                set: function (value) {
                    if (this._allowRowDrag !== value) {
                        this._allowRowDrag = value;
                        this.RenderGrid();
                    }
                }
            },
            ShowAutoFilterRow: {
                get: function () {
                    return this.showAutoFilterRow;
                },
                set: function (value) {
                    if (this.showAutoFilterRow !== value) {
                        this.showAutoFilterRow = value;
                        if (!this.showAutoFilterRow) {
                            for (var i = 0; i < this.ColumnCount(); i = (i + 1) | 0) {
                                this.Columns.getItem(i).FilterEdit = null;
                                this.Columns.getItem(i).FilterValue = null;
                            }
                            this.CalculateVisibleRows();
                        }
                        this.RenderGrid();
                    }
                }
            },
            FocusedColumn: {
                get: function () {
                    return this._focusedcolumn;
                },
                set: function (value) {
                    if (value !== this.FocusedColumn) {
                        var prev = this._focusedcolumn;
                        this._focusedcolumn = value;
                        if (!Bridge.staticEquals(this.OnFocusedColumnChanged, null)) {
                            this.OnFocusedColumnChanged(this._focusedcolumn, prev);
                        }
                    }
                }
            },
            FocusedDataHandle: {
                get: function () {
                    return this._focusedDataHandle;
                },
                set: function (value) {
                    if (value !== this._focusedDataHandle) {
                        var prev = this._focusedDataHandle;

                        this._focusedDataHandle = value;
                        this.RenderGrid();
                        if (!Bridge.staticEquals(this.OnFocusedRowChanged, null)) {
                            this.OnFocusedRowChanged(this._focusedDataHandle, prev);
                        }
                    }
                }
            },
            ColumnHeadersVisible: {
                get: function () {
                    return this._columnHeadersVisible;
                },
                set: function (value) {
                    if (value !== this._columnHeadersVisible) {
                        this._columnHeadersVisible = value;

                        this.SetDefaultSizes();

                        this.RenderGrid();
                    }
                }
            },
            ColumnAutoWidth: {
                get: function () {
                    return this._columnAutoWidth;
                },
                set: function (value) {
                    if (value) {
                        this.GridBodyContainer.style.overflowX = "hidden";
                    } else {
                        this.GridBodyContainer.style.overflowX = "auto";
                    }

                    if (this._columnAutoWidth !== value) {
                        this._columnAutoWidth = value;
                        this.RenderGrid();
                    }
                }
            },
            UseEditForm: {
                get: function () {
                    return this._useEditForm;
                },
                set: function (value) {
                    if (value !== this._useEditForm) {
                        this._useEditForm = value;
                        this.RenderGrid();
                    }
                }
            },
            DataSource: {
                get: function () {
                    return this._dataSource;
                },
                set: function (value) {
                    this.FocusedDataHandle = -1;
                    this.SelectedRows = new (ExpressCraft.HardSoftList$1(System.Boolean))(false);
                    this.VisibleRowHandles = new (System.Collections.Generic.List$1(System.Int32)).ctor();

                    if (this._dataSource != null) {
                        this._dataSource.removeOnDataSourceChanged(Bridge.fn.cacheBind(this, this.DataSource_OnDataSourceChanged));
                    }

                    this._dataSource = value;

                    if (this._dataSource != null) {
                        this._dataSource.addOnDataSourceChanged(Bridge.fn.cacheBind(this, this.DataSource_OnDataSourceChanged));

                        if (this.Columns.Count === 0 && this.AutoGenerateColumnsFromSource) {
                            var sw = System.Diagnostics.Stopwatch.startNew();

                            for (var i = 0; i < this._dataSource.ColumnCount; i = (i + 1) | 0) {
                                var sw1 = System.Diagnostics.Stopwatch.startNew();

                                var gvc = new ExpressCraft.GridViewColumn(this);
                                gvc.Caption = this._dataSource.Columns.getItem(i).FieldName;
                                gvc.Column = this._dataSource.Columns.getItem(i);
                                gvc.Visible = true;

                                switch (this._dataSource.Columns.getItem(i).DataType) {
                                    case ExpressCraft.DataType.Byte: 
                                    case ExpressCraft.DataType.Short: 
                                    case ExpressCraft.DataType.Integer: 
                                    case ExpressCraft.DataType.Long: 
                                    case ExpressCraft.DataType.Float: 
                                    case ExpressCraft.DataType.Double: 
                                    case ExpressCraft.DataType.Decimal: 
                                        gvc.BodyApparence.Alignment = "right";
                                        break;
                                    case ExpressCraft.DataType.DateTime: 
                                        if (ExpressCraft.Settings.GridViewAutoColumnFormatDates) {
                                            if (ExpressCraft.Settings.GridViewAutoColumnGenerateFormatAsDate) {
                                                gvc.FormatString = "{0:d}";
                                            } else {
                                                gvc.FormatString = "{0:yyyy-MM-dd}";
                                            }
                                        }
                                        break;
                                    case ExpressCraft.DataType.Bool: 
                                        gvc.CellDisplay = new ExpressCraft.GridViewCellDisplayCheckBox();
                                        break;
                                }

                                this.Columns.add(gvc);

                                sw.stop();
                                System.Console.WriteLine("DataSource AddColumn Auto: " + sw1.milliseconds());
                            }

                            sw.stop();
                            System.Console.WriteLine("DataSource AutoColumns: " + sw.milliseconds());
                        }
                        this.RenderGrid();
                    }
                }
            },
            UseDrawNotDom: {
                get: function () {
                    return this._useDrawNotDom;
                },
                set: function (value) {
                    if (this._useDrawNotDom !== value) {
                        this._useDrawNotDom = value;
                        this.RenderGrid();
                    }
                }
            }
        },
        alias: ["GetPages", "ExpressCraft$IPrintable$GetPages"],
        ctors: {
            init: function () {
                this._highlighSearchResults = true;
                this.SelectedRows = new (ExpressCraft.HardSoftList$1(System.Boolean))(false);
                this._allowRowDrag = false;
                this.AutoGenerateColumnsFromSource = true;
                this.AllowMultiSelection = true;
                this.showAutoFilterRow = false;
                this.UnitHeight = 28.0;
                this._columnAutoWidth = false;
                this._focusedcolumn = -1;
                this._focusedDataHandle = -1;
                this._columnHeadersVisible = true;
                this._useEditForm = true;
                this.Columns = new (System.Collections.Generic.List$1(ExpressCraft.GridViewColumn)).ctor();
                this.PrevRenderGridScrollId = -1;
                this.CacheRow = new (System.Collections.Generic.Dictionary$2(System.Int32,HTMLElement))();
                this.CountOfDeletion = 0;
                this._searchTimer = -1;
                this.DragIndex = -1;
                this.ResizeIndex = -1;
                this.ResizePageX = 0;
                this.lastId = -1;
                this.PrevScroll = -1;
                this.RenderTime = -1;
                this._disableRender = false;
            },
            ctor: function () {
                ExpressCraft.GridView.$ctor1.call(this, true, false);

            },
            $ctor1: function (autoGenerateColumns, columnAutoWidth) {
                if (autoGenerateColumns === void 0) { autoGenerateColumns = true; }
                if (columnAutoWidth === void 0) { columnAutoWidth = false; }
                var $t;

                this.$initialize();
                ExpressCraft.Control.$ctor3.call(this, "grid");
                if (ExpressCraft.Helper.NotDesktop) {
                    this.UnitHeight = 53;
                    this.headingClass = "heading heading-responsive";

                    this.cellClass = "cell cell-responsive";
                } else {
                    this.UnitHeight = 20;
                    this.headingClass = "heading";
                    this.cellClass = "cell";
                }

                this.Content.style.overflow = "hidden";
                this.renderGridInternal = Bridge.fn.bind(this, function () {
                    if (this._disableRender) {
                        return;
                    }

                    var StartedWith = this.RenderTime;

                    this.GridHeaderContainer.scrollLeft = this.GridBodyContainer.scrollLeft;
                    if (ExpressCraft.Settings.GridViewBlurOnScroll) {
                        this.ProcessBlur();
                    }

                    this.ValidateGridSize();

                    if (this.ColumnCount() === 0) {
                        this.ClearGrid();
                        return;
                    }

                    var RawLeftCellIndex = 0;
                    var RawLeftCellScrollPadding = 0;

                    var RawLeftCellCount = this.Columns.Count;

                    var LeftLocation = 0;
                    var foundLeftLocation = false;
                    var foundRightLocation = false;

                    var ClientWidth = this.GridBodyContainer.clientWidth;


                    var ViewWidth = this.GridBodyContainer.scrollLeft + ClientWidth;
                    var _columnAutoWidthSingle = 0.0;

                    if (this._columnAutoWidth) {
                        _columnAutoWidthSingle = ClientWidth === 0 ? 0.0 : ClientWidth / this.GetVisibleCount();
                    }

                    var MaxWidth;
                    var LastWidth;

                    for (var x = 0; x < this.Columns.Count; x = (x + 1) | 0) {
                        if (!this.Columns.getItem(x).Visible) {
                            continue;
                        }

                        this.Columns.getItem(x).CachedX = LeftLocation;
                        LastWidth = this._columnAutoWidth ? _columnAutoWidthSingle : this.Columns.getItem(x).Width;
                        LeftLocation += LastWidth;
                        if (!foundLeftLocation && LeftLocation >= this.GridBodyContainer.scrollLeft) {
                            foundLeftLocation = true;
                            RawLeftCellIndex = x;
                            RawLeftCellScrollPadding = LeftLocation - this.GridBodyContainer.scrollLeft;
                        }
                        if (foundLeftLocation && !foundRightLocation && LeftLocation >= ViewWidth) {
                            foundRightLocation = true;
                            RawLeftCellCount = (x + 1) | 0;
                            break;
                        }
                        if (StartedWith !== this.RenderTime) {
                            return;
                        }
                    }

                    MaxWidth = LeftLocation;

                    var colFragment = document.createDocumentFragment();

                    var uboundRowCount = (RawLeftCellCount - 1) | 0;

                    if (this._columnHeadersVisible) {
                        for (var x1 = RawLeftCellIndex; x1 < RawLeftCellCount; x1 = (x1 + 1) | 0) {
                            if (x1 >= this.Columns.Count) {
                                break;
                            }
                            if (!this.Columns.getItem(x1).Visible) {
                                continue;
                            }

                            var gcol = this.Columns.getItem(x1);
                            var colIndex = x1;
                            var apparence = gcol.HeadingApparence;

                            var col = ExpressCraft.Control.Label$3(gcol.Caption, (this._columnAutoWidth ? gcol.CachedX : gcol.CachedX), 0, (this._columnAutoWidth ? _columnAutoWidthSingle : gcol.Width) - (x1 === uboundRowCount ? 0 : 1), apparence.IsBold, false, this.headingClass, apparence.Alignment, apparence.Forecolor);
                            if (gcol.SortedMode !== ExpressCraft.GridViewSortMode.None) {
                                var sortImage = ExpressCraft.Control.Div$1(gcol.SortedMode === ExpressCraft.GridViewSortMode.Asc ? "grid-sort-up" : "grid-sort-down");
                                ExpressCraft.Helper.SetBounds$1(sortImage, "(100% - 13px)", 11, 9, 5);
                                ExpressCraft.Helper.AppendChild$2(col, sortImage);
                            }

                            this.SetupColumn(col, x1, gcol);

                            colFragment.appendChild(col);

                            if (StartedWith !== this.RenderTime) {
                                return;
                            }
                        }
                    }


                    if (this._dataSource == null || this._dataSource.RowCount === 0 || this._dataSource.ColumnCount === 0) {
                        this.ClearGrid();
                        ExpressCraft.Helper.AppendChild$2(this.GridHeader, colFragment);
                        return;
                    }

                    var ppr = this.PixelsPerRow(this._dataSource.RowCount);

                    var RawTopRowIndex = this.GetRawTopRowIndex();
                    var RawTopRowScrollPadding = RawTopRowIndex % 1.0;
                    var RawVisibleRowCount = this.GetRawVisibleRowCount();

                    var Length = (Bridge.Int.clip32((RawVisibleRowCount + RawTopRowIndex)) + 1) | 0;
                    var start = Bridge.Int.clip32(RawTopRowIndex);


                    for (var x2 = (this.SelectedRows.SL.Count - 1) | 0; x2 >= 0; x2 = (x2 - 1) | 0) {
                        var Found = false;
                        for (var i = start; i < Length; i = (i + 1) | 0) {
                            if (i < this.DataSource.RowCount) {
                                var DataRowhandle = this.GetDataSourceRow(i);
                                if (this.SelectedRows.GetIndexValueByHardListIndex(this.SelectedRows.SL.getItem(x2)).Index === DataRowhandle) {
                                    Found = true;
                                    break;
                                }
                            }
                            if (StartedWith !== this.RenderTime) {
                                return;
                            }
                        }
                        if (StartedWith !== this.RenderTime) {
                            return;
                        }
                        if (!Found) {
                            this.SelectedRows.SL.removeAt(x2);
                        }
                    }


                    var rowFragment = document.createDocumentFragment();

                    if (ExpressCraft.Settings.GridViewRowScrollPadding > 0) {
                        start = (start - ExpressCraft.Settings.GridViewRowScrollPadding) | 0;
                        Length = (Length + ExpressCraft.Settings.GridViewRowScrollPadding) | 0;
                    }

                    var Y = (start * ppr);

                    if (this.ShowAutoFilterRow) {
                        Length = (Length - 1) | 0;
                        Y += this.UnitHeight;
                    }

                    if (start < 0) {
                        start = 0;
                    }
                    if (Length > this.DataSource.RowCount) {
                        Length = this.DataSource.RowCount;
                    }

                    if (this.CacheRow.count > 10) {
                        if (this.CountOfDeletion > 8) {
                            this.CacheRow = new (System.Collections.Generic.Dictionary$2(System.Int32,HTMLElement))();
                            this.CountOfDeletion = 0;
                        } else {
                            var MaxDelete = (this.CacheRow.count - 10) | 0;
                            var __length = this.CacheRow.count;
                            var KeysToDelete = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                            for (var i1 = 0; i1 < __length; i1 = (i1 + 1) | 0) {
                                var fieldIndex = System.Linq.Enumerable.from(this.CacheRow).elementAt(i1).key;
                                if (fieldIndex < start || fieldIndex >= Length) {
                                    KeysToDelete.add(fieldIndex);
                                    if (KeysToDelete.Count > MaxDelete) {
                                        break;
                                    }
                                }
                            }
                            __length = KeysToDelete.Count;
                            if (__length > 0) {
                                this.CountOfDeletion = (this.CountOfDeletion + 1) | 0;
                            }
                            for (var i2 = 0; i2 < __length; i2 = (i2 + 1) | 0) {
                                if (this.CacheRow.containsKey(KeysToDelete.getItem(i2))) {
                                    var x3 = this.CacheRow.get(KeysToDelete.getItem(i2));
                                    x3.onclick = null;
                                    x3.ondblclick = null;
                                    ExpressCraft.Helper.Empty(x3);
                                    x3.ondragstart = null;
                                    ExpressCraft.Helper.Delete$1(x3);

                                    this.CacheRow.remove(KeysToDelete.getItem(i2));
                                }
                            }
                        }

                    }

                    var prevRowCache = this.CacheRow.count;

                    for (var i3 = start; i3 < Length; i3 = (i3 + 1) | 0) {
                        if (!this.CacheRow.containsKey(i3)) {
                            var DataRowhandle1 = this.GetDataSourceRow(i3);
                            var dr = document.createElement("row");
                            dr.className = ((i3 % 2 === 0 ? "cellrow even" : "cellrow") || "") + ((this.SelectedRows.GetValue(DataRowhandle1, true) ? " cellrow-selected" : "") || "") + ((DataRowhandle1 === this.FocusedDataHandle ? " focusedrow" : "") || "");
                            dr.style.position = "absolute";
                            ExpressCraft.Helper.SetBounds$1(dr, 0, Y, this._columnAutoWidth ? ClientWidth : MaxWidth, this.UnitHeight);
                            dr.setAttribute("i", System.Convert.toString(Bridge.box(DataRowhandle1, System.Int32)));


                            dr.onclick = this.OnRowClick;
                            if (ExpressCraft.Settings.IsChrome) {
                                dr.ondblclick = this.OnDoubleClick;
                            }
                            var docFrag = document.createDocumentFragment();

                            for (var x4 = RawLeftCellIndex; x4 < RawLeftCellCount; x4 = (x4 + 1) | 0) {
                                var col1 = this.Columns.getItem(x4);
                                if (!col1.Visible) {
                                    continue;
                                }

                                var apparence1 = col1.BodyApparence;
                                var useDefault = false;
                                var cell = null;
                                if (col1.CellDisplay == null || ((useDefault = col1.CellDisplay.UseDefaultElement))) {
                                    var displayValue = col1.GetDisplayValueByDataRowHandle(DataRowhandle1);

                                    cell = document.createElement("cell");
                                    cell.className = this.cellClass;
                                    cell.style.position = "absolute";
                                    cell.style.left = System.Single.format(col1.CachedX) + "px";
                                    cell.style.width = System.Single.format((this._columnAutoWidth ? _columnAutoWidthSingle : col1.Width)) + "px";
                                    cell.setAttribute("x", System.Convert.toString(Bridge.box(x4, System.Int32)));
                                    cell.onclick = this.OnCellRowMouseDown;

                                    if (!System.String.isNullOrWhiteSpace(displayValue)) {
                                        cell.textContent = displayValue;
                                        if (!Bridge.referenceEquals(apparence1.Alignment, "left")) {
                                            if (Bridge.referenceEquals(apparence1.Alignment, "right")) {
                                                cell.style.direction = "rtl";
                                            } else {
                                                cell.style.textAlign = apparence1.Alignment;
                                            }
                                        }
                                        if (apparence1.IsBold) {
                                            cell.style.fontWeight = "bold";
                                        }

                                        if (apparence1.Forecolor != null) {
                                            cell.style.color = apparence1.Forecolor;
                                        }
                                    }

                                    var newCell = useDefault ? col1.CellDisplay.OnCreateDefault(cell, this, DataRowhandle1, x4) : cell;

                                    if (this._highlighSearchResults && this.DataSource._searchActive && !useDefault && !System.String.isNullOrWhiteSpace(displayValue) && System.String.startsWith(displayValue.toLowerCase(), this.DataSource.SearchString)) {
                                        ExpressCraft.Helper.Empty(newCell);
                                        var markelement = document.createElement("mark");
                                        var Slength = this.DataSource.SearchString.length;
                                        markelement.textContent = displayValue.substr(0, Slength);
                                        ExpressCraft.Helper.AppendChildren$2(newCell, [markelement, document.createTextNode(displayValue.substr(Slength))]);
                                    }

                                    docFrag.appendChild(newCell);
                                } else {
                                    cell = col1.CellDisplay.OnCreate(this, DataRowhandle1, x4);
                                    cell.style.left = System.Single.format(col1.CachedX) + "px";
                                    cell.style.width = ExpressCraft.Helper.ToPx(Bridge.box((this._columnAutoWidth ? _columnAutoWidthSingle : col1.Width), System.Single, System.Single.format, System.Single.getHashCode));

                                    docFrag.appendChild(cell);
                                }
                                if (cell != null) {

                                }

                            }

                            ExpressCraft.Helper.AppendChild$2(dr, docFrag);

                            if (this.AllowRowDrag) {
                                dr.setAttribute("draggable", "true");

                                dr.ondragstart = this.OnRowDragStart;
                            }

                            rowFragment.appendChild(dr);

                            this.CacheRow.set(i3, dr);
                        }

                        if (StartedWith !== this.RenderTime) {
                            if (prevRowCache === 0) {
                                this.ClearGrid();
                            }

                            ExpressCraft.Helper.AppendChild$2(this.GridBody, rowFragment);

                            return;
                        }

                        Y += this.UnitHeight;
                    }
                    if (prevRowCache === 0) {
                        this.ClearGrid();
                    }

                    if (!Bridge.staticEquals(this.OnCustomRowStyle, null) && rowFragment.childNodes != null) {
                        var count = rowFragment.childNodes.length;
                        for (var i4 = 0; i4 < count; i4 = (i4 + 1) | 0) {
                            if (StartedWith !== this.RenderTime) {
                                ExpressCraft.Helper.AppendChild$2(this.GridBody, rowFragment);

                                return;
                            }

                            try {
                                var child = rowFragment.childNodes[i4];
                                this.OnCustomRowStyle(child, parseInt(child.getAttribute("i")));
                            } catch (ex) {
                                ex = System.Exception.create(ex);
                                if (ExpressCraft.Application.AplicationDefition === ExpressCraft.ApplicationDefitnion.ExpressCraftConsole) {
                                    ExpressCraft.ConsoleForm.Log(Bridge.toString(ex), ExpressCraft.ConsoleLogType.Error);
                                }
                            }
                        }
                    }

                    ExpressCraft.Helper.AppendChild$2(this.GridHeader, colFragment);
                    ExpressCraft.Helper.AppendChild$2(this.GridBody, rowFragment);

                    if (StartedWith !== this.RenderTime) {
                        return;
                    }

                    this.RenderTime = -1;
                });

                this.GridHeaderContainer = ExpressCraft.Control.Div$1("heading-container");

                this.GridHeader = ExpressCraft.Control.Div();
                ExpressCraft.Helper.SetBounds$1(this.GridHeader, 0, 0, 0, "29px");
                this.GridBodyContainer = ExpressCraft.Control.Div();

                this.GridBodyContainer.style.overflowX = "auto !important";
                this.GridBodyContainer.style.overflowY = "auto !important";

                this.GridHeaderContainer.style.overflow = "hidden";

                this.GridBody = ExpressCraft.Control.Div();
                ExpressCraft.Helper.SetBounds$1(this.GridBody, 0, 0, 0, 0);

                ExpressCraft.Helper.AppendChild$2(this.GridBodyContainer, this.GridBody);
                ExpressCraft.Helper.AppendChild$2(this.GridHeaderContainer, this.GridHeader);

                this.GridFindPanel = ExpressCraft.Control.Div$1("heading-container");
                this.GridFindPanel.style.visibility = "hidden";
                ExpressCraft.Helper.SetBounds$1(this.GridFindPanel, 0, 0, "100%", 46);

                this.SearchTextInput = ($t = new ExpressCraft.TextInput.ctor(), $t.OnTextChanged = Bridge.fn.bind(this, function (sender) {
                    if (this._searchTimer > -1) {
                        clearTimeout(this._searchTimer);
                    }
                    if (System.String.isNullOrWhiteSpace(this.SearchTextInput.Text)) {
                        this._search();
                    } else {
                        this._searchTimer = Bridge.Int.clip32(setTimeout(Bridge.fn.bind(this, function (a) {
                            this._search();
                        }), 500));
                    }
                }), $t.OnKeyDown = Bridge.fn.bind(this, function (sender, ev) {
                    if (ev.keyCode === ExpressCraft.KeyCodes.Enter) {
                        this.btnFind.Content.click();
                    }
                }), $t);
                this.SearchTextInput.Bounds = new ExpressCraft.Vector4.$ctor1(30, 13, 350, 22);
                this.SearchTextInput.SetAttribute("placeholder", "Enter text to search...");

                this.btnFind = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "Find", $t.ItemClick = Bridge.fn.bind(this, function (sender) {
                    if (this._searchTimer > -1) {
                        clearTimeout(this._searchTimer);
                    }
                    this._search();
                }), $t.Bounds = new ExpressCraft.Vector4.$ctor1(385, 13, 60, 22), $t);
                this.btnClear = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "Clear", $t.ItemClick = Bridge.fn.bind(this, function (sender) {
                    if (this._searchTimer > -1) {
                        clearTimeout(this._searchTimer);
                    }
                    this.SearchTextInput.Text = "";
                }), $t.Bounds = new ExpressCraft.Vector4.$ctor1(449, 13, 60, 22), $t);

                this.btnClose = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Bounds = new ExpressCraft.Vector4.$ctor1(7, 15, 18, 18), $t.ItemClick = Bridge.fn.bind(this, function (sender) {
                    this.btnClear.Content.click();
                    this.CloseFindPanel();
                }), $t);
                this.btnClose.Content.innerHTML = "&times;";


                ExpressCraft.Helper.AppendChildren$1(this.GridFindPanel, [this.btnClose, this.SearchTextInput, this.btnFind, this.btnClear]);

                this.SetDefaultSizes();

                this.Content.onmouseup = Bridge.fn.bind(this, function (ev) {
                    if (this.ResizeIndex === -1) {
                        return;
                    }
                    var x = ev.pageX;
                    x = (this.Columns.getItem(this.ResizeIndex).Width + (((x - this.ResizePageX) | 0))) | 0;
                    if (x < 24) {
                        x = 24;
                    }
                    this.Columns.getItem(this.ResizeIndex).Width = x;

                    ExpressCraft.Form.SetCursor("default");

                    ev.preventDefault();
                    ev.stopImmediatePropagation();
                    ev.stopPropagation();

                    this.ResizeIndex = -1;
                    this.ResizeSpan = null;
                });

                this.OnResize = Bridge.fn.bind(this, function (ev) {
                    this.CacheRow = new (System.Collections.Generic.Dictionary$2(System.Int32,HTMLElement))();
                    this.DelayedRenderGrid();
                });

                var prevleft = 0;
                if (ExpressCraft.Settings.IsChrome && !ExpressCraft.Helper.NotDesktop) {
                    this.GridBodyContainer.onmousewheel = Bridge.fn.bind(this, function (ev) {
                        ev.preventDefault();

                        if (ev.deltaY !== 0) {
                            this.GridBodyContainer.scrollTop += (this.UnitHeight * (ev.deltaY / 100.0)) * 3;
                        }
                    });
                }

                var ignoreScroll = false;
                this.GridBodyContainer.onscroll = Bridge.fn.bind(this, function (ev) {
                    if (ignoreScroll) {
                        return;
                    }

                    if (prevleft !== this.GridBodyContainer.scrollLeft) {
                        this.CacheRow = new (System.Collections.Generic.Dictionary$2(System.Int32,HTMLElement))();
                        prevleft = Bridge.Int.clip32(this.GridBodyContainer.scrollLeft);
                        this.DelayedRenderGrid();
                    } else {
                        if (ExpressCraft.Settings.IsChrome && !ExpressCraft.Helper.NotDesktop) {
                            if (this.GridBodyContainer.scrollTop !== 0 && this.GridBodyContainer.scrollTop + this.GridBodyContainer.clientHeight !== this.GridBodyContainer.scrollHeight) {
                                var diff = this.GridBodyContainer.scrollTop % this.UnitHeight;
                                if (diff !== 0) {
                                    ignoreScroll = true;
                                    this.GridBodyContainer.scrollTop -= diff;
                                    ignoreScroll = false;
                                }
                            }
                        }

                        this.DelayedRenderGrid(true);
                    }
                });
                this.OnLoaded = Bridge.fn.bind(this, function (ev) {
                    this.RenderGrid();
                });
                this.OnCellRowMouseDown = Bridge.fn.bind(this, function (ev) {
                    this.FocusedColumn = parseInt(ev.currentTarget.getAttribute("x"));
                });
                this.OnRowClick = Bridge.fn.bind(this, function (ev) {
                    if (!ExpressCraft.Settings.IsChrome) {
                        if (this.clickTimeDiff == null) {
                            this.clickTimeDiff = System.Diagnostics.Stopwatch.startNew();
                        } else {
                            this.clickTimeDiff.stop();
                            var ems = this.clickTimeDiff.milliseconds();
                            this.clickTimeDiff = null;

                            if (ems.lt(System.Int64(200))) {
                                this.OnDoubleClick(ev);
                            }
                        }
                    }

                    var DataRowHandle = parseInt(ev.currentTarget.getAttribute("i"));

                    var mev = ev;
                    if (this.AllowMultiSelection) {
                        if (mev.ctrlKey) {
                            this.SelectedRows.AddOrSet(true, DataRowHandle, true);
                            this.RenderGrid();
                        } else if (mev.shiftKey && this.FocusedDataHandle > -1) {
                            this._disableRender = true;
                            this.SelectedRows.ClearAll();
                            if (DataRowHandle < this.FocusedDataHandle) {
                                for (var i = DataRowHandle; i < ((this.FocusedDataHandle + 1) | 0); i = (i + 1) | 0) {
                                    this.SelectedRows.AddOrSet(true, i, true);
                                }
                            } else {
                                for (var i1 = this.FocusedDataHandle; i1 < ((DataRowHandle + 1) | 0); i1 = (i1 + 1) | 0) {
                                    this.SelectedRows.AddOrSet(true, i1, true);
                                }
                            }
                            this._disableRender = false;
                            this.RenderGrid();
                            return;
                        }
                    }
                    this.SelectedRows.ClearAndAddOrSet(true, DataRowHandle, true);
                    if (DataRowHandle !== this._focusedDataHandle) {
                        this.FocusedDataHandle = DataRowHandle;
                    } else {
                        this.RenderGrid();
                    }
                });
                this.Content.tabIndex = 0;
                this.OnDoubleClick = Bridge.fn.bind(this, function (ev) {
                    var drh = parseInt(ev.currentTarget.getAttribute("i"));
                    if (!Bridge.staticEquals(this.OnRowDoubleClick, null)) {
                        this.OnRowDoubleClick(drh);
                    }

                    if (this._useEditForm) {
                        var idr = this.DataSource.getItem(drh);

                        var fdre = new ExpressCraft.DataRowEditForm(idr, this, true);
                        fdre.ShowDialog();
                    }
                });

                this.Content.onkeydown = Bridge.fn.bind(this, function (ev) {
                    var kev = ev;
                    if (this.AllowMultiSelection && kev.ctrlKey && (kev.keyCode === 65 || kev.keyCode === 97)) {
                        this.SelectAllRows();
                    } else {
                        if (kev.keyCode === ExpressCraft.KeyCodes.Up || kev.keyCode === ExpressCraft.KeyCodes.Down) {
                            this._disableRender = true;
                            var prevFocused = this.FocusedDataHandle;
                            if (kev.keyCode === ExpressCraft.KeyCodes.Up) {
                                if (!(((this.FocusedDataHandle - 1) | 0) < 0)) {
                                    this.FocusedDataHandle = (this.FocusedDataHandle - 1) | 0;
                                }
                            } else if (kev.keyCode === ExpressCraft.KeyCodes.Down) {
                                if (!(this.FocusedDataHandle > this.RowCount())) {
                                    this.FocusedDataHandle = (this.FocusedDataHandle + 1) | 0;
                                }
                            }
                            if (prevFocused !== this.FocusedDataHandle) {
                                if (kev.shiftKey) {
                                    this.SelectedRows.AddOrSet(true, this.FocusedDataHandle, true);
                                } else {
                                    this.SelectedRows.ClearAndAddOrSet(true, this.FocusedDataHandle, true);
                                }

                                this.MakeRowVisible(this.FocusedDataHandle);

                                this._disableRender = false;

                                this.RenderGrid();
                            } else {
                                this._disableRender = false;
                            }
                        }

                    }
                });

                this.ContextMenu = new ExpressCraft.ContextMenu();

                this.ContextMenu.ContextItems.AddRange(System.Array.init([new ExpressCraft.ContextItem.$ctor1("Sort Ascending", Bridge.fn.bind(this, function (cm) {
                    if (this.FocusedColumn > -1) {
                        this.SortColumn$1(this.Columns.getItem(this.FocusedColumn), ExpressCraft.GridViewSortMode.Asc);
                    }
                })), new ExpressCraft.ContextItem.$ctor1("Sort Descending", Bridge.fn.bind(this, function (cm) {
                    if (this.FocusedColumn > -1) {
                        this.SortColumn$1(this.Columns.getItem(this.FocusedColumn), ExpressCraft.GridViewSortMode.Desc);
                    }
                })), new ExpressCraft.ContextItem.$ctor1("Clear All Sorting", Bridge.fn.bind(this, function (cm) {
                    this.ClearSortColumn();
                }), true), new ExpressCraft.ContextItem.$ctor1("Hide This Column", Bridge.fn.bind(this, function (ci) {
                    if (this.FocusedColumn > -1) {
                        this.Columns.getItem(this.FocusedColumn).Visible = false;
                        this.RenderGrid();
                    }
                })), new ExpressCraft.ContextItem.$ctor1("Best Fit", Bridge.fn.bind(this, function (ci) {
                    if (this.FocusedColumn > -1) {
                        this.Columns.getItem(this.FocusedColumn).Width = this.GetBestFitForColumn(this.Columns.getItem(this.FocusedColumn));
                    }
                })), new ExpressCraft.ContextItem.$ctor1("Best Fit (all columns)", Bridge.fn.bind(this, function (ci) {
                    this.BestFitAllColumns();
                }), true), new ExpressCraft.ContextItem.$ctor1("Export to Excel", Bridge.fn.bind(this, function (ci) {
                    this.ExportToXLS("export.xls");
                }), true), (this._showFindPanelContextItem = ($t = new ExpressCraft.ContextItem.$ctor2("Show Find Panel"), $t.OnItemClick = Bridge.fn.bind(this, function (sender) {
                    if (this.FindPanelVisible) {
                        this.FindPanelVisible = false;
                    } else {
                        this.FindPanelVisible = true;
                    }
                }), $t)), new ExpressCraft.ContextItem.$ctor1("Select All", Bridge.fn.bind(this, function (cm) {
                    this.SelectAllRows();
                })), new ExpressCraft.ContextItem.$ctor1("Unselect All", Bridge.fn.bind(this, function (cm) {
                    this.ClearSelection();
                }))], ExpressCraft.ContextItem));

                this.Content.oncontextmenu = Bridge.fn.bind(this, function (ev) {
                    if (ExpressCraft.Helper.NotDesktop) {
                        ev.preventDefault();
                        ev.stopPropagation();

                        this.OnDoubleClick(ev);
                    } else {
                        if (this.ContextMenu != null) {
                            this.ContextMenu.Show(ExpressCraft.Helper.GetClientMouseLocation(ev));
                            ev.preventDefault();
                            ev.stopPropagation();
                        }
                    }
                });

                this.OnColumnOnClick = Bridge.fn.bind(this, function (ev) {
                    if (this.ResizeIndex >= 0) {
                        return;
                    }

                    var gcol = this.Columns.getItem(parseInt(ev.currentTarget.getAttribute("i")));

                    for (var i = 0; i < this.ColumnCount(); i = (i + 1) | 0) {
                        if (!Bridge.referenceEquals(this.Columns.getItem(i), gcol)) {
                            this.Columns.getItem(i).SortedMode = ExpressCraft.GridViewSortMode.None;
                        }
                    }
                    switch (gcol.SortedMode) {
                        default: 
                        case ExpressCraft.GridViewSortMode.None: 
                            this.SortColumn$1(gcol, ExpressCraft.GridViewSortMode.Asc);
                            break;
                        case ExpressCraft.GridViewSortMode.Asc: 
                            this.SortColumn$1(gcol, ExpressCraft.GridViewSortMode.Desc);
                            break;
                        case ExpressCraft.GridViewSortMode.Desc: 
                            this.SortColumn$1(gcol, ExpressCraft.GridViewSortMode.None);
                            break;
                    }
                });
                this.OnColumnDragStart = function (ev) {
                    ev.dataTransfer.setData("gridviewColumnDrag", ev.currentTarget.getAttribute("i"));
                };
                this.OnColumnDragOver = function (ev) {
                    ev.preventDefault();
                };
                this.OnColumnDrop = Bridge.fn.bind(this, function (ev) {
                    if (ev.target == null || !(ev.target)) {
                        return;
                    }

                    var target = ev.target;

                    if (!Bridge.referenceEquals(target.parentElement, this.GridHeader)) {
                        return;
                    }

                    var HoverIndex = parseInt(target.getAttribute("i"));
                    var SelectedIndex = parseInt(ev.dataTransfer.getData("gridviewColumnDrag"));
                    if (SelectedIndex === HoverIndex) {
                        return;
                    }

                    if (HoverIndex < 0) {
                        return;
                    }

                    var x = ev.layerX;
                    x = (x - target.clientLeft) | 0;
                    var w = (Bridge.Int.div(target.clientWidth, 2)) | 0;

                    if (HoverIndex === ((SelectedIndex - 1) | 0) && x > w) {
                        return;
                    }
                    if (HoverIndex === ((SelectedIndex + 1) | 0) && x < w) {
                        return;
                    }

                    if (x < w) {
                        this.DragIndex = HoverIndex;
                    } else {
                        this.DragIndex = (HoverIndex + 1) | 0;
                    }

                    if (this.DragIndex < 0 || SelectedIndex < 0) {
                        return;
                    }
                    var col = this.Columns.getItem(SelectedIndex);
                    if (this.DragIndex === this.Columns.Count) {
                        this.Columns.remove(col);
                        this.Columns.add(col);
                    } else {
                        var col1 = this.Columns.getItem(this.DragIndex);
                        this.Columns.remove(col);
                        this.Columns.insert(this.Columns.indexOf(col1), col);
                    }

                    this.RenderGrid();
                });
                this.OnColumnMouseDown = Bridge.fn.bind(this, function (ev) {
                    var x = ev.layerX;
                    var target = ev.target;
                    x = (x - target.clientLeft) | 0;
                    this.ResizePageX = ev.pageX;

                    this.FocusedColumn = parseInt(ev.currentTarget.getAttribute("i"));

                    if (x >= ((target.clientWidth - 2) | 0)) {
                        this.ResizeIndex = parseInt(target.getAttribute("i"));
                        this.ResizeSpan = target;
                        ExpressCraft.Form.SetCursor("east-west-resize");

                        ev.preventDefault();
                    } else {
                        this.ResizeSpan = null;
                        this.ResizeIndex = -1;
                    }
                });
                this.OnColumnMouseMove = Bridge.fn.bind(this, function (ev) {
                    if (this.ResizeIndex === -1) {
                        var x = ev.layerX;
                        var target = ev.target;
                        x = (x - target.clientLeft) | 0;

                        if (x >= ((target.clientWidth - 2) | 0)) {
                            ExpressCraft.Form.SetCursor("east-west-resize");
                            return;
                        }
                        ExpressCraft.Form.SetCursor("default");
                    }
                });

                this.OnColumnMouseLeave = Bridge.fn.bind(this, function (ev) {
                    if (this.ResizeIndex === -1) {
                        ExpressCraft.Form.SetCursor("default");
                    }
                });

                this.OnRowDragStart = Bridge.fn.bind(this, function (ev) {
                    ev.dataTransfer.setData("gridviewRowDrag", JSON.stringify(this.DataSource.getItem(parseInt(ev.currentTarget.getAttribute("i"))).GetOfflineDataRow()));
                });

                ExpressCraft.Helper.AppendChildren$2(this.Content, [this.GridFindPanel, this.GridHeaderContainer, this.GridBodyContainer]);

                this.FilterRowOnChange = Bridge.fn.bind(this, function (te) {
                    this.Columns.getItem(parseInt(te.Content.getAttribute("i"))).FilterValue = te.Text;
                });

                this.AutoGenerateColumnsFromSource = autoGenerateColumns;
                this.ColumnAutoWidth = columnAutoWidth;
            }
        },
        methods: {
            ResolveSearchDataIndex: function () {
                return (this.VisibleRowHandles != null && this.VisibleRowHandles.Count > 0);
            },
            ShowFindPanel: function () {
                if (!this._findPanelVisible) {
                    this._showFindPanelContextItem.Caption = "Close Find Panel";
                    this._findPanelVisible = true;
                    this.GridFindPanel.style.visibility = "inherit";

                    this.SetDefaultSizes();

                    this.RenderGrid();
                }

            },
            CloseFindPanel: function () {
                if (this._findPanelVisible) {
                    this._showFindPanelContextItem.Caption = "Show Find Panel";
                    this._findPanelVisible = false;
                    this.GridFindPanel.style.visibility = "hidden";

                    this.SetDefaultSizes();

                    this.RenderGrid();
                }
            },
            SetVisibleRowHandles: function (T, Cells, asc) {
                if (this.DataSource._searchActive) {
                    if (asc) {
                        var sorted = System.Linq.Enumerable.from(Cells).select(function (x, i) {
                                return new (System.Collections.Generic.KeyValuePair$2(System.Int32,T)).$ctor1(i, x);
                            }).where(Bridge.fn.bind(this, function (p) {
                            return this.DataSource._searchResults.contains(p.key);
                        })).orderBy(function (x) {
                            return x.value;
                        }).toList(System.Collections.Generic.KeyValuePair$2(System.Int32,T));

                        this.VisibleRowHandles = System.Linq.Enumerable.from(sorted).select(function (x) {
                                return x.key;
                            }).toList(System.Int32);
                    } else {
                        var sorted1 = System.Linq.Enumerable.from(Cells).select(function (x, i) {
                                return new (System.Collections.Generic.KeyValuePair$2(System.Int32,T)).$ctor1(i, x);
                            }).where(Bridge.fn.bind(this, function (p) {
                            return this.DataSource._searchResults.contains(p.key);
                        })).orderByDescending(function (x) {
                            return x.value;
                        }).toList(System.Collections.Generic.KeyValuePair$2(System.Int32,T));

                        this.VisibleRowHandles = System.Linq.Enumerable.from(sorted1).select(function (x) {
                                return x.key;
                            }).toList(System.Int32);
                    }
                } else {
                    if (asc) {
                        var sorted2 = System.Linq.Enumerable.from(Cells).select(function (x, i) {
                                return new (System.Collections.Generic.KeyValuePair$2(System.Int32,T)).$ctor1(i, x);
                            }).orderBy(function (x) {
                            return x.value;
                        }).toList(System.Collections.Generic.KeyValuePair$2(System.Int32,T));

                        this.VisibleRowHandles = System.Linq.Enumerable.from(sorted2).select(function (x) {
                                return x.key;
                            }).toList(System.Int32);
                    } else {
                        var sorted3 = System.Linq.Enumerable.from(Cells).select(function (x, i) {
                                return new (System.Collections.Generic.KeyValuePair$2(System.Int32,T)).$ctor1(i, x);
                            }).orderByDescending(function (x) {
                            return x.value;
                        }).toList(System.Collections.Generic.KeyValuePair$2(System.Int32,T));

                        this.VisibleRowHandles = System.Linq.Enumerable.from(sorted3).select(function (x) {
                                return x.key;
                            }).toList(System.Int32);
                    }
                }

            },
            CalculateVisibleRows: function () {
                var calcVisibleRows = new (System.Collections.Generic.List$1(System.Int32)).ctor();

                for (var y = 0; y < this.RowCount(); y = (y + 1) | 0) {
                    var AddIndex = true;

                    for (var x = 0; x < this.ColumnCount(); x = (x + 1) | 0) {
                        if (!this.Columns.getItem(x).ValueMatchFilter(y)) {
                            AddIndex = false;
                            break;
                        }
                    }
                    if (AddIndex) {
                        calcVisibleRows.add(y);
                    }
                }

                this.VisibleRowHandles = calcVisibleRows;
                this.RenderGrid();
            },
            SetDefaultSizes: function () {
                if (this._columnHeadersVisible) {
                    this.GridHeader.style.visibility = "inherit";
                    this.GridHeaderContainer.style.visibility = "inherit";

                    if (this.FindPanelVisible) {
                        ExpressCraft.Helper.SetBounds$1(this.GridHeaderContainer, 0, 47, "100%", this.UnitHeight + 1);
                        ExpressCraft.Helper.SetBounds$1(this.GridBodyContainer, 0, this.UnitHeight + 2 + 47, "100%", "(100% - " + System.Single.format((this.UnitHeight + 2 + 47)) + "px)");
                    } else {
                        ExpressCraft.Helper.SetBounds$1(this.GridHeaderContainer, 0, 0, "100%", this.UnitHeight + 1);
                        ExpressCraft.Helper.SetBounds$1(this.GridBodyContainer, 0, this.UnitHeight + 2, "100%", "(100% - " + System.Single.format((this.UnitHeight + 2)) + "px)");
                    }
                } else {
                    this.GridHeader.style.visibility = "hidden";
                    this.GridHeaderContainer.style.visibility = "hidden";

                    if (this.FindPanelVisible) {
                        ExpressCraft.Helper.SetBounds$1(this.GridBodyContainer, 0, 47, "100%", "(100% - " + (47) + "px)");
                    } else {
                        ExpressCraft.Helper.SetBounds$1(this.GridBodyContainer, 0, 1, "100%", "(100% - 1px)");
                    }
                }
            },
            SortColumn: function () {
                if (this.SortSettings != null) {
                    this.SortColumn$1(this.SortSettings.Column, this.SortSettings.SortMode);
                }
            },
            SortColumn$1: function (column, sort) {
                var $t;
                if (sort === void 0) { sort = 1; }
                column.SortedMode = sort;

                if (this.SortSettings != null && !Bridge.referenceEquals(this.SortSettings.Column, column)) {
                    this.SortSettings.Column.SortedMode = ExpressCraft.GridViewSortMode.None;
                    this.VisibleRowHandles = null;
                }

                if (sort === ExpressCraft.GridViewSortMode.None) {
                    this.VisibleRowHandles = null;
                } else {
                    var sort1 = sort === ExpressCraft.GridViewSortMode.Asc;

                    switch (column.Column.DataType) {
                        default: 
                        case ExpressCraft.DataType.Object: 
                            this.SetVisibleRowHandles(System.Object, (Bridge.as(column.Column, ExpressCraft.DataColumnObject)).Cells, sort1);
                            break;
                        case ExpressCraft.DataType.Bool: 
                            this.SetVisibleRowHandles(System.Nullable$1(System.Boolean), (Bridge.as(column.Column, ExpressCraft.DataColumnBool)).Cells, sort1);
                            break;
                        case ExpressCraft.DataType.DateTime: 
                            this.SetVisibleRowHandles(System.Nullable$1(System.DateTime), (Bridge.as(column.Column, ExpressCraft.DataColumnDateTime)).Cells, sort1);
                            break;
                        case ExpressCraft.DataType.String: 
                            this.SetVisibleRowHandles(System.String, (Bridge.as(column.Column, ExpressCraft.DataColumnString)).Cells, sort1);
                            break;
                        case ExpressCraft.DataType.Byte: 
                            this.SetVisibleRowHandles(System.Nullable$1(System.Byte), (Bridge.as(column.Column, ExpressCraft.DataColumnByte)).Cells, sort1);
                            break;
                        case ExpressCraft.DataType.Short: 
                            this.SetVisibleRowHandles(System.Nullable$1(System.Int16), (Bridge.as(column.Column, ExpressCraft.DataColumnShort)).Cells, sort1);
                            break;
                        case ExpressCraft.DataType.Integer: 
                            this.SetVisibleRowHandles(System.Nullable$1(System.Int32), (Bridge.as(column.Column, ExpressCraft.DataColumnInteger)).Cells, sort1);
                            break;
                        case ExpressCraft.DataType.Long: 
                            this.SetVisibleRowHandles(System.Nullable$1(System.Int64), (Bridge.as(column.Column, ExpressCraft.DataColumnLong)).Cells, sort1);
                            break;
                        case ExpressCraft.DataType.Float: 
                            this.SetVisibleRowHandles(System.Nullable$1(System.Single), (Bridge.as(column.Column, ExpressCraft.DataColumnFloat)).Cells, sort1);
                            break;
                        case ExpressCraft.DataType.Double: 
                            this.SetVisibleRowHandles(System.Nullable$1(System.Double), (Bridge.as(column.Column, ExpressCraft.DataColumnDouble)).Cells, sort1);
                            break;
                        case ExpressCraft.DataType.Decimal: 
                            this.SetVisibleRowHandles(System.Nullable$1(System.Decimal), (Bridge.as(column.Column, ExpressCraft.DataColumnDecimal)).Cells, sort1);
                            break;
                    }
                }

                this.RenderGrid();
                this.SortSettings = ($t = new ExpressCraft.SortSetting(), $t.Column = column, $t.SortMode = sort, $t);
            },
            ClearSortColumn: function () {
                if (this.SortSettings != null) {
                    this.SortColumn$1(this.SortSettings.Column, ExpressCraft.GridViewSortMode.None);
                }
            },
            ColumnCount: function () {
                return this.Columns.Count;
            },
            RowCount: function () {
                if (this._dataSource == null) {
                    return 0;
                }
                return this._dataSource.RowCount;
            },
            ScrollToBottom: function () {
                this.GridBodyContainer.scrollTop = (this.GridBody.clientHeight - this.GridBodyContainer.clientHeight) | 0;
            },
            ScrollToTop: function () {
                this.GridBodyContainer.scrollTop = 0;
            },
            GetColumn: function (i) {
                return this.Columns.getItem(i);
            },
            GetFocusedRowCellValue$2: function (columnIndex) {
                return this.GetFocusedRowCellValue$1(this.Columns.getItem(columnIndex));
            },
            GetFocusedRowCellValue$3: function (FieldName) {
                return this.GetFocusedRowCellValue(this.GetColumnByFieldName(FieldName));
            },
            GetFocusedRowCellValue$1: function (column) {
                return this.GetRowCellValue$1(this.FocusedDataHandle, column);
            },
            GetFocusedRowCellValue: function (column) {
                return this.GetRowCellValue(this.FocusedDataHandle, column);
            },
            GetGridViewColumnByFieldName: function (FieldName) {
                for (var i = 0; i < this.ColumnCount(); i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(this.Columns.getItem(i).Column.FieldName, FieldName)) {
                        return this.Columns.getItem(i);
                    }
                }
                return null;
            },
            GetGridViewColumnByFieldName$1: function (fieldName, IgnoreCase) {
                if (IgnoreCase === void 0) { IgnoreCase = false; }
                for (var i = 0; i < this.ColumnCount(); i = (i + 1) | 0) {
                    if (this.Columns.getItem(i) != null && this.Columns.getItem(i).Column != null && System.String.compare(this.Columns.getItem(i).Column.FieldName, fieldName, IgnoreCase) === 0) {
                        return this.Columns.getItem(i);
                    }
                }

                return null;
            },
            GetRowCellValue$1: function (Datahandle, column) {
                return this.GetRowCellValue(Datahandle, column.Column);
            },
            GetRowCellValue: function (Datahandle, column) {
                if (Datahandle === -1) {
                    return null;
                }
                return column.GetCellValue(Datahandle);
            },
            GetRowCellValue$3: function (Datahandle, FieldName) {
                return this.GetRowCellValue(Datahandle, this.GetColumnByFieldName(FieldName));
            },
            GetRowCellValue$2: function (Datahandle, columnIndex) {
                return this.GetRowCellValue$1(Datahandle, this.Columns.getItem(columnIndex));
            },
            GetColumnByFieldName: function (fieldName, IgnoreCase) {
                if (IgnoreCase === void 0) { IgnoreCase = false; }
                if (this.DataSource == null) {
                    return null;
                }

                for (var i = 0; i < this.DataSource.ColumnCount; i = (i + 1) | 0) {
                    if (this.DataSource.Columns.getItem(i) != null && System.String.compare(this.DataSource.Columns.getItem(i).FieldName, fieldName, IgnoreCase) === 0) {
                        return this.DataSource.Columns.getItem(i);
                    }
                }

                return null;
            },
            AddColumn$2: function (caption, fieldname, width, formatstring, alignment, forecolor, isBold) {
                if (width === void 0) { width = 100; }
                if (formatstring === void 0) { formatstring = ""; }
                if (alignment === void 0) { alignment = "left"; }
                if (forecolor === void 0) { forecolor = null; }
                if (isBold === void 0) { isBold = false; }
                var col = this.GetColumnByFieldName(fieldname);
                if (col == null) {
                    return;
                }
                this.AddColumn$1(caption, col, width, formatstring, alignment, forecolor, isBold);
            },
            AddColumn$1: function (caption, column, width, formatstring, alignment, forecolor, isBold) {
                var $t;
                if (width === void 0) { width = 100; }
                if (formatstring === void 0) { formatstring = ""; }
                if (alignment === void 0) { alignment = "left"; }
                if (forecolor === void 0) { forecolor = null; }
                if (isBold === void 0) { isBold = false; }
                this.AddColumn(($t = new ExpressCraft.GridViewColumn(this, width), $t.Caption = caption, $t.BodyApparence = new ExpressCraft.GridViewCellApparence.$ctor3(isBold, alignment, forecolor), $t.FormatString = formatstring, $t.Column = column, $t));
            },
            AddColumn: function (column) {
                if (column == null) {
                    return;
                }

                this.Columns.add(column);

                this.RenderGrid();
            },
            AddColumns: function (columns) {
                if (columns === void 0) { columns = []; }
                if (columns == null || columns.length === 0) {
                    return;
                }

                this.Columns.AddRange(columns);

                this.RenderGrid();
            },
            RemoveColumn: function (column) {
                this.Columns.remove(column);

                this.RenderGrid();
            },
            GetDataSourceRow: function (i) {
                if (this.VisibleRowHandles == null || this.VisibleRowHandles.Count === 0) {
                    if (this.DataSource._searchActive) {
                        return this.DataSource._searchResults.getItem(i);
                    }
                    return i;
                }

                return this.VisibleRowHandles.getItem(i);
            },
            GetColumnWidths: function () {
                if (this._columnAutoWidth) {
                    return this.GridBodyContainer.clientWidth;
                } else {
                    var width = 0.0;
                    for (var i = 0; i < this.Columns.Count; i = (i + 1) | 0) {
                        if (this.Columns.getItem(i).Visible) {
                            width += this.Columns.getItem(i).Width;
                        }
                    }
                    return width;
                }
            },
            ClearSelection: function () {
                this.SelectedRows = new (ExpressCraft.HardSoftList$1(System.Boolean))(false);
                this.RenderGrid();
            },
            SelectAllRows: function () {
                var length = this.RowCount();
                if (length === 0) {
                    this.SelectedRows.ClearAll();
                } else {
                    var index = System.Array.init(length, 0, System.Int32);
                    for (var i = 0; i < length; i = (i + 1) | 0) {
                        index[System.Array.index(i, index)] = this.GetDataSourceRow(i);
                    }
                    this.SelectedRows.ClearAllSetHardRange(true, index);
                }
                this.RenderGrid();
            },
            DelayedRenderGrid: function (renderNoLag) {
                if (renderNoLag === void 0) { renderNoLag = false; }
                if (renderNoLag) {
                    this.RenderGrid(false);
                } else {
                    if (ExpressCraft.Settings.GridViewScrollDelayed) {
                        if (this.PrevRenderGridScrollId !== -1) {
                            clearTimeout(this.PrevRenderGridScrollId);
                            this.PrevRenderGridScrollId = -1;
                        }
                        this.PrevRenderGridScrollId = Bridge.Int.clip32(setTimeout(Bridge.fn.bind(this, function (a) {
                            this.RenderGrid();
                        }), Math.max(1, ExpressCraft.Settings.GridViewScrollDelayMS)));
                    } else {
                        this.RenderGrid();
                    }
                }

            },
            GetFocusedRow: function () {
                if (this.FocusedDataHandle > -1) {
                    return this.DataSource.getItem(this.GetDataSourceRow(this.FocusedDataHandle));
                } else {
                    return null;
                }
            },
            GetVisibleCount: function () {
                if (this.Columns == null || this.Columns.Count === 0) {
                    return 0;
                }
                var length = this.Columns.Count;
                var length1 = this.Columns.Count;

                for (var i = 0; i < length; i = (i + 1) | 0) {
                    if (!this.Columns.getItem(i).Visible) {
                        length1 = (length1 - 1) | 0;
                    }
                }
                return length1;
            },
            GetBestFitForColumn: function (column, includeColumnHeader) {
                if (includeColumnHeader === void 0) { includeColumnHeader = false; }
                if (!column.Visible) {
                    return 0;
                }

                var maxLength = 0;
                var maxStr = "";

                if (includeColumnHeader && !System.String.isNullOrWhiteSpace(column.Caption)) {
                    maxStr = column.Caption;
                    maxLength = column.Caption.length;
                }

                for (var i = 0; i < this.RowCount(); i = (i + 1) | 0) {
                    var value = column.GetDisplayValueByDataRowHandle(i);
                    if (!System.String.isNullOrWhiteSpace(value)) {
                        var v = value.length;
                        if (v > maxLength) {
                            maxLength = v;
                            maxStr = value;
                        }
                    }
                }

                if (maxLength > 0) {
                    return ((Bridge.Int.clip32(ExpressCraft.Control.GetTextWidth(maxStr, ExpressCraft.Settings.DefaultFont)) + 20) | 0);
                } else {
                    return 0;
                }
            },
            BestFitAllColumns: function (includeColumnHeader) {
                if (includeColumnHeader === void 0) { includeColumnHeader = false; }
                this._disableRender = true;
                for (var i = 0; i < this.Columns.Count; i = (i + 1) | 0) {
                    if (this.Columns.getItem(i).Visible) {
                        this.Columns.getItem(i).Width = this.GetBestFitForColumn(this.Columns.getItem(i), includeColumnHeader);
                    }
                }
                this._disableRender = false;
                this.RenderGrid();
            },
            _search: function () {
                if (this.DataSource == null || !this.FindPanelVisible) {
                    return;
                }
                this.DataSource.Search(this.SearchTextInput.Text, this);
            },
            MakeRowVisible: function (rowHandle) {
                if (rowHandle < 0) {
                    return;
                }

                var getTopMostRowIndex = this.GetRawTopRowIndex();

                if (rowHandle < getTopMostRowIndex) {
                    this.GridBodyContainer.scrollTop -= Bridge.Int.clip32((getTopMostRowIndex - rowHandle) * this.PixelsPerRow(this.RowCount()));
                } else {
                    getTopMostRowIndex = this.GetRawVisibleRowCount() + getTopMostRowIndex;
                    if (rowHandle >= getTopMostRowIndex) {
                        this.GridBodyContainer.scrollTop += Bridge.Int.clip32(((rowHandle - getTopMostRowIndex) + 1) * this.PixelsPerRow(this.RowCount()));
                    }
                }
            },
            ExportToXLS: function (fileName) {

                var builder = new System.Text.StringBuilder();

                if (this.ColumnCount() === 0 || this.RowCount() === 0) {
                    return;
                }
                var columnLength = this.ColumnCount();

                builder.append("<table><thead><tr>");

                for (var i = 0; i < columnLength; i = (i + 1) | 0) {
                    var col = this.Columns.getItem(i);
                    if (col.Visible) {
                        builder.append(System.String.format("<th>{0}</th>", [this.Columns.getItem(i).Caption]));
                    }
                }

                builder.append("</tr></thead>");

                builder.append("<tbody>");

                var rowLength = this.RowCount();

                for (var y = 0; y < rowLength; y = (y + 1) | 0) {
                    builder.append("<tr>");
                    var DataRowhandle = this.GetDataSourceRow(y);


                    for (var x = 0; x < columnLength; x = (x + 1) | 0) {
                        var col1 = this.Columns.getItem(x);
                        if (!col1.Visible) {
                            continue;
                        }

                        var displayValue = col1.GetDisplayValueByDataRowHandle(DataRowhandle);

                        builder.append(System.String.format("<td>{0}</td>", [displayValue]));
                    }

                    builder.append("</tr>");
                }


                builder.append("</tbody>");


                builder.append("</table>");

                var ua = window.navigator.userAgent;
                var msie = System.String.indexOf(ua, "MSIE ");

                if (msie > 0) {
                    var iframe = document.createElement("iframe");
                    iframe.contentDocument.open("txt/html", "replace");
                    iframe.contentDocument.write(builder.toString());
                    iframe.contentDocument.close();
                    iframe.focus();
                    iframe.contentDocument.execCommand("SaveAs", true, fileName);
                } else {
                    window.open("data:application/vnd.ms-excel," + (encodeURIComponent(builder.toString()) || ""));
                }
            },
            DataSource_OnDataSourceChanged: function (sender, e) {
                this.SortColumn();
                this.RenderGrid();
            },
            Render: function () {
                ExpressCraft.Control.prototype.Render.call(this);
                this.HasRendered = true;
                this.RenderGrid();

                if (this.Content.parentElement != null) {
                }
            },
            GetRawVisibleRowCount: function () {
                return this.GridBodyContainer.clientHeight === 0 ? 0.0 : this.GridBodyContainer.clientHeight / this.UnitHeight;
            },
            GetRawTopRowIndex: function () {
                return this.GridBodyContainer.scrollTop === 0 ? 0.0 : this.GridBodyContainer.scrollTop / this.PixelsPerRow(this.RowCount());
            },
            ValidateGridWidth: function () {
                var width = this.GetColumnWidths();
                this.GridBody.style.width = ExpressCraft.Helper.ToPx(Bridge.box((width), System.Single, System.Single.format, System.Single.getHashCode));
                this.GridHeader.style.width = ExpressCraft.Helper.ToPx(Bridge.box(((width) + 24), System.Single, System.Single.format, System.Single.getHashCode));
                if (this.RightOfTable == null) {
                    this.RightOfTable = ExpressCraft.Control.Div();
                    ExpressCraft.Helper.AppendChild$2(this.GridBody, this.RightOfTable);
                }
                if (this.RightOfTableHeader == null) {
                    this.RightOfTableHeader = ExpressCraft.Control.Div();
                    ExpressCraft.Helper.AppendChild$2(this.GridHeader, this.RightOfTableHeader);
                }
                ExpressCraft.Helper.SetBounds$1(this.RightOfTable, width - 1, 0, 1, 1);
                ExpressCraft.Helper.SetBounds$1(this.RightOfTableHeader, width - 1, 0, 1, 1);
            },
            PixelsPerRow: function (rowCount) {
                if (rowCount > ExpressCraft.Settings.MaximumPixelScrollingRows) {
                    return 3.0;
                } else {
                    return this.UnitHeight;
                }
            },
            ValidateGridHeight: function () {
                var i = this.RowCount();
                var ppr = this.PixelsPerRow(i);
                var height = ppr * (i);

                if (i > ExpressCraft.Settings.MaximumPixelScrollingRows && this.GridBodyContainer.clientHeight > 0) {
                    height += (this.GridBodyContainer.clientHeight / this.UnitHeight) * ppr;
                }

                this.GridBody.style.height = ExpressCraft.Helper.ToPx(Bridge.box(height, System.Single, System.Single.format, System.Single.getHashCode));
                if (this.BottonOfTable == null) {
                    this.BottonOfTable = ExpressCraft.Control.Div();
                    ExpressCraft.Helper.AppendChild$2(this.GridBody, this.BottonOfTable);
                }
                ExpressCraft.Helper.SetBounds$1(this.BottonOfTable, 0, height, 1, 1);
            },
            ValidateGridSize: function () {
                this.ValidateGridHeight();
                this.ValidateGridWidth();
            },
            ClearHeader: function () {
                ExpressCraft.Helper.Empty(this.GridHeader);
                ExpressCraft.Helper.AppendChild$2(this.GridHeader, this.RightOfTableHeader);
            },
            ClearColumns: function () {
                this.Columns = new (System.Collections.Generic.List$1(ExpressCraft.GridViewColumn)).ctor();
            },
            ClearView: function () {
                this._disableRender = true;
                this.Columns = new (System.Collections.Generic.List$1(ExpressCraft.GridViewColumn)).ctor();
                this.VisibleRowHandles = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.SelectedRows = new (ExpressCraft.HardSoftList$1(System.Boolean))(false);
                this._dataSource = null;
                this._disableRender = false;
                this.RenderGrid();
            },
            ClearBody: function () {
                ExpressCraft.Helper.Empty(this.GridBody);
                ExpressCraft.Helper.AppendChildren$2(this.GridBody, [this.RightOfTable, this.BottonOfTable]);
            },
            ClearGrid: function () {
                this.ClearHeader();
                this.ClearBody();
            },
            GetSelectedRowHandles: function () {
                var listOfInt = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                var rowCount = this.RowCount();
                for (var i = 0; i < rowCount; i = (i + 1) | 0) {
                    var index = this.GetDataSourceRow(i);
                    if (this.SelectedRows.GetValue(index, false)) {
                        listOfInt.add(i);
                    }
                }
                return listOfInt.ToArray();
            },
            GetSelectedDataRowHandles: function () {
                var listOfInt = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                var rowCount = this.RowCount();
                for (var i = 0; i < rowCount; i = (i + 1) | 0) {
                    var index = this.GetDataSourceRow(i);
                    if (this.SelectedRows.GetValue(index, false)) {
                        listOfInt.add(index);
                    }
                }
                return listOfInt.ToArray();
            },
            SetupColumn: function (se, index, gcol) {
                se.setAttribute("i", System.Convert.toString(Bridge.box(index, System.Int32)));
                se.setAttribute("draggable", "true");
                se.onclick = this.OnColumnOnClick;
                se.ondragstart = this.OnColumnDragStart;
                se.ondragover = this.OnColumnDragOver;
                se.ondrop = this.OnColumnDrop;
                se.onmousedown = this.OnColumnMouseDown;
                se.onmousemove = this.OnColumnMouseMove;
                se.onmouseleave = this.OnColumnMouseLeave;
            },
            ProcessBlur: function () {
                if (this.PrevScroll !== this.GridBodyContainer.scrollTop) {
                    this.GridBody.classList.add("blur");
                    if (this.lastId !== -1) {
                        clearTimeout(this.lastId);
                        this.lastId = -1;
                    }

                    this.lastId = Bridge.Int.clip32(setTimeout(Bridge.fn.bind(this, function (a) {
                        this.GridBody.classList.remove("blur");
                    }), 100));
                }
                this.PrevScroll = Bridge.Int.clip32(this.GridBodyContainer.scrollTop);
            },
            RenderGrid: function (clear) {
                if (clear === void 0) { clear = true; }
                if (this._disableRender) {
                    return;
                }

                if (clear) {
                    this.CacheRow = new (System.Collections.Generic.Dictionary$2(System.Int32,HTMLElement))();
                }

                if (this.RenderTime > -1) {
                    clearTimeout(this.RenderTime);
                    this.RenderTime = Bridge.Int.clip32(setTimeout(this.renderGridInternal, 1));
                } else {
                    this.renderGridInternal();
                }
            },
            GetPages: function (pageLayout, pageSize) {
                var Pages = new (System.Collections.Generic.List$1(ExpressCraft.Page)).ctor();

                var activePage = null;

                var yp = 0;
                var xp = 0;

                var width;
                var height;

                if (pageSize === ExpressCraft.PageSize.A4) {
                    if (pageLayout === ExpressCraft.Layout.Landscape) {
                        width = 29.7;
                        height = 21.0;
                    } else {
                        height = 29.7;
                        width = 21.0;
                    }
                } else {
                    if (pageLayout === ExpressCraft.Layout.Landscape) {
                        width = 42.0;
                        height = 29.7;
                    } else {
                        height = 42.0;
                        width = 29.7;
                    }
                }

                activePage = new ExpressCraft.Page();
                Pages.add(activePage);

                var sep = 0;

                if (this.ColumnAutoWidth) {
                    sep = (width / this.GetVisibleCount());
                }

                var rowHeight = 28;

                for (var x = 0; x < this.ColumnCount(); x = (x + 1) | 0) {
                    if (this.Columns.getItem(x).Visible) {
                        var colWidth = this.ColumnAutoWidth ? sep : this.Columns.getItem(x).Width;
                        yp = 0;

                        var colHeader = new ExpressCraft.Control.$ctor1();
                        colHeader.Bounds = new ExpressCraft.Vector4.$ctor1(xp, yp, colWidth, rowHeight);
                        colHeader.Content.textContent = this.Columns.getItem(x).Caption;
                        colHeader.Style.border = "1px solid grey";
                        colHeader.Style.backgroundColor = "lightgrey";
                        colHeader.Style.color = "white";

                        ExpressCraft.Helper.AppendChild(activePage, colHeader);

                        yp += rowHeight;

                        for (var y = 0; y < this.RowCount(); y = (y + 1) | 0) {
                            var rowCell = new ExpressCraft.Control.$ctor1();
                            rowCell.Bounds = new ExpressCraft.Vector4.$ctor1(xp, yp, colWidth, rowHeight);
                            rowCell.Content.textContent = this.Columns.getItem(x).GetDisplayValueByDataRowHandle(this.GetDataSourceRow(y));
                            rowCell.Style.border = "1px solid lightgrey";
                            ExpressCraft.Helper.AppendChild(activePage, rowCell);

                            yp += rowHeight;
                        }
                        xp += colWidth;
                    }
                }

                return Pages;
            }
        }
    });

    Bridge.define("ExpressCraft.GridViewCellDisplayCheckBox", {
        inherits: [ExpressCraft.GridViewCellDisplay],
        statics: {
            fields: {
                resource_checked: null
            },
            ctors: {
                init: function () {
                    this.resource_checked = "checked";
                }
            }
        },
        methods: {
            OnCreate: function (gridView, dataRowIndex, columnIndex) {
                var value = gridView.GetRowCellValue$2(dataRowIndex, columnIndex);

                var cell = ExpressCraft.Control.Div$1("cell");
                var input = ExpressCraft.Control.Input("", "checkbox");
                ExpressCraft.Helper.SetBoundsFull$1(input);
                ExpressCraft.Helper.SetChecked$1(input, value);
                input.style.margin = "0";
                ExpressCraft.Helper.AppendChild$2(cell, input);

                return cell;
            }
        }
    });

    Bridge.define("ExpressCraft.GridViewCellDisplayImage", {
        inherits: [ExpressCraft.GridViewCellDisplay],
        fields: {
            UseBase64Resource: false
        },
        methods: {
            OnCreate: function (gridView, dataRowIndex, columnIndex) {
                var src = ExpressCraft.Helper.HtmlUrlEscape((System.String.concat(gridView.GetRowCellValue$2(dataRowIndex, columnIndex), "")));
                var imgDiv = ExpressCraft.Control.Div$1("cell");

                ExpressCraft.Helper.SetImage$1(imgDiv, src, !this.UseBase64Resource);

                return imgDiv;
            }
        }
    });

    Bridge.define("ExpressCraft.GroupPanel", {
        inherits: [ExpressCraft.Control],
        fields: {
            legend: null
        },
        props: {
            Caption: {
                get: function () {
                    return this.legend.textContent;
                },
                set: function (value) {
                    this.legend.textContent = value;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                ExpressCraft.Control.ctor.call(this, document.createElement("fieldset"));
                ExpressCraft.Helper.AppendChild$2(this.Content, (this.legend = document.createElement("legend")));
                this.Content.className = "control inputcontrol popup";
                this.legend.style.marginLeft = "7px";
            }
        }
    });

    Bridge.define("ExpressCraft.ImageEdit", {
        inherits: [ExpressCraft.Control],
        fields: {
            _noImageDataText: null,
            _isURL: false,
            _image: null
        },
        props: {
            isUrl: {
                get: function () {
                    return this._isURL;
                },
                set: function (value) {
                    if (this._isURL !== value) {
                        this._isURL = value;
                        this.RefreshImage();
                    }
                }
            },
            Image: {
                get: function () {
                    return this._image;
                },
                set: function (value) {
                    if (Bridge.referenceEquals(this._image, value)) {
                        return;
                    }
                    this._image = value;
                    this.RefreshImage();
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                ExpressCraft.Control.$ctor3.call(this, "inputcontrol");
                this._noImageDataText = new ExpressCraft.Control.$ctor3("form-heading-title");
                this._noImageDataText.Content.innerHTML = "No image data";
                this._noImageDataText.Content.style.color = "black";
                this._noImageDataText.Content.style.visibility = "inherit";

                ExpressCraft.Helper.AppendChild$1(this.Content, this._noImageDataText);
            }
        },
        methods: {
            RefreshImage: function () {
                if (!System.String.isNullOrWhiteSpace(this._image)) {
                    this._noImageDataText.Content.style.visibility = "hidden";
                } else {
                    this._image = "";
                    this._noImageDataText.Content.style.visibility = "inherit";
                }
                ExpressCraft.Helper.SetImage(this, this._image, this._isURL);
            }
        }
    });

    Bridge.define("ExpressCraft.LayoutRowControl", {
        inherits: [ExpressCraft.LayoutRow],
        fields: {
            Height: 0,
            Control: null
        },
        ctors: {
            ctor: function (height, control) {
                this.$initialize();
                ExpressCraft.LayoutRow.ctor.call(this);
                this.Height = height;
                this.Label = "";
                this.Control = control;
            }
        }
    });

    Bridge.define("ExpressCraft.LayoutRowGap", {
        inherits: [ExpressCraft.LayoutRow],
        fields: {
            Height: 0
        },
        ctors: {
            ctor: function (height, label) {
                if (label === void 0) { label = ""; }

                this.$initialize();
                ExpressCraft.LayoutRow.ctor.call(this);
                this.Height = height;
                this.Label = label;
            }
        }
    });

    Bridge.define("ExpressCraft.Page", {
        inherits: [ExpressCraft.Control],
        fields: {
            OnClick: null
        },
        props: {
            PageSize: {
                get: function () {
                    var value = this.GetAttribute("size");
                    if (Bridge.referenceEquals(value, "A5")) {
                        return ExpressCraft.PageSize.A5;
                    }
                    return ExpressCraft.PageSize.A4;

                },
                set: function (value) {
                    this.SetAttribute("size", System.Enum.format(ExpressCraft.PageSize, value, "G"));
                }
            },
            Layout: {
                get: function () {
                    var value = this.GetAttribute("layout");
                    if (Bridge.referenceEquals(value, "Landscape")) {
                        return ExpressCraft.Layout.Landscape;
                    }
                    return ExpressCraft.Layout.Portrait;
                },
                set: function (value) {
                    this.SetAttribute("layout", System.Enum.format(ExpressCraft.Layout, value, "G"));
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                ExpressCraft.Control.ctor.call(this, document.createElement("page"));
                this.ClassList.remove("control");

                this.PageSize = ExpressCraft.PageSize.A4;
            }
        }
    });

    Bridge.define("ExpressCraft.PrinterControl", {
        inherits: [ExpressCraft.Control],
        fields: {
            Pages: null,
            _focusedPage: null,
            _scale: 0,
            wrapper: null,
            OnFocusedPageChanged: null,
            PageLayout: 0
        },
        props: {
            Scale: {
                get: function () {
                    return this._scale;
                },
                set: function (value) {
                    if (value < 0.1) {
                        value = 0.1;
                    }
                    if (value > 4) {
                        value = 4;
                    }
                    this._scale = value;

                    this.wrapper.style.transform = "scale(" + System.Single.format(this._scale) + ")";
                }
            },
            FocusedPage: {
                get: function () {
                    return this._focusedPage;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(value, this._focusedPage)) {
                        if (this._focusedPage != null) {
                            this._focusedPage.ClassList.remove("page-focused");
                        }

                        this._focusedPage = value;

                        if (!Bridge.staticEquals(this.OnFocusedPageChanged, null)) {
                            this.OnFocusedPageChanged(this._focusedPage);
                        }

                        if (this._focusedPage != null) {
                            this._focusedPage.ClassList.add("page-focused");
                        }
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.Pages = new (System.Collections.Generic.List$1(ExpressCraft.Page)).ctor();
                this._scale = 1;
                this.PageLayout = ExpressCraft.Layout.Portrait;
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.Control.$ctor3.call(this, "print-body");
                this.Style.overflow = "auto";

                this.wrapper = document.createElement("div");
                this.wrapper.style.transformOrigin = "50% 0 0";
                this.wrapper.style.position = "relative";

                ExpressCraft.Helper.AppendChild$2(this.Content, this.wrapper);
            }
        },
        methods: {
            AddPages: function (pages) {
                var $t;
                $t = Bridge.getEnumerator(pages);
                try {
                    while ($t.moveNext()) {
                        var page = { v : $t.Current };
                        if (page.v != null) {
                            this.Pages.add(page.v);
                            ExpressCraft.Helper.AppendChild$1(this.wrapper, page.v);

                            this.FocusedPage = page.v;

                            page.v.Content.onclick = (function ($me, page) {
                                return Bridge.fn.bind($me, function (ev) {
                                    this.FocusedPage = page.v;
                                    if (!Bridge.staticEquals(page.v.OnClick, null)) {
                                        page.v.OnClick();
                                    }
                                });
                            })(this, page);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            /**
             * Page is a HTMLElement - AppendChild and Add the page to the list
             *
             * @instance
             * @public
             * @this ExpressCraft.PrinterControl
             * @memberof ExpressCraft.PrinterControl
             * @param   {ExpressCraft.Control}    element
             * @return  {void}
             */
            AddElementFocusedPage: function (element) {
                this.AddElementFocusedPage$1(element.Content);
            },
            /**
             * Page is a HTMLElement - AppendChild and Add the page to the list
             *
             * @instance
             * @public
             * @this ExpressCraft.PrinterControl
             * @memberof ExpressCraft.PrinterControl
             * @param   {Retyped..HTMLElement}    element
             * @return  {void}
             */
            AddElementFocusedPage$1: function (element) {
                if (this.FocusedPage == null) {
                    throw new System.Exception("There is not focused page!");
                }

                ExpressCraft.Helper.AppendChild$2(this.FocusedPage.Content, element);
            },
            CreateNewPage: function (size) {
                var $t;
                if (size === void 0) { size = 0; }
                var page = ($t = new ExpressCraft.Page(), $t.PageSize = size, $t.Layout = this.PageLayout, $t);

                this.Pages.add(page);
                ExpressCraft.Helper.AppendChild$1(this.wrapper, page);

                this.FocusedPage = page;

                page.Content.onclick = Bridge.fn.bind(this, function (ev) {
                    this.FocusedPage = page;
                    if (!Bridge.staticEquals(page.OnClick, null)) {
                        page.OnClick();
                    }
                });

                return page;
            },
            Print: function () {
                var printingFrame = window.open("", "");
                var element = document.getElementById("expresscraft");

                var headerInfo = "";
                if (element != null) {
                    var extra;

                    if (this.PageLayout === ExpressCraft.Layout.Portrait) {
                        extra = "<style type='text/css' media='print'> @page { size: portait; margin:0; } page { margin:0 !important; box-shadow: none !important; overflow: hidden; } .print-body { margin:0 !important; overflow: visible !important; } page:first-child {  margin-top: 0 !important; } </style>";
                    } else {
                        extra = "<style type='text/css' media='print'> @page { size: landscape; margin:0; } page { margin:0 !important; box-shadow: none !important; overflow: hidden; } .print-body { margin:0 !important; overflow: visible !important; } page:first-child {  margin-top: 0 !important; } </style>";
                    }

                    headerInfo = "<head>" + (element.outerHTML || "") + "\r\n" + (extra || "") + "</head>";

                }
                if (this.FocusedPage != null) {
                    this.FocusedPage.ClassList.remove("page-focused");
                }
                printingFrame.document.write("<html><title>Printing...</title>" + (headerInfo || "") + "<body>" + (this.Content.outerHTML || "") + "</body></html>");
                printingFrame.document.close();
                printingFrame.focus();

                printingFrame.addEventListener("load", function (a) {
                    printingFrame.print();
                    printingFrame.close();
                });



                if (this.FocusedPage != null) {
                    this.FocusedPage.ClassList.add("page-focused");
                }
            }
        }
    });

    Bridge.define("ExpressCraft.ProgressControl", {
        inherits: [ExpressCraft.Control],
        fields: {
            position: 0,
            internalProgressControl: null,
            maximum: 0,
            Step: 0,
            DisableUpdate: false
        },
        props: {
            Maximum: {
                get: function () {
                    return this.maximum;
                },
                set: function (value) {
                    if (value < 1) {
                        value = 1;
                    }
                    if (value < this.position) {
                        this.position = value;
                    }
                    this.maximum = value;
                    if (!this.DisableUpdate) {
                        this.Update();
                    }
                }
            },
            Position: {
                get: function () {
                    return this.position;
                },
                set: function (value) {
                    if (value < 0) {
                        value = 0;
                    } else {
                        if (value > this.maximum) {
                            value = this.maximum;
                        }
                    }
                    this.position = value;
                    if (!this.DisableUpdate) {
                        this.Update();
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.Step = 1;
                this.DisableUpdate = false;
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.Control.$ctor3.call(this, "progressbar");
                this.internalProgressControl = ExpressCraft.Control.Div$1("progressbarbody");
            }
        },
        methods: {
            NextStep: function () {
                this.Position = (this.Position + this.Step) | 0;
            },
            Render: function () {
                ExpressCraft.Control.prototype.Render.call(this);

                ExpressCraft.Helper.AppendChild$2(this.Content, this.internalProgressControl);

                this.Update();
            },
            Update: function () {
                if (this.DisableUpdate || this.internalProgressControl == null) {
                    return;
                }
                if (this.maximum === 0 || this.position === 0) {
                    this.internalProgressControl.style.width = "0%";
                } else {
                    var source = ((this.position / this.maximum) * 100.00) + '%';
                    this.internalProgressControl.style.width = "calc(" + (source || "") + " - 2px)";
                }
            }
        }
    });

    Bridge.define("ExpressCraft.RadioEdit", {
        inherits: [ExpressCraft.Control],
        statics: {
            fields: {
                RadioId: System.Int64(0),
                rng: null
            },
            ctors: {
                init: function () {
                    this.rng = new System.Random.ctor();
                }
            }
        },
        fields: {
            RadioElements: null,
            defaultName: null,
            OnCheckChanged: null
        },
        props: {
            SelectedRadioElement: {
                get: function () {
                    var si = this.SelectedIndex;
                    if (si === -1 || si >= this.RadioElements.Count) {
                        return null;
                    }
                    return this.RadioElements.getItem(si);
                }
            },
            SelectedIndex: {
                get: function () {
                    var $t;
                    if (this.RadioElements == null || this.RadioElements.Count === 0) {
                        return -1;
                    }
                    var i = 0;
                    $t = Bridge.getEnumerator(this.RadioElements);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (item.Checked) {
                                return i;
                            }
                            i = (i + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return -1;
                },
                set: function (value) {
                    var $t;
                    var i = 0;
                    $t = Bridge.getEnumerator(this.RadioElements);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (i === value) {
                                item.Checked = true;
                            } else {
                                item.Checked = false;
                            }
                            i = (i + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.RadioElements = new (System.Collections.Generic.List$1(ExpressCraft.RadioElement)).ctor();
                this.defaultName = "";
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.Control.$ctor3.call(this, "inputcontrol popup");
                ExpressCraft.RadioEdit.RadioId = ExpressCraft.RadioEdit.RadioId.inc();
                if (ExpressCraft.RadioEdit.RadioId.gt(System.Int64(20000))) {
                    ExpressCraft.RadioEdit.RadioId = System.Int64(0);
                }

                this.defaultName = "__radio_group_internal_" + (Bridge.toString(ExpressCraft.RadioEdit.RadioId) || "") + "_rng_" + ExpressCraft.RadioEdit.rng.Next$2(1, 1000);
            }
        },
        methods: {
            AddItems: function (items) {
                var $t, $t1;
                if (items === void 0) { items = []; }
                if (items == null || items.length === 0) {
                    return;
                }
                $t = Bridge.getEnumerator(items);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        this.AddElement(($t1 = new ExpressCraft.RadioElement(), $t1.Caption = item, $t1));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            AddElement: function (element) {
                if (element != null && element.Content != null) {
                    element.Content.setAttribute("name", this.defaultName);
                    ExpressCraft.Helper.AppendChild(this, element);
                    this.RadioElements.add(element);
                    element.ProcessRender();

                    element.OnTextChanged = Bridge.fn.bind(this, function (sender) {
                        if (!Bridge.staticEquals(this.OnCheckChanged, null)) {
                            this.OnCheckChanged(element);
                        }
                    });

                    if (this.RadioElements.Count === 1) {
                        element.Style.marginLeft = "0";
                    }
                }
            },
            AddElements: function (elements) {
                var $t;
                if (elements === void 0) { elements = []; }
                if (elements != null) {
                    $t = Bridge.getEnumerator(elements);
                    try {
                        while ($t.moveNext()) {
                            var element = $t.Current;
                            if (element != null && element.Content != null) {
                                element.Content.setAttribute("name", this.defaultName);

                                ExpressCraft.Helper.AppendChild(this, element);
                                this.RadioElements.add(element);

                                element.ProcessRender();
                                if (this.RadioElements.Count === 1) {
                                    element.Style.marginLeft = "0";
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        }
    });

    Bridge.define("ExpressCraft.RibbonItem", {
        inherits: [ExpressCraft.Control],
        fields: {
            BeginGroup: false,
            IsSmallItem: false,
            captionDiv: null,
            _caption: null,
            enabled: false
        },
        props: {
            Caption: {
                get: function () {
                    return this._caption;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._caption, value)) {
                        this._caption = value;
                        this.ProcessCaption();
                    }
                }
            },
            Enabled: {
                get: function () {
                    return this.enabled;
                },
                set: function (value) {
                    this.enabled = value;
                    this.setEnabled(value);
                }
            }
        },
        ctors: {
            init: function () {
                this.BeginGroup = false;
                this.IsSmallItem = false;
                this._caption = "";
                this.enabled = true;
            },
            ctor: function (className) {
                this.$initialize();
                ExpressCraft.Control.$ctor3.call(this, className);

            }
        },
        methods: {
            ProcessCaption: function () {
                if (this.captionDiv != null) {
                    this.captionDiv.remove();
                    this.captionDiv = null;
                }
                if (!System.String.isNullOrWhiteSpace(this.Caption)) {
                    this.captionDiv = ExpressCraft.Control.Div$1(this.IsSmallItem ? "ribbonbuttonsmallcaption" : "ribbonbuttoncaption");

                    this.captionDiv.innerHTML = this.Caption;

                    ExpressCraft.Helper.AppendChild$2(this.Content, this.captionDiv);
                }
            },
            OnSetEnabled: function (value) {
                if (value) {
                    if (this.captionDiv != null) {
                        this.captionDiv.classList.remove("disabled");
                    }
                } else {
                    if (this.captionDiv != null) {
                        this.captionDiv.classList.add("disabled");
                    }
                }
            },
            setEnabled: function (value) {
                this.ChangeState(value);
                this.OnSetEnabled(value);
            }
        }
    });

    Bridge.define("ExpressCraft.RibbonControl", {
        inherits: [ExpressCraft.Control,ExpressCraft.IPages],
        fields: {
            RibbonPages: null,
            IconURL: null,
            Type: 0,
            ApplicationIcon: null,
            OnSelectedPageChange: null,
            selectedindex: 0
        },
        props: {
            SelectedIndex: {
                get: function () {
                    return this.selectedindex;
                },
                set: function (value) {
                    if (value < 0) {
                        value = 0;
                    }
                    if (this.selectedindex >= this.RibbonPages.Count) {
                        this.selectedindex = (this.RibbonPages.Count - 1) | 0;
                    }

                    if (this.selectedindex !== value) {
                        this.selectedindex = value;
                        if (!Bridge.staticEquals(this.OnSelectedPageChange, null)) {
                            this.OnSelectedPageChange(this.selectedindex, this.RibbonPages.getItem(this.selectedindex));
                        }
                    }
                    this.SetSelectedIndex(value);
                }
            }
        },
        alias: ["AddRibbonPages", "ExpressCraft$IPages$AddRibbonPages"],
        ctors: {
            init: function () {
                this.RibbonPages = new (System.Collections.Generic.List$1(ExpressCraft.RibbonPage)).ctor();
                this.IconURL = "fav.ico";
                this.selectedindex = -1;
            },
            ctor: function (type) {
                if (type === void 0) { type = 0; }

                this.$initialize();
                ExpressCraft.Control.$ctor3.call(this, "ribboncontrol" + ((type === ExpressCraft.RibbonControl.RibbonType.Full ? "" : " ribboncontrol-compact") || ""));
                this.Type = type;

                this.Content.oncontextmenu = function (ev) {
                    ev.stopPropagation();
                    ev.preventDefault();
                };
            }
        },
        methods: {
            AddRibbonPages: function (pages) {
                var $t;
                if (pages === void 0) { pages = []; }
                if (pages != null) {
                    $t = Bridge.getEnumerator(pages);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (item != null) {
                                this.RibbonPages.add(item);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            MenuClick: function () {
                if (ExpressCraft.Helper.NotDesktop) {
                }
            },
            SetSelectedIndex: function (index) {
                if (this.RibbonPages != null && this.RibbonPages.Count > 0) {
                    for (var i = 0; i < this.RibbonPages.Count; i = (i + 1) | 0) {
                        if (this.RibbonPages.getItem(i).RibbonHeader != null) {
                            this.RibbonPages.getItem(i).RibbonHeader.classList.remove("ribbonpageheader-hidden");
                            this.RibbonPages.getItem(i).RibbonHeader.classList.remove("ribbonpageheader-active");

                            if (i === index) {
                                this.RibbonPages.getItem(i).RibbonHeader.classList.add("ribbonpageheader-active");
                                this.RibbonPages.getItem(i).Content.style.visibility = "inherit";
                            } else {
                                this.RibbonPages.getItem(i).RibbonHeader.classList.add("ribbonpageheader-hidden");
                                this.RibbonPages.getItem(i).Content.style.visibility = "hidden";
                            }
                        }
                    }
                }
            },
            Render: function () {
                this.HasRendered = true;
                if (this.Type === ExpressCraft.RibbonControl.RibbonType.Full) {
                    if (this.ApplicationIcon != null) {
                        ExpressCraft.Helper.Delete$1(this.ApplicationIcon);
                    }
                    this.ApplicationIcon = ExpressCraft.Control.Div$1("application-icon");
                    var appIconImage = ExpressCraft.Control.Div$1("fav-icon");
                    appIconImage.style.background = ExpressCraft.Control.GetImageStringURI(this.IconURL);
                    appIconImage.style.backgroundSize = "100% 100%";

                    ExpressCraft.Helper.AppendChild$2(this.ApplicationIcon, appIconImage);

                    ExpressCraft.Helper.AppendChild$2(this.Content, this.ApplicationIcon);
                }

                if (this.RibbonPages != null && this.RibbonPages.Count > 0) {
                    var width = 58;
                    for (var i = 0; i < this.RibbonPages.Count; i = (i + 1) | 0) {
                        if (this.Content.contains(ExpressCraft.Control.op_Implicit(this.RibbonPages.getItem(i)))) {
                            ExpressCraft.Helper.Delete$1(this.RibbonPages.getItem(i).Content);
                            ExpressCraft.Helper.Delete$1(this.RibbonPages.getItem(i).RibbonHeader);
                        }
                        this.RibbonPages.getItem(i).Render();

                        if (this.Type === ExpressCraft.RibbonControl.RibbonType.Compact) {
                            if (!System.String.contains(this.RibbonPages.getItem(i).Content.className,"ribbonpage-compact")) {
                                this.RibbonPages.getItem(i).Content.classList.add("ribbonpage-compact");
                            }
                        } else {
                            if (System.String.contains(this.RibbonPages.getItem(i).Content.className,"ribbonpage-compact")) {
                                this.RibbonPages.getItem(i).Content.classList.remove("ribbonpage-compact");
                            }
                        }

                        var index = { v : i };

                        if (i === this.selectedindex) {
                            this.RibbonPages.getItem(i).RibbonHeader = ExpressCraft.Control.Div$1("ribbonpageheader ribbonpageheader-active" + ((this.Type === ExpressCraft.RibbonControl.RibbonType.Full ? "" : " ribbonpageheader-compact") || ""));
                            this.RibbonPages.getItem(i).Content.style.visibility = "visible";
                        } else {
                            this.RibbonPages.getItem(i).RibbonHeader = ExpressCraft.Control.Div$1("ribbonpageheader ribbonpageheader-hidden" + ((this.Type === ExpressCraft.RibbonControl.RibbonType.Full ? "" : " ribbonpageheader-compact") || ""));
                            this.RibbonPages.getItem(i).Content.style.visibility = "hidden";
                        }

                        this.RibbonPages.getItem(i).RibbonHeader.onmousedown = (function ($me, index) {
                            return Bridge.fn.bind($me, function (ev) {
                                this.SelectedIndex = index.v;
                            });
                        })(this, index);
                        this.RibbonPages.getItem(i).RibbonHeader.ontouchstart = (function ($me, index) {
                            return Bridge.fn.bind($me, function (ev) {
                                this.SelectedIndex = index.v;
                            });
                        })(this, index);

                        this.RibbonPages.getItem(i).RibbonHeader.innerHTML = this.RibbonPages.getItem(i).Caption;

                        var inwidth = 24;

                        if (!System.String.isNullOrEmpty(this.RibbonPages.getItem(i).Caption)) {
                            inwidth = (inwidth + Bridge.Int.clip32(ExpressCraft.Control.GetTextWidth(this.RibbonPages.getItem(i).Caption, ExpressCraft.Settings.DefaultFont))) | 0;
                        }

                        this.RibbonPages.getItem(i).RibbonHeader.style.left = width + "px";
                        this.RibbonPages.getItem(i).RibbonHeader.style.width = inwidth + "px";

                        ExpressCraft.Helper.AppendChild$2(this.Content, this.RibbonPages.getItem(i).RibbonHeader);
                        ExpressCraft.Helper.AppendChild$1(this.Content, this.RibbonPages.getItem(i));

                        width = (width + inwidth) | 0;
                    }
                }
                this.SelectedIndex = this.selectedindex;
            }
        }
    });

    Bridge.define("ExpressCraft.RibbonGroup", {
        inherits: [ExpressCraft.Control],
        fields: {
            Caption: null,
            Items: null,
            enabled: false,
            captionDiv: null,
            riList: null
        },
        props: {
            Enabled: {
                get: function () {
                    return this.enabled;
                },
                set: function (value) {
                    this.enabled = value;
                    this.setEnabled(value);
                }
            }
        },
        ctors: {
            init: function () {
                this.enabled = true;
            },
            ctor: function (_caption) {
                if (_caption === void 0) { _caption = ""; }

                this.$initialize();
                ExpressCraft.Control.$ctor3.call(this, "ribbongroup");
                this.Caption = _caption;
                this.Items = new (System.Collections.Generic.List$1(ExpressCraft.RibbonItem)).ctor();
            },
            $ctor1: function (_caption, buttons) {
                if (buttons === void 0) { buttons = []; }
                var $t;

                this.$initialize();
                ExpressCraft.Control.$ctor3.call(this, "ribbongroup");
                this.Caption = _caption;
                this.Items = new (System.Collections.Generic.List$1(ExpressCraft.RibbonItem)).ctor();
                if (buttons != null) {
                    $t = Bridge.getEnumerator(buttons);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (item != null) {
                                this.Items.add(item);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }

            }
        },
        methods: {
            setEnabled: function (value) {
                if (this.Items.Count > 0) {
                    for (var i = 0; i < this.Items.Count; i = (i + 1) | 0) {
                        if (!value) {
                            this.Items.getItem(i).setEnabled(value);
                        } else {
                            this.Items.getItem(i).setEnabled(this.Items.getItem(i).Enabled);
                        }
                    }
                }
                this.ChangeState(value);
                if (value) {
                    if (this.captionDiv != null) {
                        this.captionDiv.classList.remove("disabled");
                    }
                } else {
                    if (this.captionDiv != null) {
                        this.captionDiv.classList.add("disabled");
                    }
                }
            },
            CreateVerticalLine: function (height) {
                var htmlDiv = ExpressCraft.Control.Div$1("ribbonseperator");
                if (height !== 58) {
                    htmlDiv.style.height = height + "px";
                }

                return htmlDiv;
            },
            GenerateRList: function () {
                var ri = null;

                if (this.riList == null) {
                    this.riList = new (System.Collections.Generic.List$1(ExpressCraft.RibbonGroup.RenderInfo)).ctor();
                    for (var i = 0; i < this.Items.Count; i = (i + 1) | 0) {
                        if (ri == null) {
                            ri = new ExpressCraft.RibbonGroup.RenderInfo();
                            ri.FirstItem = this.Items.getItem(i);
                            ri.IsSmall = ri.FirstItem.IsSmallItem;
                        } else {
                            if (ri.IsSmall !== this.Items.getItem(i).IsSmallItem || this.Items.getItem(i).BeginGroup || !this.Items.getItem(i).IsSmallItem || (ri.FirstItem != null && ri.SecondItem != null && ri.ThirdItem != null)) {
                                this.riList.add(ri);

                                ri = new ExpressCraft.RibbonGroup.RenderInfo();
                                ri.FirstItem = this.Items.getItem(i);
                                ri.IsSmall = this.Items.getItem(i).IsSmallItem;
                                ri.BeginGroup = this.Items.getItem(i).BeginGroup;
                            } else {
                                if (ri.SecondItem == null) {
                                    ri.SecondItem = this.Items.getItem(i);
                                } else {
                                    ri.ThirdItem = this.Items.getItem(i);
                                }
                            }
                        }
                    }

                    if (ri != null) {
                        this.riList.add(ri);
                        ri = null;
                    }
                }
            },
            GetExtraWidth: function (item) {
                if (Bridge.is(item, ExpressCraft.RibbonEditItem)) {
                    return ((((item.EditWidth + 6) | 0) - 20) | 0);
                }
                return 0;
            },
            Render: function () {
                this.HasRendered = true;

                this.GenerateRList();

                ExpressCraft.Helper.Empty(this.Content);

                var width = 0;

                for (var i = 0; i < this.riList.Count; i = (i + 1) | 0) {
                    var ri = this.riList.getItem(i);

                    if (ri.BeginGroup) {
                        width = (width + 3) | 0;
                        var vlbg = this.CreateVerticalLine(58);
                        vlbg.style.left = width + "px";

                        ExpressCraft.Helper.AppendChild$2(this.Content, vlbg);
                    }

                    width = (width + 3) | 0;

                    if (ri.IsSmall) {
                        var MaxWidth;

                        if (ri.ThirdItem == null) {
                            if (ri.SecondItem == null) {
                                MaxWidth = Math.max(((((((Bridge.Int.clip32(ExpressCraft.Control.GetTextWidth(ri.FirstItem.Caption, ExpressCraft.Settings.DefaultFont)) + 28) | 0) + 6) | 0) + this.GetExtraWidth(ri.FirstItem)) | 0), 64);



                                ri.FirstItem.Render();

                                ri.FirstItem.Content.style.left = width + "px";
                                ri.FirstItem.Content.style.width = MaxWidth + "px";

                                ri.FirstItem.Content.style.top = "26px";

                                ExpressCraft.Helper.AppendChild$1(this.Content, ri.FirstItem);
                            } else {
                                MaxWidth = Math.max(((((Math.max(((Bridge.Int.clip32(ExpressCraft.Control.GetTextWidth(ri.FirstItem.Caption, ExpressCraft.Settings.DefaultFont)) + this.GetExtraWidth(ri.FirstItem)) | 0), ((Bridge.Int.clip32(ExpressCraft.Control.GetTextWidth(ri.SecondItem.Caption, ExpressCraft.Settings.DefaultFont)) + this.GetExtraWidth(ri.SecondItem)) | 0)) + 28) | 0) + 6) | 0), 64);

                                ri.FirstItem.Render();
                                ri.SecondItem.Render();

                                ri.FirstItem.Content.style.left = width + "px";
                                ri.SecondItem.Content.style.left = width + "px";

                                ri.FirstItem.Content.style.top = (21) + "px";

                                ri.FirstItem.Content.style.width = MaxWidth + "px";
                                ri.SecondItem.Content.style.width = MaxWidth + "px";

                                ri.FirstItem.Content.style.top = "11px";
                                ri.SecondItem.Content.style.top = "41px";

                                ExpressCraft.Helper.AppendChild$1(this.Content, ri.FirstItem);
                                ExpressCraft.Helper.AppendChild$1(this.Content, ri.SecondItem);
                            }
                        } else {
                            MaxWidth = Math.max(((((Math.max(Math.max(((Bridge.Int.clip32(ExpressCraft.Control.GetTextWidth(ri.FirstItem.Caption, ExpressCraft.Settings.DefaultFont)) + this.GetExtraWidth(ri.FirstItem)) | 0), ((Bridge.Int.clip32(ExpressCraft.Control.GetTextWidth(ri.SecondItem.Caption, ExpressCraft.Settings.DefaultFont)) + this.GetExtraWidth(ri.SecondItem)) | 0)), ((Bridge.Int.clip32(ExpressCraft.Control.GetTextWidth(ri.ThirdItem.Caption, ExpressCraft.Settings.DefaultFont)) + this.GetExtraWidth(ri.ThirdItem)) | 0)) + 28) | 0) + 6) | 0), 64);

                            ri.FirstItem.Render();
                            ri.SecondItem.Render();
                            ri.ThirdItem.Render();

                            ri.FirstItem.Content.style.left = width + "px";
                            ri.SecondItem.Content.style.left = width + "px";
                            ri.ThirdItem.Content.style.left = width + "px";

                            ri.FirstItem.Content.style.width = MaxWidth + "px";
                            ri.SecondItem.Content.style.width = MaxWidth + "px";
                            ri.ThirdItem.Content.style.width = MaxWidth + "px";

                            ri.FirstItem.Content.style.top = "3px";
                            ri.SecondItem.Content.style.top = "26px";
                            ri.ThirdItem.Content.style.top = "49px";

                            ExpressCraft.Helper.AppendChild$1(this.Content, ri.FirstItem);
                            ExpressCraft.Helper.AppendChild$1(this.Content, ri.SecondItem);
                            ExpressCraft.Helper.AppendChild$1(this.Content, ri.ThirdItem);
                        }

                        width = (width + MaxWidth) | 0;
                    } else {
                        ri.FirstItem.Render();

                        ri.FirstItem.Content.style.left = width + "px";
                        var inwidth = 0;
                        if (System.String.contains(ri.FirstItem.Caption," ")) {
                            var strings = System.String.split(ri.FirstItem.Caption, [32].map(function (i) {{ return String.fromCharCode(i); }}));
                            var builder = new System.Text.StringBuilder();

                            var length = (Bridge.Int.div(ri.FirstItem.Caption.length, 2)) | 0;

                            for (var j = 0; j < strings.length; j = (j + 1) | 0) {
                                if (builder.getLength() > length) {
                                    inwidth = (Bridge.Int.clip32(ExpressCraft.Control.GetTextWidth(builder.toString(), ExpressCraft.Settings.DefaultFont)) + 20) | 0;
                                    break;
                                }
                                if (builder.getLength() > 0) {
                                    builder.append(" " + (strings[System.Array.index(j, strings)] || ""));
                                } else {
                                    builder.append(strings[System.Array.index(j, strings)]);
                                }
                            }
                            if (inwidth === 0) {
                                inwidth = (Bridge.Int.clip32(ExpressCraft.Control.GetTextWidth(builder.toString(), ExpressCraft.Settings.DefaultFont)) + 20) | 0;
                            }
                        } else {
                            inwidth = (Bridge.Int.clip32(ExpressCraft.Control.GetTextWidth(ri.FirstItem.Caption, ExpressCraft.Settings.DefaultFont)) + 20) | 0;
                        }

                        if (inwidth < 44) {
                            inwidth = 44;
                        }

                        inwidth = (inwidth + (this.GetExtraWidth(ri.FirstItem))) | 0;

                        ri.FirstItem.Content.style.width = inwidth + "px";

                        width = (width + inwidth) | 0;

                        ExpressCraft.Helper.AppendChild$1(this.Content, ri.FirstItem);
                    }
                }

                var minWidth = (Bridge.Int.clip32(ExpressCraft.Control.GetTextWidth(this.Caption, ExpressCraft.Settings.DefaultFont)) + 20) | 0;

                if (width < minWidth) {
                    width = minWidth;
                }

                width = (width + 3) | 0;

                var vl = this.CreateVerticalLine(80);
                vl.style.left = ((width - 1) | 0) + "px";

                ExpressCraft.Helper.AppendChild$2(this.Content, vl);

                this.Content.style.width = width + "px";

                if (!System.String.isNullOrWhiteSpace(this.Caption)) {
                    this.captionDiv = ExpressCraft.Control.Div$1("ribbongroupcaption");

                    this.captionDiv.innerHTML = this.Caption;
                    ExpressCraft.Helper.AppendChild$2(this.Content, this.captionDiv);
                }

                this.setEnabled(this.enabled);
            }
        }
    });

    Bridge.define("ExpressCraft.RibbonPage", {
        inherits: [ExpressCraft.Control],
        fields: {
            Caption: null,
            RibbonGroups: null,
            RibbonHeader: null
        },
        ctors: {
            init: function () {
                this.RibbonGroups = new (System.Collections.Generic.List$1(ExpressCraft.RibbonGroup)).ctor();
            },
            ctor: function (_caption) {
                if (_caption === void 0) { _caption = ""; }

                this.$initialize();
                ExpressCraft.Control.$ctor3.call(this, "ribbonpage");
                this.Caption = _caption;
            }
        },
        methods: {
            AddRibbonGroups: function (pages) {
                var $t;
                if (pages === void 0) { pages = []; }
                if (pages != null) {
                    $t = Bridge.getEnumerator(pages);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (item != null) {
                                this.RibbonGroups.add(item);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            Render: function () {
                this.HasRendered = true;
                if (this.RibbonGroups == null || this.RibbonGroups.Count === 0) {
                    return;
                }
                var width = 0;
                for (var i = 0; i < this.RibbonGroups.Count; i = (i + 1) | 0) {
                    this.RibbonGroups.getItem(i).Render();
                    this.RibbonGroups.getItem(i).Content.style.left = width + "px";
                    width = (width + (parseInt(this.RibbonGroups.getItem(i).Content.style.width))) | 0;
                    ExpressCraft.Helper.AppendChild$1(this.Content, this.RibbonGroups.getItem(i));
                }
            }
        }
    });

    Bridge.define("ExpressCraft.SolidBrush", {
        inherits: [ExpressCraft.Brush],
        fields: {
            Color: null
        },
        ctors: {
            init: function () {
                this.Color = new ExpressCraft.Color();
            },
            ctor: function (color) {
                this.$initialize();
                ExpressCraft.Brush.ctor.call(this);
                this.Color = color.$clone();
            }
        }
    });

    Bridge.define("ExpressCraft.SplitControlContainer", {
        inherits: [ExpressCraft.Control],
        fields: {
            Panel1: null,
            Panel2: null,
            Splitter: null,
            _prevClientRect: null,
            IsMouseDown: false,
            _mouseDownVector: null,
            _currentMouseDownVector: null,
            _startingSplitterPos: 0,
            _splitterPosition: 0,
            fixedSplitterPostion: 0,
            SplitterResizable: false,
            horizontal: false
        },
        props: {
            FixedSplitterPostion: {
                get: function () {
                    return this.fixedSplitterPostion;
                },
                set: function (value) {
                    this.fixedSplitterPostion = value;
                    this.RenderControls();
                }
            },
            SplitterPosition: {
                get: function () {
                    return this._splitterPosition;
                },
                set: function (value) {
                    if (value < 0) {
                        value = 0;
                    }
                    this._splitterPosition = value;
                    this.RenderControls();
                }
            },
            Horizontal: {
                get: function () {
                    return this.horizontal;
                },
                set: function (value) {
                    if (value !== this.horizontal) {
                        this.RenderControls();
                        this.horizontal = value;
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this._mouseDownVector = new ExpressCraft.Vector2();
                this._currentMouseDownVector = new ExpressCraft.Vector2();
                this.IsMouseDown = false;
                this._splitterPosition = -1;
                this.fixedSplitterPostion = ExpressCraft.FixedSplitterPosition.Panel1;
                this.SplitterResizable = true;
            },
            ctor: function () {
                var $t;
                this.$initialize();
                ExpressCraft.Control.$ctor3.call(this, "splitcontrol");
                this.Panel1 = ($t = new ExpressCraft.Control.$ctor1(), $t.Location = new ExpressCraft.Vector2.$ctor1(0, 0), $t);
                this.Panel2 = new ExpressCraft.Control.$ctor1();
                this.Panel1.Style.overflow = "auto";
                this.Panel2.Style.overflow = "auto";

                this.Splitter = new ExpressCraft.Control.$ctor3("primary");
                this.Splitter.Style.cursor = "move";

                this.Splitter.Content.onmousedown = Bridge.fn.bind(this, function (ev) {
                    if (!this.SplitterResizable) {
                        return;
                    }
                    this.IsMouseDown = true;
                    this._mouseDownVector = ExpressCraft.Helper.GetClientMouseLocation(ev);
                    var maxSize = this.GetMaxSplitterSize();
                    this._startingSplitterPos = this._splitterPosition > maxSize ? maxSize : this._splitterPosition;
                    ev.stopImmediatePropagation();
                });

                this.OnResize = Bridge.fn.bind(this, function (ev) {
                    if (this.LinkedForm != null) {
                        if (!this.LinkedForm.IsVisible()) {
                            return;
                        }
                    }
                    var clientRec = this.Content.getBoundingClientRect();

                    if (this._prevClientRect == null) {
                        this._prevClientRect = clientRec;
                    }

                    if (this.fixedSplitterPostion === ExpressCraft.FixedSplitterPosition.None) {
                        var V1 = 0;
                        var V2 = 0;
                        var dirty = false;

                        if (this.Horizontal) {
                            if (clientRec.height !== this._prevClientRect.height) {
                                V1 = clientRec.height;
                                V2 = this._prevClientRect.height;
                                dirty = true;
                            }
                        } else {
                            if (clientRec.width !== this._prevClientRect.width) {
                                V1 = clientRec.width;
                                V2 = this._prevClientRect.width;
                                dirty = true;
                            }
                        }
                        if (dirty) {
                            this.SplitterPosition = V1 === 0 || V2 === 0 ? 0 : Bridge.Int.clip32(this.SplitterPosition * (V1 / V2));
                        }
                    }

                    this._prevClientRect = clientRec;

                    this.RenderControls();

                    this.ResizeChildren();
                });

                this.Content.onmousemove = Bridge.fn.bind(this, function (ev) {
                    if (this.IsMouseDown) {
                        this._currentMouseDownVector = ExpressCraft.Helper.GetClientMouseLocation(ev);
                        var x;
                        var m = this.horizontal ? (((this._mouseDownVector.Yi - this._currentMouseDownVector.Yi) | 0)) : (((this._mouseDownVector.Xi - this._currentMouseDownVector.Xi) | 0));

                        var y = this.GetMaxSplitterSize();
                        if (((x = this.fixedSplitterPostion === ExpressCraft.FixedSplitterPosition.Panel2 ? ((this._startingSplitterPos + m) | 0) : ((this._startingSplitterPos - m) | 0))) > y) {
                            x = y;
                        }
                        this.SplitterPosition = x;
                        this._currentMouseDownVector = this._mouseDownVector.$clone();

                        this.ResizeChildren();
                    }
                });

                this.Content.onmouseup = Bridge.fn.bind(this, function (ev) {
                    this.IsMouseDown = false;
                    this.RenderControls();
                });

                ExpressCraft.Helper.AppendChildren(this, [this.Panel1, this.Splitter, this.Panel2]);
            }
        },
        methods: {
            Render: function () {
                ExpressCraft.Control.prototype.Render.call(this);

                this.RenderControls();
            },
            ResizeChildren: function () {
                if (this.LinkedForm != null && this.Content != null) {
                    this.LinkedForm.ResizeChildren(this.Content);
                }
            },
            GetMaxSplitterSize: function () {
                var left = 12;
                if (this.FixedSplitterPostion === ExpressCraft.FixedSplitterPosition.Panel2) {
                    left = 0;
                }
                var maxSize = (Bridge.Int.clip32((this.Horizontal ? this.Content.getBoundingClientRect().height : this.Content.getBoundingClientRect().width)) - left) | 0;
                if (maxSize < 0) {
                    maxSize = 0;
                }
                return maxSize;
            },
            RenderControls: function () {
                var sp = this.SplitterPosition;
                var maxSize = this.GetMaxSplitterSize();

                if (this._prevClientRect != null) {
                    if (sp > maxSize) {
                        sp = maxSize;
                    }
                }

                if (this.Horizontal) {
                    ExpressCraft.Helper.ExchangeClass(this.Panel1, "splitvertical", "splithorizontal");
                    ExpressCraft.Helper.ExchangeClass(this.Panel2, "splitvertical", "splithorizontal");
                    ExpressCraft.Helper.ExchangeClass(this.Splitter, "splittervertical", "splitterhorizontal");

                    this.Panel1.Width = "";
                    this.Splitter.Width = "";
                    this.Panel2.Width = "";

                    if (this.fixedSplitterPostion !== ExpressCraft.FixedSplitterPosition.Panel2) {
                        this.Splitter.Location = new ExpressCraft.Vector2.$ctor1(0, sp);

                        this.Panel1.Height = sp;
                        this.Panel2.Location = new ExpressCraft.Vector2.$ctor1(0, ((sp + 12) | 0));
                        this.Panel2.Height = "(100% - " + (((sp + 12) | 0)) + "px)";
                        ;
                    } else {
                        this.Splitter.Location = new ExpressCraft.Vector2.$ctor1(0, "(100% - " + (sp) + "px)");

                        this.Panel1.Height = "(100% - " + sp + "px)";

                        this.Panel2.Height = (sp - 12) | 0;
                        this.Panel2.Location = new ExpressCraft.Vector2.$ctor1(0, "(100% - " + (((sp - 12) | 0)) + "px)");
                    }
                } else {
                    ExpressCraft.Helper.ExchangeClass(this.Panel1, "splithorizontal", "splitvertical");
                    ExpressCraft.Helper.ExchangeClass(this.Panel2, "splithorizontal", "splitvertical");
                    ExpressCraft.Helper.ExchangeClass(this.Splitter, "splitterhorizontal", "splittervertical");

                    this.Panel1.Height = "";
                    this.Splitter.Height = "";
                    this.Panel2.Height = "";

                    if (this.fixedSplitterPostion !== ExpressCraft.FixedSplitterPosition.Panel2) {
                        this.Splitter.Location = new ExpressCraft.Vector2.$ctor1(sp, 0);

                        this.Panel1.Width = sp;

                        this.Panel2.Width = "(100% - " + (((sp + 12) | 0)) + "px)";
                        this.Panel2.Location = new ExpressCraft.Vector2.$ctor1(((sp + 12) | 0), 0);
                    } else {
                        this.Splitter.Location = new ExpressCraft.Vector2.$ctor1("(100% - " + (((sp + 12) | 0)) + "px)", 0);

                        this.Panel1.Width = "(100% - " + (((sp + 12) | 0)) + "px)";

                        this.Panel2.Width = sp;
                        this.Panel2.Location = new ExpressCraft.Vector2.$ctor1("(100% - " + (sp) + "px)", 0);
                    }
                }
            }
        }
    });

    Bridge.define("ExpressCraft.SplitHideControlContainer", {
        inherits: [ExpressCraft.Control],
        fields: {
            Body: null,
            Slider: null,
            Panel: null,
            span: null,
            _slideWidth: 0,
            _sliderLocation: 0,
            _sliderVisible: false,
            refreshId: 0
        },
        props: {
            SlideWidth: {
                get: function () {
                    return this._slideWidth;
                },
                set: function (value) {
                    if (this._slideWidth !== value) {
                        this._slideWidth = value;
                        this.RenderControl();
                        this.ResizeChildren();
                    }
                }
            },
            SliderLocation: {
                get: function () {
                    return this._sliderLocation;
                },
                set: function (value) {
                    if (this._sliderLocation !== value) {
                        this._sliderLocation = value;
                        this.RenderControl();
                        this.ResizeChildren();
                    }
                }
            },
            SliderVisible: {
                get: function () {
                    return this._sliderVisible;
                },
                set: function (value) {
                    if (this._sliderVisible !== value) {
                        this._sliderVisible = value;
                        this.RenderControl();
                        this.ResizeChildren();
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this._sliderLocation = ExpressCraft.SliderLocation.Left;
                this._sliderVisible = false;
                this.refreshId = -1;
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.Control.$ctor1.call(this);
                this.Body = new ExpressCraft.Control.$ctor1();
                this.Slider = new ExpressCraft.Control.$ctor3("primary");
                this.Panel = new ExpressCraft.Control.$ctor1();
                this.Panel.Style.overflow = "hidden";
                this.Body.Style.overflow = "hidden";
                this.span = ExpressCraft.Control.Span$1("form-heading-title");
                this.span.textContent = ">";

                this.span.style.fontWeight = "bold";
                this.span.style.color = "white";

                ExpressCraft.Helper.AppendChild$2(this.Slider.Content, this.span);

                this.Slider.Style.transition = "width 0.1s, left 0.1s";

                this.Panel.Style.transition = "width 0.1s";

                this.Slider.Style.filter = "brightness(90%)";

                if (ExpressCraft.Helper.NotDesktop) {
                    this.span.style.fontStyle = "36px";
                    this.Slider.Width = 65;
                } else {
                    this.span.style.fontStyle = "26px";
                    this.Slider.Width = 30;
                }

                this.Slider.Height = "100%";

                this.Slider.Content.onclick = Bridge.fn.bind(this, function (ev) {
                    this.SliderVisible = !this.SliderVisible;
                });
                this._slideWidth = 250;
                ExpressCraft.Helper.AppendChildren$1(this.Content, [this.Panel, this.Slider, this.Body]);

                this.RenderControl();
            }
        },
        methods: {
            ResizeChildren: function () {
                if (this.LinkedForm != null && this.Content != null) {

                    if (this.refreshId !== -1) {
                        clearTimeout(this.refreshId);
                    }
                    this.refreshId = Bridge.Int.clip32(setTimeout(Bridge.fn.bind(this, function (ab) {
                        this.LinkedForm.ResizeChildren(this.Content);
                        this.refreshId = -1;
                    }), 100));
                }
            },
            RenderControl: function () {
                var width;
                if (ExpressCraft.Helper.NotDesktop) {
                    width = 65;
                } else {
                    width = 30;
                }

                if (this.SliderLocation === ExpressCraft.SliderLocation.Left) {
                    if (this.SliderVisible) {
                        this.span.textContent = "<";
                        this.Panel.Width = this.SlideWidth;
                        this.Slider.Left = this.SlideWidth;
                        this.Body.Location = new ExpressCraft.Vector2.$ctor1(((width + this.SlideWidth) | 0), 0);
                        this.Body.Size = new ExpressCraft.Vector2.$ctor1("(100% - " + (((width + this.SlideWidth) | 0)) + "px)", "100%");
                    } else {
                        this.span.textContent = ">";
                        this.Slider.Left = 0;
                        this.Panel.Width = 0;
                        this.Body.Location = new ExpressCraft.Vector2.$ctor1(width, 0);
                        this.Body.Size = new ExpressCraft.Vector2.$ctor1("(100% - " + (width) + "px)", "100%");
                    }

                    this.Panel.Location = new ExpressCraft.Vector2.$ctor1(0, 0);
                    this.Panel.Height = "100%";
                } else {
                    if (this.SliderVisible) {
                        this.span.textContent = ">";
                        this.Panel.Width = this.SlideWidth;
                        this.Panel.Location = new ExpressCraft.Vector2.$ctor1("(100% - " + (this.SlideWidth) + "px)", 0);
                        this.Slider.Left = "(100% - " + (((width + this.SlideWidth) | 0)) + "px)";
                        this.Body.Size = new ExpressCraft.Vector2.$ctor1("(100% - " + (((width + this.SlideWidth) | 0)) + "px)", "100%");
                    } else {
                        this.span.textContent = "<";
                        this.Slider.Left = "(100% - " + (width) + "px)";
                        this.Panel.Width = 0;
                        this.Body.Size = new ExpressCraft.Vector2.$ctor1("(100% - " + (width) + "px)", "100%");
                    }

                    this.Body.Location = new ExpressCraft.Vector2.$ctor1(0, 0);
                    this.Panel.Height = "100%";
                }
            }
        }
    });

    Bridge.define("ExpressCraft.StackItem", {
        inherits: [ExpressCraft.Control],
        fields: {
            UniqueId: null,
            OnFocused: null,
            OnStateChanged: null,
            ReferenceObject: null,
            _state: null
        },
        props: {
            State: {
                get: function () {
                    return this._state;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._state, value)) {
                        this._state = value;
                        if (!Bridge.staticEquals(this.OnStateChanged, null)) {
                            this.OnStateChanged(this, this._state);
                        }
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.UniqueId = "";
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.Control.$ctor3.call(this, "stack-item");
                this.ClassList.remove("control");
                this.Style.width = "100%";
                this.Style.height = "auto";

            }
        }
    });

    Bridge.define("ExpressCraft.StackList", {
        inherits: [ExpressCraft.Control],
        fields: {
            StackItems: null,
            searchInput: null,
            _showFindScreen: false,
            searchText: null,
            clearMark: false,
            contentBody: null,
            _focusedStackItem: null
        },
        props: {
            FocusedStackItem: {
                get: function () {
                    return this._focusedStackItem;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._focusedStackItem, value)) {
                        if (this._focusedStackItem != null) {
                            this._focusedStackItem.ClassList.remove("stack-item-active");
                        }
                        this._focusedStackItem = value;
                        if (this._focusedStackItem != null) {
                            this._focusedStackItem.ClassList.add("stack-item-active");
                            if (!Bridge.staticEquals(this._focusedStackItem.OnFocused, null)) {
                                this._focusedStackItem.OnFocused(this._focusedStackItem);
                            }
                        }
                    }

                }
            },
            ShowFindScreen: {
                get: function () {
                    return this._showFindScreen;
                },
                set: function (value) {
                    if (this._showFindScreen !== value) {
                        this.clearMark = false;
                        this._showFindScreen = value;
                        if (this._showFindScreen) {
                            this.searchInput = new ExpressCraft.TextInput.ctor();
                            this.searchInput.Location = new ExpressCraft.Vector2.$ctor1(6, 6);
                            this.searchInput.Size = new ExpressCraft.Vector2.$ctor1("(100% - 12px)", 38);
                            this.searchInput.OnTextChanged = Bridge.fn.bind(this, function (sender) {
                                this.clearMark = true;
                                this.searchText = this.searchInput.Text;
                                this.RebuildData();
                            });

                            this.Content.appendChild(ExpressCraft.Control.op_Implicit(this.searchInput));

                            this.contentBody.Top = 50;
                            this.contentBody.Size = new ExpressCraft.Vector2.$ctor1("100%", "(100% - 50px)");
                        } else {
                            if (!System.String.isNullOrWhiteSpace(this.searchText)) {
                                this.clearMark = true;
                            } else {
                                this.clearMark = false;
                            }
                            this.searchText = "";
                            this.Content.removeChild(this.searchInput.Content);
                            this.searchInput = null;

                            this.contentBody.Top = 0;
                            this.contentBody.Size = new ExpressCraft.Vector2.$ctor1("100%", "100%");
                        }
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.StackItems = new (System.Collections.Generic.List$1(ExpressCraft.StackItem)).ctor();
                this.clearMark = false;
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.Control.$ctor1.call(this);
                this.contentBody = new ExpressCraft.Control.$ctor1();
                this.contentBody.Size = new ExpressCraft.Vector2.$ctor1("100%", "100%");
                this.contentBody.Style.overflowY = "auto";
                this.Content.appendChild(ExpressCraft.Control.op_Implicit(this.contentBody));
            }
        },
        methods: {
            AddMark: function (item) {
                if (item.childElementCount === 0) {
                    if (System.String.contains(((item.textContent || "") + "").toLowerCase(),((this.searchText || "") + "").toLowerCase())) {
                        var x = item.textContent;
                        ExpressCraft.Helper.Empty(item);

                        var builder = new System.Text.StringBuilder();
                        var builder2 = new System.Text.StringBuilder();

                        for (var i = 0; i < x.length; i = (i + 1) | 0) {
                            builder2.append(String.fromCharCode(x.charCodeAt(i)));
                            builder.append(String.fromCharCode(x.charCodeAt(i)));
                            if (Bridge.referenceEquals(builder2.toString().toLowerCase(), ((this.searchText || "") + "").toLowerCase())) {
                                var word = builder2.toString();
                                builder.setLength((builder.getLength() - this.searchText.length) | 0);
                                builder.append("<mark>" + (ExpressCraft.Helper.HtmlEscape$1(word) || "") + "</mark>");
                                builder2 = new System.Text.StringBuilder();
                            } else if (System.String.endsWith(builder2.toString().toLowerCase(), ((this.searchText || "") + "").toLowerCase())) {
                                var word1 = builder2.toString().substr(((builder2.toString().length - this.searchText.length) | 0));
                                builder.setLength((builder.getLength() - this.searchText.length) | 0);
                                builder.append("<mark>" + (ExpressCraft.Helper.HtmlEscape$1(word1) || "") + "</mark>");
                                builder2 = new System.Text.StringBuilder();
                            }
                            if (builder2.getLength() > this.searchText.length) {
                                builder2 = new System.Text.StringBuilder(builder2.toString().substr(1));
                            }
                        }

                        item.innerHTML = builder.toString();
                    }
                } else {
                    for (var i1 = 0; i1 < item.childElementCount; i1 = (i1 + 1) >>> 0) {
                        var child = item.children[i1];
                        this.AddMark(child);
                    }
                }

            },
            RemoveMark: function (item) {
                if (System.String.contains(item.innerHTML,"<mark>") && System.String.contains(item.innerHTML,"</mark>")) {
                    item.innerHTML = System.String.replaceAll(System.String.replaceAll(item.innerHTML, "<mark>", ""), "</mark>", "");
                } else {
                    for (var i = 0; i < item.childElementCount; i = (i + 1) >>> 0) {
                        var child = item.children[i];
                        this.AddMark(child);
                    }
                }
            },
            RebuildData: function () {
                var $t;
                ExpressCraft.Helper.Empty(this.contentBody.Content);

                $t = Bridge.getEnumerator(this.StackItems);
                try {
                    while ($t.moveNext()) {
                        var item = { v : $t.Current };
                        if (Bridge.staticEquals(item.v.Content.onclick, null)) {
                            item.v.Content.onclick = (function ($me, item) {
                                return Bridge.fn.bind($me, function (ev) {
                                    this.FocusedStackItem = item.v;
                                });
                            })(this, item);
                        }

                        if (this.clearMark) {
                            this.RemoveMark(item.v.Content);
                        }

                        if (!System.String.isNullOrWhiteSpace(this.searchText)) {
                            if (System.String.contains(((item.v.Content.textContent || "") + "").toLowerCase(),((this.searchText || "") + "").toLowerCase())) {
                                this.AddMark(item.v.Content);
                                this.contentBody.Content.appendChild(ExpressCraft.Control.op_Implicit(item.v));
                                this.contentBody.Content.appendChild(document.createElement("div"));
                            }
                        } else {
                            this.contentBody.Content.appendChild(ExpressCraft.Control.op_Implicit(item.v));
                            this.contentBody.Content.appendChild(document.createElement("div"));
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                this.clearMark = false;
            },
            Render: function () {
                if (!this.HasRendered) {
                    this.RebuildData();
                    this.HasRendered = true;
                }

                ExpressCraft.Control.prototype.Render.call(this);
            }
        }
    });

    Bridge.define("ExpressCraft.StyleBrush", {
        inherits: [ExpressCraft.Brush],
        fields: {
            Style: null
        },
        ctors: {
            ctor: function (style) {
                this.$initialize();
                ExpressCraft.Brush.ctor.call(this);
                this.Style = style;
            }
        }
    });

    Bridge.define("ExpressCraft.TabControl", {
        inherits: [ExpressCraft.Control],
        fields: {
            TabPages: null,
            tabHeaders: null,
            tabHeaderContainer: null,
            showClosedButton: false,
            OnSelectedTabIndexChanged: null,
            selectedindex: 0
        },
        props: {
            ShowClosedButton: {
                get: function () {
                    return this.showClosedButton;
                },
                set: function (value) {
                    if (value !== this.showClosedButton) {
                        this.showClosedButton = value;
                        this.ResizeTabHeaders();
                    }
                }
            },
            SelectedIndex: {
                get: function () {
                    return this.selectedindex;
                },
                set: function (value) {
                    if (value < 0) {
                        value = 0;
                    }
                    if (this.selectedindex !== value) {
                        this.selectedindex = value;
                        !Bridge.staticEquals(this.OnSelectedTabIndexChanged, null) ? this.OnSelectedTabIndexChanged(value) : null;
                    }

                    if (this.TabPages != null && this.TabPages.Count > 0) {
                        for (var i = 0; i < this.TabPages.Count; i = (i + 1) | 0) {
                            var page = { v : this.TabPages.getItem(i) };
                            this.TabControlActiveStyleChange(i, page);
                            this.TabPages.setItem(i, page.v);
                        }
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.TabPages = new (System.Collections.Generic.List$1(ExpressCraft.TabControlPage)).ctor();
                this.selectedindex = 0;
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.Control.$ctor3.call(this, "tabcontrol");
                this.Content.oncontextmenu = function (ev) {
                    ev.stopPropagation();
                    ev.preventDefault();
                };
            }
        },
        methods: {
            AddPages: function (Pages) {
                if (Pages === void 0) { Pages = []; }
                this.TabPages.AddRange(Pages);
                if (this.HasRendered) {
                    this.ResizeTabHeaders();
                }
            },
            TabControlActiveStyleChange: function (i, page) {
                var Isselected = i === this.selectedindex;

                var state = Isselected ? "active" : "hidden";
                if (page.v.TabPageHeader != null) {
                    page.v.TabPageHeader.classList.remove("tabcontrolpageheader-hidden");
                    page.v.TabPageHeader.classList.remove("tabcontrolpageheader-active");

                    page.v.TabPageHeader.classList.add("tabcontrolpageheader-" + (state || ""));
                } else {
                    page.v.TabPageHeader = ExpressCraft.Control.Div$1("tabcontrolpageheader tabcontrolpageheader-" + (state || ""));
                }
                if (ExpressCraft.Helper.NotDesktop) {
                    if (Isselected) {
                        page.v.TabPageHeader.style.lineHeight = "44px";
                    } else {
                        page.v.TabPageHeader.style.lineHeight = "46px";
                    }
                    page.v.TabPageHeader.style.height = "45px";
                }

                page.v.TabPageHeader.setAttribute("i", Bridge.toString(i));
                if (this.showClosedButton) {
                    if (page.v.TabPageHeaderClose == null) {
                        page.v.TabPageHeaderClose = ExpressCraft.Control.Div$1("tabcontrolpageheader-closebutton");
                        page.v.TabPageHeaderClose.onclick = Bridge.fn.bind(this, function (ev) {
                            var index = parseInt(ev.currentTarget.parentElement.getAttribute("i"));
                            var cpage = this.TabPages.getItem(index);
                            if (cpage.Content != null) {
                                ExpressCraft.Helper.Empty(cpage.Content);
                                ExpressCraft.Helper.Delete$1(cpage.Content);
                            }
                            if (cpage.TabPageHeader != null) {
                                ExpressCraft.Helper.Empty(cpage.TabPageHeader);
                                ExpressCraft.Helper.Delete$1(cpage.TabPageHeader);
                            }
                            this.TabPages.remove(cpage);
                            if (index > ((this.TabPages.Count - 1) | 0)) {
                                index = (this.TabPages.Count - 1) | 0;
                            }

                            ev.stopPropagation();

                            this.SelectedIndex = index;

                            this.ResizeTabHeaders();
                        });
                        page.v.TabPageHeader.appendChild(page.v.TabPageHeaderClose);
                    }
                } else {
                    if (page.v.TabPageHeaderClose != null) {
                        page.v.TabPageHeader.removeChild(page.v.TabPageHeaderClose);
                    }
                }

                page.v.Content.style.visibility = Isselected ? "inherit" : "collapse";
            },
            ResizeTabHeaders: function () {
                var $t;
                if (this.tabHeaders == null) {
                    this.tabHeaders = ($t = new ExpressCraft.Control.$ctor3("tabheader-container"), $t.Location = new ExpressCraft.Vector2.$ctor1(0, 0), $t);
                    if (ExpressCraft.Helper.NotDesktop) {
                        this.tabHeaders.Height = 47;
                        this.tabHeaderContainer = ($t = new ExpressCraft.Control.$ctor1(), $t.Location = new ExpressCraft.Vector2.$ctor1(0, 0), $t);
                        this.tabHeaderContainer.Width = "100%";
                        this.tabHeaderContainer.Height = 50;
                        ExpressCraft.Helper.AppendChild(this.tabHeaderContainer, this.tabHeaders);
                        this.tabHeaderContainer.Style.backgroundColor = "transparent";
                        this.tabHeaderContainer.Style.overflowX = "auto";

                        this.tabHeaders.Style.minWidth = "100%";

                        this.Content.appendChild(ExpressCraft.Control.op_Implicit(this.tabHeaderContainer));
                    } else {
                        this.tabHeaders.Height = 23;
                        this.Content.appendChild(ExpressCraft.Control.op_Implicit(this.tabHeaders));
                        this.tabHeaders.Width = "100%";
                    }
                }
                if (this.TabPages != null && this.TabPages.Count > 0) {
                    var width = 2;

                    for (var i = 0; i < this.TabPages.Count; i = (i + 1) | 0) {
                        var page = { v : this.TabPages.getItem(i) };
                        if (page.v == null || page.v.Hidden) {
                            continue;
                        }
                        page.v.Render();



                        if (page.v.TabPageHeader == null) {
                            this.TabControlActiveStyleChange(i, page);
                            page.v.TabPageHeader.onmousedown = Bridge.fn.bind(this, function (ev) {
                                this.SelectedIndex = parseInt(ev.currentTarget.getAttribute("i"));
                            });
                            page.v.TabPageHeader.ontouchstart = Bridge.fn.bind(this, function (ev) {
                                this.SelectedIndex = parseInt(ev.currentTarget.getAttribute("i"));
                            });
                            this.tabHeaders.Content.appendChild(page.v.TabPageHeader);
                            this.Content.appendChild(page.v.Content);
                        }
                        page.v.TabPageHeader.setAttribute("i", Bridge.toString(i));

                        var inwidth = 24;

                        if (!System.String.isNullOrEmpty(page.v.Caption)) {
                            if (ExpressCraft.Helper.NotDesktop) {
                                inwidth = (inwidth + Bridge.Int.clip32(ExpressCraft.Control.GetTextWidth(page.v.Caption, "14px Tahoma"))) | 0;
                            } else {
                                inwidth = (inwidth + Bridge.Int.clip32(ExpressCraft.Control.GetTextWidth(page.v.Caption, ExpressCraft.Settings.DefaultFont))) | 0;
                            }
                        }

                        if (this.showClosedButton) {
                            inwidth = (inwidth + 19) | 0;
                        }
                        var span = null;
                        for (var k = 0; k < page.v.TabPageHeader.children.length; k = (k + 1) >>> 0) {
                            var item = page.v.TabPageHeader.children[k];
                            if (item) {
                                ((span = item)).innerHTML = page.v.Caption;
                                break;
                            }
                        }
                        if (span == null) {
                            span = ($t = document.createElement("span"), $t.innerHTML = page.v.Caption, $t);

                            ExpressCraft.Helper.AppendChild$2(page.v.TabPageHeader, span);
                        }
                        if (ExpressCraft.Helper.NotDesktop) {
                            span.style.fontSize = "14px";
                        }

                        page.v.TabPageHeader.style.left = ExpressCraft.Helper.ToPx(Bridge.box(width, System.Int32));
                        page.v.TabPageHeader.style.width = ExpressCraft.Helper.ToPx(Bridge.box(inwidth, System.Int32));


                        if (ExpressCraft.Helper.NotDesktop) {
                            page.v.Height = "(100% - 49px)";
                            page.v.Top = 49;
                        }

                        width = (width + (((inwidth + 2) | 0))) | 0;

                        this.TabPages.setItem(i, page.v);
                    }
                    if (ExpressCraft.Helper.NotDesktop) {
                        this.tabHeaders.Width = width;
                    }
                }
            },
            Render: function () {
                this.HasRendered = true;
                this.ResizeTabHeaders();
            }
        }
    });

    Bridge.define("ExpressCraft.TabControlPage", {
        inherits: [ExpressCraft.Control],
        fields: {
            index: 0,
            TabPageHeader: null,
            TabPageHeaderClose: null,
            Caption: null,
            Hidden: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                ExpressCraft.Control.$ctor3.call(this, "tabcontrolpage");
            }
        }
    });

    Bridge.define("ExpressCraft.TileControl", {
        inherits: [ExpressCraft.Control,ExpressCraft.IPages],
        fields: {
            RibbonPages: null,
            _viewState: 0,
            prevOverFlow: null,
            ClearTimeOut: 0
        },
        props: {
            ViewState: {
                get: function () {
                    return this._viewState;
                },
                set: function (value) {
                    if (this.ClearTimeOut !== -1) {
                        clearTimeout(this.ClearTimeOut);
                        this.ClearTimeOut = -1;
                    }
                    if (value !== this._viewState) {
                        this._viewState = value;
                        if (this._viewState === ExpressCraft.TileViewState.Hidden) {
                            this.ClearTimeOut = Bridge.Int.clip32(setTimeout(Bridge.fn.bind(this, function (obj) {
                                this.Content.style.visibility = "hidden";
                            }), 1000));
                            this.Location = new ExpressCraft.Vector2.$ctor1("(100% * -1)", 0);

                            if (this.Content.parentElement != null && this.prevOverFlow != null) {
                                this.Content.parentElement.style.overflow = this.prevOverFlow;
                            }
                        } else {
                            this.Location = new ExpressCraft.Vector2.$ctor1(0, 0);
                            this.Content.style.visibility = "inherit";
                            this.RenderTiles();
                            if (this.Content.parentElement != null) {
                                this.prevOverFlow = this.Content.parentElement.style.overflow;
                                this.Content.parentElement.style.overflow = "hidden";
                            }
                        }
                    }
                }
            }
        },
        alias: ["AddRibbonPages", "ExpressCraft$IPages$AddRibbonPages"],
        ctors: {
            init: function () {
                this.RibbonPages = new (System.Collections.Generic.List$1(ExpressCraft.RibbonPage)).ctor();
                this._viewState = ExpressCraft.TileViewState.Hidden;
                this.ClearTimeOut = -1;
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.Control.$ctor1.call(this);
                this.Style.overflowY = "auto";
                this.Location = new ExpressCraft.Vector2.$ctor1("(100% * -1)", 0);
                this.Size = new ExpressCraft.Vector2.$ctor1("100%", "100%");

                this.Content.style.backgroundColor = "transparent";
                this.Content.style.visibility = "hidden";
                this.Content.style.transition = "left 1s ease";
            }
        },
        methods: {
            RenderTiles: function () {
                var $t, $t1, $t2;
                var x = 0;
                var y = 6;

                var doc = document.createDocumentFragment();
                var div = new ExpressCraft.Control.$ctor1();
                div.Width = "100%";
                ExpressCraft.Helper.SetLocation$1(div, 0, 0);
                div.Style.zIndex = "10";

                var div2 = new ExpressCraft.Control.$ctor3("primary");
                div2.Width = "100%";
                div2.Style.minHeight = "100%";
                ExpressCraft.Helper.SetLocation$1(div2, 0, 0);
                div2.Style.filter = "brightness(50%)";

                div2.Style.opacity = "0.9";
                div2.Style.zIndex = "9";

                $t = Bridge.getEnumerator(this.RibbonPages);
                try {
                    while ($t.moveNext()) {
                        var page = $t.Current;
                        if (!System.String.isNullOrWhiteSpace(page.Caption)) {
                            var llb = ExpressCraft.Control.Label(page.Caption, 6, y);
                            llb.style.fontSize = "14px";
                            llb.style.color = "white";
                            doc.appendChild(llb);
                            y = (y + 26) | 0;
                        }

                        $t1 = Bridge.getEnumerator(page.RibbonGroups);
                        try {
                            while ($t1.moveNext()) {
                                var group = $t1.Current;
                                $t2 = Bridge.getEnumerator(group.Items);
                                try {
                                    while ($t2.moveNext()) {
                                        var item = $t2.Current;
                                        if (Bridge.is(item, ExpressCraft.RibbonButton)) {
                                            var button = Bridge.cast(item, ExpressCraft.RibbonButton);

                                            ExpressCraft.Helper.ExchangeClass(item, "ribbonbuttonsmall", "ribbonbutton");
                                            item.Style.borderRadius = "4px";

                                            button.AfterItemClick = Bridge.fn.bind(this, function (ev) {
                                                this.ViewState = ExpressCraft.TileViewState.Hidden;
                                            });
                                            if (item.Enabled) {
                                                ExpressCraft.Helper.ExchangeClass(item, "primary", "primary");
                                                item.Style.border = "0";
                                                item.Style.filter = "brightness(110%)";
                                            } else {
                                                ExpressCraft.Helper.ExchangeClass(item, "primary", "");
                                                item.Style.border = "1px";
                                                item.Style.filter = "";
                                            }
                                            item.Style.opacity = "1";
                                            item.Style.boxShadow = "0px 0px 10px -2px rgba(0,0,0,0.25)";
                                            button.IsSmallItem = false;
                                            item.ProcessCaption();
                                            button.ProcessImage();
                                            item.Size = new ExpressCraft.Vector2.$ctor1("((100% - 24px) * 0.33)", 100);
                                            item.Location = new ExpressCraft.Vector2.$ctor1("(((100% - 24px) * (" + (System.Decimal(x).mul(System.Decimal(0.33))) + ")) + (" + (Bridge.Int.mul(6, (x))) + "px) + 6px)", y);

                                            if (item.captionDiv != null) {
                                                if (item.Enabled) {
                                                    item.captionDiv.style.color = "white";
                                                } else {
                                                    item.captionDiv.style.color = "grey";
                                                }

                                                item.captionDiv.style.fontSize = "14px";
                                                item.captionDiv.style.top = "65px";
                                            }

                                            if (button.imageDiv != null) {
                                                ExpressCraft.Helper.ExchangeClass$1(button.imageDiv, "ribbonbuttonsmallicon", "ribbonbuttonicon");
                                                button.IconURL = System.String.replaceAll(((button.IconURL || "") + ""), "x16x16", "x32x32");
                                                button.imageDiv.style.top = "27px";
                                                if (item.Enabled) {
                                                } else {
                                                }
                                            }

                                            if (x === 2) {
                                                x = 0;
                                                y = (y + 106) | 0;
                                            } else {
                                                x = (x + 1) | 0;
                                            }
                                            item.Style.opacity = "1";
                                            doc.appendChild(ExpressCraft.Control.op_Implicit(item));
                                        }

                                    }
                                } finally {
                                    if (Bridge.is($t2, System.IDisposable)) {
                                        $t2.System$IDisposable$Dispose();
                                    }
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }

                        if (x !== 0) {
                            x = 0;
                            y = (y + 106) | 0;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                div.Height = y;
                div2.Height = y;

                ExpressCraft.Helper.Empty(this.Content);
                div.Content.appendChild(doc);

                div2.Content.onmousedown = function (ev) {
                    ev.stopPropagation();
                };

                this.Content.appendChild(ExpressCraft.Control.op_Implicit(div2));
                this.Content.appendChild(ExpressCraft.Control.op_Implicit(div));

                div.Content.click();
            },
            Render: function () {
                ExpressCraft.Control.prototype.Render.call(this);
                this.RenderTiles();
            },
            AddRibbonPages: function (pages) {
                var $t;
                if (pages === void 0) { pages = []; }
                if (pages != null) {
                    $t = Bridge.getEnumerator(pages);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (item != null) {
                                this.RibbonPages.add(item);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }

            }
        }
    });

    Bridge.define("ExpressCraft.ToolTipControl", {
        inherits: [ExpressCraft.Control],
        fields: {
            visible: false,
            _toolTip$1: null
        },
        ctors: {
            init: function () {
                this.visible = false;
            },
            ctor: function (toolTip) {
                this.$initialize();
                ExpressCraft.Control.$ctor3.call(this, "tool-tip");
                this._toolTip$1 = toolTip;
            }
        },
        methods: {
            Show: function (ev) {
                var $t;
                if (ExpressCraft.Helper.NotDesktop) {
                    return;
                }

                ExpressCraft.Helper.Empty(this.Content);

                if (this._toolTip$1 != null) {
                    if (!ExpressCraft.Helper.IsEmpty(this._toolTip$1.Heading)) {
                        ExpressCraft.Helper.AppendChild$2(this.Content, ($t = document.createElement("p"), $t.className = "tool-tip-heading", $t.innerHTML = System.String.replaceAll(ExpressCraft.Helper.HtmlEscape$1(this._toolTip$1.Heading), "\r\n", "<br>"), $t));
                    }
                    if (!ExpressCraft.Helper.IsEmpty(this._toolTip$1.Description)) {
                        ExpressCraft.Helper.AppendChild$2(this.Content, ($t = document.createElement("p"), $t.className = "tool-tip-body", $t.innerHTML = System.String.replaceAll(ExpressCraft.Helper.HtmlEscape$1(this._toolTip$1.Description), "\r\n", "<br>"), $t));
                    }
                }
                var mouse = ExpressCraft.Helper.GetClientMouseLocation(ev);

                this.Location = new ExpressCraft.Vector2.$ctor1(mouse.X, ((ExpressCraft.Helper.ToInt(mouse.Y) + 22) | 0));

                if (!this.visible) {
                    this.visible = true;
                    ExpressCraft.ContextMenu.TotalContextHandles = (ExpressCraft.ContextMenu.TotalContextHandles + 1) | 0;
                    this.Content.style.zIndex = Bridge.toString((((ExpressCraft.ContextMenu.TotalContextHandles + ExpressCraft.Settings.ContextMenuStartingZIndex) | 0)));
                    ExpressCraft.Helper.AppendChild$1(document.body, this);
                }
            },
            Close: function () {
                if (this.visible) {
                    if (this.Content != null) {
                        ExpressCraft.Helper.Delete$1(this.Content);
                    }
                    this.visible = false;
                    ExpressCraft.ContextMenu.TotalContextHandles = (ExpressCraft.ContextMenu.TotalContextHandles - 1) | 0;
                }
            }
        }
    });

    Bridge.define("ExpressCraft.FormPopup", {
        inherits: [ExpressCraft.Form],
        statics: {
            methods: {
                GetPopupDefaultLocation: function (control, isControlChild) {
                    if (isControlChild === void 0) { isControlChild = false; }
                    if (ExpressCraft.Helper.NotDesktop) {
                        return new ExpressCraft.Vector2.$ctor1(0, 0);
                    }

                    if (isControlChild) {
                        var rec = control.Content.parentElement.getBoundingClientRect();
                        return new ExpressCraft.Vector2.$ctor1(rec.left, rec.top + rec.height);
                    } else {
                        var rec1 = control.Content.getBoundingClientRect();
                        return new ExpressCraft.Vector2.$ctor1(rec1.left, rec1.top + rec1.height);
                    }
                }
            }
        },
        fields: {
            PreviousScrollTop: 0,
            ParentContainer: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                ExpressCraft.Form.ctor.call(this);
                this.Heading.style.display = "none";
                ExpressCraft.Helper.SetLocation$2(this.Body, 0, 0);
                ExpressCraft.Helper.SetSize$1(this.Body, "100%", "100%");
                this.Content.classList.add("inputcontrol");
                this.Content.classList.add("popup");
                this.Content.classList.remove("form-base");
                this.Content.style.boxShadow = "0 0 63px -17px rgba(0,0,0,0.75)";

                this.StartPosition = ExpressCraft.FormStartPosition.Manual;

                this.ShowClose = false;
                this.ShowMaximize = false;
                this.ShowMinimize = false;
                this.AllowMoveChange = false;
                this.AllowSizeChange = false;
            }
        },
        methods: {
            ShowPopup: function (location) {
                this.Location = location.$clone();
                this.ShowDialog();
            },
            MoveFormUp: function () {
                this.Location = new ExpressCraft.Vector2.$ctor1(this.Left, ExpressCraft.Helper.ToFloat(this.Top) - ExpressCraft.Helper.ToFloat(this.Height) - 20);
            },
            OnShowed: function () {
                ExpressCraft.Form.prototype.OnShowed.call(this);

                if (ExpressCraft.Helper.NotDesktop) {
                    this.AllowSizeChange = true;
                    this.WindowState = ExpressCraft.WindowStateType.Maximized;
                    this.AllowSizeChange = false;
                } else {
                    var rect = this.Content.getBoundingClientRect();

                    try {
                        if (rect.bottom > window.innerHeight || rect.bottom > document.documentElement.clientHeight) {
                            this.MoveFormUp();
                        }
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }
                }
            },
            OnClosed: function () {
                ExpressCraft.Form.prototype.OnClosed.call(this);
            }
        }
    });

    Bridge.define("ExpressCraft.ColorInput", {
        inherits: [ExpressCraft.TextInput],
        ctors: {
            ctor: function () {
                this.$initialize();
                ExpressCraft.TextInput.$ctor2.call(this, "color");
            }
        }
    });

    Bridge.define("ExpressCraft.ConsoleForm", {
        inherits: [ExpressCraft.Form],
        statics: {
            fields: {
                ConsoleVisible: false,
                _consoleForm: null,
                prevWindowState: 0,
                firstLoad: false,
                prevLocation: null,
                prevSize: null
            },
            ctors: {
                init: function () {
                    this.prevLocation = new ExpressCraft.Vector2();
                    this.prevSize = new ExpressCraft.Vector2();
                    this.ConsoleVisible = false;
                    this.prevWindowState = ExpressCraft.WindowStateType.Normal;
                    this.firstLoad = true;
                    this.prevSize = ExpressCraft.Settings.ConsoleDefaultSize.$clone();
                }
            },
            methods: {
                CheckConsoleState: function () {
                    if (!ExpressCraft.ConsoleForm.ConsoleVisible) {
                        ExpressCraft.ConsoleForm._consoleForm = new ExpressCraft.ConsoleForm();
                        ExpressCraft.ConsoleForm._consoleForm.Show(true);
                    }
                },
                Log: function (source, logType) {
                    if (logType === void 0) { logType = 0; }
                    ExpressCraft.ConsoleForm.CheckConsoleState();
                    ExpressCraft.ConsoleForm._consoleForm.InternalLog(source, logType);
                },
                Clear: function () {
                    ExpressCraft.ConsoleForm.CheckConsoleState();
                    ExpressCraft.ConsoleForm._consoleForm.InternalClear();
                }
            }
        },
        fields: {
            logContent: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                ExpressCraft.Form.ctor.call(this);
                this.logContent = ExpressCraft.Control.Div$1("console-body");
                ExpressCraft.Helper.AppendChild$2(this.Body, this.logContent);
                this.Body.style.background = ExpressCraft.Color.op_Implicit$1(ExpressCraft.Color.Black.$clone());
                this.Body.style.overflowY = "scroll";

                this.Text = (document.title || "") + " - Console";
                if (ExpressCraft.ConsoleForm.firstLoad) {
                    this.StartPosition = ExpressCraft.FormStartPosition.Center;
                    this.Size = ExpressCraft.ConsoleForm.prevSize.$clone();
                } else {
                    this.StartPosition = ExpressCraft.FormStartPosition.Manual;
                    this.Location = ExpressCraft.ConsoleForm.prevLocation.$clone();

                    if (ExpressCraft.ConsoleForm.prevWindowState === ExpressCraft.WindowStateType.Maximized) {
                        ExpressCraft.ConsoleForm.prevSize = ExpressCraft.Settings.ConsoleDefaultSize.$clone();
                    }

                    this.Size = ExpressCraft.ConsoleForm.prevSize.$clone();

                    if (ExpressCraft.ConsoleForm.prevWindowState === ExpressCraft.WindowStateType.Maximized) {
                        this.SetWindowState(ExpressCraft.ConsoleForm.prevWindowState);
                    }
                }
            }
        },
        methods: {
            InternalClear: function () {
                ExpressCraft.Helper.Empty(this.logContent);
            },
            InternalLog: function (source, logType) {
                var $t;
                if (logType === void 0) { logType = 0; }
                var para = ($t = document.createElement("p"), $t.className = "console-para", $t);
                switch (logType) {
                    case ExpressCraft.ConsoleLogType.Debug: 
                        para.style.color = ExpressCraft.Color.op_Implicit$1(ExpressCraft.Color.ForestGreen.$clone());
                        break;
                    case ExpressCraft.ConsoleLogType.Error: 
                        para.style.color = ExpressCraft.Color.op_Implicit$1(ExpressCraft.Color.Red.$clone());
                        break;
                }

                para.innerHTML = source;
                this.logContent.appendChild(para);
                if (this.logContent.children.length > 1000) {
                    this.logContent.removeChild(this.logContent.children[0]);
                }
                para.scrollIntoView(false);
            },
            OnGotFocus: function () {
                if (this.Content != null) {
                    this.Style.opacity = "1";
                }
                ExpressCraft.Form.prototype.OnGotFocus.call(this);
            },
            OnLostFocus: function () {
                if (this.Content != null) {
                    this.Style.opacity = "0.5";
                }
                ExpressCraft.Form.prototype.OnLostFocus.call(this);
            },
            OnShowed: function () {
                ExpressCraft.Form.prototype.OnShowed.call(this);
                ExpressCraft.ConsoleForm.ConsoleVisible = true;
                ExpressCraft.ConsoleForm.firstLoad = false;
            },
            OnClosing: function () {
                ExpressCraft.Form.prototype.OnClosing.call(this);

                ExpressCraft.ConsoleForm.prevSize = this.Size.$clone();
                ExpressCraft.ConsoleForm.prevLocation = this.Location.$clone();
                ExpressCraft.ConsoleForm.prevWindowState = this.WindowState;
            },
            OnClosed: function () {
                ExpressCraft.Form.prototype.OnClosed.call(this);
                ExpressCraft.ConsoleForm.ConsoleVisible = false;
            }
        }
    });

    Bridge.define("ExpressCraft.DialogForm", {
        inherits: [ExpressCraft.Form],
        fields: {
            _buttonCollection: null,
            ButtonSection: null
        },
        ctors: {
            ctor: function (text) {
                if (text === void 0) { text = ""; }

                this.$initialize();
                ExpressCraft.Form.ctor.call(this);
                this.Text = text;
                this.Body.style.backgroundColor = "white";


                this.ButtonSection = new ExpressCraft.Control.$ctor3("dialogbuttonsection");

                if (ExpressCraft.Helper.NotDesktop) {
                    this.ButtonSection.Top = "(100% - 70px)";
                    this.ButtonSection.Size = new ExpressCraft.Vector2.$ctor1("100%", 70);
                }
            }
        },
        methods: {
            OnShowing: function () {
                ExpressCraft.Helper.AppendChild$1(this.Body, this.ButtonSection);
                ExpressCraft.Form.prototype.OnShowing.call(this);
            }
        }
    });

    Bridge.define("ExpressCraft.TextInputDropDown", {
        inherits: [ExpressCraft.TextInput],
        fields: {
            DropDownButton: null,
            UsedEdit: null,
            _disableTextEditor: false
        },
        props: {
            DisableTextEditor: {
                get: function () {
                    return this._disableTextEditor;
                },
                set: function (value) {
                    this._disableTextEditor = value;
                    this.UsedEdit.DisableFocus = value;
                    if (value) {
                        this.UsedEdit.SetAttribute("contenteditable", "false");
                        this.UsedEdit.Style.backgroundColor = ExpressCraft.Color.op_Implicit$1(ExpressCraft.Color.White.$clone());
                        this.UsedEdit.Style.cursor = "pointer";
                    } else {
                        this.UsedEdit.Style.backgroundColor = null;
                        this.UsedEdit.Content.removeAttribute("contenteditable");
                    }
                }
            }
        },
        ctors: {
            ctor: function (inputType) {
                if (inputType === void 0) { inputType = "text"; }
                var $t;

                this.$initialize();
                ExpressCraft.TextInput.$ctor1.call(this, document.createElement("div"), true, false);
                var dropDownWidth = 17;

                if (ExpressCraft.Helper.NotDesktop) {
                    dropDownWidth = 45;
                }

                this.Type = inputType;

                this.UsedEdit = ($t = new ExpressCraft.TextInput.$ctor2(inputType), $t.DisableFocusPopup = true, $t.Location = new ExpressCraft.Vector2.$ctor1(0, 0), $t.Size = new ExpressCraft.Vector2.$ctor1("(100% - " + (((dropDownWidth - 1) | 0)) + "px)", "100%"), $t);
                this.UsedEdit.OnTextChanged = Bridge.fn.bind(this, function (sender) {
                    if (!Bridge.staticEquals(this.OnTextChanged, null)) {
                        this.OnTextChanged(sender);
                    }
                });

                this._displayFormat = this.UsedEdit.DisplayFormat;

                this.DropDownButton = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Location = new ExpressCraft.Vector2.$ctor1("(100% - " + dropDownWidth + "px)", 0), $t.Size = new ExpressCraft.Vector2.$ctor1(dropDownWidth, "100%"), $t);
                this.DropDownButton.Content.onmousedown = Bridge.fn.bind(this, function (ev) {
                    if (!this.Readonly && this.Enabled) {
                        this.OnDropDownClicked(ev);
                    }
                });

                this.Style.border = "0";

                this.DropDownButton.ClassList.add("dropdown");

                if (ExpressCraft.Helper.NotDesktop) {
                    this.DropDownButton.Style.backgroundPosition = "right 16px center";
                }

                ExpressCraft.Helper.AppendChildren$1(this.Content, [this.UsedEdit, this.DropDownButton]);
            }
        },
        methods: {
            GetDisplayFormat: function () {
                return this.UsedEdit.GetDisplayFormat();
            },
            GetDropdownWidth: function () {
                return this.Content.getBoundingClientRect().width;
            },
            SetDisplayFormat: function (value) {
                this.UsedEdit.SetDisplayFormat(value);
            },
            OnFocus: function () {
                this.UsedEdit.Focus();
            },
            GetInput: function () {
                return this.UsedEdit.GetInput();
            },
            GetValue: function () {
                return this.UsedEdit.Text;
            },
            SetValue: function (value) {
                this.UsedEdit.Text = value;
            },
            OnDropDownClicked: function (mouseEvent) { }
        }
    });

    Bridge.define("ExpressCraft.DrawingControl", {
        inherits: [ExpressCraft.CanvasControl],
        fields: {
            Lines: null,
            __mouseDown: false,
            __lastDrawn: 0,
            __currentCursor: null
        },
        ctors: {
            init: function () {
                this.__currentCursor = new ExpressCraft.Vector2();
                this.Lines = new (System.Collections.Generic.List$1(ExpressCraft.Vector4)).ctor();
                this.__mouseDown = false;
                this.__lastDrawn = 0;
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.CanvasControl.ctor.call(this);
                this.ClassList.add("inputcontrol");
                this.Style.backgroundColor = "white";

                if (ExpressCraft.Helper.NotDesktop) {
                    this.Content.ontouchstart = Bridge.fn.bind(this, function (ev) {
                        var ev2 = ev;
                        this.__mouseDown = true;
                        this.__currentCursor = new ExpressCraft.Vector2.$ctor1(ev2.layerX, ev2.layerY);

                        this.OnPaint();
                    });
                    this.Content.ontouchmove = Bridge.fn.bind(this, function (ev) {
                        var ev2 = ev;
                        if (this.__mouseDown) {
                            var np = new ExpressCraft.Vector2.$ctor1(ev2.layerX, ev2.layerY);
                            this.Lines.add(new ExpressCraft.Vector4.$ctor2(this.__currentCursor.$clone(), np.$clone()));
                            this.__currentCursor = np.$clone();

                            this.OnPaint();
                        }
                    });
                    this.Content.ontouchend = Bridge.fn.bind(this, function (ev) {
                        var ev2 = ev;
                        var np = new ExpressCraft.Vector2.$ctor1(ev2.layerX, ev2.layerY);
                        if (np.Xi !== this.__currentCursor.Xi || np.Yi !== this.__currentCursor.Yi) {
                            this.Lines.add(new ExpressCraft.Vector4.$ctor2(this.__currentCursor.$clone(), np.$clone()));
                        }
                        this.__mouseDown = false;

                        this.OnPaint();
                    });
                } else {
                    this.Content.onmousedown = Bridge.fn.bind(this, function (ev) {
                        var ev2 = ev;
                        this.__mouseDown = true;
                        this.__currentCursor = new ExpressCraft.Vector2.$ctor1(ev2.layerX, ev2.layerY);

                        this.OnPaint();
                    });
                    this.Content.onmousemove = Bridge.fn.bind(this, function (ev) {
                        if (this.__mouseDown) {
                            var ev2 = ev;
                            var np = new ExpressCraft.Vector2.$ctor1(ev2.layerX, ev2.layerY);
                            this.Lines.add(new ExpressCraft.Vector4.$ctor2(this.__currentCursor.$clone(), np.$clone()));
                            this.__currentCursor = np.$clone();

                            this.OnPaint();
                        }
                    });
                    this.Content.onmouseup = Bridge.fn.bind(this, function (ev) {
                        var ev2 = ev;
                        var np = new ExpressCraft.Vector2.$ctor1(ev2.layerX, ev2.layerY);
                        if (np.Xi !== this.__currentCursor.Xi || np.Yi !== this.__currentCursor.Yi) {
                            this.Lines.add(new ExpressCraft.Vector4.$ctor2(this.__currentCursor.$clone(), np.$clone()));
                        }
                        this.__mouseDown = false;

                        this.OnPaint();
                    });
                }


            }
        },
        methods: {
            OnClear: function () {
                ExpressCraft.CanvasControl.prototype.OnClear.call(this);
                this.__lastDrawn = 0;
                this.OnPaint();
            },
            OnPaint: function () {
                var i = this.__lastDrawn;
                if (i < this.Lines.Count) {
                    this.Context.beginPath();

                    for (; i < this.Lines.Count; i = (i + 1) | 0) {

                        var v1 = this.Lines.getItem(i).$clone();

                        this.Context.moveTo(v1.Xi, v1.Yi);
                        this.Context.lineTo(v1.Zi, v1.Mi);
                    }

                    this.Context.stroke();
                    this.__lastDrawn = i;
                }

            }
        }
    });

    Bridge.define("ExpressCraft.DropDownButton", {
        inherits: [ExpressCraft.SimpleButton],
        ctors: {
            ctor: function () {
                this.$initialize();
                ExpressCraft.SimpleButton.ctor.call(this);
                this.Content.onmousedown = Bridge.fn.bind(this, function (ev) {
                    if (this.Enabled) {
                        this.OnDropDownClicked(ev);
                    }
                });
            }
        },
        methods: {
            OnDropDownClicked: function (mouseEvent) {

            }
        }
    });

    Bridge.define("ExpressCraft.MemoInput", {
        inherits: [ExpressCraft.TextInput],
        fields: {
            PreSize: null,
            PrePreSize: null,
            PreZIndex$1: null,
            _hasGotFocus: false,
            DisableResize: false
        },
        props: {
            Rows: {
                get: function () {
                    return ((this.Content.rows) | 0);
                },
                set: function (value) {
                    this.Content.rows = value >>> 0;
                }
            },
            Cols: {
                get: function () {
                    return ((this.Content.cols) | 0);
                },
                set: function (value) {
                    this.Content.cols = value >>> 0;
                }
            },
            MaxLength: {
                get: function () {
                    return this.Content.maxLength;
                },
                set: function (value) {
                    this.Content.maxLength = value;
                }
            }
        },
        ctors: {
            init: function () {
                this.PreSize = new ExpressCraft.Vector2();
                this.PrePreSize = new ExpressCraft.Vector2();
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.TextInput.$ctor1.call(this, document.createElement("textarea"));
                this.Style.resize = "none";

                this.OnGotFocus = Bridge.fn.bind(this, function (memo) {
                    if (this.DisableResize) {
                        return;
                    }

                    this.Style.resize = "both";
                    this.PrePreSize = this.Size.$clone();

                    if (this._hasGotFocus) {
                        this.Size = this.PreSize.$clone();
                    } else {
                        this._hasGotFocus = true;
                        this.PreSize = this.Size.$clone();
                    }
                });
                this.OnLostFocus = Bridge.fn.bind(this, function (memo) {
                    this.Style.resize = "none";
                    this.PreSize = this.Size.$clone();
                    this.Size = this.PrePreSize.$clone();
                });
            }
        },
        methods: {
            GetValue: function () {
                return this.Content.value;
            },
            SetValue: function (value) {
                this.Content.value = value;
            }
        }
    });

    Bridge.define("ExpressCraft.Network.NetworkProgressForm", {
        inherits: [ExpressCraft.Form],
        $kind: "nested class",
        fields: {
            progressControl: null,
            buttonCancel: null
        },
        ctors: {
            ctor: function (_text) {
                if (_text === void 0) { _text = "Loading..."; }

                this.$initialize();
                ExpressCraft.Form.ctor.call(this);

            }
        }
    });

    Bridge.define("ExpressCraft.PDFPreviewForm", {
        inherits: [ExpressCraft.Form],
        fields: {
            Source: null,
            PDFSourceType: 0,
            PdfViewer: null
        },
        ctors: {
            ctor: function (source, pdfSourceType) {
                if (pdfSourceType === void 0) { pdfSourceType = 0; }

                this.$initialize();
                ExpressCraft.Form.ctor.call(this);
                this.Source = source;
                this.PDFSourceType = pdfSourceType;

                this.PdfViewer = document.createElement(Bridge.Browser.isIE ? "iframe" : pdfSourceType === ExpressCraft.PdfSourceType.Url ? "embed" : "object");
                this.PdfViewer.className = "control";

                ExpressCraft.Helper.SetBounds$1(this.PdfViewer, 0, 0, "100%", "100%");
                this.PdfViewer.setAttribute("alt", "pdf");
                this.PdfViewer.setAttribute("type", "application/pdf");

                ExpressCraft.Helper.AppendChild$2(this.Body, this.PdfViewer);
            }
        },
        methods: {
            OnShowing: function () {
                ExpressCraft.Form.prototype.OnShowing.call(this);
                if (this.PDFSourceType === ExpressCraft.PdfSourceType.Url) {
                    this.PdfViewer.setAttribute("Src", this.Source);
                } else {
                    this.PdfViewer.setAttribute("data", ExpressCraft.Control.GetPdfString(this.Source));
                }
            }
        }
    });

    Bridge.define("ExpressCraft.PrintingPreviewForm", {
        inherits: [ExpressCraft.Form],
        fields: {
            PrintingControl: null
        },
        props: {
            FocusedPage: {
                get: function () {
                    return this.PrintingControl.FocusedPage;
                }
            },
            Pages: {
                get: function () {
                    return this.PrintingControl.Pages;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                ExpressCraft.Form.ctor.call(this);
                this.PrintingControl = new ExpressCraft.PrinterControl();
                ExpressCraft.Helper.SetBoundsFull(this.PrintingControl);

                ExpressCraft.Helper.AppendChild$1(this.Body, this.PrintingControl);

                this.Text = "Printing Preview";
            }
        },
        methods: {
            /**
             * Page is a HTMLElement - AppendChild and Add the page to the list
             *
             * @instance
             * @public
             * @this ExpressCraft.PrintingPreviewForm
             * @memberof ExpressCraft.PrintingPreviewForm
             * @param   {ExpressCraft.Control}    element
             * @return  {void}
             */
            AddElementFocusedPage: function (element) {
                this.PrintingControl.AddElementFocusedPage$1(element.Content);
            },
            /**
             * Page is a HTMLElement - AppendChild and Add the page to the list
             *
             * @instance
             * @public
             * @this ExpressCraft.PrintingPreviewForm
             * @memberof ExpressCraft.PrintingPreviewForm
             * @param   {Retyped..HTMLElement}    element
             * @return  {void}
             */
            AddElementFocusedPage$1: function (element) {
                if (this.FocusedPage == null) {
                    throw new System.Exception("There is not focused page!");
                }

                ExpressCraft.Helper.AppendChild$2(this.PrintingControl.FocusedPage.Content, element);
            },
            CreateNewPage: function (size) {
                if (size === void 0) { size = 0; }
                return this.PrintingControl.CreateNewPage(size);
            },
            OnShowed: function () {
                ExpressCraft.Form.prototype.OnShowed.call(this);

                this.ShowClose = true;
                this.ShowMinimize = true;
                this.ShowMaximize = true;

                this.WindowState = ExpressCraft.WindowStateType.Maximized;
            }
        }
    });

    Bridge.define("ExpressCraft.RadioElement", {
        inherits: [ExpressCraft.TextInput],
        statics: {
            fields: {
                RadioId: System.Int64(0),
                rng: null
            },
            ctors: {
                init: function () {
                    this.rng = new System.Random.ctor();
                }
            }
        },
        fields: {
            _caption: null,
            Tag: null,
            labelElement: null
        },
        props: {
            Caption: {
                get: function () {
                    return this._caption;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._caption, value)) {
                        this._caption = value;
                        this.ProcessRender();
                    }
                }
            },
            Checked: {
                get: function () {
                    return this.Content.checked;
                },
                set: function (value) {
                    this.Content.checked = value;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                ExpressCraft.TextInput.$ctor2.call(this, "radio");
                ExpressCraft.RadioElement.RadioId = ExpressCraft.RadioElement.RadioId.inc();
                if (ExpressCraft.RadioElement.RadioId.gt(System.Int64(20000))) {
                    ExpressCraft.RadioElement.RadioId = System.Int64(0);
                }

                this.Content.id = "__radio_internal_" + (Bridge.toString(ExpressCraft.RadioElement.RadioId) || "") + "_rng_" + (Bridge.toString(ExpressCraft.RadioElement.rng.Next$2(1, 1000)) || "");
                this.Style.marginLeft = "3px";
                this.Style.textIndent = "0";
                this.ClassList.remove("Control");
                this.ClassList.remove("inputcontrol");
            }
        },
        methods: {
            ProcessIsEnabled: function () {
                if (this.labelElement == null) {
                    return;
                }

                if (this.Enabled) {
                    this.labelElement.removeAttribute("disabled");
                    this.labelElement.style.color = "";
                    this.labelElement.style.cursor = "pointer";
                } else {
                    this.labelElement.setAttribute("disabled", "");
                    this.labelElement.style.color = "grey";
                    this.labelElement.style.cursor = "not-allowed";
                }
            },
            ProcessRender: function () {
                if (!this.HasRendered) {
                    return;
                }

                if (this.labelElement == null) {
                    if (this.Content.parentElement != null) {
                        this.labelElement = document.createElement("label");
                        this.labelElement.classList.add("control");
                        this.labelElement.style.marginLeft = "16px";
                        this.labelElement.style.textIndent = "0";
                        this.labelElement.style.left = "3px";
                        this.labelElement.htmlFor = this.Content.id;

                        this.labelElement.innerHTML = this._caption;

                        if (this.Content.nextElementSibling == null) {
                            this.Content.parentElement.appendChild(document.createElement("br"));
                        } else {
                            this.Content.parentElement.insertBefore(document.createElement("br"), this.Content.nextElementSibling);
                        }

                        if (this.Content.nextElementSibling == null) {
                            this.Content.parentElement.appendChild(this.labelElement);
                        } else {
                            this.Content.parentElement.insertBefore(this.labelElement, this.Content.nextElementSibling);
                        }
                    }
                } else {
                    this.labelElement.innerHTML = this._caption;
                }

                this.ProcessIsEnabled();
            },
            Render: function () {
                this.HasRendered = true;

                ExpressCraft.TextInput.prototype.Render.call(this);
            }
        }
    });

    Bridge.define("ExpressCraft.RibbonButton", {
        inherits: [ExpressCraft.RibbonItem],
        fields: {
            _icon: null,
            _iconURL: null,
            OnItemClick: null,
            imageDiv: null,
            AfterItemClick: null
        },
        props: {
            Icon: {
                get: function () {
                    return this._icon;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._icon, value)) {
                        this._icon = value;
                        this.ProcessImage();
                    }
                }
            },
            IconURL: {
                get: function () {
                    return this._iconURL;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._iconURL, value)) {
                        this._iconURL = value;
                        this.ProcessImage();
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this._icon = "";
                this._iconURL = "";
            },
            ctor: function (caption, _isSmallCaption) {
                if (caption === void 0) { caption = ""; }
                if (_isSmallCaption === void 0) { _isSmallCaption = false; }

                this.$initialize();
                ExpressCraft.RibbonItem.ctor.call(this, _isSmallCaption ? "ribbonbuttonsmall" : "ribbonbutton");
                this.Caption = caption;
                this.IsSmallItem = _isSmallCaption;
            }
        },
        methods: {
            OnSetEnabled: function (value) {
                if (value) {
                    if (this.imageDiv != null) {
                        this.imageDiv.classList.remove("disabled");
                    }
                } else {
                    if (this.imageDiv != null) {
                        this.imageDiv.classList.add("disabled");
                    }
                }
                ExpressCraft.RibbonItem.prototype.OnSetEnabled.call(this, value);
            },
            Render: function () {
                this.HasRendered = true;

                this.Content.onclick = Bridge.fn.bind(this, function (ev) {
                    var wasEnabled = this.enabled;

                    if (this.enabled && !Bridge.staticEquals(this.OnItemClick, null)) {
                        this.OnItemClick(this);
                    }
                    if (wasEnabled && !Bridge.staticEquals(this.AfterItemClick, null)) {
                        this.AfterItemClick(this);
                    }

                    ev.stopPropagation();
                });

                this.ProcessCaption();
                this.ProcessImage();

                this.setEnabled(this.enabled);
            },
            ProcessImage: function () {
                if (this.imageDiv == null) {
                    if (!System.String.isNullOrWhiteSpace(this.Icon)) {
                        this.imageDiv = ExpressCraft.Control.Div$1(this.IsSmallItem ? "ribbonbuttonsmallicon" : "ribbonbuttonicon");
                        this.imageDiv.style.background = ExpressCraft.Control.GetImageString(this.Icon);
                    } else if (!System.String.isNullOrWhiteSpace(this.IconURL)) {
                        this.imageDiv = ExpressCraft.Control.Div$1(this.IsSmallItem ? "ribbonbuttonsmallicon" : "ribbonbuttonicon");
                        this.imageDiv.style.background = ExpressCraft.Control.GetImageStringURI(this.IconURL);
                    }
                    if (this.imageDiv != null) {
                        ExpressCraft.Helper.AppendChild$2(this.Content, this.imageDiv);
                    }
                } else {
                    if (!System.String.isNullOrWhiteSpace(this.Icon)) {
                        this.imageDiv.style.background = ExpressCraft.Control.GetImageString(this.Icon);
                    } else if (!System.String.isNullOrWhiteSpace(this.IconURL)) {
                        this.imageDiv.style.background = ExpressCraft.Control.GetImageStringURI(this.IconURL);
                    }
                }

                if (this.imageDiv != null) {
                    this.imageDiv.style.backgroundSize = "100% 100%";

                    if (this.captionDiv != null && this.IsSmallItem) {
                        this.captionDiv.style.left = "28px";
                    }
                } else {
                    if (this.captionDiv != null && this.IsSmallItem) {
                        this.captionDiv.style.left = "6px";
                    }
                }
            }
        }
    });

    Bridge.define("ExpressCraft.RibbonEditItem", {
        inherits: [ExpressCraft.RibbonItem],
        fields: {
            Edit: null
        },
        props: {
            EditWidth: {
                get: function () {
                    return ExpressCraft.Helper.ToInt(this.Edit.Width);
                },
                set: function (value) {
                    this.Edit.Width = value;
                    this.Edit.Top = 0;
                    this.Edit.Left = "(100% - " + (((value + 10) | 0)) + "px)";
                    this.Edit.Height = "100%";
                }
            }
        },
        ctors: {
            ctor: function (edit, editWidth) {
                if (editWidth === void 0) { editWidth = 100; }

                this.$initialize();
                ExpressCraft.RibbonItem.ctor.call(this, "ribbonbuttonsmall");
                this.Edit = edit;
                this.EditWidth = editWidth;
                ExpressCraft.Helper.AppendChild$1(this.Content, this.Edit);

                this.IsSmallItem = true;
            }
        }
    });

    Bridge.define("ExpressCraft.Sheet", {
        inherits: [ExpressCraft.CanvasControl],
        fields: {
            data: null,
            ScrollColumnIndex: 0,
            ScrollRowIndex: 0,
            columns: null,
            rows: null,
            _inDataUpdate: false
        },
        ctors: {
            init: function () {
                this.data = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(ExpressCraft.SheetCell))).ctor();
                this.columns = new (System.Collections.Generic.List$1(ExpressCraft.SheetColumn)).ctor();
                this.rows = new (System.Collections.Generic.List$1(ExpressCraft.SheetRow)).ctor();
            },
            ctor: function () {
                this.$initialize();
                ExpressCraft.CanvasControl.ctor.call(this);
                this.Style.backgroundColor = "white";
                this.Content.contentEditable = "true";
                this.Content.addEventListener("keydown", Bridge.fn.bind(this, function (e) {
                    var ev = Bridge.unbox(e);

                    if (ev.keyCode === 40) {
                        this.ScrollRowIndex = (this.ScrollRowIndex + 1) | 0;
                        this.Refresh();
                    } else if (ev.keyCode === 38) {
                        this.ScrollRowIndex = (this.ScrollRowIndex - 1) | 0;
                        if (this.ScrollRowIndex < 0) {
                            this.ScrollRowIndex = 0;
                        }
                        this.Refresh();
                    } else if (ev.keyCode === 37) {
                        this.ScrollColumnIndex = (this.ScrollColumnIndex - 1) | 0;
                        if (this.ScrollColumnIndex < 0) {
                            this.ScrollColumnIndex = 0;
                        }
                        this.Refresh();
                    } else if (ev.keyCode === 39) {
                        this.ScrollColumnIndex = (this.ScrollColumnIndex + 1) | 0;
                        this.Refresh();
                    }

                }));
            }
        },
        methods: {
            getItem$1: function (x, y) {
                return this.GetCell(x, y);
            },
            RequestRefresh: function () {
                if (this._inDataUpdate) {
                    return;
                }
                this.Refresh();
            },
            BeginDataUpdate: function () {
                this._inDataUpdate = true;
            },
            EndDataUpdate: function () {
                this._inDataUpdate = false;
                this.Refresh();
            },
            increaseListBy: function (T, list, count) {
                for (var i = 0; i < count; i = (i + 1) | 0) {
                    System.Array.add(list, null, T);
                }
            },
            GetCell: function (x, y) {
                var $t;
                if (this.data == null) {
                    this.data = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(ExpressCraft.SheetCell))).ctor();
                }

                if (y >= this.data.Count) {
                    this.increaseListBy(ExpressCraft.SheetRow, this.rows, ((((y + 1) | 0) - this.rows.Count) | 0));
                    this.increaseListBy(System.Collections.Generic.List$1(ExpressCraft.SheetCell), this.data, ((((y + 1) | 0) - this.data.Count) | 0));
                }

                if (this.data.getItem(y) == null) {
                    this.data.setItem(y, new (System.Collections.Generic.List$1(ExpressCraft.SheetCell)).ctor());
                }

                if (x >= this.data.getItem(y).Count) {
                    this.increaseListBy(ExpressCraft.SheetColumn, this.columns, ((((x + 1) | 0) - this.columns.Count) | 0));
                    this.increaseListBy(ExpressCraft.SheetCell, this.data.getItem(y), ((((x + 1) | 0) - this.data.getItem(y).Count) | 0));
                }
                var value = this.data.getItem(y).getItem(x);
                if (value == null) {
                    value = (($t = new ExpressCraft.SheetCell(this), this.data.getItem(y).setItem(x, $t), $t));
                }

                return value;
            },
            GetColumnLetters: function (column) {
                var col = "A";
                for (var i = 0; i < column; i = (i + 1) | 0) {
                    col = this.IncrementColumn(col);
                }
                return col;
            },
            IncrementColumn: function (column) {
                var $t, $t1;
                var columnChars = new (System.Collections.Generic.List$1(System.Char)).$ctor1(($t = column.toUpperCase(), System.String.toCharArray($t, 0, $t.length)));

                var leftOver = 1;

                for (var i = (columnChars.Count - 1) | 0; i >= 0; i = (i - 1) | 0) {
                    if ((Bridge.identity(columnChars.getItem(i), ($t1 = (columnChars.getItem(i) + 1) & 65535, columnChars.setItem(i, $t1), $t1))) === 91) {
                        columnChars.setItem(i, 65);
                    } else {
                        leftOver = 0;
                        break;
                    }
                }
                if (leftOver === 1) {
                    columnChars.insert(0, 65);
                }
                return System.String.fromCharArray(columnChars.ToArray());
            },
            OnPaint: function () {
                ExpressCraft.CanvasControl.prototype.OnPaint.call(this);
                var g = this.CreateGraphics();


                var widthSoFar = 45;
                var heightSoFar = 25;

                var defaultBorderColor = new ExpressCraft.Pen.ctor(new ExpressCraft.SolidBrush(ExpressCraft.Color.FromArgb$2(218, 218, 218)));
                var columnBorderColor = new ExpressCraft.Pen.ctor(new ExpressCraft.SolidBrush(ExpressCraft.Color.FromArgb$2(192, 192, 192)));
                var columnHeader = new ExpressCraft.SolidBrush(ExpressCraft.Color.FromArgb$2(243, 243, 243));

                for (var x = this.ScrollColumnIndex; x < this.columns.Count; x = (x + 1) | 0) {
                    if (this.columns.getItem(x) == null) {
                        this.columns.setItem(x, new ExpressCraft.SheetColumn(this));
                    }
                    var pre = widthSoFar;
                    widthSoFar += this.columns.getItem(x).Width;

                    g.FillRectangle$3(columnHeader, pre, 0, this.columns.getItem(x).Width, 25);
                    g.DrawRectangle$3(columnBorderColor, pre, 0, this.columns.getItem(x).Width, 25);

                    g.DrawString$4(this.GetColumnLetters(x), new ExpressCraft.Font("Arial 10pt"), new ExpressCraft.SolidBrush(ExpressCraft.Color.Black.$clone()), pre + (this.columns.getItem(x).Width / 2), 6, this.columns.getItem(x).Width, true, true);

                    g.DrawLine$3(defaultBorderColor, widthSoFar, 25, widthSoFar, this.Canvas.height);
                }
                for (var y = this.ScrollRowIndex; y < this.rows.Count; y = (y + 1) | 0) {
                    if (this.rows.getItem(y) == null) {
                        this.rows.setItem(y, new ExpressCraft.SheetRow(this));
                    }
                    var pre1 = heightSoFar;
                    heightSoFar += this.rows.getItem(y).Height;

                    g.FillRectangle$3(columnHeader, 0, pre1, 45, this.rows.getItem(y).Height);
                    g.DrawRectangle$3(columnBorderColor, 0, pre1, 45, this.rows.getItem(y).Height);

                    g.DrawString$4(Bridge.toString((((y + 1) | 0))), new ExpressCraft.Font("Arial 10pt"), new ExpressCraft.SolidBrush(ExpressCraft.Color.Black.$clone()), 23, pre1 + (this.rows.getItem(y).Height / 2) - 6, 45, true, true);

                    g.DrawLine$3(defaultBorderColor, 45, heightSoFar, this.Canvas.width, heightSoFar);
                }

                widthSoFar = 45;
                heightSoFar = 25;

                for (var x1 = this.ScrollColumnIndex; x1 < this.columns.Count; x1 = (x1 + 1) | 0) {
                    heightSoFar = 25;
                    if (this.columns.getItem(x1) == null) {
                        this.columns.setItem(x1, new ExpressCraft.SheetColumn(this));
                    }

                    var columnWidth = this.columns.getItem(x1).Width;
                    for (var y1 = this.ScrollRowIndex; y1 < this.rows.Count; y1 = (y1 + 1) | 0) {
                        var cell = this.GetCell(x1, y1);


                        var value = cell.Value;

                        if (value != null) {
                            var displayValue = System.Convert.toString(value);
                            if (!System.String.isNullOrWhiteSpace(displayValue)) {
                                g.DrawString$4(displayValue, new ExpressCraft.Font("Arial 10pt"), new ExpressCraft.SolidBrush(ExpressCraft.Color.Black.$clone()), widthSoFar + 2, heightSoFar + 2, columnWidth - 4);
                            }
                        }

                        if (this.rows.getItem(y1) == null) {
                            this.rows.setItem(y1, new ExpressCraft.SheetRow(this));
                        }

                        heightSoFar += this.rows.getItem(y1).Height;
                        if (heightSoFar > this.Canvas.height) {
                            break;
                        }
                    }
                    widthSoFar += columnWidth;
                    if (widthSoFar > this.Canvas.width) {
                        break;
                    }
                }
            }
        }
    });

    Bridge.define("ExpressCraft.SimpleDialogButton", {
        inherits: [ExpressCraft.SimpleButton],
        ctors: {
            ctor: function (parentForm, dialogResult) {
                if (dialogResult === void 0) { dialogResult = 0; }

                this.$initialize();
                ExpressCraft.SimpleButton.ctor.call(this);
                this.ParentForm = parentForm;
                this.DialogResult = dialogResult;

                ExpressCraft.Helper.SetSize(this, 75, 23);
            }
        }
    });

    Bridge.define("Xamarin.Forms.ContentPage", {
        inherits: [ExpressCraft.Form],
        statics: {
            ctors: {
                ctor: function () {

                }
            }
        },
        methods: {
            InitializeComponent: function () {
                ExpressCraft.xaml.XAMLDefinitions.Load(Bridge.Reflection.getTypeAssembly(Bridge.getType(this)));
                ExpressCraft.xaml.XAMLDefinitions.BuildUI(this);
            }
        }
    });

    Bridge.define("ExpressCraft.CalcForm", {
        inherits: [ExpressCraft.FormPopup],
        fields: {
            InputControl: null,
            CalControl: null,
            ClickedClose: false
        },
        ctors: {
            init: function () {
                this.ClickedClose = false;
            },
            ctor: function (inputControl) {
                this.$initialize();
                ExpressCraft.FormPopup.ctor.call(this);
                if (inputControl.Content.parentElement != null && inputControl.Content.parentElement.parentElement != null && inputControl.Content.parentElement.parentElement.parentElement != null) {
                    this.PreviousScrollTop = inputControl.Content.parentElement.parentElement.parentElement.scrollTop;
                    this.ParentContainer = inputControl.Content.parentElement.parentElement.parentElement;
                }

                this.InputControl = inputControl;
                this.CalControl = new ExpressCraft.CalculatorControl(this.InputControl.GetNumberValue(), true);
                ExpressCraft.Helper.SetBoundsFull(this.CalControl);
                this.CalControl.OnClose = Bridge.fn.bind(this, function () {
                    this.ClickedClose = true;
                    this.Close();
                });

                this.CalControl.OnEqual = Bridge.fn.bind(this, function (value) {
                    this.InputControl.Text = value.toString();
                });

                this.AppendChild(this.CalControl);

                this.Size = new ExpressCraft.Vector2.$ctor1(182, 157);
            }
        },
        methods: {
            OnClosed: function () {
                ExpressCraft.FormPopup.prototype.OnClosed.call(this);
                this.InputControl.ValidateData();
                if (!ExpressCraft.Helper.NotDesktop) {
                    this.InputControl.Focus();
                } else {
                    this.InputControl.Scroll(Bridge.Int.clip32(this.PreviousScrollTop), this.ParentContainer);
                }
            },
            OnClosing: function () {
                ExpressCraft.FormPopup.prototype.OnClosing.call(this);

                if (!this.ClickedClose) {
                    this.CalControl.DontRefresh = true;
                    this.CalControl.AddOperator(this.CalControl.btnEq);
                }
            },
            OnShowed: function () {
                ExpressCraft.FormPopup.prototype.OnShowed.call(this);
                if (this.InputControl == null) {
                    this.Close();
                }

                this.CalControl.btnEq.Focus();
            }
        }
    });

    Bridge.define("ExpressCraft.DataRowEditForm", {
        inherits: [ExpressCraft.DialogForm],
        fields: {
            LiveData: false,
            GridView: null,
            DataRow: null,
            Panel: null,
            prevData: null
        },
        ctors: {
            ctor: function (_dataRow, _gridView, _liveData) {
                if (_liveData === void 0) { _liveData = true; }

                this.$initialize();
                ExpressCraft.DialogForm.ctor.call(this);
                this.prevData = System.Array.init(_dataRow.ParentTable.ColumnCount, null, System.Object);

                for (var i = 0; i < _dataRow.ParentTable.ColumnCount; i = (i + 1) | 0) {
                    this.prevData[System.Array.index(i, this.prevData)] = _dataRow.getItem(i);
                }

                this.DataRow = _dataRow;
                this.GridView = _gridView;
                this.LiveData = _liveData;

                this.Text = "Row Edit Form";
                this.Width = "400px";
                this.Height = "600px";
                this.Body.style.overflowY = "auto";

                this.Panel = ExpressCraft.Control.Div();
                this.Panel.style.overflowY = "auto";
                ExpressCraft.Helper.SetBounds$1(this.Panel, "0", "0", "100%", "(100% - 60px)");
                this.Body.style.backgroundColor = "white";

                this._buttonCollection = Bridge.fn.bind(this, function (_o1) {
                        var $t;
                        _o1.add(($t = new ExpressCraft.SimpleDialogButton(this, ExpressCraft.DialogResultEnum.Cancel), $t.Text = "Cancel", $t.Location = new ExpressCraft.Vector2.$ctor1("(100% - 85px)", "(100% - 35px)"), $t.ItemClick = Bridge.fn.bind(this, function (ev) {
                            for (var i1 = 0; i1 < this.DataRow.ParentTable.ColumnCount; i1 = (i1 + 1) | 0) {
                                _dataRow.setItem(i1, this.prevData[System.Array.index(i1, this.prevData)]);
                            }

                            this.GridView.RenderGrid();
                        }), $t));
                        _o1.add(($t = new ExpressCraft.SimpleDialogButton(this, ExpressCraft.DialogResultEnum.OK), $t.Text = "OK", $t.Location = new ExpressCraft.Vector2.$ctor1("(100% - 170px)", "(100% - 35px)"), $t));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(ExpressCraft.SimpleDialogButton)).ctor());

                ExpressCraft.Helper.AppendChildrenTabIndex(this.ButtonSection, this._buttonCollection.ToArray());

                ExpressCraft.Helper.AppendChild$2(this.Body, this.Panel);

                this.AllowSizeChange = false;
            }
        },
        methods: {
            OnClosed: function () {
                this.GridView.DataSource.EndDataUpdate();

                ExpressCraft.DialogForm.prototype.OnClosed.call(this);
            },
            OnShowed: function () {
                ExpressCraft.DialogForm.prototype.OnShowed.call(this);

                if (this.DataRow == null) {
                    this.DialogResult = ExpressCraft.DialogResultEnum.Cancel;
                    this.Close();
                } else {
                    this.GridView.DataSource.BeginDataUpdate();

                    this.GenerateForm();
                }
            },
            GenerateForm: function () {
                ExpressCraft.Helper.Empty(this.Panel);
                var length = this.GridView.ColumnCount();

                var col = 0;
                var height = 25;

                var defaultHeight = 54;
                var defaultHeight2X = Bridge.Int.mul(defaultHeight, 3);
                var incrementHeight = defaultHeight;

                var eachWidth = 113;

                for (var i = 0; i < length; i = (i + 1) | 0) {
                    incrementHeight = defaultHeight;
                    var grCol = this.GridView.GetColumn(i);

                    if (!grCol.AllowEdit) {
                        continue;
                    }

                    var dtCol = grCol.Column;

                    var dtIndex = { v : grCol.GetDataColumnIndex() };

                    if (Bridge.referenceEquals(grCol.Column.FieldName.toLowerCase(), "cntr")) {
                        grCol.ReadOnly = true;
                    }

                    switch (dtCol.DataType) {
                        case ExpressCraft.DataType.DateTime: 
                            var lbldate = ExpressCraft.Control.Label(grCol.Caption, ((25 + (((Bridge.Int.mul(col, eachWidth) + (Bridge.Int.mul(col, 3))) | 0))) | 0), height);
                            var inputDate = { v : new ExpressCraft.TextInput.$ctor2("date") };
                            ExpressCraft.Helper.SetBounds(inputDate.v, ((25 + (((Bridge.Int.mul(col, eachWidth) + (Bridge.Int.mul(col, 3))) | 0))) | 0), ((((height + 16) | 0) + 3) | 0), eachWidth, 24);
                            inputDate.v.SetDate(System.Convert.toString(this.DataRow.getItem(dtIndex.v)));
                            inputDate.v.Readonly = grCol.ReadOnly;
                            if (!grCol.ReadOnly) {
                                inputDate.v.OnTextChanged = (function ($me, dtIndex, inputDate) {
                                    return Bridge.fn.bind($me, function (ev) {
                                        this.DataRow.setItem(dtIndex.v, inputDate.v.GetDate());
                                        if (this.LiveData) {
                                            this.GridView.RenderGrid();
                                        }
                                    });
                                })(this, dtIndex, inputDate);
                            }
                            ExpressCraft.Helper.AppendChildren$2(this.Panel, [lbldate, ExpressCraft.Control.op_Implicit(inputDate.v)]);
                            break;
                        case ExpressCraft.DataType.Integer: 
                        case ExpressCraft.DataType.Long: 
                        case ExpressCraft.DataType.Float: 
                        case ExpressCraft.DataType.Double: 
                        case ExpressCraft.DataType.Decimal: 
                        case ExpressCraft.DataType.Bool: 
                        case ExpressCraft.DataType.Byte: 
                        case ExpressCraft.DataType.Short: 
                            var lblnmb = ExpressCraft.Control.Label(grCol.Caption, ((25 + (((Bridge.Int.mul(col, eachWidth) + (Bridge.Int.mul(col, 3))) | 0))) | 0), height);
                            var inputNum = { };
                            if (Bridge.is(grCol.CellDisplay, ExpressCraft.GridViewCellDisplayCheckBox)) {
                                inputNum.v = new ExpressCraft.TextInput.$ctor2("checkbox");
                                ExpressCraft.Helper.SetChecked(inputNum.v, this.DataRow.getItem(dtIndex.v));
                            } else {
                                inputNum.v = new ExpressCraft.TextInput.$ctor2("number");
                                inputNum.v.Text = System.Convert.toString(this.DataRow.getItem(dtIndex.v));
                            }
                            ExpressCraft.Helper.SetBounds(inputNum.v, ((25 + (((Bridge.Int.mul(col, eachWidth) + (Bridge.Int.mul(col, 3))) | 0))) | 0), ((((height + 16) | 0) + 3) | 0), eachWidth, 24);
                            inputNum.v.Readonly = grCol.ReadOnly;
                            if (!grCol.ReadOnly) {
                                inputNum.v.OnTextChanged = (function ($me, inputNum, dtIndex) {
                                    return Bridge.fn.bind($me, function (ev) {
                                        if (Bridge.referenceEquals(inputNum.v.Type, "checkbox")) {
                                            this.DataRow.setItem(dtIndex.v, Bridge.box(ExpressCraft.Helper.IsTrue(inputNum.v.Text) === 1, System.Boolean, System.Boolean.toString));
                                        } else {
                                            this.DataRow.setItem(dtIndex.v, inputNum.v.Text);
                                        }
                                        if (this.LiveData) {
                                            this.GridView.RenderGrid();
                                        }
                                    });
                                })(this, inputNum, dtIndex);
                            }
                            ExpressCraft.Helper.AppendChildren$2(this.Panel, [lblnmb, ExpressCraft.Control.op_Implicit(inputNum.v)]);
                            break;
                        default: 
                        case ExpressCraft.DataType.Object: 
                        case ExpressCraft.DataType.String: 
                            var lblstr = ExpressCraft.Control.Label(grCol.Caption, ((25 + (((Bridge.Int.mul(col, eachWidth) + (Bridge.Int.mul(col, 3))) | 0))) | 0), height);
                            var inputstr = { v : new ExpressCraft.TextInput.$ctor2("text") };
                            ExpressCraft.Helper.SetBounds(inputstr.v, ((25 + (((Bridge.Int.mul(col, eachWidth) + (Bridge.Int.mul(col, 3))) | 0))) | 0), ((((height + 16) | 0) + 3) | 0), eachWidth, 24);
                            inputstr.v.Text = System.Convert.toString(this.DataRow.getItem(dtIndex.v));
                            inputstr.v.Readonly = grCol.ReadOnly;
                            if (!grCol.ReadOnly) {
                                inputstr.v.OnTextChanged = (function ($me, dtIndex, inputstr) {
                                    return Bridge.fn.bind($me, function (ev) {
                                        this.DataRow.setItem(dtIndex.v, inputstr.v.Text);

                                        if (this.LiveData) {
                                            this.GridView.RenderGrid();
                                        }
                                    });
                                })(this, dtIndex, inputstr);
                            }
                            ExpressCraft.Helper.AppendChildren$2(this.Panel, [lblstr, ExpressCraft.Control.op_Implicit(inputstr.v)]);
                            break;
                    }
                    if (col === 2) {
                        height = (height + (((incrementHeight + 3) | 0))) | 0;
                        col = 0;
                    } else {
                        col = (col + 1) | 0;
                    }
                }
            }
        }
    });

    Bridge.define("ExpressCraft.DateForm", {
        inherits: [ExpressCraft.FormPopup],
        fields: {
            InputControl: null,
            DateControl: null,
            ClickedClose: false
        },
        ctors: {
            init: function () {
                this.ClickedClose = false;
            },
            ctor: function (inputControl) {
                this.$initialize();
                ExpressCraft.FormPopup.ctor.call(this);
                if (inputControl.Content.parentElement != null && inputControl.Content.parentElement.parentElement != null && inputControl.Content.parentElement.parentElement.parentElement != null) {
                    this.PreviousScrollTop = inputControl.Content.parentElement.parentElement.parentElement.scrollTop;
                    this.ParentContainer = inputControl.Content.parentElement.parentElement.parentElement;
                }

                this.Size = new ExpressCraft.Vector2.$ctor1(232, 247);

                this.InputControl = inputControl;
                this.DateControl = new ExpressCraft.DateControl(inputControl.GetDateTime());
                ExpressCraft.Helper.SetBoundsFull(this.DateControl);

                this.DateControl.OnDateChanged = function (date) {
                    if (Bridge.equals(date, System.DateTime.getMinValue())) {
                        inputControl.SetDate("");
                    } else {
                        inputControl.SetDate(System.String.format("{0:" + (inputControl.DisplayFormat || "") + "}", [Bridge.box(date, System.DateTime, System.DateTime.format)]));
                    }
                };

                this.DateControl.OnRequestToClose = Bridge.fn.bind(this, function () {
                    this.Close();
                });

                this.Content.onkeydown = Bridge.fn.cacheBind(this.DateControl, this.DateControl.BlockTabEvent);

                this.AppendChild(this.DateControl);
            }
        },
        methods: {
            OnClosed: function () {
                ExpressCraft.FormPopup.prototype.OnClosed.call(this);
                this.InputControl.ValidateData();
                if (!ExpressCraft.Helper.NotDesktop) {
                    this.InputControl.Focus();
                } else {
                    this.InputControl.Scroll(Bridge.Int.clip32(this.PreviousScrollTop), this.ParentContainer);
                }
            },
            OnShowed: function () {
                ExpressCraft.FormPopup.prototype.OnShowed.call(this);
                if (this.InputControl == null) {
                    this.Close();
                }

                this.DateControl.btnToday.Focus();
            }
        }
    });

    Bridge.define("ExpressCraft.DateInput", {
        inherits: [ExpressCraft.TextInputDropDown],
        ctors: {
            ctor: function () {
                this.$initialize();
                ExpressCraft.TextInputDropDown.ctor.call(this, "date");
                this.UsedEdit.OnKeyDown = Bridge.fn.bind(this, function (sender, ev) {
                    if (ev.keyCode === ExpressCraft.KeyCodes.Enter) {
                        this.UsedEdit.Content.blur();
                    }
                });
            }
        },
        methods: {
            OnDropDownClicked: function (mouseEvent) {
                if (!this.Readonly && this.Enabled) {
                    (new ExpressCraft.DateForm(this.UsedEdit)).ShowPopup(ExpressCraft.FormPopup.GetPopupDefaultLocation(this.DropDownButton, true));
                }
            }
        }
    });

    Bridge.define("ExpressCraft.InputDialogBase", {
        inherits: [ExpressCraft.DialogForm],
        fields: {
            QuestionSize: 0,
            Wrapper: null,
            QuestionDiv: null,
            AnswerDiv: null,
            ImageDiv: null
        },
        ctors: {
            ctor: function (title, width, question) {
                this.$initialize();
                ExpressCraft.DialogForm.ctor.call(this, title);
                this.Width = ExpressCraft.Helper.ToPx(Bridge.box(width, System.Int32));
                this.Wrapper = ExpressCraft.Control.Div();
                this.QuestionDiv = ExpressCraft.Control.Div();
                this.AnswerDiv = ExpressCraft.Control.Div();
                this._buttonCollection = Bridge.fn.bind(this, function (_o1) {
                        var $t;
                        _o1.add(($t = new ExpressCraft.SimpleDialogButton(this, ExpressCraft.DialogResultEnum.OK), $t.Text = "Accept", $t));
                        _o1.add(($t = new ExpressCraft.SimpleDialogButton(this, ExpressCraft.DialogResultEnum.Cancel), $t.Text = "Cancel", $t));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(ExpressCraft.SimpleDialogButton)).ctor());

                this.Wrapper.style.overflowY = "hidden";
                ExpressCraft.Helper.SetBounds$1(this.Wrapper, "0px", "0px", "100%", "(100% - 60px)");
                this.QuestionDiv.style.position = "relative";
                this.QuestionDiv.style.height = "auto";
                this.QuestionDiv.style.marginLeft = "10px";
                this.QuestionDiv.style.marginRight = "10px";
                this.QuestionDiv.style.marginTop = "10px";
                this.AnswerDiv.style.position = "relative";
                this.AnswerDiv.style.height = "auto";
                ExpressCraft.Helper.SetLocation(this._buttonCollection.getItem(0), "(100% - 170px)", "(100% - 35px)");
                ExpressCraft.Helper.SetLocation(this._buttonCollection.getItem(1), "(100% - 85px)", "(100% - 35px)");

                var tb = new ExpressCraft.TextBlock(question, ((width - 25) | 0));
                tb.ComputeString();

                if (!tb.ElelemtsOverMax) {
                    width = (((Bridge.Int.clip32(tb.MaxCalculatedWidth) + 65) | 0) + 37) | 0;
                    if (width < ExpressCraft.Settings.MessageFormMinimumWidthInPx) {
                        width = ExpressCraft.Settings.MessageFormMinimumWidthInPx;
                    }
                }
                if (tb.ComputedHeight > ExpressCraft.Settings.MessageFormTextMaximumHeightInPx) {
                    tb.ComputedHeight = ExpressCraft.Settings.MessageFormTextMaximumHeightInPx;
                }
                if (tb.ComputedHeight < ExpressCraft.Settings.MessageFormTextMinimumHeightInPx) {
                    tb.ComputedHeight = ExpressCraft.Settings.MessageFormTextMinimumHeightInPx;
                }

                this.QuestionDiv.innerHTML = question;
                this.QuestionSize = System.Convert.toInt32(Bridge.box(tb.ComputedHeight, System.Single, System.Single.format, System.Single.getHashCode));
            }
        },
        methods: {
            Create: function (height) {
                ExpressCraft.Helper.AppendChild$2(this.Wrapper, this.QuestionDiv);
                ExpressCraft.Helper.AppendChild$2(this.Wrapper, document.createElement("br"));
                ExpressCraft.Helper.AppendChild$2(this.Wrapper, this.AnswerDiv);
                ExpressCraft.Helper.AppendChild$2(this.Body, this.Wrapper);

                ExpressCraft.Helper.AppendChildrenTabIndex(this.ButtonSection, this._buttonCollection.ToArray());

                this.Height = ExpressCraft.Helper.ToPx(Bridge.box(height, System.Int32));
                this.AllowSizeChange = false;
            }
        }
    });

    Bridge.define("ExpressCraft.MessageBoxForm", {
        inherits: [ExpressCraft.DialogForm],
        statics: {
            fields: {
                snd: null
            },
            methods: {
                Beep: function () {
                    if (!ExpressCraft.Settings.MessageFormBeep) {
                        return;
                    }
                    if (ExpressCraft.MessageBoxForm.snd == null) {
                        ExpressCraft.MessageBoxForm.snd = document.createElement("audio");
                        ExpressCraft.MessageBoxForm.snd.src = ExpressCraft.ResourceManager.GetResourceString("beepSound");
                    }
                    ExpressCraft.MessageBoxForm.snd.play();
                }
            }
        },
        fields: {
            _prompt: null,
            _buttons: 0
        },
        ctors: {
            /**
             * Create a new Message Dialog
             *
             * @instance
             * @public
             * @this ExpressCraft.MessageBoxForm
             * @memberof ExpressCraft.MessageBoxForm
             * @param   {string}                           prompt    The text to be displayed in the message box
             * @param   {ExpressCraft.MessageBoxLayout}    ui        The UI settings to be applied to the form
             * @return  {void}
             */
            ctor: function (prompt, ui) {
                ExpressCraft.MessageBoxForm.$ctor2.call(this, prompt, ui, ExpressCraft.MessageBoxButtons.Auto, System.Enum.toString(ExpressCraft.MessageBoxLayout, ui));
            },
            /**
             * Create a new Message Dialog
             *
             * @instance
             * @public
             * @this ExpressCraft.MessageBoxForm
             * @memberof ExpressCraft.MessageBoxForm
             * @param   {string}                           prompt    The text to be displayed in the message box
             * @param   {ExpressCraft.MessageBoxLayout}    ui        The UI settings to be applied to the form
             * @param   {string}                           title     The title of the message box
             * @return  {void}
             */
            $ctor3: function (prompt, ui, title) {
                ExpressCraft.MessageBoxForm.$ctor2.call(this, prompt, ui, ExpressCraft.MessageBoxButtons.Auto, title);
            },
            /**
             * Create a new Message Dialog
             *
             * @instance
             * @public
             * @this ExpressCraft.MessageBoxForm
             * @memberof ExpressCraft.MessageBoxForm
             * @param   {string}                            prompt     The text to be displayed in the message box
             * @param   {ExpressCraft.MessageBoxLayout}     ui         The UI settings to be applied to the form
             * @param   {ExpressCraft.MessageBoxButtons}    buttons    The Type of button to be displayed with this message
             * @return  {void}
             */
            $ctor1: function (prompt, ui, buttons) {
                ExpressCraft.MessageBoxForm.$ctor2.call(this, prompt, ui, buttons, System.Enum.toString(ExpressCraft.MessageBoxLayout, ui));
            },
            /**
             * Create a new Message Dialog
             *
             * @instance
             * @public
             * @this ExpressCraft.MessageBoxForm
             * @memberof ExpressCraft.MessageBoxForm
             * @param   {string}                            prompt     The text to be displayed in the message box
             * @param   {ExpressCraft.MessageBoxLayout}     ui         The UI settings  to be applied to the form
             * @param   {ExpressCraft.MessageBoxButtons}    buttons    The Type of button to be displayed with this message
             * @param   {string}                            title      The title of the message box
             * @return  {void}
             */
            $ctor2: function (prompt, ui, buttons, title) {
                this.$initialize();
                ExpressCraft.DialogForm.ctor.call(this, title);
                var section = ExpressCraft.Control.Div();
                var pic = ExpressCraft.Control.Div$1("image32");
                var textContent = ExpressCraft.Control.Div$1("messag-box-content");
                this._prompt = prompt;
                this._buttons = buttons;

                switch (ui) {
                    case ExpressCraft.MessageBoxLayout.Exclamation: 
                        if (this._buttons === ExpressCraft.MessageBoxButtons.Auto) {
                            this._buttons = ExpressCraft.MessageBoxButtons.Ok;
                        }
                        pic.classList.add("imagewarning");
                        break;
                    case ExpressCraft.MessageBoxLayout.Information: 
                        if (this._buttons === ExpressCraft.MessageBoxButtons.Auto) {
                            this._buttons = ExpressCraft.MessageBoxButtons.Ok;
                        }
                        pic.classList.add("imageinfo");
                        break;
                    case ExpressCraft.MessageBoxLayout.Question: 
                        if (this._buttons === ExpressCraft.MessageBoxButtons.Auto) {
                            this._buttons = ExpressCraft.MessageBoxButtons.YesNo;
                        }
                        pic.classList.add("imageindex");
                        break;
                    case ExpressCraft.MessageBoxLayout.Error: 
                        if (this._buttons === ExpressCraft.MessageBoxButtons.Auto) {
                            this._buttons = ExpressCraft.MessageBoxButtons.AbortSendCancel;
                        }
                        pic.classList.add("imageerror");
                        break;
                    default: 
                        throw new System.ArgumentOutOfRangeException.$ctor3("ui", Bridge.box(ui, ExpressCraft.MessageBoxLayout, System.Enum.toStringFn(ExpressCraft.MessageBoxLayout)), null);
                }
                var heightCalc = ExpressCraft.Helper.NotDesktop ? "(100% - 60px)" : "(100% - 35px)";
                switch (this._buttons) {
                    case ExpressCraft.MessageBoxButtons.Ok: 
                        this._buttonCollection = Bridge.fn.bind(this, function (_o1) {
                                var $t;
                                _o1.add(($t = new ExpressCraft.SimpleDialogButton(this, ExpressCraft.DialogResultEnum.OK), $t.Text = "Ok", $t.Location = new ExpressCraft.Vector2.$ctor1("(50% - 37.5px)", heightCalc), $t));
                                return _o1;
                            })(new (System.Collections.Generic.List$1(ExpressCraft.SimpleDialogButton)).ctor());
                        break;
                    case ExpressCraft.MessageBoxButtons.YesNo: 
                        this._buttonCollection = Bridge.fn.bind(this, function (_o2) {
                                var $t;
                                _o2.add(($t = new ExpressCraft.SimpleDialogButton(this, ExpressCraft.DialogResultEnum.No), $t.Text = "No", $t.Location = new ExpressCraft.Vector2.$ctor1("(100% - 85px)", heightCalc), $t));
                                _o2.add(($t = new ExpressCraft.SimpleDialogButton(this, ExpressCraft.DialogResultEnum.Yes), $t.Text = "Yes", $t.Location = new ExpressCraft.Vector2.$ctor1("(100% - 170px)", heightCalc), $t));
                                return _o2;
                            })(new (System.Collections.Generic.List$1(ExpressCraft.SimpleDialogButton)).ctor());
                        break;
                    case ExpressCraft.MessageBoxButtons.YesNoCancel: 
                        this._buttonCollection = Bridge.fn.bind(this, function (_o3) {
                                var $t;
                                _o3.add(($t = new ExpressCraft.SimpleDialogButton(this, ExpressCraft.DialogResultEnum.Cancel), $t.Text = "Cancel", $t.Location = new ExpressCraft.Vector2.$ctor1("(100% - 85px)", heightCalc), $t));
                                _o3.add(($t = new ExpressCraft.SimpleDialogButton(this, ExpressCraft.DialogResultEnum.No), $t.Text = "No", $t.Location = new ExpressCraft.Vector2.$ctor1("(100% - 170px)", heightCalc), $t));
                                _o3.add(($t = new ExpressCraft.SimpleDialogButton(this, ExpressCraft.DialogResultEnum.Yes), $t.Text = "Yes", $t.Location = new ExpressCraft.Vector2.$ctor1("(100% - 255px)", heightCalc), $t));
                                return _o3;
                            })(new (System.Collections.Generic.List$1(ExpressCraft.SimpleDialogButton)).ctor());
                        break;
                    case ExpressCraft.MessageBoxButtons.AbortSendCancel: 
                        this._buttonCollection = Bridge.fn.bind(this, function (_o4) {
                                var $t;
                                _o4.add(($t = new ExpressCraft.SimpleDialogButton(this, ExpressCraft.DialogResultEnum.Cancel), $t.Text = "Cancel", $t.Location = new ExpressCraft.Vector2.$ctor1("(100% - 85px)", heightCalc), $t));
                                _o4.add(($t = new ExpressCraft.SimpleDialogButton(this, ExpressCraft.DialogResultEnum.Send), $t.Text = "Send", $t.Location = new ExpressCraft.Vector2.$ctor1("(100% - 170px)", heightCalc), $t.ItemClick = Bridge.fn.bind(this, function (ev) {
                                    if (!Bridge.staticEquals(ExpressCraft.Settings.OnSendError, null)) {
                                        ExpressCraft.Settings.OnSendError(this._prompt);
                                    }
                                }), $t));
                                _o4.add(($t = new ExpressCraft.SimpleDialogButton(this, ExpressCraft.DialogResultEnum.Abort), $t.Text = "Abort", $t.Location = new ExpressCraft.Vector2.$ctor1("(100% - 255px)", heightCalc), $t.ItemClick = function (ev) {
                                    var pre = ExpressCraft.Settings.AllowCloseWithoutQuestion;

                                    ExpressCraft.Settings.AllowCloseWithoutQuestion = false;
                                    ExpressCraft.Application.Close();
                                    ExpressCraft.Settings.AllowCloseWithoutQuestion = pre;
                                }, $t));
                                return _o4;
                            })(new (System.Collections.Generic.List$1(ExpressCraft.SimpleDialogButton)).ctor());
                        break;
                    default: 
                        throw new System.ArgumentOutOfRangeException.ctor();
                }
                var tb = null;

                var width = 480;

                if (!ExpressCraft.Helper.NotDesktop) {
                    tb = new ExpressCraft.TextBlock(prompt, 455);
                    tb.ComputeString();
                    if (this._buttonCollection.Count > 2) {
                        if (width < 320) {
                            width = 320;
                        }
                    }
                    if (!tb.ElelemtsOverMax) {
                        width = (((Bridge.Int.clip32(tb.MaxCalculatedWidth) + 65) | 0) + 37) | 0;
                        if (width < ExpressCraft.Settings.MessageFormMinimumWidthInPx) {
                            width = ExpressCraft.Settings.MessageFormMinimumWidthInPx;
                        }
                    }
                } else {
                    var count = this._buttonCollection.Count;
                    for (var i = 0; i < count; i = (i + 1) | 0) {
                        var but = this._buttonCollection.getItem(i);
                        but.Height = 45;
                        but.Style.borderRadius = "4px";
                        but.Style.fontSize = "14px";
                        if (but.DialogResult === ExpressCraft.DialogResultEnum.OK || but.DialogResult === ExpressCraft.DialogResultEnum.Yes) {
                            but.ClassList.add("primary");
                            but.Style.color = "white";
                            but.Style.border = "0";
                        }
                    }
                }

                textContent.innerHTML = prompt;

                section.style.overflowY = "auto";
                section.style.height = "100%";
                section.style.maxHeight = ExpressCraft.Helper.ToPx(Bridge.box(ExpressCraft.Settings.MessageFormTextMaximumHeightInPx, System.Int32));
                section.appendChild(textContent);
                section.style.top = "32px";
                section.style.width = "90%";

                ExpressCraft.Helper.AppendChildren$2(this.Body, [pic, section]);

                var array = System.Array.init(this._buttonCollection.Count, null, ExpressCraft.Control);
                for (var i1 = 0; i1 < array.length; i1 = (i1 + 1) | 0) {
                    array[System.Array.index(i1, array)] = this._buttonCollection.getItem(i1);
                }

                ExpressCraft.Helper.AppendChildrenTabIndex(this.ButtonSection, array);
                if (ExpressCraft.Helper.NotDesktop) {
                    section.style.textAlign = "center";
                    section.style.lineHeight = "100%";

                    this.WindowState = ExpressCraft.WindowStateType.Maximized;
                    this.Heading.style.display = "none";
                    ExpressCraft.Helper.SetLocation$2(this.Body, 0, 0);
                    ExpressCraft.Helper.SetSize$1(this.Body, "100%", "100%");
                    this.StartPosition = ExpressCraft.FormStartPosition.Manual;
                    this.AllowSizeChange = false;
                    this.AllowMoveChange = false;

                    this.ShowMaximize = false;
                    this.ShowMinimize = false;
                    this.ShowClose = false;

                    textContent.style.display = "inlineBlock";
                    textContent.style.fontSize = "14px";
                    textContent.style.verticalAlign = "middle";
                    textContent.style.lineHeight = "normal";
                } else {
                    if (tb.ComputedHeight > ExpressCraft.Settings.MessageFormTextMaximumHeightInPx) {
                        tb.ComputedHeight = ExpressCraft.Settings.MessageFormTextMaximumHeightInPx;
                    }
                    if (tb.ComputedHeight < ExpressCraft.Settings.MessageFormTextMinimumHeightInPx) {
                        tb.ComputedHeight = ExpressCraft.Settings.MessageFormTextMinimumHeightInPx;
                    }

                    this.Height = System.Single.format(tb.ComputedHeight + 77 + 29 + 32) + "px";
                    this.Width = ExpressCraft.Helper.ToPx(Bridge.box(width, System.Int32));
                }

                this.AllowSizeChange = false;
            }
        },
        methods: {
            OnShowed: function () {
                ExpressCraft.MessageBoxForm.Beep();

                ExpressCraft.DialogForm.prototype.OnShowed.call(this);
                this._buttonCollection.getItem(0).Content.focus();
            }
        }
    });

    Bridge.define("ExpressCraft.NumberInput", {
        inherits: [ExpressCraft.TextInputDropDown],
        ctors: {
            ctor: function () {
                this.$initialize();
                ExpressCraft.TextInputDropDown.ctor.call(this, "number");
                this.UsedEdit.SetAttribute("step", "any");
            }
        },
        methods: {
            OnDropDownClicked: function (mouseEvent) {
                if (!this.Readonly && this.Enabled) {
                    var calcEdit = new ExpressCraft.CalcForm(this.UsedEdit);
                    calcEdit.ShowPopup(ExpressCraft.FormPopup.GetPopupDefaultLocation(this.DropDownButton, true));
                    calcEdit.OnFormClosed = Bridge.fn.bind(this, function () {
                        this.ValidateData();
                    });
                }

            }
        }
    });

    Bridge.define("ExpressCraft.SearchInput", {
        inherits: [ExpressCraft.TextInputDropDown],
        fields: {
            EditValue: null,
            DisplayMember: null,
            ValueMember: null,
            FocusedChangeCloseForm: false,
            OnSearch: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                ExpressCraft.TextInputDropDown.ctor.call(this, "text");
                this.UsedEdit.OnKeyDown = Bridge.fn.bind(this, function (obj, ev) {
                    if (ev.keyCode === 13 || ev.keyCode === 40) {
                        this.OnDropDownClicked(new MouseEvent("onmousedown"));
                    }
                });
                this.UsedEdit.Content.onmousedown = Bridge.fn.bind(this, function (ev) {
                    this.OnDropDownClicked(new MouseEvent("onmousedown"));
                });
            }
        },
        methods: {
            SetValues: function (editValue, text) {
                this.Text = text;
                this.EditValue = editValue;
            },
            ClearOnOpen: function () {
                return false;
            },
            OnRequestSearch: function (searchValue, grid) {
                if (!Bridge.staticEquals(this.OnSearch, null)) {
                    this.OnSearch(searchValue, grid);
                }
            },
            SearchOnLoad: function () {
                return false;
            },
            OnAcceptResult: function (value) {
                if (value == null) {
                    this.EditValue = null;
                    this.Text = "";
                } else {
                    if (!Bridge.referenceEquals(this.ValueMember, "")) {
                        this.EditValue = value.GetValue$1(this.ValueMember);
                    }
                    if (this.DisplayMember != null) {
                        this.Text = (System.String.concat(value.GetValue$1(this.DisplayMember), ""));
                    }
                }
            },
            OnRequestNew: function (grid) { },
            OnClosed: function (value) { },
            OnDropDownClicked: function (mouseEvent) {
                if (!this.Readonly && this.Enabled) {
                    (new ExpressCraft.SearchLookupForm(this)).ShowPopup(ExpressCraft.FormPopup.GetPopupDefaultLocation(this.DropDownButton, true));
                }
            }
        }
    });

    Bridge.define("ExpressCraft.SearchLookupForm", {
        inherits: [ExpressCraft.FormPopup],
        fields: {
            SearchInput: null,
            FocusedRow: null,
            View: null,
            SearchEdit: null,
            btnSearch: null,
            btnClose: null,
            btnNew: null,
            btnUse: null,
            btnClear: null
        },
        ctors: {
            ctor: function (searchInput) {
                var $t;
                this.$initialize();
                ExpressCraft.FormPopup.ctor.call(this);
                if (searchInput.Content.parentElement != null && searchInput.Content.parentElement.parentElement != null) {
                    this.PreviousScrollTop = searchInput.Content.parentElement.parentElement.scrollTop;
                    this.ParentContainer = searchInput.Content.parentElement.parentElement;
                }
                var x = searchInput.Content.getBoundingClientRect();

                this.MinHeight = 100;
                this.MinWidth = 150;

                var wid = searchInput.GetDropdownWidth();
                if (wid < 150) {
                    wid = 150;
                }

                this.Size = new ExpressCraft.Vector2.$ctor1(wid, 250);

                this.AllowSizeChange = true;

                this.SearchInput = searchInput;

                var frag = document.createDocumentFragment();

                ExpressCraft.Helper.AppendChildren$1(frag, [(this.SearchEdit = ($t = new ExpressCraft.TextInput.ctor(), $t.Text = searchInput.ClearOnOpen() ? "" : this.SearchInput.Text, $t.OnFocusDontSelectAll = true, $t.DisableFocusPopup = true, $t.Bounds = new ExpressCraft.Vector4.$ctor1(4, 4, "(100% - 68px)", 20), $t.ToolTip = new ExpressCraft.ToolTip.$ctor1("Help:", "[Enter] to Search, [CTRL] + [Enter] to Search and Use, [ESC] to close"), $t)), (this.btnSearch = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "Search", $t.Bounds = new ExpressCraft.Vector4.$ctor1("(100% - 65px)", 4, 61, 20), $t.ItemClick = Bridge.fn.bind(this, function (s) {
                    this.SearchInput.OnRequestSearch(this.SearchEdit.Text, this.View);
                }), $t)), (this.View = ($t = new ExpressCraft.GridView.$ctor1(true, true), $t.AllowMultiSelection = false, $t.UseEditForm = false, $t.Bounds = new ExpressCraft.Vector4.$ctor1(4, 28, "(100% - 10px)", "(100% - 60px)"), $t)), (this.btnClose = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "&times;", $t.Bounds = new ExpressCraft.Vector4.$ctor1(4, "(100% - 25px)", 20, 20), $t.ItemClick = Bridge.fn.bind(this, function (s) {
                    this.Close();
                }), $t)), (this.btnNew = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "New", $t.Bounds = new ExpressCraft.Vector4.$ctor1("(100% - 65px)", "(100% - 25px)", 61, 20), $t.ItemClick = Bridge.fn.bind(this, function (s) {
                    this.SearchInput.OnRequestNew(this.View);
                }), $t)), (this.btnUse = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "Use", $t.Bounds = new ExpressCraft.Vector4.$ctor1("(100% - 132px)", "(100% - 25px)", 61, 20), $t.ItemClick = Bridge.fn.bind(this, function (s) {
                    if (this.View.FocusedDataHandle === -1 && this.View.RowCount() > 0) {
                        this.View.FocusedDataHandle = 0;
                    }
                    if (this.FocusedRow != null) {
                        this.SearchInput.OnAcceptResult(this.FocusedRow);
                        this.Close();
                    }
                }), $t)), (this.btnClear = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "Clear", $t.Bounds = new ExpressCraft.Vector4.$ctor1("(100% - 199px)", "(100% - 25px)", 61, 20), $t.ItemClick = Bridge.fn.bind(this, function (s) {
                    this.FocusedRow = null;
                    this.SearchInput.OnAcceptResult(this.FocusedRow);
                    this.Close();
                }), $t))]);

                this.btnClose.Style.color = "red";

                if (ExpressCraft.Helper.NotDesktop) {
                    this.SearchEdit.Style.fontSize = "14px";
                    this.SearchEdit.Height = "45px";

                    this.btnSearch.Style.fontSize = "14px";
                    this.btnSearch.Height = 45;

                    this.View.Top = 55;
                    this.View.Height = "(100% - 112px)";

                    this.btnClear.Style.fontSize = "14px";
                    this.btnClear.Height = 45;
                    this.btnClear.Top = "(100% - 51px)";

                    this.btnUse.Style.fontSize = "14px";
                    this.btnUse.Height = 45;
                    this.btnUse.Top = "(100% - 51px)";

                    this.btnNew.Style.fontSize = "14px";
                    this.btnNew.Height = 45;
                    this.btnNew.Top = "(100% - 51px)";

                    this.btnClose.Style.fontSize = "26px";
                    this.btnClose.Style.fontWeight = "bold";
                    this.btnClose.Height = 45;
                    this.btnClose.Width = 61;
                    this.btnClose.Top = "(100% - 51px)";
                }

                this.SearchEdit.OnKeyDown = Bridge.fn.bind(this, function (obj, ev) {
                    if (ev.keyCode === 9) {
                        this.Close();
                        ev.preventDefault();
                    } else if (ev.keyCode === 13) {
                        this.SearchInput.OnRequestSearch(this.SearchEdit.Text, this.View);
                        if (ev.ctrlKey) {
                            this.btnUse.Content.click();
                        }
                        ev.preventDefault();
                    } else if (ev.keyCode === 27) {
                        this.FocusedRow = null;
                        this.Close();
                        ev.preventDefault();
                    }
                });

                this.View.OnFocusedRowChanged = Bridge.fn.bind(this, function (row, col) {
                    if (this.View.FocusedDataHandle > -1) {
                        this.FocusedRow = this.View.DataSource.getItem(this.View.GetDataSourceRow(this.View.FocusedDataHandle));
                    } else {
                        this.FocusedRow = null;
                    }
                    this.SearchInput.OnAcceptResult(this.FocusedRow);

                    if (this.SearchInput.FocusedChangeCloseForm) {
                        this.Close();
                    }
                });

                this.View.OnRowDoubleClick = Bridge.fn.bind(this, function (row) {
                    if (this.View.FocusedDataHandle > -1) {
                        this.FocusedRow = this.View.DataSource.getItem(this.View.GetDataSourceRow(this.View.FocusedDataHandle));
                    } else {
                        this.FocusedRow = null;
                    }
                    this.SearchInput.OnAcceptResult(this.FocusedRow);
                    this.Close();
                });

                ExpressCraft.Helper.AppendChild$2(this.Body, frag);

                this.SearchEdit.OnGotFocus = Bridge.fn.bind(this, function (obj) {
                    if (!System.String.isNullOrWhiteSpace(this.SearchEdit.Text)) {
                        this.SearchEdit.GetInput().selectionStart = (this.SearchEdit.Text.length) >>> 0;
                    }
                });

                this.LinkchildToForm(this.View);
            }
        },
        methods: {
            OnShowed: function () {
                ExpressCraft.FormPopup.prototype.OnShowed.call(this);

                this.SearchEdit.Focus();

                if (this.SearchInput.SearchOnLoad()) {
                    this.btnSearch.Content.click();
                }
            },
            OnClosed: function () {
                ExpressCraft.FormPopup.prototype.OnClosed.call(this);

                this.SearchInput.OnClosed(this.FocusedRow);
                this.SearchInput.ValidateData();
                if (!ExpressCraft.Helper.NotDesktop) {
                    this.SearchInput.GetInput().focus();
                } else {
                    this.SearchInput.Scroll(Bridge.Int.clip32(this.PreviousScrollTop), this.ParentContainer);
                }
            }
        }
    });

    Bridge.define("ExpressCraft.TextForm", {
        inherits: [ExpressCraft.FormPopup],
        fields: {
            ReadInput: null,
            EditInput: null,
            btnDone: null
        },
        ctors: {
            ctor: function (input) {
                var $t;
                this.$initialize();
                ExpressCraft.FormPopup.ctor.call(this);
                if (input.Content.parentElement != null && input.Content.parentElement.parentElement != null) {
                    this.PreviousScrollTop = input.Content.parentElement.parentElement.scrollTop;
                    this.ParentContainer = input.Content.parentElement.parentElement;
                }

                this.WindowState = ExpressCraft.WindowStateType.Maximized;

                this.ReadInput = input;

                if (Bridge.is(this.ReadInput, ExpressCraft.MemoInput)) {
                    this.EditInput = new ExpressCraft.MemoInput();
                } else {
                    this.EditInput = ($t = new ExpressCraft.TextInput.$ctor2(input.Type), $t.DisplayFormat = this.ReadInput.DisplayFormat, $t);
                    this.EditInput.OnKeyDown = Bridge.fn.bind(this, function (s, ev) {
                        if (ev.keyCode === 13) {
                            this.btnDone.Content.click();
                        }
                    });
                }

                this.EditInput.Text = input.Text;
                this.EditInput.Style.fontSize = "14px";

                this.EditInput.DisableFocusPopup = true;
                this.EditInput.Size = new ExpressCraft.Vector2.$ctor1("(100% - 112px)", "100%");
                this.EditInput.Location = new ExpressCraft.Vector2.$ctor1(0, 0);

                this.btnDone = ($t = new ExpressCraft.SimpleButton.ctor(), $t.Text = "&times;", $t.Bounds = new ExpressCraft.Vector4.$ctor1("(100% - 106px)", "(50% - 22.5px)", 100, 45), $t.ItemClick = Bridge.fn.bind(this, function (sender) {
                    this.Close();
                    if (!Bridge.referenceEquals(this.EditInput.GetEditValue(), this.ReadInput.GetEditValue())) {
                        this.ReadInput.Text = this.EditInput.Text;

                        if (this.ReadInput.IsSubmit) {
                            var jQuery2 = jQuery;
                            var e = jQuery2.Event("keypress");
                            e.which = 13;
                            e.keyCode = 13;
                            var obj = jQuery(this.ReadInput.Content);
                            obj.trigger(e);
                        } else if (this.ReadInput.GoNext) {
                            var x = document.querySelectorAll("input, textarea, button");
                            var tabPlus1 = (this.ReadInput.Content.tabIndex + 1) | 0;
                            for (var i = 0; i < x.length; i = (i + 1) | 0) {
                                if (x[i].tabIndex === tabPlus1) {
                                    ExpressCraft.Helper.FocusElement(x[i]);
                                    break;
                                }
                            }
                        }
                    }
                }), $t);

                this.btnDone.Style.borderRadius = "4px";
                this.btnDone.ClassList.add("primary");
                this.btnDone.Style.borderWidth = "0";

                this.btnDone.Text = "&times;";
                this.btnDone.Style.fontSize = "26px";
                this.btnDone.Style.color = "white";
                this.btnDone.Style.fontWeight = "bold";

                this.EditInput.OnTextChanged = Bridge.fn.bind(this, function (sender) {
                    if (Bridge.referenceEquals(this.EditInput.GetEditValue(), this.ReadInput.GetEditValue())) {
                        this.btnDone.Text = "&times;";
                        this.btnDone.Style.fontSize = "26px";
                        this.btnDone.Style.fontWeight = "bold";
                    } else {
                        this.btnDone.Text = this.ReadInput.IsSubmit ? "Submit" : this.ReadInput.GoNext ? "Next" : "Done";
                        this.btnDone.Style.fontSize = "14px";
                        this.btnDone.Style.fontWeight = "";
                    }
                });

                this.AppendChildren([this.EditInput, this.btnDone]);
            }
        },
        methods: {
            OnShowed: function () {
                ExpressCraft.FormPopup.prototype.OnShowed.call(this);

                var dataP = this.ReadInput.GetAttribute("data-placeholder");
                if (!System.String.isNullOrWhiteSpace(dataP)) {
                    this.EditInput.SetAttribute("placeholder", dataP);
                } else {
                    if (!System.String.isNullOrWhiteSpace(this.ReadInput.GetAttribute("placeholder"))) {
                        this.EditInput.SetAttribute("placeholder", this.ReadInput.GetAttribute("placeholder"));
                    }
                }

                this.EditInput.Focus();
            },
            OnClosed: function () {
                this.ReadInput.Scroll(Bridge.Int.clip32(this.PreviousScrollTop), this.ParentContainer);
                this.ReadInput.ValidateData();
                ExpressCraft.FormPopup.prototype.OnClosed.call(this);
            }
        }
    });

    Bridge.define("ExpressCraft.InputDialogCheckbox", {
        inherits: [ExpressCraft.InputDialogBase],
        fields: {
            Result: false
        },
        ctors: {
            /**
             * Creates a Question Dialog with a checkbox
                 The Result Property contains a boolean value of the checkbox state
             *
             * @instance
             * @public
             * @this ExpressCraft.InputDialogCheckbox
             * @memberof ExpressCraft.InputDialogCheckbox
             * @param   {string}    title       The message that will appear in the title bar of the dialog
             * @param   {string}    question    The message that will appear about the input box on the dialog
             * @return  {void}
             */
            ctor: function (title, question) {
                ExpressCraft.InputDialogCheckbox.$ctor1.call(this, title, question, 360);
            },
            /**
             * Creates a Question Dialog with a checkbox
                 The Result Property contains a boolean value of the checkbox state
             *
             * @instance
             * @public
             * @this ExpressCraft.InputDialogCheckbox
             * @memberof ExpressCraft.InputDialogCheckbox
             * @param   {string}    title       The message that will appear in the title bar of the dialog
             * @param   {string}    question    The message that will appear about the input box on the dialog
             * @param   {number}    size        The width of this dialog. The default size is 360
             * @return  {void}
             */
            $ctor1: function (title, question, size) {
                this.$initialize();
                ExpressCraft.InputDialogBase.ctor.call(this, title, size, question);
                var input = ExpressCraft.Control.Input("inputcontrol", "checkbox");
                input.id = "DialogAnswerBox";
                ExpressCraft.Helper.SetBounds$1(input, "10px", "0px", "90%", "40px");
                input.onchange = Bridge.fn.bind(this, function (ev) {
                    this.Result = input.checked;
                });
                ExpressCraft.Helper.AppendChild$2(this.AnswerDiv, input);
                this.Create(((((((this.QuestionSize + 40) | 0) + 25) | 0) + 78) | 0));
            }
        }
    });

    Bridge.define("ExpressCraft.InputDialogColour", {
        inherits: [ExpressCraft.InputDialogBase],
        fields: {
            Result: null
        },
        ctors: {
            /**
             * Creates a Question Dialog with a colour selector
                 The Result Property contains the HexCode for the selected colour
             *
             * @instance
             * @public
             * @this ExpressCraft.InputDialogColour
             * @memberof ExpressCraft.InputDialogColour
             * @param   {string}    title       The message that will appear in the title bar of the dialog
             * @param   {string}    question    The message that will appear about the input box on the dialog
             * @return  {void}
             */
            ctor: function (title, question) {
                ExpressCraft.InputDialogColour.$ctor1.call(this, title, question, 360);
            },
            /**
             * Creates a Question Dialog with a colour selector
                 The Result Property contains the HexCode for the selected colour
             *
             * @instance
             * @public
             * @this ExpressCraft.InputDialogColour
             * @memberof ExpressCraft.InputDialogColour
             * @param   {string}    title       The message that will appear in the title bar of the dialog
             * @param   {string}    question    The message that will appear about the input box on the dialog
             * @param   {number}    size        The width of this dialog. The default size is 360
             * @return  {void}
             */
            $ctor1: function (title, question, size) {
                this.$initialize();
                ExpressCraft.InputDialogBase.ctor.call(this, title, size, question);
                var input = ExpressCraft.Control.Input("inputcontrol", "color");
                input.id = "DialogAnswerBox";
                ExpressCraft.Helper.SetBounds$1(input, "10px", "0px", "90%", "40px");
                input.onchange = Bridge.fn.bind(this, function (ev) {
                    this.Result = input.value;
                });
                ExpressCraft.Helper.AppendChild$2(this.AnswerDiv, input);
                this.Create(((((((this.QuestionSize + 40) | 0) + 25) | 0) + 78) | 0));
            }
        }
    });

    Bridge.define("ExpressCraft.InputDialogDate", {
        inherits: [ExpressCraft.InputDialogBase],
        fields: {
            Result: null
        },
        ctors: {
            /**
             * Creates a Question Dialog with a Date Selector
                 The Result Property contains the selected Date
             *
             * @instance
             * @public
             * @this ExpressCraft.InputDialogDate
             * @memberof ExpressCraft.InputDialogDate
             * @param   {string}    title       The message that will appear in the title bar of the dialog
             * @param   {string}    question    The message that will appear about the input box on the dialog
             * @return  {void}
             */
            ctor: function (title, question) {
                ExpressCraft.InputDialogDate.$ctor1.call(this, title, question, 360);
            },
            /**
             * Creates a Question Dialog with a Date Selector
                 The Result Property contains the selected Date
             *
             * @instance
             * @public
             * @this ExpressCraft.InputDialogDate
             * @memberof ExpressCraft.InputDialogDate
             * @param   {string}    title       The message that will appear in the title bar of the dialog
             * @param   {string}    question    The message that will appear about the input box on the dialog
             * @param   {number}    size        The width of this dialog. The default size is 360
             * @return  {void}
             */
            $ctor1: function (title, question, size) {
                this.$initialize();
                ExpressCraft.InputDialogBase.ctor.call(this, title, size, question);
                var input = ExpressCraft.Control.Input("inputcontrol", "date");
                input.id = "DialogAnswerBox";
                ExpressCraft.Helper.SetBounds$1(input, "10px", "0px", "90%", "auto");
                input.onchange = Bridge.fn.bind(this, function (ev) {
                    this.Result = input.value;
                });
                ExpressCraft.Helper.AppendChild$2(this.AnswerDiv, input);
                this.Create(((((((this.QuestionSize + 25) | 0) + 25) | 0) + 78) | 0));
            }
        }
    });

    Bridge.define("ExpressCraft.InputDialogDateTimeLocal", {
        inherits: [ExpressCraft.InputDialogBase],
        fields: {
            Result: null
        },
        ctors: {
            init: function () {
                this.Result = System.DateTime.getDefaultValue();
            },
            /**
             * Creates a Question Dialog with a Date Selector
                 The Result Property contains the selected Date
             *
             * @instance
             * @public
             * @this ExpressCraft.InputDialogDateTimeLocal
             * @memberof ExpressCraft.InputDialogDateTimeLocal
             * @param   {string}    title       The message that will appear in the title bar of the dialog
             * @param   {string}    question    The message that will appear about the input box on the dialog
             * @return  {void}
             */
            ctor: function (title, question) {
                ExpressCraft.InputDialogDateTimeLocal.$ctor1.call(this, title, question, 360);
            },
            /**
             * Creates a Question Dialog with a Date Selector
                 The Result Property contains the selected Date
             *
             * @instance
             * @public
             * @this ExpressCraft.InputDialogDateTimeLocal
             * @memberof ExpressCraft.InputDialogDateTimeLocal
             * @param   {string}    title       The message that will appear in the title bar of the dialog
             * @param   {string}    question    The message that will appear about the input box on the dialog
             * @param   {number}    size        The width of this dialog. The default size is 360
             * @return  {void}
             */
            $ctor1: function (title, question, size) {
                this.$initialize();
                ExpressCraft.InputDialogBase.ctor.call(this, title, size, question);
                this.Result = System.DateTime.getNow();
                var input = ExpressCraft.Control.Input("inputcontrol", "dateTimeLocal");
                input.id = "DialogAnswerBox";
                ExpressCraft.Helper.SetBounds$1(input, "10px", "0px", "90%", "auto");
                input.onchange = Bridge.fn.bind(this, function (ev) {
                    this.Result = System.DateTime.parseExact(input.value, "yyyy-MM-ddTHH:mm", System.Globalization.CultureInfo.invariantCulture);
                });
                ExpressCraft.Helper.AppendChild$2(this.AnswerDiv, input);
                this.Create(((((((this.QuestionSize + 25) | 0) + 25) | 0) + 78) | 0));
            }
        }
    });

    Bridge.define("ExpressCraft.InputDialogEmail", {
        inherits: [ExpressCraft.InputDialogBase],
        fields: {
            Result: null
        },
        ctors: {
            /**
             * Creates a Question Dialog with an email input
                 The Result Property contains the Entered email address
             *
             * @instance
             * @public
             * @this ExpressCraft.InputDialogEmail
             * @memberof ExpressCraft.InputDialogEmail
             * @param   {string}    title       The message that will appear in the title bar of the dialog
             * @param   {string}    question    The message that will appear about the input box on the dialog
             * @return  {void}
             */
            ctor: function (title, question) {
                ExpressCraft.InputDialogEmail.$ctor1.call(this, title, question, 360);
            },
            /**
             * Creates a Question Dialog with an email input
                 The Result Property contains the Entered email
             *
             * @instance
             * @public
             * @this ExpressCraft.InputDialogEmail
             * @memberof ExpressCraft.InputDialogEmail
             * @param   {string}    title       The message that will appear in the title bar of the dialog
             * @param   {string}    question    The message that will appear about the input box on the dialog
             * @param   {number}    size        The width of this dialog. The default size is 360
             * @return  {void}
             */
            $ctor1: function (title, question, size) {
                this.$initialize();
                ExpressCraft.InputDialogBase.ctor.call(this, title, size, question);
                var input = ExpressCraft.Control.Input("inputcontrol", "email");
                input.id = "DialogAnswerBox";
                ExpressCraft.Helper.SetBounds$1(input, "10px", "0px", "90%", "auto");
                input.onchange = Bridge.fn.bind(this, function (ev) {
                    this.Result = input.value;
                });
                ExpressCraft.Helper.AppendChild$2(this.AnswerDiv, input);
                this.Create(((((((this.QuestionSize + 25) | 0) + 25) | 0) + 78) | 0));
            }
        }
    });

    Bridge.define("ExpressCraft.InputDialogMonth", {
        inherits: [ExpressCraft.InputDialogBase],
        fields: {
            Result: null
        },
        ctors: {
            /**
             * Creates a Question Dialog with a Month input
                 The Result Property contains the Entered Month
             *
             * @instance
             * @public
             * @this ExpressCraft.InputDialogMonth
             * @memberof ExpressCraft.InputDialogMonth
             * @param   {string}    title       The message that will appear in the title bar of the dialog
             * @param   {string}    question    The message that will appear about the input box on the dialog
             * @return  {void}
             */
            ctor: function (title, question) {
                ExpressCraft.InputDialogMonth.$ctor1.call(this, title, question, 360);
            },
            /**
             * Creates a Question Dialog with a Month input
                 The Result Property contains the Entered Month
             *
             * @instance
             * @public
             * @this ExpressCraft.InputDialogMonth
             * @memberof ExpressCraft.InputDialogMonth
             * @param   {string}    title       The message that will appear in the title bar of the dialog
             * @param   {string}    question    The message that will appear about the input box on the dialog
             * @param   {number}    size        The width of this dialog. The default size is 360
             * @return  {void}
             */
            $ctor1: function (title, question, size) {
                this.$initialize();
                ExpressCraft.InputDialogBase.ctor.call(this, title, size, question);
                var input = ExpressCraft.Control.Input("inputcontrol", "month");
                input.id = "DialogAnswerBox";
                ExpressCraft.Helper.SetBounds$1(input, "10px", "0px", "90%", "auto");
                input.onchange = Bridge.fn.bind(this, function (ev) {
                    this.Result = input.value;
                });
                ExpressCraft.Helper.AppendChild$2(this.AnswerDiv, input);
                this.Create(((((((this.QuestionSize + 25) | 0) + 25) | 0) + 78) | 0));
            }
        }
    });

    Bridge.define("ExpressCraft.InputDialogNumber", {
        inherits: [ExpressCraft.InputDialogBase],
        fields: {
            Result: 0
        },
        ctors: {
            /**
             * Creates a Question Dialog with a Number Selector
                 The Result Property contains the selected value
             *
             * @instance
             * @public
             * @this ExpressCraft.InputDialogNumber
             * @memberof ExpressCraft.InputDialogNumber
             * @param   {string}    title       The message that will appear in the title bar of the dialog
             * @param   {string}    question    The message that will appear about the input box on the dialog
             * @return  {void}
             */
            ctor: function (title, question) {
                ExpressCraft.InputDialogNumber.$ctor1.call(this, title, question, 360);
            },
            /**
             * Creates a Question Dialog with a Number Selector
                 The Result Property contains the selected value
             *
             * @instance
             * @public
             * @this ExpressCraft.InputDialogNumber
             * @memberof ExpressCraft.InputDialogNumber
             * @param   {string}    title       The message that will appear in the title bar of the dialog
             * @param   {string}    question    The message that will appear about the input box on the dialog
             * @param   {number}    size        The width of this dialog. The default size is 360
             * @return  {void}
             */
            $ctor1: function (title, question, size) {
                this.$initialize();
                ExpressCraft.InputDialogBase.ctor.call(this, title, size, question);
                var input = ExpressCraft.Control.Input("inputcontrol", "number");
                input.id = "DialogAnswerBox";
                ExpressCraft.Helper.SetBounds$1(input, "10px", "0px", "90%", "auto");
                input.onchange = Bridge.fn.bind(this, function (ev) {
                    this.Result = input.valueAsNumber;
                });
                ExpressCraft.Helper.AppendChild$2(this.AnswerDiv, input);
                this.Create(((((((this.QuestionSize + 25) | 0) + 25) | 0) + 78) | 0));
            }
        }
    });

    Bridge.define("ExpressCraft.InputDialogText", {
        inherits: [ExpressCraft.InputDialogBase],
        fields: {
            Result: null
        },
        ctors: {
            /**
             * Creates a Question Dialog with a Text input
                 The Result Property contains the Entered Text
             *
             * @instance
             * @public
             * @this ExpressCraft.InputDialogText
             * @memberof ExpressCraft.InputDialogText
             * @param   {string}    title       The message that will appear in the title bar of the dialog
             * @param   {string}    question    The message that will appear about the input box on the dialog
             * @return  {void}
             */
            ctor: function (title, question) {
                ExpressCraft.InputDialogText.$ctor1.call(this, title, question, 360);
            },
            /**
             * Creates a Question Dialog with a Text input
                 The Result Property contains the Entered Text
             *
             * @instance
             * @public
             * @this ExpressCraft.InputDialogText
             * @memberof ExpressCraft.InputDialogText
             * @param   {string}    title       The message that will appear in the title bar of the dialog
             * @param   {string}    question    The message that will appear about the input box on the dialog
             * @param   {number}    size        The width of this dialog. The default size is 360
             * @return  {void}
             */
            $ctor1: function (title, question, size) {
                this.$initialize();
                ExpressCraft.InputDialogBase.ctor.call(this, title, size, question);
                var input = ExpressCraft.Control.Input("inputcontrol", "text");
                input.id = "DialogAnswerBox";
                ExpressCraft.Helper.SetBounds$1(input, "10px", "0px", "90%", "auto");
                input.onchange = Bridge.fn.bind(this, function (ev) {
                    this.Result = input.value;
                });
                ExpressCraft.Helper.AppendChild$2(this.AnswerDiv, input);
                this.Create(((((((this.QuestionSize + 25) | 0) + 25) | 0) + 78) | 0));
            }
        }
    });

    Bridge.define("ExpressCraft.InputDialogWeek", {
        inherits: [ExpressCraft.InputDialogBase],
        fields: {
            Result: null
        },
        ctors: {
            /**
             * Creates a Question Dialog with a Week input
                 The Result Property contains the Entered week
             *
             * @instance
             * @public
             * @this ExpressCraft.InputDialogWeek
             * @memberof ExpressCraft.InputDialogWeek
             * @param   {string}    title       The message that will appear in the title bar of the dialog
             * @param   {string}    question    The message that will appear about the input box on the dialog
             * @return  {void}
             */
            ctor: function (title, question) {
                ExpressCraft.InputDialogWeek.$ctor1.call(this, title, question, 360);
            },
            /**
             * Creates a Question Dialog with a Week input
                 The Result Property contains the Entered Week
             *
             * @instance
             * @public
             * @this ExpressCraft.InputDialogWeek
             * @memberof ExpressCraft.InputDialogWeek
             * @param   {string}    title       The message that will appear in the title bar of the dialog
             * @param   {string}    question    The message that will appear about the input box on the dialog
             * @param   {number}    size        The width of this dialog. The default size is 360
             * @return  {void}
             */
            $ctor1: function (title, question, size) {
                this.$initialize();
                ExpressCraft.InputDialogBase.ctor.call(this, title, size, question);
                var input = ExpressCraft.Control.Input("inputcontrol", "week");
                input.id = "DialogAnswerBox";
                ExpressCraft.Helper.SetBounds$1(input, "10px", "0px", "90%", "auto");
                input.onchange = Bridge.fn.bind(this, function (ev) {
                    this.Result = input.value;
                });
                ExpressCraft.Helper.AppendChild$2(this.AnswerDiv, input);
                this.Create(((((((this.QuestionSize + 25) | 0) + 25) | 0) + 78) | 0));
            }
        }
    });
});

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICJFeHByZXNzQ3JhZnQuanMiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbImNvbnRyb2xzL0NvbnRyb2wuY3MiLCJBcHAuY3MiLCJ1dGlscy9BcHBsaWNhdGlvbi5jcyIsInV0aWxzL0JhcmNvZGVRdWFnZ2FKUy5jcyIsInV0aWxzL0NvbG9yLmNzIiwiY29udHJvbHMvQ29udGV4dE1lbnUuY3MiLCJ1dGlscy9EYXRhVGFibGUuY3MiLCJjb250cm9scy9Db21ib0JveEVkaXQuY3MiLCJmb3Jtcy9EaWFsb2dSZXN1bHQuY3MiLCJ1dGlscy9FeHRlcm5hbFBsdWdpbi5jcyIsInV0aWxzL0ZpcmViYXNlLmNzIiwiY29tcG9uZW50cy9Gb250LmNzIiwiZm9ybXMvRm9ybUNvbGxlY3Rpb24uY3MiLCJ1dGlscy9HbWFpbC5jcyIsInV0aWxzL0dvb2dsZUNsb3VkUHJpbnQuY3MiLCJjb21wb25lbnRzL0dyYXBoaWNzLmNzIiwiZ3JpZC9HcmlkVmlld0NlbGxBcHBhcmVuY2UuY3MiLCJncmlkL0dyaWRWaWV3Q2VsbERpc3BsYXkuY3MiLCJncmlkL0dyaWRWaWV3Q29sdW1uLmNzIiwidXRpbHMvSGFyZFNvZnRMaXN0LmNzIiwidXRpbHMvSGVscGVyLmNzIiwidXRpbHMvS2V5Q29kZXMuY3MiLCJjb21wb25lbnRzL0xheW91dENvbnRhaW5lci5jcyIsInV0aWxzL05ldHdvcmsuY3MiLCJjb21wb25lbnRzL1Blbi5jcyIsInV0aWxzL1Jlc291cmNlTWFuYWdlci5jcyIsInV0aWxzL1NldHRpbmdzLmNzIiwic2hlZXQvU2hlZXRDZWxsLmNzIiwic2hlZXQvU2hlZXRDb2x1bW4uY3MiLCJzaGVldC9TaGVldFJvdy5jcyIsImNvbXBvbmVudHMvU2l6ZUYuY3MiLCJ1dGlscy9UZXh0QmxvY2suY3MiLCJjb250cm9scy9Ub29sVGlwQ29udHJvbC5jcyIsInV0aWxzL1ZlY3RvcjIuY3MiLCJ1dGlscy9WZWN0b3I0LmNzIiwieGFtbC9YQU1MRGVmaW5pdGlvbnMuY3MiLCJjb250cm9scy9BY2VDb2RlRWRpdG9yLmNzIiwiZm9ybXMvRm9ybS5jcyIsImNvbnRyb2xzL0NhbGN1bGF0b3JDb250cm9sLmNzIiwiY29udHJvbHMvQ2FudmFzQ29udHJvbC5jcyIsImNvbnRyb2xzL0NoZWNrRWRpdC5jcyIsImNvbnRyb2xzL1RleHRJbnB1dC5jcyIsImNvbnRyb2xzL0RhdGVDb250cm9sLmNzIiwiY29udHJvbHMvU2ltcGxlQnV0dG9uLmNzIiwiY29udHJvbHMvR3JpZExvb2t1cEVkaXQuY3MiLCJncmlkL0dyaWRWaWV3LmNzIiwiZ3JpZC9HcmlkVmlld0NlbGxEaXNwbGF5Q2hlY2tCb3guY3MiLCJncmlkL0dyaWRWaWV3Q2VsbERpc3BsYXlJbWFnZS5jcyIsImNvbnRyb2xzL0dyb3VwUGFuZWwuY3MiLCJjb250cm9scy9JbWFnZUVkaXQuY3MiLCJjb250cm9scy9QcmludGVyQ29udHJvbC5jcyIsImNvbnRyb2xzL1Byb2dyZXNzQ29udHJvbC5jcyIsImNvbnRyb2xzL1JhZGlvRWRpdC5jcyIsImNvbnRyb2xzL1JpYmJvbkl0ZW0uY3MiLCJjb250cm9scy9SaWJib25Db250cm9sLmNzIiwiY29udHJvbHMvUmliYm9uR3JvdXAuY3MiLCJjb250cm9scy9SaWJib25QYWdlLmNzIiwiY29tcG9uZW50cy9Tb2xpZEJydXNoLmNzIiwiY29udHJvbHMvU3BsaXRDb250cm9sQ29udGFpbmVyLmNzIiwiY29udHJvbHMvU3BsaXRIaWRlQ29udHJvbENvbnRhaW5lci5jcyIsImNvbnRyb2xzL1N0YWNrTGlzdC5jcyIsImNvbXBvbmVudHMvU3R5bGVCcnVzaC5jcyIsImNvbnRyb2xzL1RhYkNvbnRyb2wuY3MiLCJjb250cm9scy9UYWJDb250cm9sUGFnZS5jcyIsImNvbnRyb2xzL1RpbGVDb250cm9sLmNzIiwiZm9ybXMvRm9ybVBvcHVwLmNzIiwiZm9ybXMvQ29uc29sZUZvcm0uY3MiLCJmb3Jtcy9EaWFsb2dGb3JtLmNzIiwiY29udHJvbHMvVGV4dElucHV0RHJvcERvd24uY3MiLCJjb250cm9scy9EcmF3aW5nQ29udHJvbC5jcyIsImNvbnRyb2xzL0Ryb3BEb3duQnV0dG9uLmNzIiwiY29udHJvbHMvTWVtb0lucHV0LmNzIiwiZm9ybXMvUGRmUHJldmlld0Zvcm0uY3MiLCJmb3Jtcy9QcmludGluZ1ByZXZpZXdGb3JtLmNzIiwiY29udHJvbHMvUmliYm9uQnV0dG9uLmNzIiwiY29udHJvbHMvUmliYm9uRWRpdEl0ZW0uY3MiLCJzaGVldC9TaGVldC5jcyIsImNvbnRyb2xzL1NpbXBsZURpYWxvZ0J1dHRvbi5jcyIsInhhbWwvQ29udGVudFBhZ2UuY3MiLCJmb3Jtcy9wb3B1cGZvcm1zL0NhbGNGb3JtLmNzIiwiZm9ybXMvRGF0YVJvd0VkaXRGb3JtLmNzIiwiZm9ybXMvcG9wdXBmb3Jtcy9EYXRlRm9ybS5jcyIsImNvbnRyb2xzL0RhdGVJbnB1dC5jcyIsImZvcm1zL0lucHV0RGlhbG9nLmNzIiwiZm9ybXMvTWVzc2FnZUJveEZvcm0uY3MiLCJjb250cm9scy9OdW1iZXJJbnB1dC5jcyIsImNvbnRyb2xzL1NlYXJjaElucHV0LmNzIiwiZm9ybXMvcG9wdXBmb3Jtcy9TZWFyY2hMb29rdXBGb3JtLmNzIiwiZm9ybXMvcG9wdXBmb3Jtcy9UZXh0Rm9ybS5jcyJdLAogICJuYW1lcyI6IFsiIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7OztxQkFrZ0IyREE7Ozs7Ozs7O3FDQXhYcEJBLEtBQWlCQTs7O29CQUU1Q0EsT0FBT0EsS0FBS0EsQ0FBQ0EsTUFBTUEsYUFDZkE7OzBDQW9JNEJBO29CQUVoQ0EsT0FBT0Esb0VBQTREQTs7d0NBR3JDQTtvQkFFOUJBLE9BQU9BLHlEQUFpREE7OzZDQUdyQkEsR0FBVUE7O29CQUU3Q0EsT0FBT0EsZ0RBQXlDQSxpQkFBaUJBLHdDQUEyQkE7OytCQWlDbkRBOzs7b0JBRXpDQSxPQUFPQSxvREFBK0NBLHNDQUFpQkE7O2lDQTBLOUJBLElBQVdBOzs7b0JBRXBEQSxPQUFPQSxvREFBK0NBLGNBQUtBLHFDQUFnQkE7O2dDQXpLaENBOzs7b0JBRTNDQSxPQUFPQSxxREFBZ0RBLHNDQUFpQkE7O2tDQWtKN0JBLElBQVdBOzs7b0JBRXREQSxPQUFPQSxxREFBZ0RBLGNBQUtBLHFDQUFnQkE7O21DQWpKaENBLFNBQWdCQSxHQUFTQSxHQUFTQSxRQUFxQkEsUUFBcUJBOzs7OztvQkFFeEhBLFVBQVVBLHFEQUFnREEsc0NBQWlCQTs7b0JBRTNFQSxnQkFBZ0JBO29CQUNoQkEsdUNBQWdCQSxHQUFHQTtvQkFDbkJBLDJCQUFNQSxLQUFLQSxRQUFRQTs7b0JBRW5CQSxPQUFPQTs7bUNBR3FDQSxTQUFnQkEsR0FBU0EsR0FBU0EsT0FBYUEsUUFBY0EsUUFBcUJBLFFBQXFCQSxRQUFvQkEsV0FBMkJBLFdBQXlCQTs7Ozs7Ozs7b0JBRTNOQSxVQUFVQSxxREFBZ0RBLGtCQUFTQSwrQkFBVUEsQ0FBQ0EsaUNBQTBCQSxTQUFTQTs7b0JBRWpIQSxnQkFBZ0JBO29CQUNoQkEscUNBQWNBLEdBQUdBLEdBQUdBLE9BQU9BO29CQUMzQkEsSUFBR0E7d0JBRUNBLHNCQUFzQkE7O29CQUUxQkEsMkJBQU1BLEtBQUtBLFFBQVFBO29CQUNuQkEsSUFBR0EsYUFBYUE7d0JBRVpBLGtCQUFrQkE7OztvQkFHdEJBLE9BQU9BOzttQ0F1Q3FDQSxTQUFnQkEsR0FBU0EsR0FBU0EsT0FBYUEsUUFBcUJBLFFBQXFCQSxRQUFvQkEsV0FBMkJBLFdBQXlCQTs7Ozs7OztvQkFFN01BLFVBQVVBO29CQUNWQSxnQkFBZ0JBLGtCQUFTQSwrQkFBVUEsQ0FBQ0EsaUNBQTBCQSxTQUFTQTtvQkFDdkVBLGtCQUFrQkE7b0JBQ2xCQSxpQkFBaUJBO29CQUNqQkEsZ0JBQWdCQTtvQkFDaEJBLGtCQUFrQkE7O29CQUVsQkEsSUFBR0E7d0JBRUNBLElBQUdBOzRCQUVDQTs7NEJBSUFBLHNCQUFzQkE7OztvQkFHOUJBLDJCQUFNQSxLQUFLQSxRQUFRQTtvQkFDbkJBLElBQUdBLGFBQWFBO3dCQUVaQSxrQkFBa0JBOzs7b0JBR3RCQSxPQUFPQTs7bUNBdUJxQ0EsR0FBVUEsR0FBU0EsR0FBU0EsT0FBYUEsUUFBY0EsUUFBcUJBLFFBQXFCQSxRQUFvQkE7Ozs7OztvQkFFaktBLFVBQVVBLHFEQUFnREEsa0JBQVNBLCtCQUFVQSxDQUFDQSxpQ0FBMEJBLFNBQVNBOztvQkFFakhBLGdCQUFnQkE7b0JBQ2hCQSxxQ0FBY0EsR0FBR0EsR0FBR0EsT0FBT0E7b0JBQzNCQSwyQkFBTUEsS0FBS0EsUUFBUUE7O29CQUVuQkEsT0FBT0E7O21DQUdxQ0EsR0FBVUEsR0FBT0EsR0FBT0EsT0FBV0EsUUFBcUJBLFFBQXFCQSxRQUFvQkE7Ozs7OztvQkFFN0lBLFVBQVVBLHFEQUFnREEsa0JBQVNBLCtCQUFVQSxDQUFDQSxpQ0FBMEJBLFNBQVNBOztvQkFFakhBLGdCQUFnQkE7b0JBQ2hCQSx1Q0FBZ0JBLEdBQUdBO29CQUNuQkEsa0JBQWtCQTtvQkFDbEJBLDJCQUFNQSxLQUFLQSxRQUFRQTs7b0JBRW5CQSxPQUFPQTs7aUNBR3FDQSxHQUFVQSxHQUFPQSxHQUFPQSxRQUFxQkEsUUFBcUJBOzs7O29CQUU5R0EsT0FBT0EsNkJBQU1BLEdBQUdBLEFBQU9BLEdBQUdBLEFBQU9BLEdBQUdBLFFBQVFBLFFBQVFBOztvQ0E5R05BLFNBQWdCQSxHQUFTQSxHQUFTQSxPQUFhQSxRQUFxQkEsUUFBcUJBLFFBQW9CQSxXQUEyQkEsV0FBeUJBOzs7Ozs7O29CQUUvTUEsVUFBVUE7b0JBQ1ZBLGdCQUFnQkEsa0JBQVNBLCtCQUFVQSxDQUFDQSxpQ0FBMEJBLFNBQVNBO29CQUN2RUEsa0JBQWtCQTtvQkFDbEJBLGlCQUFpQkE7b0JBQ2pCQSxnQkFBZ0JBO29CQUNoQkEsa0JBQWtCQTs7b0JBRWxCQSxJQUFHQTt3QkFFQ0EsSUFBR0E7NEJBRUNBOzs0QkFJQUEsc0JBQXNCQTs7O29CQUc5QkEsSUFBR0E7d0JBRUNBOztvQkFFSkEsSUFBR0E7d0JBRUNBOztvQkFFSkEsSUFBR0EsYUFBYUE7d0JBRVpBLGtCQUFrQkE7OztvQkFHdEJBLE9BQU9BOztpQ0F3Q2VBLEtBQWlDQSxRQUFhQTtvQkFFcEVBLElBQUdBO3dCQUVDQTs7b0JBRUpBLElBQUdBO3dCQUVDQTs7O29DQXFDNkNBLElBQVdBLElBQWtCQTs7O29CQUU5RUEsWUFBWUEsdURBQWtEQSxjQUFLQSxxQ0FBZ0JBO29CQUNuRkEsSUFBR0EsT0FBTUE7O29CQUdUQSxPQUFPQTs7a0NBR3dDQSxJQUFXQSxJQUFXQTs7O29CQUVyRUEsT0FBT0EsdURBQWtEQSxjQUFLQSxxQ0FBZ0JBLHNCQUFZQTs7aUNBUTdDQSxJQUFXQSxJQUFXQTs7b0JBRW5FQSxZQUFZQTtvQkFDWkEsa0JBQWtCQSxjQUFLQSwrQkFBVUEsQ0FBQ0EsaUNBQTBCQSxLQUFLQTtvQkFDakVBLFNBQWFBO29CQUNiQSxJQUFHQSx1QkFBZ0JBLENBQUNBLHNDQUFnQkEsc0NBQWdCQSx1Q0FBaUJBLGtDQUFZQSxpQ0FBV0E7d0JBRXhGQSxPQUFPQTs7b0JBRVhBLGFBQWFBOztvQkFFYkEsT0FBT0E7Ozs7Ozs7Ozs7Ozs7MENBZ0JvQ0EsR0FBVUE7O29CQUVyREEsSUFBR0E7d0JBRUNBOztvQkFFSkEsUUFBUUEsQ0FBQ0EsNEJBQU9BLENBQUNBLE1BQU1BLGtDQUFOQTtvQkFDakJBLFNBQVNBO29CQUNUQSxPQUFPQSxjQUFjQTs7Ozs7Ozs7Ozs7Ozt3Q0FTR0EsR0FBVUE7b0JBRWxDQSxPQUFPQSxvQ0FBZUEsR0FBR0E7O3VDQUdvQkE7b0JBRTdDQSxJQUFHQSxvQ0FBdUJBLENBQUNBO3dCQUN2QkE7O29CQUNKQSxPQUFPQTs7Ozs7Ozs7c0JBaGhCZ0JBO2tDQUM4QkE7a0NBQ0FBOztzQkEyRXZCQTtzQkFDQUE7eUJBRURBO3dCQW9DUkE7Ozs7O29CQXhHakJBLE9BQU9BOzs7b0JBSVBBLElBQUdBLHVDQUFZQTt3QkFFWEEsSUFBR0EsU0FBU0E7NEJBRVJBLElBQUdBLHlCQUF5QkEsUUFBUUEsK0NBQXlCQTtnQ0FFekRBLFFBQVFBOztnQ0FJUkEsd0JBQXdCQTs7O3dCQUdoQ0EsZ0JBQVdBOzt3QkFFWEEsSUFBR0EsaUJBQVlBLFFBQVFBLENBQUNBLENBQUNBLHNEQUE4QkEsQ0FBQ0E7NEJBRXBEQSw0QkFBdUJBLCtCQUFDQTtnQ0FFcEJBLElBQUdBLENBQUNBLENBQUNBO29DQUVEQSxrQ0FBcUJBOzs7NEJBRzdCQSw0QkFBdUJBLCtCQUFDQTtnQ0FFcEJBLElBQUdBLENBQUNBLENBQUNBO29DQUVEQSxrQ0FBcUJBOzs7OzRCQUk3QkEsMkNBQXlEQSxBQUFrREE7NEJBQzNHQSw0Q0FBMERBLEFBQWtEQTs0QkFDNUdBOzs7d0JBR0pBLElBQUdBLGdEQUF3QkE7NEJBRXZCQSwrQ0FBMENBLEFBQWtEQTs0QkFDNUZBLDRCQUF1QkE7O3dCQUUzQkEsSUFBR0EsZ0RBQXdCQTs0QkFFdkJBLCtDQUEwQ0EsQUFBa0RBOzRCQUM1RkEsNEJBQXVCQTs7Ozs7OztvQkF3QnZDQSxPQUFPQTs7Ozs7b0JBTVBBLE9BQU9BOzs7OztvQkFtQ0dBLE9BQU9BOzs7b0JBR1RBLFFBQVFBO29CQUNSQSxJQUFJQSx3QkFBV0E7b0JBQ2ZBLElBQUdBLGtEQUE0QkE7d0JBRTNCQSwyQkFBMkJBO3dCQUMzQkE7Ozs7OztvQkFPRkEsT0FBT0E7OztvQkFHVEEsUUFBUUE7b0JBQ1JBLElBQUlBLHdCQUFXQTtvQkFDZkEsSUFBR0EsMkJBQUtBO3dCQUVKQSw0QkFBNEJBO3dCQUM1QkE7Ozs7OztvQkFPRkEsT0FBT0E7OztvQkFHVEEsUUFBUUE7b0JBQ1JBLElBQUlBLHdCQUFXQTtvQkFDZkEsSUFBR0EsMkJBQUtBO3dCQUVKQSwwQkFBMEJBO3dCQUMxQkE7Ozs7OztvQkFPRkEsT0FBT0E7OztvQkFHVEEsUUFBUUE7b0JBQ1JBLElBQUlBLHdCQUFXQTtvQkFDZkEsSUFBR0EsZ0RBQTBCQTt3QkFFekJBLHlCQUF5QkE7d0JBQ3pCQTs7Ozs7O29CQWVGQSxPQUFPQSxJQUFJQSw0QkFBUUEsWUFBWUE7OztvQkFHakNBLGFBQWFBO29CQUNiQSxjQUFjQTs7Ozs7b0JBTVpBLE9BQU9BLElBQUlBLDRCQUFRQSxXQUFXQTs7O29CQUdoQ0EsWUFBWUE7b0JBQ1pBLFdBQVdBOzs7OztvQkFNVEEsT0FBT0EsSUFBSUEsNEJBQVFBLFdBQVdBLFVBQVVBLFlBQVlBOzs7b0JBR3REQSxZQUFZQTtvQkFDWkEsV0FBV0E7b0JBQ1hBLGFBQWFBO29CQUNiQSxjQUFjQTs7Ozs7b0JBUWRBLE1BQU1BLElBQUlBOzs7OztvQkFRVkEsTUFBTUEsSUFBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aUNBdE9nQkEsS0FBSUE7OzhCQXNRdkJBOzs7O2dCQUVYQSxlQUFVQSx5QkFBSUE7OzRCQUdIQTs7Z0JBRVhBLGVBQVVBOzs4QkFHQ0EsSUFBV0E7Ozs7Z0JBRXRCQSxlQUFVQSwyQkFBSUEsSUFBSUE7OzhCQUdQQSxJQUFXQSxJQUFrQkE7Ozs7Z0JBRXhDQSxlQUFVQSw4QkFBU0EsSUFBSUEsSUFBSUE7OzhCQUdoQkEsSUFBV0EsU0FBY0EsSUFBV0E7Ozs7Z0JBRS9DQSxlQUFVQSxDQUFDQSxVQUFVQSxBQUF5QkEsMkJBQU1BLElBQUlBLElBQUlBLE1BQU1BLEFBQXlCQSw0QkFBT0EsSUFBSUEsSUFBSUE7Ozs7K0JBbEQxRkE7Z0JBSVpBLE1BQU1BLElBQUlBOzsrQkFKRUE7Z0JBU1pBLE1BQU1BLElBQUlBOzsrQkF0TEtBLE1BQWFBO2dCQUVoQ0EsT0FBT0Esa0JBQWFBLFdBQVVBLGFBQU1BOzsrQkFHbEJBO2dCQUVsQkEsT0FBT0Esa0JBQWFBLFdBQVVBOztvQ0FvQk5BLE1BQWFBO2dCQUVyQ0EsMEJBQTBCQSxNQUFNQTs7Z0JBRWhDQSxPQUFPQTs7b0NBR2dCQTtnQkFFdkJBLE9BQU9BLDBCQUEwQkE7O3FDQUdaQTtnQkFFckJBLE9BQU9BLFNBQWdCQSwwQkFBMEJBOztxQ0FHMUJBO2dCQUV2QkEsT0FBT0EsQUFBT0EsV0FBa0JBLDBCQUEwQkE7Ozs7O2dCQXNMMURBOzs7Z0JBOEdBQSxXQUF1QkEsQUFBa0NBLEFBQTZCQSwrQkFBQ0E7b0JBRW5GQTs7OztnQkFvRkpBLE9BQU9BOzttQ0F3Q2FBLEdBQVFBOztnQkFFNUJBLElBQUdBO29CQUVDQSw4QkFBeUJBOztvQkFJekJBLDJCQUFzQkE7OzsrQkFJWEE7Z0JBRWZBLE9BQU9BLHVCQUFrQkE7OzhCQUdWQSxPQUFXQTtnQkFFMUJBLGNBQWNBO2dCQUNkQSxzQkFBaUJBLE9BQU9BO2dCQUN4QkEscUJBQThDQSxjQUFjQSxBQUFrQkEsbUJBQW1CQTs7Z0NBR2hGQTtnQkFFakJBLGNBQWNBLHVCQUFVQTtnQkFDeEJBLFlBQU9BOzsyQkFHS0E7Z0JBRVpBLG1CQUFjQTtnQkFDZEEsY0FBY0E7Z0JBQ2RBLG9CQUFpQ0E7OzhCQUdsQkEsT0FBaUJBO2dCQUVoQ0Esc0JBQWlCQSxPQUFPQTs7O2dCQUt4QkE7Z0JBQ0FBLGNBQWNBO2dCQUNkQTs7Z0NBR2lCQTtnQkFFakJBLE9BQU9BLHdCQUFtQkE7OzhCQUdYQTtnQkFFZkEsc0JBQWlCQTtnQkFDakJBLGNBQWNBO2dCQUNkQSxvQkFBaUNBOztnQkFFakNBOzs7Z0JBS0FBLE9BQU9BOzs7Z0JBS1BBLE9BQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1lDbG1CUEEsaURBQXNDQSxxSEFBdUdBLDJCQUEwQkE7WUFDdktBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJDQzBCQTs7Ozs7O3dCQWFnQ0EsT0FBT0E7Ozs7OztnREFEVkE7Ozs7O29CQVJ2REEsSUFBR0EscUNBQVlBO3dCQUVYQTs7b0JBRUpBO29CQUNBQTs7K0JBTW1CQTtvQkFFbkJBLG9DQUFXQTtvQkFDWEE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NENDekI2Q0EsSUFBSUE7Ozs7O29CQUlqREE7O3dDQUc0QkEsUUFBZUEsVUFBeUJBLFlBQTBCQSxRQUFvQkEsUUFBeUNBOzs7OztvQkFFM0pBLElBQUdBLENBQUNBO3dCQUNBQTs7O29CQUVKQSxJQUFHQSw4QkFBWUE7d0JBQ1hBOzs7b0JBRUpBLGVBQWtCQTtvQkFDbEJBLElBQUdBO3dCQUNDQSxXQUFXQTs7b0JBQ2ZBLElBQUdBLGtCQUFrQkEsQ0FBQ0E7d0JBRWxCQSxTQUFTQSw0QkFBMkJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dCQ0NwQ0EsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7Ozs7O3dCQVFqQkEsT0FBT0EsSUFBSUEsMEJBQU1BOzs7Ozt3QkFRakJBLE9BQU9BLElBQUlBLDBCQUFNQTs7Ozs7d0JBUWpCQSxPQUFPQSxJQUFJQSwwQkFBTUE7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b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBLDhDQUFpQkE7OztvQkFLakJBLFFBQVVBOztvQkFFVkE7b0JBQ0FBLCtCQUFVQTtvQkFDVkEsK0JBQVVBO29CQUNWQSwrQkFBUUE7b0JBQ1JBLCtCQUFVQTtvQkFDVkEsK0JBQVVBO29CQUNWQSwrQkFBVUE7b0JBQ1ZBLCtCQUFVQTtvQkFDVkEsK0JBQVVBO29CQUNWQSwrQkFBVUE7b0JBQ1ZBLCtCQUFVQTtvQkFDVkEsK0JBQVVBO29CQUNWQSwrQkFBVUE7b0JBQ1ZBLCtCQUFRQTtvQkFDUkEsK0JBQVVBO29CQUNWQSwrQkFBVUE7b0JBQ1ZBLCtCQUFRQTtvQkFDUkEsK0JBQVVBO29CQUNWQSwrQkFBVUE7b0JBQ1ZBLCtCQUFVQTtvQkFDVkEsK0JBQVVBO29CQUNWQSwrQkFBVUE7b0JBQ1ZBLCtCQUFVQTtvQkFDVkEsK0JBQVFBO29CQUNSQSwrQkFBVUE7b0JBQ1ZBLCtCQUFVQTtvQkFDVkEsK0JBQVVBO29CQUNWQSwrQkFBVUE7b0JBQ1ZBLCtCQUFVQTtvQkFDVkEsK0JBQVVBO29CQUNWQSwrQkFBVUE7b0JBQ1ZBLCtCQUFVQTtvQkFDVkEsK0JBQVFBO29CQUNSQSwrQkFBUUE7b0JBQ1JBLCtCQUFVQTtvQkFDVkEsK0JBQVVBO29CQUNWQSwrQkFBVUE7b0JBQ1ZBLCtCQUFVQTtvQkFDVkEsK0JBQVVBO29CQUNWQSwrQkFBVUE7b0JBQ1ZBLCtCQUFVQTtvQkFDVkEsK0JBQVVBO29CQUNWQSwrQkFBVUE7b0JBQ1ZBLCtCQUFRQTtvQkFDUkEsK0JBQVVBO29CQUNWQSwrQkFBVUE7b0JBQ1ZBLCtCQUFVQTtvQkFDVkEsK0JBQVVBO29CQUNWQSwrQkFBUUE7b0JBQ1JBLCtCQUFVQTtvQkFDVkEsK0JBQVVBO29CQUNWQSwrQkFBVUE7b0JBQ1ZBLCtCQUFVQTtvQkFDVkEsK0JBQVFBO29CQUNSQSwrQkFBVUE7b0JBQ1ZBLCtCQUFVQTtvQkFDVkEsK0JBQVVBO29CQUNWQSwrQkFBVUE7b0JBQ1ZBLCtCQUFVQTtvQkFDVkEsK0JBQVVBO29CQUNWQSwrQkFBVUE7b0JBQ1ZBLCtCQUFVQTtvQkFDVkEsK0JBQVVBO29CQUNWQSwrQkFBUUE7b0JBQ1JBLCtCQUFRQTtvQkFDUkEsK0JBQVVBO29CQUNWQSwrQkFBVUE7b0JBQ1ZBLCtCQUFVQTtvQkFDVkEsK0JBQVVBO29CQUNWQSwrQkFBVUE7b0JBQ1ZBLCtCQUFVQTtvQkFDVkEsK0JBQVVBO29CQUNWQSwrQkFBVUE7b0JBQ1ZBLGdDQUFTQTtvQkFDVEEsZ0NBQVVBO29CQUNWQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFVQTtvQkFDVkEsZ0NBQVVBO29CQUNWQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFVQTtvQkFDVkEsZ0NBQVNBO29CQUNUQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFVQTtvQkFDVkEsZ0NBQVNBO29CQUNUQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFVQTtvQkFDVkEsZ0NBQVVBO29CQUNWQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFVQTtvQkFDVkEsZ0NBQVVBO29CQUNWQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFVQTtvQkFDVkEsZ0NBQVVBO29CQUNWQSxnQ0FBU0E7b0JBQ1RBLGdDQUFVQTtvQkFDVkEsZ0NBQVVBO29CQUNWQSxnQ0FBU0E7b0JBQ1RBLGdDQUFVQTtvQkFDVkEsZ0NBQVVBO29CQUNWQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFVQTtvQkFDVkEsZ0NBQVVBO29CQUNWQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFTQTtvQkFDVEEsZ0NBQVVBO29CQUNWQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFVQTtvQkFDVkEsZ0NBQVVBO29CQUNWQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFVQTtvQkFDVkEsZ0NBQVVBO29CQUNWQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFTQTtvQkFDVEEsZ0NBQVNBO29CQUNUQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFVQTtvQkFDVkEsZ0NBQVVBO29CQUNWQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFVQTtvQkFDVkEsZ0NBQVVBO29CQUNWQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFVQTtvQkFDVkEsZ0NBQVVBO29CQUNWQSxnQ0FBU0E7b0JBQ1RBLGdDQUFVQTtvQkFDVkEsZ0NBQVVBO29CQUNWQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFVQTtvQkFDVkEsZ0NBQVNBO29CQUNUQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFVQTtvQkFDVkEsZ0NBQVVBO29CQUNWQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFTQTtvQkFDVEEsZ0NBQVVBO29CQUNWQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFVQTtvQkFDVkEsZ0NBQVVBO29CQUNWQSxnQ0FBVUE7b0JBQ1ZBLGdDQUFVQTtvQkFDVkEsZ0NBQVVBO29CQUNWQSwwQ0FBYUE7OzRDQUdrQkE7b0JBRS9CQTtvQkFDQUEsSUFBSUEsU0FBU0E7d0JBRVRBLE9BQU9BLDJEQUFXQSxBQUFLQSxPQUFoQkE7O29CQUVYQTs7NENBR2tDQTtvQkFFbENBO29CQUNBQSxJQUFJQSxTQUFTQTt3QkFFVEEsT0FBT0EsK0RBQWVBLEFBQUtBLE9BQXBCQTs7b0JBRVhBLE9BQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCa0IzL0N1QkEsS0FBSUE7OzRCQUVsQkE7Ozs7O2dCQUVoQkEsSUFBR0EsVUFBVUEsUUFBUUE7b0JBRWpCQSwwQkFBb0JBOzs7OzRCQUVoQkEsSUFBR0EsUUFBUUE7Z0NBQ1BBLGdCQUFXQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBOW1CU0EsS0FBSUE7OztnQ0FLRkEsS0FBSUE7dUNBQ0dBLEtBQUlBOzs4QkFrRjFCQSxhQUF1QkEsZUFBdUJBOzs7Ozs7O2dCQUVqRUEsbUJBQWNBO2dCQUNkQSxxQkFBZ0JBOztnQkFFaEJBLElBQUdBLFdBQVdBLFFBQVFBO29CQUVsQkEsMEJBQW9CQTs7Ozs0QkFFaEJBLElBQUdBLFFBQVFBO2dDQUNQQSxpQkFBWUE7Ozs7Ozs7Ozs7OEJBS0xBLGFBQXVCQSxlQUF1QkEsYUFBc0JBOzs7Ozs7OztnQkFFdkZBLG1CQUFjQTtnQkFDZEEscUJBQWdCQTtnQkFDaEJBLG1CQUFjQTs7Z0JBRWRBLElBQUdBLFdBQVdBLFFBQVFBO29CQUVsQkEsMEJBQW9CQTs7Ozs0QkFFaEJBLElBQUdBLFFBQVFBO2dDQUNQQSxpQkFBWUE7Ozs7Ozs7Ozs7NEJBS0xBOzs7OztnQkFFbkJBO2dCQUNBQTs7Z0JBRUFBLElBQUdBLFdBQVdBLFFBQVFBO29CQUVsQkEsMEJBQW9CQTs7Ozs0QkFFaEJBLElBQUdBLFFBQVFBO2dDQUNQQSxpQkFBWUE7Ozs7Ozs7Ozs7OztnQ0F6SFBBLFdBQWtCQTtnQkFFbkNBLFNBQVNBLElBQUlBLGdDQUFjQSxXQUFXQTtnQkFDdENBLGtCQUFhQTtnQkFDYkEsSUFBR0EsQ0FBQ0E7b0JBRUFBLHlCQUFvQkE7Ozs7Z0JBUXhCQSxPQUFPQTs7a0NBR3FCQSxNQUFhQTs7Z0JBRXpDQSxPQUFPQTs7Z0JBRVBBLElBQUdBO29CQUVDQSxLQUFJQSxXQUFXQSxJQUFJQSxxQkFBZ0JBO3dCQUUvQkEsSUFBR0EsNkNBQVNBLGdDQUE4QkE7NEJBRXRDQSxPQUFPQSxzQkFBU0E7Ozs7b0JBS3hCQSxLQUFJQSxZQUFXQSxLQUFJQSw0QkFBdUJBO3dCQUV0Q0EsSUFBR0Esb0RBQWdCQSxpQ0FBOEJBOzRCQUU3Q0EsT0FBT0EsNkJBQWdCQTs7Ozs7Z0JBS25DQSxPQUFPQTs7K0JBR1dBLE1BQWFBOzs7Z0JBRS9CQSxPQUFPQSxNQUFvQ0EsZ0JBQVdBLE1BQU1BLG9CQUFrQkEsUUFBTUEsT0FBb0NBLGFBQThEQSxPQUFLQSxXQUF1REEsQUFBUUE7O29DQUduT0EsTUFBYUE7OztnQkFFcENBLE9BQU9BLE1BQW9DQSxnQkFBV0EsTUFBTUEsb0JBQWtCQSxRQUFNQSxPQUFvQ0EsYUFBOERBLE9BQUtBLHFCQUFpRUEsQUFBUUE7OytCQUdwUEEsTUFBYUEsT0FBY0E7OztnQkFFM0NBLFlBQVlBLE1BQW9DQSxnQkFBV0EsTUFBTUEsb0JBQWtCQSxPQUFLQSxXQUE0REEsQUFBV0E7Z0JBQy9KQSxJQUFHQSxTQUFTQTtvQkFDUkEsYUFBYUE7Ozs7Z0JBS2pCQSxJQUFHQTtvQkFDQ0E7O2dCQUNKQSxJQUFHQSxpQkFBWUEsUUFBUUE7b0JBQ25CQTs7Z0JBQ0pBLFlBQVlBLDRCQUFxREE7Z0JBQ2pFQSxRQUFRQTs7Z0JBRVJBLElBQUdBLEtBQUtBO29CQUVKQTs7b0JBSUFBOzs7O2dCQW9ESkEsaUJBQWlCQSxJQUFJQTs7Z0JBRXJCQSxhQUFhQTtnQkFDYkEsS0FBSUEsV0FBV0EsSUFBSUEsUUFBUUE7b0JBRXZCQSxJQUFHQSxzQkFBU0EsTUFBTUEsUUFBUUEsc0JBQVNBLFlBQVlBLFFBQVFBLGlDQUEwQkEsc0JBQVNBO3dCQUN0RkE7O29CQUNKQSxrQkFBa0JBLE9BQU1BLHNCQUFTQTs7b0JBRWpDQSxjQUFjQSxzQkFBU0E7O29CQUV2QkEsSUFBR0E7d0JBRUNBLGFBQWFBOzt3QkFFYkEsZ0JBQWdCQSxDQUFDQTt3QkFDakJBLElBQUdBLDZDQUF3QkEsdUJBQXNCQSxzQkFBc0JBOzs7Ozt3QkFjdkVBOzJCQUVDQSxJQUFHQSw0QkFBNEJBO3dCQUVoQ0EsSUFBR0E7OzRCQUlDQTs7OztvQkFJUkEsSUFBR0E7OzJCQU9FQSxJQUFHQTs7Ozs7O2dCQWNaQSxPQUFPQTs7cUNBR2VBO2dCQUV0QkEsYUFBYUE7Z0JBQ2JBLEtBQUlBLFdBQVdBLElBQUlBLFFBQVFBO29CQUV2QkEsNEJBQXVCQSxrQkFBa0JBLDZCQUFnQkE7Ozs4Q0FJM0JBLGtCQUF1QkE7Z0JBRXpEQSxJQUFHQSxvQkFBb0JBO29CQUVuQkEsSUFBR0E7d0JBRUNBLGdCQUFnQkEsQ0FBQ0E7OztvQkFLckJBLElBQUdBO3dCQUVDQSw0QkFBb0RBOztvQkFFeERBLGlCQUFpQkE7Ozt3Q0FJWUE7NkJBSW5CQSxRQUFnQkE7OztnQkFFOUJBLElBQUdBLFVBQVVBO29CQUNUQSxNQUFNQSxJQUFJQTs7O2dCQUVkQSxJQUFHQTtvQkFDQ0E7O2dCQUNKQTs7Z0JBRUFBO2dCQUNBQTs7Z0JBRUFBOztnQkFFQUEsa0JBQWtCQTtnQkFDbEJBO2dCQUNBQTs7Z0JBRUFBOztnQkFFQUEsSUFBR0E7b0JBRUNBOzs7Z0JBR0pBLGlCQUFpQkEsY0FBYUE7O2dCQUU5QkE7Z0JBQ0FBLElBQUdBO29CQUVDQTtvQkFDQUE7O29CQUlBQTs7Z0JBRUpBLDBCQUEwQkEsc0JBQWdCQSxDQUFDQSxpQ0FBb0JBLENBQUNBLDRCQUFvQkEsQ0FBQ0E7Z0JBQ3JGQSxtQkFBbUJBLGVBQWNBOztnQkFFakNBLHlCQUF5QkE7O2dCQUV6QkEsMEJBQXNCQTs7Ozt3QkFFbEJBLGNBQWNBLElBQUlBO3dCQUNsQkEsUUFBVUE7d0JBQ1ZBLElBQUdBOzRCQUVDQTs0QkFDQUEsY0FBY0E7OzRCQUlkQSxjQUFjQTs0QkFDZEEsZ0JBQWdCQTs7d0JBRXBCQSxlQUFlQTs7d0JBRWZBLGtCQUFrQkE7O3dCQUVsQkEsYUFBYUE7O3dCQUViQSwyQkFBcUJBOzs7O2dDQUVqQkEsSUFBR0EsQ0FBQ0EsaUNBQTBCQTtvQ0FFMUJBLFlBQVlBLDZCQUFjQSxrQkFBa0JBLGFBQWFBO29DQUN6REEsSUFBR0E7d0NBRUNBOztvQ0FFSkEsd0JBQXlDQTtvQ0FDekNBLEtBQUtBOztnQ0FFVEEsV0FBV0E7O2dDQUVYQSwyQkFBbUJBOzs7O3dDQUVmQSxJQUFHQTs0Q0FFQ0EsYUFBZUE7OzRDQUVmQSxjQUFjQTs7NENBRWRBLElBQUdBLFdBQVdBO2dEQUVWQSxpQkFBaUJBO2dEQUNqQkEsZUFBZUEsZUFBY0E7Z0RBQzdCQSxjQUFjQTs7Z0RBRWRBLElBQUdBO29EQUVDQSxnQkFBZ0JBLGFBQWFBLHNCQUFDQSxjQUFjQSxDQUFDQTs7b0RBSTdDQSxnQkFBZ0JBLHNCQUFjQSxvQkFBY0EsQ0FBQ0E7OztnREFHakRBLHdCQUEwQ0EsaUNBQWtCQTs7Z0RBRTVEQSxLQUFLQTs7OzRDQUdUQSxLQUFLQTs7NENBRUxBOzs7d0NBR0pBLElBQUdBLENBQUNBLGlDQUEwQkE7NENBRTFCQSxhQUFZQSw2QkFBY0EsV0FBV0EsZ0JBQWNBLGtCQUFZQSx1QkFBT0EsYUFBWUEsR0FBR0E7NENBQ3JGQSxJQUFHQTtnREFFQ0E7Z0RBQ0FBLEtBQUtBOzs0Q0FFVEEsd0JBQXlDQTs7O3dDQUc3Q0EsSUFBR0E7NENBRUNBLEtBQUtBOzRDQUNMQTs7O3dDQUdKQSxJQUFHQSxjQUFjQSxRQUFRQSxDQUFDQTs0Q0FFdEJBLHNCQUFzQkEsSUFBSUEsNEJBQVFBLHVCQUFjQSxrQ0FBaUJBOzRDQUNqRUEsbUJBQW1CQTs0Q0FDbkJBLHdCQUEwQ0EsaUNBQWtCQTs7O3dDQUdoRUEsZUFBZUE7d0NBQ2ZBOzt3Q0FFQUEsSUFBR0E7NENBRUNBOzs0Q0FFQUE7NENBQ0FBOzRDQUNBQSwyQkFBdUJBOzs7O29EQUVuQkEsSUFBR0EsNENBQTBCQTt3REFDekJBOzs7b0RBRUpBLGdDQUFnQkE7O29EQUVoQkEsSUFBR0E7d0RBRUNBLElBQUdBOzREQUVDQSxLQUFLQSxvREFBK0JBOzs0REFJcENBLEtBQUtBOzs7d0RBR1RBLElBQUdBOzREQUNDQSxLQUFLQTs7O3dEQUVUQSxJQUFHQTs0REFFQ0EsS0FBS0E7NERBQ0xBOzs7d0RBR0pBO3dEQUNBQTs7b0RBRUpBLFVBQVlBLENBQUNBLG9CQUFjQSxpQkFBV0EsbUJBQWFBLHlCQUFjQSx1QkFBT0E7b0RBQ3hFQSxrQkFBcUJBLGVBQWNBLDRIQUFzQkEsQ0FBQ0EsaUJBQWVBO29EQUN6RUEsbUJBQXNCQSxjQUFhQTs7b0RBRW5DQSxZQUFrQ0EsT0FBTUEsOEJBQXVCQTtvREFDL0RBLFVBQWNBLElBQUlBLDRCQUFRQSxPQUFNQSw4QkFBc0JBLHFDQUFDQSxNQUFNQSxrR0FBMkJBO29EQUN4RkEsSUFBR0EsQ0FBQ0E7d0RBRUFBOzs7b0RBR0pBLElBQUdBLDZCQUE0QkE7d0RBRTNCQSxrQ0FBaUNBO3dEQUNqQ0EscUNBQW9DQTt3REFDcENBLGtDQUFpQ0E7d0RBQ2pDQTt3REFDQUEsSUFBR0E7NERBRUNBLFdBQVdBOzREQUNYQTs0REFDQUEsa0JBQWtCQSxxQ0FBQ0E7OzREQUVuQkE7OzREQUVBQTs0REFFQUEsSUFBR0E7Z0VBRUNBO2dFQUNBQTs7OzREQUdKQSxJQUFHQTtnRUFFQ0EsdUJBQXNCQSxxQ0FBQ0E7Z0VBQ3ZCQSx3QkFBdUJBLHFDQUFDQTs7Ozt3REFJaENBLHdCQUEwQ0EsaUNBQWtCQTs7d0RBSTVEQSx1QkFBc0JBO3dEQUN0QkEsMEJBQXlCQTt3REFDekJBLHFDQUFvQ0E7O3dEQUVwQ0Esd0JBQTBDQSxpQ0FBa0JBOztvREFFaEVBLElBQUdBO3dEQUVDQSx3QkFBdUJBO3dEQUN2QkE7O3dEQUVBQSxJQUFHQSw2QkFBNEJBOzREQUUzQkE7Ozs7b0RBSVJBLHNCQUFpQkE7O29EQUVqQkEsSUFBR0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxpQ0FBMEJBO3dEQUU5REEsYUFBWUEsNkJBQWNBLHVCQUFzQkEsSUFBSUEsQ0FBQ0E7d0RBQ3JEQSxvQkFBbUJBLFdBQVVBLDhCQUFzQkEscUNBQUNBLE1BQU1BO3dEQUMxREEsd0JBQXlDQTt3REFDekNBLElBQUdBOzREQUVDQTs7d0RBRUpBOzs7b0RBR0pBLElBQUdBLHNCQUFzQkEsQ0FBQ0EsaUNBQTBCQTt3REFFaERBLDJDQUEwQ0E7d0RBQzFDQSxJQUFHQSwwQkFBeUJBOzREQUV4QkEsSUFBR0EsaUNBQTBCQSxjQUFjQSxpQ0FBMEJBO2dFQUVqRUEseUJBQXdCQSxJQUFJQSwwQkFBUUE7O2dFQUlwQ0EseUJBQXdCQSxJQUFJQSw0QkFBUUEsaUNBQTBCQSxhQUFhQSxtQkFBbUJBLFdBQVdBOzs7OztvREFLckhBOztvREFFQUEsSUFBR0EsQ0FBQ0E7d0RBRUFBLDRCQUF1QkEsa0JBQWtCQTt3REFDekNBLHlCQUFvQkE7O29EQUV4QkEsa0JBQWFBOzs7Ozs7Ozs0Q0FHakJBLElBQUdBO2dEQUVDQSxLQUFLQTs7NENBRVRBLFdBQVdBLDRCQUFvREE7NENBQy9EQSxJQUFHQSxRQUFRQSxRQUFRQTtnREFFZkEsS0FBS0EsZ0RBQTRCQTs7Z0RBSWpDQSxLQUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozt3QkFNckJBLGlCQUFpQkE7d0JBQ2pCQSxJQUFHQSxDQUFDQTs0QkFFQUEscUJBQVdBOzs0QkFJWEEscUJBQVdBLGtCQUFLQTs7d0JBRXBCQSxtREFBNEJBO3dCQUM1QkEsa0RBQTJCQTs7Ozs7OztnQkFFL0JBLGtCQUFrQkEsNEJBQW9EQTtnQkFDdEVBLElBQUdBLGVBQWVBO29CQUVkQSxtQkFBbUJBLDRCQUFxREE7O29CQUV4RUEsZ0NBQThEQSxVQUFDQTt3QkFFM0RBLElBQUdBLG9CQUFtQkEsQ0FBQ0E7NEJBRW5CQTs0QkFDQUEsUUFBUUE7NEJBQ1JBLElBQUdBLEtBQUtBO2dDQUNKQTs7Z0NBR0FBOzs7OztvQkFLWkEsNkJBQTJEQSxVQUFDQTt3QkFFeERBLElBQUdBLG9CQUFtQkE7NEJBRWxCQTs0QkFDQUEsUUFBUUE7NEJBQ1JBLElBQUdBLEtBQUtBO2dDQUNKQTs7Z0NBR0FBOzs7OztvQkFLWkEsc0NBQXNDQSxBQUF3Q0E7b0JBQzlFQSx1Q0FBdUNBLEFBQXdDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4QkFzQmxFQSxlQUFzQkEsT0FBaUJBLFdBQXVCQTs7Ozs7Z0JBRS9FQSxxQkFBZ0JBO2dCQUNoQkEsYUFBUUE7Z0JBQ1JBLGlCQUFZQTtnQkFDWkEsZUFBVUE7OzhCQUdPQSxlQUFzQkEsT0FBaUJBOzs7NkRBQTRCQSxlQUFlQSxXQUFXQTs7NEJBSTdGQSxlQUFzQkE7NkRBQXdCQSxlQUFlQTs7Ozs7Ozs7Ozs7OzRCQXdCcERBLEtBQUlBOzs0QkFHZkE7Ozs7O2dCQUVmQSxrQkFBYUE7Z0JBQ2JBLElBQUdBLFFBQVFBLFFBQVFBO29CQUVmQSwwQkFBb0JBOzs7OzRCQUVoQkEsSUFBR0EsUUFBUUE7Z0NBQ1BBLGNBQVNBOzs7Ozs7Ozs7OzhCQUtOQSxZQUFtQkE7Ozs7O2dCQUVsQ0Esa0JBQWFBO2dCQUNiQSxJQUFHQSxRQUFRQSxRQUFRQTtvQkFFZkEsMEJBQW9CQTs7Ozs0QkFFaEJBLElBQUdBLFFBQVFBO2dDQUNQQSxjQUFTQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0NBZ0NhQSxLQUFJQTs7Ozs7Ozs4QkFlekJBLE9BQWNBOzs7OztnQkFFM0JBLGFBQVFBO2dCQUNSQSxJQUFHQSxZQUFZQSxRQUFRQTtvQkFFbkJBLDBCQUFvQkE7Ozs7NEJBRWhCQSxJQUFHQSxRQUFRQTtnQ0FDUEEsa0JBQWFBOzs7Ozs7Ozs7OzRCQUtaQTs7OzZEQUE0Q0E7OzhCQUk1Q0EsUUFBZ0JBOzs7NkRBQTRDQTtnQkFFekVBLGNBQVNBOzs4QkFHSUEsT0FBY0EsUUFBcUJBOzs7eURBQXdDQSxPQUFPQTtnQkFFL0ZBLGNBQVNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MENDenRCbURBLFVBQWlCQTs7b0JBRTdFQSxPQUFPQSxTQUVLQSxZQUNGQSxzREFFQ0EsWUFBWUEsT0FBT0EsS0FBZUEsZUFBMkJBOzswQ0FzQjFDQSxlQUFzQkEsUUFBZUEsU0FBaUVBLE9BQStEQTs7Ozs7O2lEQU05SkEsZUFBc0JBLFFBQWVBLGlCQUFpQ0EsU0FBaUVBLE9BQStEQTs7Ozs7O3dDQU0vTUEsZUFBc0JBLFFBQWVBLFNBQWlFQSxPQUErREE7Ozs7b0JBRWpNQSw4QkFBU0EsSUFBSUEsbUNBQWNBLGVBQWVBLFFBQVFBLGFBQVlBLEFBQXlFQSxTQUFTQSxBQUF5RUE7O29DQUlqTUEsVUFBaUJBLFNBQWlFQSxPQUErREE7Ozs7OzttREFNbElBLFVBQWlCQSxpQkFBaUNBLFNBQWlFQSxPQUErREE7Ozs7OztnREFNckxBLFVBQWlCQSxTQUFpRUEsT0FBK0RBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJBdkNoS0EsZUFBc0JBLFFBQWVBOzs7O2dCQUV0REEsY0FBU0E7Z0JBQ1RBLGlCQUFZQTtnQkFDWkEsaUJBQVlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQ2ZUQTttREFBb0JBOzs7OEJBS3BCQSxPQUFhQTs7Z0JBRXBCQSxhQUFRQTtnQkFDUkEsYUFBUUEsSUFBSUEsd0JBQVdBOzs4QkFHaEJBLE9BQWFBOztnQkFFcEJBLGFBQVFBO2dCQUNSQSxhQUFRQTs7NEJBR0RBO21EQUFvQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytDQzFCaUNBLEtBQUlBOzs7OzZDQUU3QkE7O29CQUVuQ0EsSUFBR0EsNkRBQWdDQTt3QkFDL0JBLE9BQU9BLHFEQUFvQkE7O29CQUMvQkEsT0FBT0EsQ0FBQ0EsTUFBNEJBLDBDQUEyQkEseURBQTRDQSxPQUFNQSxjQUF6R0EscURBQW9CQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2QkNxRFdBOzs7b0NBTURBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrREE5QzRCQSxLQUFJQTs7Ozs7Ozs7Ozs7O3VDQWlCakNBO3lDQUNFQTt3Q0FDREE7Ozs7OENBZUNBLElBQUlBOzs7b0NBUWpCQTs7Ozs7Ozs7Ozt3Q0FjR0E7b0JBRTdCQSxXQUFXQTtvQkFDWEEsSUFBR0EsZUFBY0E7d0JBQ2JBOztvQkFDSkEsT0FBT0Esd0JBQVFBOzs7b0JBS2ZBLElBQUdBO3dCQUNDQSxPQUFPQTs7O29CQUVYQSxVQUFVQSxJQUFJQTtvQkFDZEE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7O29CQUVBQSxpREFBc0NBO29CQUN0Q0EsNkJBQU9BLGtCQUFLQSxBQUFDQSxBQUFDQSxBQUFxQkE7b0JBQ25DQSwwQkFBd0RBLGlDQUFrQkE7b0JBQzFFQTtvQkFDQUEsT0FBT0E7OztvQkFVUEE7OztvQkFLQUE7d0JBRUlBLGFBQW9DQTt3QkFDcENBLEtBQUlBLFdBQVlBLElBQUlBLGVBQWVBOzRCQUUvQkEsZ0JBQWdCQSxPQUFPQTs0QkFDdkJBLElBQUdBLGFBQWFBO2dDQUNaQTs7NEJBQ0pBLElBQUdBO2dDQUVDQSwwQ0FBb0JBLE9BQU9BOzs0QkFFL0JBLElBQUdBO2dDQUVDQSx5Q0FBbUJBLE9BQU9BOzs0QkFFOUJBLElBQUdBO2dDQUVDQSxpREFBMkJBLE9BQU9BOzs7d0JBRzFDQSxJQUFHQSwyQ0FBcUJBOzRCQUNwQkE7O3dCQUNKQSxTQUFTQTt3QkFDVEEsSUFBR0EsTUFBTUE7NEJBQ0xBLG9DQUFjQTs7Ozs7OytDQU9jQSxTQUFzQ0EsT0FBY0E7O29CQUV4RkE7d0JBRUlBLElBQUdBLFdBQVdBOzRCQUVWQSwwQkFBb0JBOzs7O29DQUVoQkEsWUFBZ0JBLHdDQUFrQkEsTUFBTUEsT0FBT0E7b0NBQy9DQSxJQUFHQSxTQUFTQTt3Q0FFUkEsT0FBT0E7Ozs7Ozs7Ozs7OztvQkFRdkJBLE9BQU9BOzs2Q0FHNkJBLFNBQWdDQSxPQUFjQTtvQkFFbEZBO3dCQUVJQSxJQUFHQSxXQUFXQTs0QkFFVkEsY0FBa0JBOzRCQUNsQkEsSUFBR0E7Z0NBRUNBLEtBQUlBLFdBQVdBLElBQUlBLHlCQUF5QkE7b0NBRXhDQSxXQUFlQSxpQkFBaUJBO29DQUNoQ0EsSUFBR0EscUJBQXFCQSw0REFBcUNBLFlBQWNBO3dDQUV2RUEsT0FBT0EsV0FBV0E7Ozs7Ozs7O29CQVN0Q0EsT0FBT0E7O29EQUdvQ0EsT0FBY0E7b0JBRXpEQSxZQUFnQkEsd0NBQWtCQSx3Q0FBa0JBLE9BQU9BO29CQUMzREEsSUFBR0EsU0FBU0E7d0JBRVJBLFFBQVFBLHdDQUFrQkEseUNBQW1CQSxPQUFPQTs7b0JBRXhEQSxPQUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkMxTERBLE9BQU9BOzs7b0JBR1RBLElBQUdBLHFDQUFVQTt3QkFFVEEsY0FBU0E7d0JBQ1RBLGVBQVFBLE9BQUtBLEFBQXFDQSwrQkFBeUJBOzs7Ozs7NEJBYnRFQTs7Z0JBRWJBLGNBQVNBOzs7Ozs7Ozs7Ozs7O29CQ0tIQSxPQUFPQTs7O29CQUVUQSxJQUFHQSxnQkFBVUE7d0JBRVRBLGNBQVNBO3dCQUNUQSxlQUFRQSxPQUFLQSxBQUFxQ0EsK0JBQXlCQTs7Ozs7Ozs7OzRCQVpwRUE7O2dCQUVmQSxjQUFTQTs7Ozs7Ozs7Ozs7OztvQkNLSEEsT0FBT0E7OztvQkFHVEEsSUFBR0EsaUJBQVdBO3dCQUVWQSxlQUFVQTt3QkFDVkEsZUFBUUEsT0FBS0EsQUFBcUNBLCtCQUF5QkE7Ozs7Ozs7Ozs0QkFidkVBOztnQkFFWkEsY0FBU0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4QkNGQUEsT0FBYUE7O2dCQUV0QkEsYUFBUUE7Z0JBQ1JBLGNBQVNBOzs0QkFHQUEsT0FBY0E7O2dCQUV2QkEsYUFBUUEsQUFBT0E7Z0JBQ2ZBLGNBQVNBLEFBQU9BOzs7OztnQkFLaEJBLE9BQU9BLGlDQUF5QkEsd0ZBQU1BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0QkNYekJBLFFBQWVBOztnQkFFNUJBLHNCQUFpQkE7Z0JBQ2pCQSxnQkFBV0E7Ozs7O2dCQUtYQTtnQkFDQUEsWUFBaUJBLHlDQUFxQkE7O2dCQUV0Q0Esa0JBQXFCQSx1Q0FBMEJBOztnQkFFL0NBOztnQkFFQUEsS0FBSUEsV0FBV0EsSUFBSUEsY0FBY0E7b0JBRTdCQSxXQUFjQSx5QkFBTUEsR0FBTkE7O29CQUVkQSxnQkFBbUJBLGtDQUFxQkEscUJBQWdCQTs7b0JBRXhEQSxJQUFHQSxZQUFZQTt3QkFFWEE7d0JBQ0FBLDBCQUFxQkE7d0JBQ3JCQTt3QkFDQUEsS0FBSUEsV0FBV0EsSUFBSUEsYUFBYUE7NEJBRTVCQTs7NEJBRUFBLElBQUdBLEtBQUtBLGNBQWNBO2dDQUVsQkE7Z0NBQ0FBOzs7O3dCQUlSQSxJQUFHQTs0QkFFQ0E7Ozt3QkFLSkE7d0JBQ0FBLElBQUdBLFlBQVlBOzRCQUVYQSwwQkFBcUJBLEFBQU9BOzs7O2dCQUl4Q0Esc0JBQWlCQSxpQkFBWUEscUNBQXdCQTs7bUNBR2hDQTtnQkFFckJBLFdBQWdCQSxrQ0FBbUJBLG1HQUFvQkE7O2dCQUV2REEsS0FBSUEsV0FBV0EsSUFBSUEsYUFBYUE7b0JBRTVCQSxJQUFHQSwrQ0FBS0EsR0FBTEE7d0JBRUNBLE9BQU9BLEFBQU9BLFdBQWtCQSx3QkFBS0EsR0FBTEE7MkJBRS9CQSxJQUFHQSwrQ0FBS0EsR0FBTEE7d0JBRUpBLE9BQU9BLEFBQU9BLFdBQWtCQSx3QkFBS0EsR0FBTEE7Ozs7Z0JBSXhDQSxPQUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0QkNwQklBOztnQkFFWEEsbUJBQWNBOzs4QkFHSEEsU0FBZ0JBOztnQkFFM0JBLG1CQUFjQTtnQkFDZEEsZUFBVUE7Ozs7O2dCQUtWQSxrQkFBa0JBLHFCQUFjQSxtQkFBY0E7Z0JBQzlDQSxhQUFhQTtnQkFDYkE7Z0JBQ0FBLGNBQWNBLElBQUlBO2dCQUNsQkE7Z0JBQ0FBO2dCQUNBQSxLQUFJQSxXQUFXQSxJQUFJQSxRQUFRQTtvQkFFdkJBLFVBQVVBLHVCQUFZQTtvQkFDdEJBLElBQUdBLDZDQUFrQkE7d0JBRWpCQSxJQUFHQSw2Q0FBa0JBOzRCQUVqQkEsV0FBV0E7NEJBQ1hBOzs0QkFJQUE7OztvQkFHUkEsV0FBV0E7O2dCQUVmQSxPQUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQ2hFZUE7b0JBRXRCQSxPQUFPQSxDQUFDQSxpQ0FBMEJBLE1BQU1BLG9DQUFxQkEsaUNBQWtCQSxVQUFTQSxXQUFJQTs7Ozs7Ozs7Ozs7O29CQTdCdEZBLE9BQU9BLEFBQUtBOzs7b0JBQ1pBLFNBQUlBOzs7OztvQkFLSkEsT0FBT0EsQUFBS0E7OztvQkFDWkEsU0FBSUE7Ozs7O29CQUtKQSxPQUFPQSxBQUFPQTs7O29CQUNkQSxTQUFJQTs7Ozs7b0JBS0pBLE9BQU9BLEFBQU9BOzs7b0JBQ2RBLFNBQUlBOzs7Ozs4QkFhQ0EsR0FBNkJBOztnQkFFeENBLFNBQUlBO2dCQUNKQSxTQUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQ2pCRUEsT0FBT0EsQUFBS0E7OztvQkFDWkEsU0FBSUE7Ozs7O29CQUtKQSxPQUFPQSxBQUFLQTs7O29CQUNaQSxTQUFJQTs7Ozs7b0JBS0pBLE9BQU9BLEFBQUtBOzs7b0JBQ1pBLFNBQUlBOzs7OztvQkFLSkEsT0FBT0EsQUFBS0E7OztvQkFDWkEsU0FBSUE7Ozs7O29CQUtKQSxPQUFPQSxBQUFPQTs7O29CQUNkQSxTQUFJQTs7Ozs7b0JBS0pBLE9BQU9BLEFBQU9BOzs7b0JBQ2RBLFNBQUlBOzs7OztvQkFLSkEsT0FBT0EsQUFBT0E7OztvQkFDZEEsU0FBSUE7Ozs7O29CQUtKQSxPQUFPQSxBQUFPQTs7O29CQUNkQSxTQUFJQTs7Ozs7OEJBN0RDQSxHQUE2QkEsR0FBNkJBLEdBQTZCQTs7Z0JBRWxHQSxTQUFJQTtnQkFDSkEsU0FBSUE7Z0JBQ0pBLFNBQUlBO2dCQUNKQSxTQUFJQTs7OEJBR09BLEdBQVdBOztnQkFFdEJBLFNBQUlBO2dCQUNKQSxTQUFJQTtnQkFDSkEsU0FBSUE7Z0JBQ0pBLFNBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxQ0NYNkNBLEtBQUlBOzs7O21DQUU5QkE7b0JBRXZCQSxJQUFHQSxDQUFDQTt3QkFDQUE7OztvQkFFSkEsZUFBZUE7O29CQUVmQSxJQUFHQSx3REFBc0JBO3dCQUVyQkEsV0FBV0EsZ0RBQVVBOzt3QkFFckJBLGFBQWFBLElBQUlBO3dCQUNqQkEsZUFBZUEsdUJBQXVCQTs7d0JBRXRDQSxnREFBY0EsTUFBTUEsMEJBQ2hCQSxzREFBMEJBLEtBQWlEQTs7O3dDQUlwREE7b0JBRS9CQSxJQUFHQSxpQ0FBMEJBLGlCQUFpQkEsQ0FBQ0EseURBQTJDQSxDQUFDQTt3QkFDdkZBLE9BQU9BOztvQkFDWEEsT0FBT0EsNEJBQThDQTs7eUNBR3ZCQSxTQUFpQkEsU0FBNkJBLGFBQTBCQSxNQUFrQkE7O29CQUV4SEEsWUFBZ0JBO29CQUNoQkEsSUFBR0EsQ0FBQ0E7d0JBRUFBLFFBQVdBLCtDQUFhQTt3QkFDeEJBLElBQUdBLGlDQUEwQkE7NEJBRXpCQSxJQUFJQTs7OzRCQUlKQSxJQUFJQSxtQkFBVUE7O3dCQUVsQkEsUUFBUUEsbUNBQXlCQSwwQkFBYUE7O3dCQUc5Q0EsUUFBUUE7O29CQUVaQSxhQUFhQTtvQkFDYkEsWUFBWUE7O29CQUVaQSxhQUFhQTtvQkFHYkEsS0FBSUEsV0FBWUEsSUFBSUEsMkJBQTJCQTt3QkFFM0NBOzRCQUVJQSxnQkFBZ0JBLG1CQUFtQkE7NEJBQ25DQTs0QkFDQUEsS0FBSUEsV0FBV0EsSUFBSUEsZUFBZUE7Z0NBRTlCQSxJQUFHQSxpREFBT0EsR0FBUEEsWUFBa0JBO29DQUVqQkEsd0RBQU9BLEdBQVBBLFVBQW1CQSxPQUFPQTtvQ0FDMUJBO29DQUNBQTs7Ozs0QkFJUkEsSUFBR0EsQ0FBQ0E7Z0NBRUFBLEtBQUlBLFlBQVdBLEtBQUlBLGNBQWNBO29DQUU3QkEsSUFBR0EsZ0RBQU1BLElBQU5BLFdBQWlCQTt3Q0FFaEJBLGlEQUFNQSxJQUFOQSxXQUFrQkEsT0FBT0E7d0NBQ3pCQTt3Q0FDQUE7Ozs7NEJBSVpBLElBQUdBLENBQUNBLFNBQVNBLENBQUNBLGlDQUEwQkE7Z0NBRXBDQSxLQUFJQSxZQUFXQSxLQUFJQSxlQUFlQTtvQ0FFOUJBLElBQUdBLGlEQUFPQSxJQUFQQSxZQUFrQkE7d0NBRWpCQSxLQUFJQSxZQUFZQSxLQUFLQSxvQkFBb0JBOzRDQUVyQ0EsSUFBR0Esc0RBQVlBLElBQVpBLGlCQUF3QkE7Z0RBRXZCQSxrREFBT0EsSUFBUEEsYUFBMEJBLE9BQU9BLHVEQUFZQSxJQUFaQSxlQUErQkE7Ozs7Z0RBVWhFQTs7O3dDQUdSQTs7Ozs7Ozs7Ozs7b0JBWXBCQSxJQUFHQTt3QkFFQ0EsS0FBSUEsWUFBWUEsS0FBSUEsMkJBQTJCQTs0QkFFM0NBLGdEQUFjQSxPQUFPQSxpQkFBaUJBLEtBQUlBLGFBQWFBOzs7O29CQUkvREEsSUFBR0EsQ0FBQ0E7d0JBRUFBLFlBQVlBOzs7Z0NBSUlBOztvQkFFcEJBLElBQUdBO3dCQUNDQTs7O29CQUVKQTs7d0JBSUlBLDBCQUFvQkE7Ozs7Z0NBRWhCQSxJQUFHQSxDQUFDQTtvQ0FDQUE7O2dDQUVKQSxVQUFVQSxZQUF3QkEsb0NBQW9DQTtnQ0FDdEVBLElBQUdBO29DQUVDQSxNQUFNQSxXQUFjQTs7Z0NBR3hCQSxXQUFjQTtnQ0FDZEEsSUFBR0EsK0JBQWdCQTtvQ0FDZkEsT0FBT0EsWUFBZUE7O2dDQUMxQkEsZ0RBQVVBLG9CQUFrQkE7Ozs7Ozs7Ozs7OztvQkFRcENBOzs7Ozs7Ozs7Ozs7OztpREN2S2lEQSxJQUFJQTs7Ozs7b0JBNkJyREE7Ozs7O29CQTVCbUJBOzs7cUJBd0NDQTtvQkFDREE7Ozs7O29CQTlCZkEsT0FBT0E7OztvQkFFTEEsd0JBQXVDQTs7Ozs7b0JBT3pDQSxPQUFPQTs7O29CQUdMQSxxQkFBb0NBOzs7Ozs0QkFXekJBLFVBQTZDQTs7Ozs7O2dCQUU5REEsaUJBQVlBO2dCQUNaQSxrQkFBYUE7Ozs7O2dCQWpDYkE7OztnQkF5Q0FBOztnQkFFQUEsWUFBWUE7Z0JBQ1pBLFdBQVdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0JBbUJYQSxnQkFBZ0JBLFVBQUNBOzs7OztnQkFPakJBLDJDQUFtREEsQUFBNkRBLFVBQUNBO29CQUU3R0E7OztnQkFHSkEseUNBQWlEQSxBQUE2REEsVUFBQ0E7b0JBRTNHQTs7O2dCQUdKQTs7Ozs7Ozs7Ozs7Ozs7O3VDQzNFa0RBOzs7OzRCQWlHdEJBO3dCQUNlQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3QkE1RXJDQSxPQUFPQTs7O3dCQUdUQSxJQUFHQSwwREFBa0JBOzRCQUVqQkEsSUFBR0EsU0FBU0EsUUFBUUEseUJBQXlCQSxRQUFRQSxpQ0FBaUNBO2dDQUVsRkEsSUFBR0EsZ0VBQTJCQTtvQ0FFMUJBLCtEQUErREEsQUFBa0RBO29DQUNqSEEsNENBQTBCQTs7OzRCQUdsQ0EsSUFBR0EsMkNBQXlCQTtnQ0FFeEJBO2dDQUNBQSwwQ0FBd0JBOzs0QkFFNUJBLElBQUdBLHdDQUFzQkE7Z0NBRXJCQSxhQUF5QkE7Z0NBQ3pCQSx3Q0FBc0JBOzs7NEJBRzFCQSxtQ0FBaUJBOzs0QkFFakJBOzRCQUNBQSxJQUFHQSxvQ0FBa0JBLFFBQVFBLENBQUNBLGlCQUFnQkEseURBQXNDQSxvREFBa0NBO2dDQUVsSEEsNENBQTBCQSxVQUFDQTtvQ0FFdkJBLElBQUdBLHdDQUFzQkE7d0NBRXJCQSxhQUF5QkE7O29DQUU3QkEsd0NBQXNCQSxrQkFBS0EsV0FBdUJBLEFBQW1DQSxVQUFDQTt3Q0FFbEZBLElBQUdBLDJDQUF5QkE7NENBRXhCQTs0Q0FDQUEsMENBQXdCQTs7d0NBRTVCQSxJQUFHQSw0Q0FBMEJBOzRDQUV6QkEsYUFBeUJBOzRDQUN6QkEsNENBQTBCQTs7d0NBRTlCQSwwQ0FBd0JBLElBQUlBLDRCQUFlQTt3Q0FDM0NBLDZDQUEyQkE7O3dDQUUzQkEsNENBQTBCQSxrQkFBS0EsV0FBdUJBLEFBQW1DQSxVQUFDQTs0Q0FFdEZBLElBQUdBLDJDQUF5QkE7Z0RBRXhCQTtnREFDQUEsMENBQXdCQTs7MkNBRTVCQSxlQUFlQSw4QkFBZ0JBLFNBQVNBOzt3Q0FFNUNBLElBQUdBLGdFQUEyQkE7NENBRTFCQSwrREFBK0RBLEFBQWtEQTs0Q0FDakhBLDRDQUEwQkE7O3VDQUU5QkEsWUFBWUE7O2dDQUVwQkEsNERBQStFQSxBQUFrREE7Ozs7Ozs7d0JBaVp2SUEsT0FBT0E7Ozt3QkFHVEEsSUFBR0EsdURBQWVBOzRCQUVkQSxvQ0FBa0JBOzs0QkFFbEJBLElBQUdBLGlDQUFlQTtnQ0FFZEE7Z0NBQ0FBLElBQUdBLHlDQUF1QkE7b0NBRXRCQSxJQUFHQTt3Q0FFQ0E7d0NBQ0FBOztvQ0FFSkE7Ozs0QkFHUkEsZ0NBQWNBOzRCQUNkQSxJQUFHQSxpQ0FBZUE7Z0NBRWRBO2dDQUNBQSxJQUFHQSx5Q0FBdUJBO29DQUV0QkE7b0NBQ0FBOzs7NEJBR1JBLElBQUdBLHdFQUFnQ0EsQ0FBQ0EsQ0FBQ0EsaUNBQWVBLFFBQVFBLENBQUNBLENBQUNBLHNFQUE4QkEsaUNBQWVBO2dDQUV2R0E7Ozs7Ozs7OzBDQS9nQjBCQSxLQUFJQTsrQ0FJTEE7bURBR0lBO29DQWlCb0JBLEtBQUlBOzs7Ozs7OzJDQW9ObkJBLElBQUlBLDRCQUFlQTsyQ0FDaEJBLEtBQUlBOzs7O3NDQVdiQTs7bUNBbWhFVEEsS0FBSUE7Ozs7O29CQTE3RG5DQSxPQUFPQSxnQ0FBY0E7OztvQkE0RnJCQSxLQUFJQSxRQUFRQSxtREFBMkJBLFFBQVFBO3dCQUUzQ0EsYUFBYUEsMENBQWdCQTt3QkFDN0JBLElBQUdBLG9CQUFvQkE7NEJBRW5CQSxLQUFJQSxXQUFXQSxJQUFJQSwyQkFBMkJBO2dDQUUxQ0EsSUFBR0EsNEJBQW9CQSxNQUFNQTtvQ0FFekJBLDRCQUFvQkE7Ozs0QkFHNUJBLDJDQUF5QkE7OzRCQUl6QkEsT0FBT0E7Ozs7b0JBSWZBLE9BQU9BOzs7b0JBS1BBLHVCQUF1QkE7b0JBQ3ZCQSxJQUFHQSxvQkFBb0JBO3dCQUNuQkE7OztvQkFFSkE7O29CQUVBQSxtQkFBbUJBOztvQkFFbkJBLEtBQUlBLFdBQVdBLElBQUlBLG9CQUFvQkE7d0JBRW5DQSxXQUFXQSxxQkFBYUE7d0JBQ3hCQSxJQUFHQSxRQUFRQTs0QkFFUEE7Ozs7b0RBa0VnQ0EsU0FBaUNBO29CQUV6RUEsMkJBQTJCQTs7O29CQUszQkEsSUFBR0EsZ0NBQWNBO3dCQUViQSxXQUFXQTt3QkFDWEE7d0JBQ0FBLFdBQXVCQSxBQUFtQ0EsVUFBQ0E7NEJBRXZEQTs7Ozs0Q0FLd0JBO29CQUVoQ0EsSUFBR0E7d0JBRUNBLHNCQUF5REEsVUFBQ0E7NEJBRXREQTs7O3dCQUtKQSxTQUFhQTt3QkFDYkE7Ozs7b0JBTUpBLGdCQUE2QkEsVUFBQ0E7d0JBRTFCQSxJQUFHQSx1QkFBbUNBOzRCQUNsQ0EsMEJBQWtFQTs7OztvQkFHMUVBLGlCQUE4QkEsVUFBQ0E7d0JBRTNCQSxJQUFHQSxDQUFDQSx1QkFBbUNBOzRCQUNuQ0EsMEJBQWtFQTs7Ozs7b0JBTTFFQTt3QkFFSUEsUUFBUUE7O3dCQUVSQSxLQUFJQSxXQUFXQSxJQUFJQSxzQkFBc0JBOzRCQUVyQ0EsSUFBR0EsdUJBQWVBLE1BQU1BLFFBQVFBLGlDQUFlQSwrQkFDM0NBLHVCQUFlQTtnQ0FFZkEsdUJBQWVBOzs7d0JBR3ZCQSxJQUFHQTs0QkFFQ0E7Ozs7Ozs7b0JBWVJBO29CQUNBQTtvQkFDQUE7b0JBQ0FBOzs7b0JBS0FBO29CQUNBQSxJQUFHQTt3QkFFQ0E7d0JBQ0FBO3dCQUNBQTs7O2lDQUlpQkE7O29CQUdyQkEsSUFBR0E7d0JBQ0NBOztvQkFDSkE7O29CQUVBQSxJQUFHQSxVQUFVQTt3QkFDVEEsMkJBQVNBOzt3QkFFVEEsMkJBQVNBOzs7b0JBRWJBLGlDQUFlQTs7b0JBRWZBLGdDQUFjQTs7b0JBRWRBLGlDQUFlQTtvQkFDZkE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBLCtDQUE2QkEsVUFBQ0E7d0JBRTFCQTs7b0JBRUpBLDZDQUEyQkEsVUFBQ0E7d0JBRXhCQTt3QkFDQUE7O29CQUVKQTs7b0JBRUFBLDBCQUFrRUE7O29CQUVsRUEsNENBQTBCQSxVQUFDQTt3QkFFdkJBLElBQUdBOzRCQUVDQTs7O3dCQUdKQSxJQUFHQSwwQkFBdUNBOzRCQUd0Q0E7NEJBQ0FBOzRCQUNBQTs7O29CQUdSQSx3Q0FBc0JBLFVBQUNBO3dCQUVuQkE7O29CQUVKQSw4Q0FBNEJBLFVBQUNBO3dCQUV6QkE7d0JBQ0FBOztvQkFFSkE7O29CQUVBQSxtQkFBZ0NBLFVBQUNBO3dCQUU3QkEsYUFBYUE7d0JBQ2JBLEtBQUlBLFdBQVdBLElBQUlBLFFBQVFBOzRCQUV2QkEsSUFBR0Esd0RBQVNBLElBQU1BO2dDQUNkQSxtQ0FBU0EsR0FBR0E7Ozs7O29CQUl4QkEsa0JBQStCQSxVQUFDQTt3QkFFNUJBLElBQUdBLHFDQUFtQkE7NEJBQ2xCQTs7O3dCQUVKQSxLQUFJQSxXQUFXQSxJQUFJQSx5Q0FBdUJBOzRCQUV0Q0EsSUFBR0EsMENBQWdCQSxNQUFNQTtnQ0FDckJBOzs0QkFDSkEsU0FBU0EsMENBQWdCQTs0QkFDekJBLElBQUdBLGdCQUFnQkE7Z0NBQ2ZBOzs0QkFDSkEsS0FBSUEsV0FBV0EsSUFBSUEsdUJBQXVCQTtnQ0FFdENBLElBQUdBLHdCQUFnQkEsTUFBTUE7b0NBQ3JCQSx3QkFBZ0JBOzs7Ozt3QkFJNUJBOzs7b0JBR0pBLHFCQUFrQ0EsVUFBQ0E7d0JBRS9CQSxJQUFHQTs0QkFDQ0E7Ozt3QkFFSkEsVUFBVUE7O3dCQUVWQSxJQUFHQSxnQ0FBY0E7NEJBRWJBOzRCQUNBQTs0QkFDQUE7OzRCQUVBQSxJQUFHQSxDQUFDQTtnQ0FDQUE7Ozs0QkFFSkEsSUFBR0E7Z0NBRUNBLElBQUdBO29DQUVDQTs7b0NBSUFBOzs7Z0NBR0pBOzs7NEJBR0pBLGVBQWVBLDJDQUE4QkE7OzRCQUU3Q0E7NEJBQ0FBOzs0QkFFQUEsV0FBV0EsQ0FBQ0EsQ0FBQ0EsTUFBS0EsZ0JBQWVBOzRCQUNqQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsTUFBS0EsZ0JBQWVBOzs0QkFFakNBLElBQUdBLDZDQUEwQkEsMENBQ3pCQSxpQ0FBY0E7Z0NBRWRBO2dDQUNBQSxPQUFPQSxjQUFjQSxDQUFDQTtnQ0FDdEJBLHVDQUFxQkEsT0FBT0E7Ozs0QkFHaENBLFFBQVVBLEFBQU9BLFdBQWtCQTs0QkFDbkNBLFFBQVVBLEFBQU9BLFdBQWtCQTs0QkFDbkNBLFFBQVVBLEFBQU9BLFdBQWtCQTs0QkFDbkNBLFFBQVVBLEFBQU9BLFdBQWtCQTs7NEJBRW5DQSxTQUFXQTs0QkFDWEEsU0FBV0E7NEJBQ1hBLFNBQVdBOzRCQUNYQSxTQUFXQTs7NEJBRVhBLElBQUdBO2dDQUNDQTs7NEJBQ0pBLElBQUdBO2dDQUNDQTs7OzRCQUVKQSxJQUFHQTtnQ0FDQ0E7OzRCQUNKQSxJQUFHQTtnQ0FDQ0E7Ozs0QkFFSkEsUUFBT0E7Z0NBRUhBLEtBQUtBO29DQUNEQSxJQUFJQTtvQ0FDSkEsSUFBSUE7b0NBQ0pBO2dDQUVKQSxLQUFLQTtvQ0FDREEsS0FBS0EsT0FBT0E7b0NBQ1pBLEtBQUtBLE9BQU9BO29DQUVaQSxJQUFHQSxJQUFJQTt3Q0FFSEEsUUFBUUEsd0NBQXNCQTt3Q0FDOUJBLElBQUlBOztvQ0FFUkEsSUFBR0EsSUFBSUE7d0NBRUhBLFFBQVFBLHlDQUF1QkE7d0NBQy9CQSxJQUFJQTs7b0NBRVJBLElBQUlBO29DQUNKQSxJQUFJQTtvQ0FFSkE7Z0NBRUpBLEtBQUtBO29DQUNEQSxLQUFLQSxPQUFPQTtvQ0FFWkEsSUFBR0EsSUFBSUE7d0NBRUhBLFFBQVFBLHlDQUF1QkE7d0NBQy9CQSxJQUFJQTs7b0NBR1JBLElBQUlBO29DQUVKQTtnQ0FFSkEsS0FBS0E7b0NBQ0RBLEtBQUtBLE9BQU9BO29DQUNaQSxJQUFJQSxLQUFLQTtvQ0FFVEEsSUFBR0EsSUFBSUE7d0NBRUhBLFFBQVFBLHlDQUF1QkE7d0NBQy9CQSxJQUFJQTs7b0NBRVJBLElBQUdBLElBQUlBO3dDQUNIQSxJQUFJQTs7b0NBRVJBLElBQUlBO29DQUVKQTtnQ0FFSkEsS0FBS0E7b0NBQ0RBLEtBQUtBLE9BQU9BO29DQUVaQSxJQUFHQSxJQUFJQTt3Q0FFSEEsUUFBUUEsd0NBQXNCQTt3Q0FDOUJBLElBQUlBOztvQ0FHUkEsSUFBSUE7b0NBRUpBO2dDQUVKQSxLQUFLQTtvQ0FDREEsS0FBS0EsT0FBT0E7b0NBQ1pBLElBQUlBLEtBQUtBO29DQUVUQSxJQUFHQSxJQUFJQTt3Q0FFSEEsUUFBUUEsd0NBQXNCQTt3Q0FDOUJBLElBQUlBOztvQ0FHUkEsSUFBR0EsSUFBSUE7d0NBQ0hBLElBQUlBOztvQ0FFUkEsSUFBSUE7b0NBRUpBO2dDQUVKQSxLQUFLQTtvQ0FDREEsSUFBSUEsS0FBS0E7b0NBRVRBLElBQUdBLElBQUlBO3dDQUNIQSxJQUFJQTs7b0NBRVJBO2dDQUVKQSxLQUFLQTtvQ0FDREEsSUFBSUEsS0FBS0E7b0NBRVRBLElBQUdBLElBQUlBO3dDQUNIQSxJQUFJQTs7b0NBRVJBO2dDQUVKQSxLQUFLQTtvQ0FDREEsSUFBSUEsS0FBS0E7b0NBRVRBLElBQUlBLEtBQUtBO29DQUVUQSxJQUFHQSxJQUFJQTt3Q0FDSEEsSUFBSUE7O29DQUNSQSxJQUFHQSxJQUFJQTt3Q0FDSEEsSUFBSUE7O29DQUVSQTs7NEJBRVJBOzRCQUNBQSxJQUFHQSxPQUFNQTtnQ0FFTEEsSUFBR0EseUNBQTRCQSxpQ0FBY0EscUNBQXdCQSw4Q0FBaUNBO29DQUVsR0EsSUFBSUEsZ0JBQUNBLGtCQUFLQSxBQUFDQSxJQUFJQSwwQ0FBOEJBO29DQUM3Q0EsSUFBR0EsT0FBTUE7d0NBRUxBLDBDQUF3QkE7OztvQ0FLNUJBLDBDQUF3QkE7Ozs7NEJBSWhDQSxJQUFHQSxPQUFNQTtnQ0FFTEEsSUFBR0EseUNBQTRCQSxpQ0FBY0EscUNBQXdCQSw4Q0FBaUNBO29DQUVsR0EsSUFBSUEsZ0JBQUNBLGtCQUFLQSxBQUFDQSxJQUFJQSwwQ0FBOEJBO29DQUM3Q0EsSUFBR0EsT0FBTUE7d0NBRUxBLHlDQUF1QkE7OztvQ0FJM0JBLHlDQUF1QkE7Ozs7NEJBSS9CQSxJQUFHQSxPQUFNQTtnQ0FFTEE7Z0NBQ0FBLDJDQUF5QkE7Ozs0QkFHN0JBLElBQUdBLE9BQU1BO2dDQUVMQTtnQ0FDQUEsNENBQTBCQTs7OzRCQUc5QkEsSUFBR0E7Z0NBQ0NBOzs7OztvQkFJWkEsbUJBQWdDQSxVQUFDQTt3QkFFN0JBO3dCQUNBQSxJQUFHQSxnQ0FBY0E7NEJBRWJBLElBQUdBLENBQUNBO2dDQUNBQSwrQ0FBNkJBOzs0QkFDakNBOzs7d0JBR0pBLCtCQUFhQTt3QkFDYkE7d0JBQ0FBLCtCQUFhQTt3QkFDYkE7O29CQUVKQSx3QkFBcUNBLFVBQUNBO3dCQUVsQ0EsSUFBR0EsQ0FBQ0E7NEJBRUFBOzs7b0JBR1JBLGtCQUErQkEsVUFBQ0E7d0JBRTVCQSxJQUFHQSwrREFBK0JBOzRCQUM5QkE7Ozs7b0JBR1JBLGNBQWtCQTs7b0JBRWxCQSxnQkFBeURBLFVBQUNBLFNBQWdCQSxLQUFZQSxZQUFnQkEsY0FBa0JBO3dCQUVwSEEsSUFBR0E7NEJBRUNBOzt3QkFFSkE7NEJBRUlBOzRCQUNBQTs0QkFDQUEsSUFBR0EsaUNBQTBCQSxZQUFZQTtnQ0FFckNBOztnQ0FJQUEsU0FBU0Esb0JBQW1CQTs7OzRCQUdoQ0EsSUFBR0EsZ0RBQWtDQTtnQ0FFakNBLDZCQUFnQkEsUUFBUUE7Ozs0QkFHNUJBLElBQUdBO2dDQUVDQSxhQUFhQSxJQUFJQSxpQ0FBZUEsUUFBUUE7Z0NBQ3hDQTs7Ozs7NEJBUUpBOzs7d0JBR0pBOzs7b0JBR0pBLGtCQUFrQkE7O29CQUVsQkEsMkNBQXNDQTs7b0JBRXRDQSxnRUFBc0JBOztxQ0FHR0E7b0JBRXpCQSw2QkFBeUNBO29CQUN6Q0EsUUFBUUE7b0JBQ1JBO29CQUNBQSxzQ0FBa0RBOzs7O29CQWtIbERBLElBQUdBLDhDQUE0QkEsMENBQXdCQTt3QkFDbkRBLHdDQUFzQkE7O29CQUMxQkEsaUJBQWlCQSxLQUFJQTtvQkFDckJBO29CQUNBQTtvQkFDQUE7O29CQUVBQSxlQUFlQSxBQUFxQkE7O29CQUVwQ0EsMEJBQW9CQTs7Ozs0QkFFaEJBLElBQUdBLGdCQUFnQkEsUUFBUUEscUJBQW9CQTtnQ0FFM0NBLGVBQWVBOztnQ0FJZkEsa0JBQWtCQSxJQUFJQTs7Z0NBRXRCQSxJQUFHQSxhQUFhQSxjQUFjQTtvQ0FFMUJBO29DQUNBQTtvQ0FDQUE7OztnQ0FHSkEsZ0JBQWdCQSxJQUFJQSw0QkFBUUEsWUFBWUEsYUFBYUEsQ0FBQ0E7O2dDQUV0REE7O2dDQUVBQSxjQUFjQTs7Ozs7Ozs7b0JBR3RCQSwyQkFBb0JBOzs7OzRCQUVoQkEsd0NBQXNCQTs7Ozs7Ozs7OztvQkFzNUIxQkEsUUFBUUE7b0JBQ1JBLDhDQUE0QkEsMkJBQU1BO29CQUNsQ0E7O29CQUVBQSxLQUFJQSxXQUFZQSxJQUFJQSxrREFBZ0NBO3dCQUVoREEsSUFBR0EsU0FBU0Esa0NBQWFBLHdDQUFzQkE7NEJBRTNDQSx3Q0FBc0JBOzRCQUN0QkE7OzRCQUlBQSx3Q0FBc0JBLGtCQUFnREEsc0JBQUNBLElBQUlBOzs7OztvQkFPbkZBO29CQUNBQSxLQUFJQSxXQUFZQSxJQUFJQSxrREFBZ0NBO3dCQUVoREEsd0NBQXNCQSxrQkFBZ0RBOzs7NkNBSTNDQSxnQkFBK0JBO29CQUU5REEsbUJBQTBCQSxLQUFJQTs7b0JBRTlCQSxtQkFBbUJBO29CQUNuQkEsSUFBR0EsZ0JBQWdCQTt3QkFFZkEsS0FBSUEsV0FBV0EsSUFBSUEsb0JBQW9CQTs0QkFFbkNBLElBQUdBLHFCQUFhQSxjQUFjQTtnQ0FFMUJBLDhCQUFZQSxxQkFBYUE7O2dDQUl6QkEsSUFBR0EscUJBQWFBO29DQUNaQSxpQkFBaUJBLHFCQUFhQTs7Ozt3QkFHMUNBLEtBQUlBLFlBQVdBLEtBQUlBLGlDQUFlQTs0QkFFOUJBLElBQUdBLHNCQUFzQkEsa0NBQVFBO2dDQUU3QkEsb0JBQW9CQSxrQ0FBUUE7Z0NBQzVCQSxrQ0FBUUEsSUFBS0E7Ozs7d0JBSXJCQSxpQ0FBZUE7O3dCQUVmQSxJQUFHQSw0QkFBNEJBOzRCQUUzQkE7NEJBQ0FBLHdDQUF3Q0E7NEJBQ3hDQTs7Ozt3QkFtQkpBLEtBQUlBLFlBQVdBLEtBQUlBLG9CQUFvQkE7NEJBRW5DQSxXQUFXQSxxQkFBYUE7NEJBQ3hCQSxvQkFBb0JBOzRCQUNwQkEsaUJBQWlCQTs7d0JBRXJCQSxhQUFhQTt3QkFDYkEsS0FBSUEsWUFBV0EsS0FBSUEsUUFBUUE7NEJBRXZCQSxJQUFHQSxxQkFBYUEsT0FBTUEsUUFDbEJBLHFCQUFhQSxlQUFjQTtnQ0FFM0JBLHFCQUFhQTtnQ0FDYkEscUJBQWFBLG1CQUFrQkE7Z0NBQy9CQTs7Ozs7O29CQW9CWkEsT0FBT0E7OztvQkF5RFBBOztvQkFFQUEsSUFBR0EscUNBQW1CQSxRQUFRQTt3QkFDMUJBOztvQkFDSkEseUNBQXVCQTtvQkFDdkJBLFlBQVlBO29CQUNaQTs7O29CQUlBQSw4Q0FBNEJBLG1CQUFrQkE7O29CQUU5Q0EsS0FBSUEsV0FBV0EsSUFBSUEsT0FBT0E7d0JBYXRCQSxJQUFHQSxNQUFLQTs0QkFHSkEsNkNBQTJCQTs0QkFDM0JBOzt3QkFFSkEsU0FBU0Esb0NBQWdCQSwwQ0FBZ0JBLElBQUlBOztvQkFFakRBLFNBQVNBLG9DQUFnQkEsbUNBQWlCQTs7O29CQUsxQ0EsSUFBR0EsZ0NBQWNBO3dCQUViQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkE5MURxQkE7Ozs7Ozs7Ozs7O29CQTVabkJBLE9BQU9BOzs7b0JBRVRBLHlCQUFvQkE7b0JBQ3BCQSxJQUFHQTt3QkFDQ0E7O3dCQUVBQSwrQkFBMEJBOzs7Ozs7b0JBNEZUQSxPQUFPQTs7Ozs7b0JBZXBDQSxPQUFPQTs7Ozs7b0JBT0dBLE9BQU9BLHVCQUFrQkE7OztvQkFHM0JBLHlCQUFvQkEsc0NBQXlCQTs7Ozs7b0JBT3JEQSxPQUFPQTs7Ozs7b0JBS0dBLE9BQU9BLG9CQUFlQTs7O29CQUd4QkEseUJBQW9CQSxtQ0FBc0JBOzs7OztvQkFNeENBLE9BQU9BLHFCQUFnQkE7OztvQkFHekJBLHlCQUFvQkEsc0NBQXlCQTs7Ozs7b0JBTTNDQSxPQUFPQSxtQkFBY0E7OztvQkFHdkJBLHlCQUFvQkEsa0NBQXFCQTs7Ozs7b0JBa0t2Q0EsT0FBT0E7OztvQkFDUEEsb0JBQWVBOzs7OztvQkE2OENmQSxPQUFPQTs7O29CQUNQQSw4QkFBeUJBOzs7OztvQkFLekJBLE9BQU9BOzs7b0JBQ1BBLGtDQUE2QkE7Ozs7O29CQUs3QkEsT0FBT0E7OztvQkFDUEEsd0JBQW1CQTs7Ozs7Ozs7Ozs7Ozs7OztnQ0E1bURJQSxLQUFJQTtxQ0FxRElBOztvQ0FhRkE7Ozt3Q0EyRUlBO3FDQWsrQ0RBLEtBQUlBOzs7Ozs7OztnQkF2WjFDQSxlQUFVQTs7Z0JBRVZBLDZCQUF3QkEsVUFBQ0E7b0JBRXJCQTtvQkFDQUE7OztnQkFHSkEsb0JBQWVBOztnQkFFZkEsWUFBT0E7O2dCQUVQQSwwQkFBcUJBLCtCQUFDQTtvQkFFbEJBLElBQUdBLGtDQUFhQTt3QkFFWkE7d0JBQ0FBOzs7O2dCQUlSQTs7Z0JBRUFBLG1CQUFjQTs7Z0JBRWRBLGlDQUE0QkE7O2dCQUU1QkEseUJBQW9CQTtnQkFDcEJBLElBQUdBLENBQUNBO29CQUVBQSx5QkFBb0JBO29CQUNwQkEseUJBQW9CQTs7O2dCQUd4QkEsSUFBR0E7b0JBRUNBO29CQUNBQTs7b0JBRUFBO29CQUNBQTs7b0JBRUFBO29CQUNBQTs7O2dCQUdKQTs7Z0JBRUFBLDJDQUFzQ0EsQUFBbURBLCtCQUFDQTtvQkFFdEZBLElBQUdBO3dCQUNDQTs7b0JBQ0pBLFVBQVVBOztvQkFFVkE7b0JBQ0FBOztvQkFFQUEsSUFBR0EsQ0FBQ0E7d0JBQ0FBOzs7b0JBRUpBOztvQkFFQUEsK0JBQWFBO29CQUNiQSwrQkFBYUE7O29CQUViQTs7b0JBRUFBLGdCQUFnQkEsQUFBcUJBOztvQkFFckNBLGVBQWVBLDJDQUE4QkE7O29CQUU3Q0EsZUFBVUEsQUFBT0EsaUJBQWlCQTtvQkFDbENBLGVBQVVBLEFBQU9BLGdCQUFnQkE7O29CQUVqQ0EsWUFBWUEsQUFBT0E7b0JBQ25CQSxhQUFhQSxBQUFPQTs7b0JBRXBCQSxRQUFVQSxjQUFjQSxBQUFPQTtvQkFDL0JBLFFBQVVBLGNBQWNBLEFBQU9BOztvQkFFL0JBLElBQUdBLHFCQUFlQTt3QkFFZEE7d0JBQ0FBLCtCQUFhQTsyQkFFWkEsSUFBR0EscUJBQWVBO3dCQUVuQkE7d0JBQ0FBLCtCQUFhQTt3QkFDYkE7O3dCQUlBQSxJQUFHQTs0QkFDQ0E7Ozt3QkFFSkEsSUFBR0EscUJBQWdCQSxRQUFRQSxrQ0FBYUE7NEJBRXBDQTs0QkFDQUEsK0JBQWFBOzs0QkFJYkEsSUFBR0E7Z0NBRUNBLElBQUdBLEtBQUtBLG1DQUFpQkEsS0FBS0E7b0NBRTFCQTtvQ0FDQUEsK0JBQWFBO3VDQUVaQSxJQUFHQSxLQUFLQSxtQ0FBaUJBLEtBQUtBLFFBQVFBO29DQUV2Q0E7b0NBQ0FBLCtCQUFhQTt1Q0FFWkEsSUFBR0EsS0FBS0E7b0NBRVRBO29DQUNBQSwrQkFBYUE7dUNBRVpBLElBQUdBLEtBQUtBLG1DQUFpQkEsS0FBS0EsU0FBU0E7b0NBRXhDQTtvQ0FDQUEsK0JBQWFBO3VDQUVaQSxJQUFHQSxLQUFLQSxTQUFTQSxtQ0FBaUJBLEtBQUtBLFFBQVFBO29DQUVoREE7b0NBQ0FBLCtCQUFhQTt1Q0FFWkEsSUFBR0EsS0FBS0EsU0FBU0E7b0NBRWxCQTtvQ0FDQUEsK0JBQWFBO3VDQUVaQSxJQUFHQSxLQUFLQTtvQ0FFVEE7b0NBQ0FBLCtCQUFhQTt1Q0FFWkEsSUFBR0EsS0FBS0EsUUFBUUE7b0NBRWpCQTtvQ0FDQUEsK0JBQWFBOztvQ0FJYkE7b0NBQ0FBLCtCQUFhQTs7Ozs7O29CQU03QkEsSUFBR0EsQ0FBQ0Esd0JBQW1CQSxpQ0FBY0E7d0JBRWpDQTt3QkFDQUEsK0JBQWFBOzs7O2dCQUlyQkEsMENBQXFDQSxBQUFtREEsK0JBQUNBO29CQUVyRkEsSUFBR0E7d0JBRUNBOzs7b0JBR0pBO29CQUNBQTs7O2dCQUdKQSw0Q0FBK0NBLEFBQTZEQSxVQUFDQTtvQkFFekdBLElBQUdBLGdDQUFjQTt3QkFFYkE7Ozs7Z0JBSVJBLHlDQUE0Q0EsQUFBZ0VBLFVBQUNBO29CQUV6R0E7OztnQkFHSkEsMkNBQXNDQSxBQUFtREEsK0JBQUNBO29CQUV0RkEsSUFBR0E7d0JBQ0NBOzs7b0JBRUpBLElBQUdBLGtDQUFhQTt3QkFDWkE7O29CQUNKQSxVQUFVQTs7b0JBRVZBLFlBQVlBO29CQUNaQSxhQUFhQTtvQkFDYkEsUUFBUUEsWUFBWUE7b0JBQ3BCQSxRQUFRQSxZQUFZQTs7b0JBRXBCQSxJQUFHQSxnQ0FBY0EsUUFBUUEsaUNBQWNBO3dCQUVuQ0E7d0JBQ0FBOzJCQUVDQSxJQUFHQSxxQkFBZUE7d0JBRW5CQTt3QkFDQUE7O29CQUVKQSxJQUFHQTt3QkFDQ0E7OztvQkFFSkEsSUFBR0E7d0JBRUNBLElBQUdBLGlDQUFjQSw4Q0FBaUNBLEtBQUtBLG1DQUFpQkEsS0FBS0E7NEJBRXpFQTsrQkFFQ0EsSUFBR0EsaUNBQWNBLCtDQUFrQ0EsS0FBS0EsbUNBQWlCQSxLQUFLQSxVQUFRQTs0QkFFdkZBOytCQUVDQSxJQUFHQSxLQUFLQSxtQ0FBaUJBLGlDQUFjQTs0QkFFeENBOytCQUVDQSxJQUFHQSxpQ0FBY0EsaURBQW9DQSxLQUFLQSxtQ0FBaUJBLEtBQUtBLFdBQVNBOzRCQUUxRkE7K0JBRUNBLElBQUdBLGlDQUFjQSxrREFBcUNBLEtBQUtBLFdBQVNBLHlDQUFpQkEsS0FBS0EsVUFBUUE7NEJBRW5HQTsrQkFFQ0EsSUFBR0EsaUNBQWNBLDZDQUFnQ0EsS0FBS0EsV0FBU0E7NEJBRWhFQTsrQkFFQ0EsSUFBR0EsaUNBQWNBLDJDQUE4QkEsS0FBS0E7NEJBRXJEQTsrQkFFQ0EsSUFBR0EsaUNBQWNBLDRDQUErQkEsS0FBS0EsVUFBUUE7NEJBRTlEQTs7NEJBSUFBOzs7d0JBS0pBOzs7O2dCQUlSQSwyQ0FBOENBLEFBQWdFQSwrQkFBQ0E7b0JBRTNHQTtvQkFDQUEsSUFBR0EsQ0FBQ0E7d0JBQ0FBOzs7b0JBRUpBLElBQUdBLHFCQUFlQTt3QkFFZEEsK0JBQWFBO3dCQUNiQTs7d0JBRUFBLCtCQUFhQTs7d0JBSWJBLCtCQUFhQTs7O29CQUdqQkEsK0JBQWFBOzs7Z0JBR2pCQSx3Q0FBbUNBLEFBQW1EQSwrQkFBQ0E7b0JBRW5GQSxJQUFHQTt3QkFDQ0E7O29CQUNKQSxJQUFHQSxDQUFDQTt3QkFDQUE7OztvQkFFSkEsK0JBQWFBO29CQUNiQSwrQkFBYUE7b0JBQ2JBOzs7Z0JBR0pBLHdDQUFtQ0EsQUFBbURBLCtCQUFDQTtvQkFFbkZBLElBQUdBO3dCQUNDQTs7O29CQUVKQSxJQUFHQSxnQ0FBY0E7d0JBRWJBLElBQUdBLENBQUNBOzRCQUNBQTs7d0JBQ0pBOzs7O2dCQUlSQSwrQ0FBa0RBLEFBQWdFQSwrQkFBQ0E7b0JBRS9HQSxJQUFHQTt3QkFFQ0E7d0JBQ0FBOztvQkFFSkEsSUFBR0EsQ0FBQ0E7d0JBQ0FBOztvQkFDSkE7b0JBQ0FBLCtCQUFhQTs7O2dCQUdqQkEseUNBQTRDQSxBQUFnRUEsK0JBQUNBO29CQUV6R0EsSUFBR0E7d0JBRUNBO3dCQUNBQTs7O29CQUdKQSxJQUFHQSxnQ0FBY0E7d0JBRWJBOzs7O2dCQUlSQSxnREFBbURBLEFBQWdFQSwrQkFBQ0E7b0JBRWhIQSxJQUFHQTt3QkFFQ0E7d0JBQ0FBOztvQkFFSkEsSUFBR0EsZ0NBQWNBLFFBQVFBO3dCQUVyQkE7d0JBQ0FBOzt3QkFJQUE7Ozs7Z0JBSVJBLDJCQUFzQkE7Z0JBQ3RCQSw0QkFBdUJBOztnQkFFdkJBLGdEQUFvQkE7Z0JBQ3BCQSxnREFBb0JBO2dCQUNwQkEsZ0RBQW9CQTs7Z0JBRXBCQSxnREFBb0JBOztnQkFFcEJBLG1CQUFjQTtvQkFFVkE7b0JBQ0FBLElBQUdBLGdCQUFXQTt3QkFFVkE7d0JBQWtCQSxlQUFVQTs7OztnQkFJcENBOzs7OztnQkF6a0RBQSxPQUFPQTs7dUNBS2lCQTtnQkFFeEJBLElBQUdBLFNBQVNBO29CQUNSQTs7Z0JBQ0pBLGtCQUFhQTtnQkFDYkEsbUJBQW1CQTs7MENBR1FBOztnQkFFM0JBLElBQUdBLFlBQVlBLFFBQVFBO29CQUNuQkE7O2dCQUNKQSx1QkFBa0JBO2dCQUNsQkEsS0FBSUEsV0FBV0EsSUFBSUEsaUJBQWlCQTtvQkFFaENBLElBQUdBLDRCQUFTQSxHQUFUQSxjQUFlQTt3QkFDZEEsNEJBQVNBLEdBQVRBLHdCQUF5QkE7Ozs7bUNBSWJBO2dCQUVwQkEsc0JBQXdDQSxpQ0FBa0JBOztnQkFFMURBLE9BQU9BOztxQ0FVYUE7Z0JBRXBCQSxzQkFBbUNBOztnQkFFbkNBLE9BQU9BOztzQ0FYZ0JBOztnQkFFdkJBLGdEQUF5QkE7O2dCQUV6QkEsT0FBT0E7O3dDQVVnQkE7O2dCQUV2QkEsZ0RBQXlCQTs7Z0JBRXpCQSxPQUFPQTs7c0NBaURnQkE7Z0JBRXZCQSxJQUFHQSxvQ0FBWUE7b0JBQ1hBLGNBQVNBOztnQkFDYkE7O2dCQUVBQSxLQUFJQSxXQUFZQSxJQUFJQSx3QkFBd0JBO29CQUV4Q0EsSUFBR0EsQ0FBQ0EsZ0JBQWdCQTt3QkFDaEJBOztvQkFDSkEsS0FBSUEsV0FBV0EsSUFBSUEscUJBQWdCQTt3QkFFL0JBLElBQUdBLHNCQUFTQSxNQUFNQSxRQUFRQSwyQ0FBU0EsYUFBZUE7NEJBRTlDQSxJQUFHQSw2Q0FBU0EsWUFBY0EsZ0JBQWdCQTtnQ0FFdENBLHNCQUFTQSxZQUFZQSxzQkFBU0E7Z0NBQzlCQTs7OztvQkFJWkEsb0JBQWVBLGdCQUFnQkE7Ozs7Z0JBTW5DQSxJQUFHQSxvQ0FBWUE7b0JBQ1hBLGNBQVNBOztnQkFDYkE7O2dCQUVBQSxLQUFJQSxXQUFXQSxJQUFJQSxxQkFBZ0JBO29CQUUvQkEsSUFBR0Esc0JBQVNBLE1BQU1BLFFBQVFBLDJDQUFTQSxhQUFlQTt3QkFFOUNBLHNCQUFTQSxZQUFZQSxzQkFBU0E7Ozs7OztnQkF5QnRDQSxPQUFPQSxnQkFBV0EsUUFBUUE7OzJDQUdFQSxRQUF1QkE7O2dCQUVuREEsUUFBT0E7b0JBRUhBLEtBQUtBO3dCQUNEQSxJQUFHQSx1QkFBa0JBOzRCQUVqQkE7NEJBQ0FBLHNCQUFpQkE7O3dCQUVyQkEsSUFBR0E7NEJBRUNBLHNCQUFpQkEsc0JBQWlCQTs7d0JBR3RDQTtvQkFFSkEsS0FBS0E7d0JBQ0RBLElBQUdBLHFCQUFnQkE7NEJBRWZBOzRCQUNBQSxvQkFBZUE7O3dCQUVuQkEsSUFBR0E7NEJBRUNBLG9CQUFlQSxzQkFBaUJBOzt3QkFFcENBO29CQUVKQSxLQUFLQTt3QkFDREEsSUFBR0Esb0JBQWVBOzRCQUVkQTs0QkFDQUEsbUJBQWNBOzt3QkFFbEJBLElBQUdBOzRCQUVDQSxtQkFBY0Esc0JBQWlCQTs7d0JBRW5DQTtvQkFFSkEsS0FBS0E7d0JBQ0RBLElBQUdBLG1CQUFjQTs0QkFFYkE7NEJBQ0FBLGtCQUFhQTs7d0JBRWpCQSxJQUFHQTs0QkFFQ0Esa0JBQWFBLHNCQUFpQkE7O3dCQUVsQ0E7b0JBRUpBO3dCQUNJQTs7O2dCQUdSQTs7Ozs7Ozs7Z0JBd0VBQSxJQUFHQSxvQkFBZUEsUUFDZEE7b0JBRUFBLElBQUdBO3dCQUVDQTs7b0JBRUpBOzs7OztzQ0E2aUJtQkE7Z0JBRXZCQSxJQUFHQSxVQUFTQTtvQkFDUkE7OztnQkFFSkEsd0JBQW1CQTs7Z0JBRW5CQSxJQUFHQSwwQkFBb0JBO29CQUVuQkEsMEJBQXFCQTtvQkFDckJBLHVCQUFrQkE7b0JBQ2xCQSx1QkFBa0JBO29CQUNsQkEsb0JBQWVBO29CQUNmQSxvQkFBZUE7b0JBQ2ZBO29CQUNBQTtvQkFDQUE7O29CQUVBQSxJQUFHQSx1QkFBa0JBO3dCQUVqQkE7O29CQUVKQTs7b0JBRUFBLHdDQUFzQkE7O29CQUV0QkEsMEJBQXFCQTs7b0JBRXJCQTs7O2dCQUdKQSxJQUFHQSxDQUFDQTtvQkFDQUE7OztnQkFFSkEsSUFBR0EsQ0FBQ0Esb0JBQWNBLFlBQVVBO29CQUV4QkEsb0NBQWVBLGdCQUFXQSxlQUFVQSxpQkFBWUE7b0JBQ2hEQTtvQkFDQUE7dUJBRUNBLElBQUdBLHFCQUFlQTtvQkFFbkJBLElBQUdBLDBCQUFvQkE7d0JBRW5CQSxpQkFBWUE7d0JBQ1pBLGdCQUFXQTt3QkFDWEEsa0JBQWFBO3dCQUNiQSxtQkFBY0E7OztvQkFHbEJBOztvQkFFQUE7dUJBRUNBLElBQUdBLHFCQUFlQTtvQkFFbkJBLDBCQUFxQkE7b0JBQ3JCQSwwQkFBcUJBO29CQUNyQkEsdUJBQWtCQTtvQkFDbEJBLHVCQUFrQkE7b0JBQ2xCQSx1QkFBa0JBOztvQkFFbEJBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTs7b0JBRUFBLElBQUdBLDBCQUFvQkE7d0JBRW5CQSxpQkFBWUE7d0JBQ1pBLGdCQUFXQTt3QkFDWEEsa0JBQWFBO3dCQUNiQSxtQkFBY0E7O3dCQUlkQTs7O29CQUdKQTtvQkFDQUE7b0JBQ0FBOztvQkFFQUEsYUFBYUEsQ0FBQ0E7O29CQUVkQSxhQUFRQSxBQUFPQSxTQUFTQSxrQ0FBYUEsdUNBQWtDQTtvQkFDdkVBOztvQkFFQUE7O29CQUVBQSxJQUFHQSx1QkFBa0JBO3dCQUVqQkE7OztvQkFHSkEsdUJBQWtCQTtvQkFDbEJBOztvQkFFQUEscUNBQW1CQTs7b0JBRW5CQTs7O2dCQUdKQTs7O2dCQWlEQUEsSUFBR0EscUJBQWVBO29CQUVkQSxvQkFBZUE7dUJBRWRBLElBQUdBLHFCQUFlQTtvQkFFbkJBLG9CQUFlQTs7b0JBSWZBLG9CQUFlQTs7OztnQkFNbkJBO2dCQUNBQTs7Z0JBRUFBLElBQUdBO29CQUVDQTs7O2dCQUdKQSxJQUFHQTtvQkFFQ0EsSUFBR0E7d0JBRUNBLDhCQUF5QkEsc0NBQWlCQTs7b0JBRTlDQSxlQUFlQTtvQkFDZkEsSUFBR0EsQ0FBQ0Esc0JBQWlCQTt3QkFDakJBLGdEQUFvQkE7Ozs7Z0JBRzVCQSxJQUFHQTtvQkFFQ0EsZUFBZUE7b0JBQ2ZBLCtCQUEwQkEsc0NBQWlCQTtvQkFDM0NBLElBQUdBLENBQUNBLHNCQUFpQkE7d0JBQ2pCQSxnREFBb0JBOzs7Z0JBRTVCQSxJQUFHQTtvQkFFQ0EsZUFBZUE7b0JBQ2ZBLGlDQUE0QkEsc0NBQWlCQTtvQkFDN0NBLElBQUdBLENBQUNBLHNCQUFpQkE7d0JBQ2pCQSxnREFBb0JBOzs7O2dCQUc1QkEsSUFBR0E7b0JBRUNBO29CQUNBQSxJQUFHQSxDQUFDQSxzQkFBaUJBO3dCQUNqQkEsZ0RBQW9CQTs7Ozt3Q0FJb0JBO2dCQUVoREEsV0FBV0E7O2dCQUVYQSxRQUFPQTtvQkFFSEEsS0FBS0E7d0JBQ0RBO3dCQUNBQTt3QkFFQUEsbUJBQW1CQSwrQkFBQ0E7NEJBRWhCQSxJQUFHQSxnQ0FBY0E7Z0NBQ2JBOzs0QkFDSkE7OzRCQUVBQTs0QkFDQUE7OzRCQUVBQSwrQkFBYUE7O3dCQUdqQkEsaUJBQWlCQSwrQkFBQ0E7NEJBRWRBLElBQUdBLGdDQUFjQTtnQ0FDYkE7Ozs0QkFFSkE7NEJBQ0FBOzs0QkFFQUEsSUFBR0E7Z0NBQ0NBOzs7NEJBRUpBOzt3QkFFSkE7b0JBRUpBLEtBQUtBO3dCQUNEQTt3QkFFQUEsaUJBQWlCQSwrQkFBQ0E7NEJBRWRBLElBQUdBLGdDQUFjQTtnQ0FDYkE7Ozs0QkFFSkE7NEJBQ0FBOzs0QkFFQUE7OzRCQUVBQTs7d0JBR0pBO29CQUVKQSxLQUFLQTt3QkFDREE7d0JBRUFBLGlCQUFpQkEsK0JBQUNBOzRCQUVkQSxJQUFHQSxnQ0FBY0E7Z0NBQ2JBOzs7NEJBRUpBOzRCQUNBQTs7NEJBRUFBLElBQUdBO2dDQUVDQTtnQ0FDQUEsbUJBQWNBOztnQ0FJZEEsbUJBQWNBLDBCQUFvQkEseUNBQTRCQSxzQ0FBeUJBO2dDQUN2RkE7Ozs0QkFHSkE7O3dCQUdKQTtvQkFFSkEsS0FBS0E7d0JBRURBO29CQUVKQSxLQUFLQTt3QkFDREE7b0JBRUpBO3dCQUNJQSxpQkFBaUJBLFVBQUNBOzRCQUVkQSxJQUFHQSxnQ0FBY0E7Z0NBQ2JBOzs7NEJBRUpBOzRCQUNBQTs7NEJBRUFBOzt3QkFFSkE7b0JBRUpBLEtBQUtBO3dCQUNEQTt3QkFFQUEsaUJBQWlCQSwrQkFBQ0E7NEJBRWRBLElBQUdBLGdDQUFjQTtnQ0FDYkE7Ozs0QkFFSkE7NEJBQ0FBOzs0QkFFQUE7OzRCQUVBQTs7d0JBR0pBOzs7Z0JBR1JBLG9CQUFvQkEsVUFBQ0E7b0JBRWpCQSxJQUFHQSxnQ0FBY0E7d0JBQ2JBOztvQkFDSkE7OztnQkFHSkEsa0JBQWtCQSxVQUFDQTtvQkFFZkE7OztnQkFHSkEsbUJBQW1CQSxVQUFDQTtvQkFFaEJBLElBQUdBLGdDQUFjQTt3QkFDYkE7OztvQkFFSkE7b0JBQ0FBOzs7Z0JBR0pBLElBQUdBLFNBQVFBO29CQUVQQSxtQkFBbUJBLCtCQUFDQTt3QkFFaEJBLElBQUdBLGdDQUFjQTs0QkFDYkE7Ozt3QkFFSkE7O3dCQUVBQTt3QkFDQUE7O3dCQUVBQSwrQkFBYUE7Ozs7Z0JBSXJCQSxJQUFHQTtvQkFFQ0E7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTs7O2dCQUdKQSxPQUFPQTs7OztnQkE0WFBBLE9BQU9BLEFBQUtBOzs7Z0JBS1pBLE9BQU9BLEFBQUtBOzs7Z0JBS1pBLE9BQU9BLEFBQUtBOzs7Z0JBS1pBLE9BQU9BLEFBQUtBOztpREF1QmdDQTtnQkFFNUNBLElBQUdBO29CQUVDQSxtQkFBbUJBO29CQUNuQkEsS0FBSUEsV0FBV0EsSUFBSUEsb0JBQW9CQTt3QkFFbkNBLElBQUdBLDRDQUFhQSxJQUFNQTs0QkFDbEJBLE9BQU9BOzs7O29CQUtmQSxLQUFJQSxXQUFXQSxJQUFJQSx5Q0FBdUJBO3dCQUV0Q0EsSUFBR0EsNkJBQVFBLDBDQUFnQkE7NEJBQ3ZCQSxPQUFPQSwwQ0FBZ0JBOzt3QkFDM0JBLG9CQUFtQkEsMENBQWdCQTt3QkFDbkNBLEtBQUlBLFlBQVdBLEtBQUlBLHFCQUFvQkE7NEJBRW5DQSxJQUFHQSw2Q0FBYUEsS0FBTUE7Z0NBQ2xCQSxPQUFPQSwwQ0FBZ0JBOzs7Ozs7Z0JBS3ZDQSxPQUFPQTs7O2dCQUtQQSxJQUFHQTtvQkFFQ0EsT0FBT0Esc0RBQTBCQSxPQUFTQTs7b0JBSTFDQSxPQUFPQSxzREFBMEJBLE9BQVNBOzs7O2dCQU05Q0EsT0FBT0EsK0JBQTBCQSxTQUFTQTs7O2dCQUsxQ0EsSUFBR0EsQ0FBQ0E7b0JBQ0FBOzs7Z0JBRUpBLElBQUdBO29CQUdDQSxNQUFNQSxJQUFJQTs7O2dCQUdkQSxzQ0FBb0JBLElBQUlBLDRCQUFlQTtnQkFDdkNBLGtFQUF5QkE7O2dCQUV6QkE7O2dCQUVBQSxJQUFHQSx1QkFBaUJBO29CQUVoQkE7OztnQkFHSkE7O2dCQUVBQTs7Z0JBRUFBLCtCQUFhQTs7Z0JBRWJBOztrQ0FHbUJBOztnQkFFbkJBLElBQUdBLENBQUNBO29CQUNBQTs7O2dCQUVKQTs7Z0JBRUFBLElBQUdBLHVCQUFrQkE7b0JBQ2pCQTs7Z0JBQ0pBLElBQUdBLHFCQUFnQkE7b0JBQ2ZBOztnQkFDSkEsSUFBR0Esb0JBQWVBO29CQUNkQTs7O2dCQUVKQTtnQkFDQUEsSUFBR0EsdUJBQWlCQTtvQkFFaEJBLElBQUdBLENBQUNBO3dCQUNBQSxxQkFBZ0JBOzs7Z0JBRXhCQTs7Z0JBRUFBLElBQUdBLGlCQUFpQkEsUUFBUUE7b0JBRXhCQSw0QkFBdUJBOzs7aUNBSVRBO2dCQUVsQkEsT0FBT0EsZ0JBQWdCQTs7K0JBR1BBO2dCQUVoQkEsT0FBT0EsZ0JBQWdCQTs7O2dCQUt2QkEsSUFBR0Esa0NBQWdCQTtvQkFDZkE7OztnQkFFSkEsMEJBQXFCQSxtREFBUUEsQUFBT0EsQ0FBQ0EseUVBQWdDQSxDQUFDQSwwQkFBZ0JBO2dCQUN0RkEseUJBQW9CQSxtREFBUUEsQUFBT0EsQ0FBQ0EsMEVBQWlDQSxDQUFDQSwwQkFBZ0JBOzs7Z0JBS3RGQSxJQUFHQSxDQUFDQTtvQkFFQUE7b0JBQ0FBO29CQUNBQTs7OztnQkFNSkE7Z0JBQ0FBLElBQUdBLGlCQUFZQTtvQkFDWEE7O2dCQUNKQSxLQUFJQSxXQUFXQSxJQUFJQSxxQkFBZ0JBO29CQUUvQkEsSUFBR0Esc0JBQVNBLE1BQU1BLFFBQ2RBLDJDQUFTQSxhQUFlQTt3QkFFeEJBLHNCQUFTQSxZQUFZQSxzQkFBU0E7OztnQkFHdENBLHFCQUFnQkE7OzRCQUtIQTs7Z0JBRWJBLElBQUdBLENBQUNBO29CQUNBQTs7O2dCQUVKQSxJQUFHQTtvQkFDQ0E7O2dCQUNKQSx5QkFBb0JBO2dCQUNwQkEsSUFBR0EsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxxQ0FBbUJBLFFBQVFBO29CQUVoREE7b0JBQ0FBOzs7Z0JBR0pBLG9CQUFvQkEsQ0FBQ0EsbUJBQW1CQSw4Q0FBNEJBO2dCQUNwRUEsbUJBQW1CQTs7Z0JBRW5CQSxJQUFHQSxDQUFDQSxzQkFBc0JBO29CQUV0QkEsaUJBQWlCQTtvQkFDakJBLGtFQUF5QkE7O29CQUV6QkE7O29CQUVBQTs7b0JBRUFBLElBQUdBLHVCQUFpQkEseUNBQTRCQSxxQkFBZUE7d0JBRTNEQSxJQUFHQSx1QkFBaUJBLHlDQUE0QkEsQ0FBQ0EsaUJBQWlCQSxRQUFRQSxnQkFBZ0JBLFFBQVFBLDRCQUEyQkEscUJBQWFBLGdEQUF1Q0EsdUNBQTBCQSxxQkFBYUEsMkNBQW1DQTs0QkFFdlBBOytCQUVDQSxJQUFHQSx1QkFBaUJBOzRCQUVyQkEsVUFBVUEscUJBQWFBOzs0QkFFdkJBLFFBQVdBLG9CQUFnQkE7NEJBQzNCQSxRQUFXQSxvQkFBZ0JBOzs0QkFFM0JBLElBQUdBLE1BQWFBO2dDQUVaQTs7NEJBRUpBLElBQUdBLE1BQWFBO2dDQUVaQTs7OzRCQUdKQSxVQUFVQSxBQUFxQkE7OzRCQUUvQkEsV0FBY0E7NEJBQ2RBLFdBQWNBOzs0QkFFZEEsV0FBY0E7NEJBQ2RBLFdBQWNBOzs0QkFFZEEsSUFBR0EscUNBQUtBLGdEQUFJQTtnQ0FDUkEsSUFBSUEsNkJBQUtBOzs0QkFDYkEsSUFBR0EscUNBQUtBLGdEQUFJQTtnQ0FDUkEsSUFBSUEsNkJBQUtBOzs7NEJBRWJBLElBQUdBLHFDQUFLQSxnREFBSUE7Z0NBQ1JBLElBQUlBLDZCQUFLQTs7NEJBQ2JBLElBQUdBLHFDQUFLQSxnREFBSUE7Z0NBQ1JBLElBQUlBLDZCQUFLQTs7NEJBQ2JBLElBQUlBLGlEQUFLQTs0QkFDVEEsSUFBSUEsaURBQUtBOzs0QkFFVEEsMEJBQTBCQSxpREFBUUEscUNBQUtBOzRCQUN2Q0EseUJBQXlCQSxpREFBUUEscUNBQUtBOzs7O29CQUk5Q0E7O29CQUVBQTs7O2dCQUdKQSwrQkFBYUE7O2dCQUViQSxJQUFHQTtvQkFFQ0EsV0FBdUJBLEFBQW1DQSwrQkFBQ0E7d0JBQ3ZEQTt3QkFDQUE7Ozs7O2dCQU9SQSxvQkFBb0JBO2dCQUNwQkEsSUFBR0EsaUJBQWlCQTtvQkFFaEJBLElBQUdBLGdEQUEyQkE7d0JBQzFCQTs7b0JBQ0pBLG1CQUFtQkE7b0JBQ25CQSxJQUFHQSxnQkFBZ0JBLFFBQVFBO3dCQUV2QkEsb0JBQW9CQTt3QkFDcEJBLGlCQUFpQkE7OztvQkFHckJBOzs7aUNBSWNBO2dCQUVsQkEsNEJBQTRCQSxpQ0FBQ0E7OztnQkE0SDdCQSxPQUFPQTs7O2dCQU1QQSxJQUFHQSxDQUFDQTtvQkFDQUE7OztnQkFFSkEsNkJBQThCQSxzREFBY0E7O2dCQUU1Q0EsSUFBR0EsMkJBQTBCQTtvQkFFekJBLDZCQUF3QkE7b0JBQ3hCQSxVQUFVQSxLQUFJQTtvQkFDZEEsWUFBWUE7O29CQUVaQSxPQUFNQTt3QkFFRkEsY0FBY0E7d0JBQ2RBLElBQUdBOzRCQUVDQSxRQUFRQTs0QkFDUkEsSUFBR0EsQ0FBQ0EsaUNBQTBCQTtnQ0FFMUJBO2dDQUNBQSx5Q0FBeUNBOzs7NEJBSzdDQSxTQUFRQTs0QkFDUkEsSUFBR0EsQ0FBQ0EsaUNBQTBCQTtnQ0FFMUJBO2dDQUNBQSxvQ0FBb0NBOzs7d0JBRzVDQSxhQUFhQSxrQkFBS0E7d0JBQ2xCQSxJQUFHQTs0QkFFQ0EsS0FBSUEsV0FBWUEsbUJBQUlBLHVCQUFRQTtnQ0FFeEJBLFlBQVlBLGlCQUFpQkE7Ozs7Ozs7Z0JBMkQ3Q0EsSUFBR0Esa0JBQWFBO29CQUNaQTs7O2dCQUVKQTs7Z0JBRUFBOztnQkFFQUEsOEJBQVlBOztnQkFFWkEsMEJBQTBCQSwrQkFBMEJBOztnQkFFcERBLElBQUdBLHVCQUF1QkE7b0JBRXRCQSxJQUFHQSxzREFBaUNBO3dCQUVoQ0EsZ0NBQWdDQTt3QkFDaENBLEtBQUlBLFdBQVdBLElBQUlBLHdDQUF3Q0E7NEJBRXZEQSxJQUFHQSxnRUFBaUNBLElBQU1BO2dDQUN0Q0E7OzRCQUNKQSx5Q0FBaUNBOzt3QkFFckNBLElBQUdBOzRCQUVDQSxvQ0FBa0JBLEtBQUlBOzs7d0JBSzFCQSx3Q0FBd0NBOzs7O2dCQUloREEsSUFBR0EsZ0JBQVdBO29CQUVWQSxJQUFHQSxDQUFDQTt3QkFFQUEsSUFBR0E7Ozs0QkFPQ0E7O3dCQUVKQTs7d0JBSUFBOzs7O2dCQUlSQTs7Z0JBRUFBLCtCQUFhQTtnQkFDYkEsSUFBR0E7b0JBRUNBO29CQUNBQSxJQUFHQSxzQkFBZ0JBLHNDQUNuQkEsc0JBQWlCQSxRQUFRQTt3QkFFckJBLEtBQUlBLFlBQVdBLEtBQUlBLDBCQUFxQkE7NEJBRXBDQSwyQkFBY0EsbUJBQWtCQTs7Ozs7Z0JBSzVDQSxJQUFHQSx3Q0FBZ0JBO29CQUNmQTs7Z0JBQ0pBOztnQkFFQUEsSUFBR0EscUJBQWVBO29CQUVkQSx3Q0FBc0JBO29CQUN0QkE7OztnQkFHSkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUJDOXlFNkJBOzs7Ozs7aUNBaEJBQSxLQUFJQTs7Ozs0QkFnVFpBLGVBQXVCQTs7Ozs7O2dCQUU1Q0EsYUFBUUE7O2dCQUVSQSx1QkFBa0JBOztnQkFFbEJBLFVBQVVBOztnQkFFVkEsZ0JBQWdCQSxDQUFDQTs7O2dCQUlqQkEsZ0JBQ0lBLENBQUNBLHFCQUFlQSxVQUFJQSwwREFHUEEsSUFBSUEsa0RBQThCQTs7Z0JBSW5EQSxJQUFHQTtvQkFFQ0E7b0JBQ0FBOzs7Z0JBR0pBLGNBQTZCQSxLQUFJQTs7Z0JBRWpDQSxpQkFDSUEsbUJBQ0FBLGdCQUFVQSxVQUFJQSxtRUFHRUEsbURBRWhCQSxhQUFPQSxVQUFJQSxnRUFHS0Esd0RBRWhCQSxhQUFPQSxVQUFJQSxnRUFHS0Esd0RBRWhCQSxhQUFPQSxVQUFJQSxnRUFHS0Esd0RBRWhCQSxlQUFTQSxVQUFJQSxnRUFHR0EsbURBRWhCQSxnQkFBVUEsVUFBSUEsbUVBR0VBLG1EQUVoQkEsZ0JBQVVBLFVBQUlBLG1FQUdFQSxtREFFaEJBLGFBQU9BLFVBQUlBLGdFQUdLQSx3REFFaEJBLGFBQU9BLFVBQUlBLGdFQUdLQSx3REFFaEJBLGFBQU9BLFVBQUlBLGdFQUdLQSx3REFFaEJBLGVBQVNBLFVBQUlBLGdFQUdHQSxtREFFaEJBLGVBQVNBLFVBQUlBLGdFQUdHQSxtREFFaEJBLGVBQVNBLFVBQUlBLGtFQUdHQSxtREFFaEJBLGFBQU9BLFVBQUlBLGdFQUdLQSx3REFFaEJBLGFBQU9BLFVBQUlBLGdFQUdLQSx3REFFaEJBLGFBQU9BLFVBQUlBLGdFQUdLQSx3REFFaEJBLGlCQUFXQSxVQUFJQSxnRUFHQ0EsbURBRWhCQSxrQkFBWUEsVUFBSUEsa0VBR0FBLG1EQUVoQkEsZUFBU0EsVUFBSUEsa0VBR0dBLG1EQUVoQkEsYUFBT0EsVUFBSUEsZ0VBR0tBLHdEQUVoQkEscUJBQWVBLFVBQUlBLGtFQUdIQSxtREFFaEJBLGVBQVNBLFVBQUlBLGdFQUdHQSx3REFFaEJBLGdCQUFVQSxVQUFJQSxnRUFHRUEsbURBRWhCQSxjQUFRQSxVQUFJQSxnRUFHSUE7Z0JBR3BCQTtnQkFDQUE7Z0JBQ0FBLGNBQWNBLE1BQUtBO2dCQUNuQkEsZ0JBQVdBLFVBQUlBLGlFQUdKQSxJQUFJQSxvRUFBZ0RBLGNBQWNBLHVDQUM5REEsSUFBSUEsNEJBQVFBLHVCQUF1QkEsQ0FBQ0EsaURBQW9DQSxDQUFDQSxhQUFzQkEsZUFBZUEscUJBQXFCQSxDQUFDQSx1REFBcUJBLENBQUNBLEdBQUNBLEdBQUNBLG1DQUFjQSwwQ0FDektBLCtCQUFDQTtvQkFFTEEsSUFBR0EsbUNBQVdBO3dCQUNWQTs7O2dCQUdoQkEsSUFBR0E7b0JBRUNBO29CQUNBQTs7Z0JBRUpBLGVBQVVBLFVBQUlBLDhEQUdIQSxJQUFJQSxnR0FBNEVBLGNBQWNBLHVDQUMxRkEsSUFBSUEsOEdBQTBGQSxlQUFlQSxxQkFBcUJBLENBQUNBLHVEQUFxQkEsQ0FBQ0EsR0FBQ0EsR0FBQ0EsbUNBQWNBLDBDQUN4S0E7Z0JBRWhCQSxJQUFHQTtvQkFDQ0E7O2dCQUNKQSxhQUFRQSxVQUFJQSw0REFHREEsSUFBSUEsZ0dBQTRFQSxjQUFjQSx1Q0FDMUZBLElBQUlBLDhHQUEwRkEsZUFBZUEscUJBQXFCQSxDQUFDQSx1REFBcUJBLENBQUNBLEdBQUNBLEdBQUNBLG1DQUFjQSwwQ0FDeEtBLCtCQUFDQTtvQkFFVEE7b0JBQ0FBOztnQkFHUkEsSUFBR0E7b0JBQ0NBOztnQkFDSkEsWUFBT0EsVUFBSUEsMkRBR0FBLElBQUlBLHdHQUFvRkEsY0FBY0EsdUNBQ2xHQSxJQUFJQSwrR0FBMkZBLGVBQWVBLHFCQUFxQkEsQ0FBQ0EsdURBQXFCQSxDQUFDQSxHQUFDQSxHQUFDQSxtQ0FBY0EsMENBQ3pLQSwrQkFBQ0E7b0JBRVRBLGlCQUFZQSxLQUFJQTtvQkFBZ0JBO29CQUNoQ0E7O2dCQUdSQSxJQUFHQTtvQkFDQ0E7OztnQkFFSkEsMkNBQW1CQSx1QkFBa0JBLHNCQUFpQkEsb0JBQWVBOztnQkFFckVBOztnQkFFQUEsS0FBSUEsV0FBV0EsSUFBSUEsZUFBZUE7b0JBRTlCQSxnQkFBUUEsVUFBVUEsSUFBSUEsb0VBQWdEQSxjQUFjQTtvQkFDcEZBLGdCQUFRQSxjQUFjQSxJQUFJQSw0QkFBUUEsdUJBQXVCQSxDQUFDQSw0RUFBd0NBLENBQUNBLEdBQUNBLDhDQUF5QkEsZUFBZUEscUJBQXFCQSxDQUFDQSx1REFBcUJBLENBQUNBLEdBQUNBLEdBQUNBLG1DQUFjQTtvQkFDeE1BLElBQUdBO3dCQUNDQSxnQkFBUUE7OztvQkFFWkEsZ0JBQTZCQSxnQkFBUUE7b0JBQ3JDQTtvQkFDQUEsSUFBR0E7d0JBRUNBO3dCQUNBQTs7OztnQkFJUkE7Z0JBQ0FBO2dCQUNBQTtnQkFDQUE7O2dCQUVBQTtnQkFDQUE7O2dCQUVBQSxJQUFHQSxDQUFDQTtvQkFFQUE7OztnQkFHSkE7O2dCQUVBQSx5QkFBc0NBOzs7O3dDQTloQlpBO2dCQUUxQkEsSUFBR0EsNENBQXNCQTtvQkFDckJBOzs7Z0JBRUpBLElBQUdBO29CQUNDQTs7O2dCQUVKQSx1REFBbUJBOztnQkFFbkJBOzs7Z0JBT0FBLFFBQVFBOztnQkFFUkEsSUFBR0EsbUNBQVdBO29CQUNWQSxhQUFRQTs7Z0JBQ1pBLElBQUdBLENBQUNBO29CQUVBQSxJQUFHQSxtQ0FBV0E7d0JBQ1ZBOzs7OztnQkFRUkE7O2dCQUVBQTtnQkFDQUEsYUFBYUE7O2dCQUViQSxLQUFJQSxXQUFXQSxJQUFJQSxRQUFRQTtvQkFFdkJBLGNBQWNBLHVCQUFVQTs7b0JBRXhCQSxJQUFHQTt3QkFFQ0EsVUFBVUEsa0JBQXFCQTs7O29CQUduQ0E7b0JBQ0FBLElBQUdBLHdCQUFpQkEsZUFBYUE7d0JBRTdCQSxJQUFHQTs0QkFFQ0EsSUFBR0EsOENBQVVBO2dDQUVUQTtvQ0FFSUEsV0FBU0Esa0JBQWdCQSxDQUFDQTs7O29DQUkxQkE7Ozs7NEJBSVJBLElBQUdBO2dDQUVDQSxnQkFBZ0JBLGtCQUFnQkE7bUNBRS9CQSxJQUFHQTtnQ0FFSkEsZ0JBQWdCQSxrQkFBZ0JBO21DQUUvQkEsSUFBR0E7Z0NBRUpBO29DQUVJQSxnQkFBZ0JBLGtCQUFnQkE7OztvQ0FJaENBOzttQ0FHSEEsSUFBR0E7Z0NBRUpBLGdCQUFnQkEsa0JBQWdCQTttQ0FFL0JBLElBQUdBO2dDQUVKQSxnQkFBZ0JBLGtCQUFnQkE7Ozs0QkFHcENBOzs0QkFJQUEsZ0JBQWdCQTs7O3dCQUtwQkEsYUFBYUE7d0JBQ2JBLElBQUdBOzRCQUVDQSxnQkFBZ0JBLDJCQUFjQTs0QkFDOUJBOytCQUVDQSxJQUFHQTs0QkFFSkEsZ0JBQWdCQSw4QkFBaUJBOzRCQUNqQ0E7K0JBRUNBLElBQUdBOzRCQUVKQSxnQkFBZ0JBLGtDQUFxQkE7NEJBQ3JDQTsrQkFFQ0EsSUFBR0E7NEJBRUpBLGdCQUFnQkE7NEJBQ2hCQTsrQkFFQ0EsSUFBR0E7NEJBRUpBO2dDQUVJQSxnQkFBZ0JBLGVBQVNBLFVBQVVBLHVCQUFRQTs7O2dDQUkzQ0E7OzRCQUVKQTsrQkFFQ0EsSUFBR0E7NEJBRUpBO2dDQUVJQSxnQkFBZ0JBLHdCQUFPQTs7O2dDQUl2QkE7Ozs0QkFHSkE7K0JBRUNBLElBQUdBOzRCQUVKQSxnQkFBZ0JBLEFBQUNBOzRCQUNqQkE7Ozs7O2dCQUtaQSxPQUFPQTs7O2dCQUtQQSxJQUFHQTtvQkFDQ0E7O2dCQUNKQSxjQUFjQSxJQUFJQTs7Z0JBRWxCQSxhQUFhQTs7Z0JBRWJBLEtBQUlBLFdBQVdBLElBQUlBLFFBQVFBO29CQUV2QkEsZUFBZUEsd0JBQVVBOztnQkFFN0JBLGVBQWVBO2dCQUNmQTtnQkFDQUEseUJBQW9CQTs7b0NBR0NBO2dCQUVyQkE7Z0JBQ0FBLE9BQU9BLHdCQUFpQkEsYUFBV0E7OzRCQUdyQkE7Z0JBRWRBLElBQUdBO29CQUVDQSx1QkFBa0JBLCtCQUE2QkE7O29CQUkvQ0EsSUFBR0E7d0JBRUNBLFFBQVFBLDRCQUFvQ0E7d0JBQzVDQSxJQUFHQSxrQkFBYUE7NEJBRVpBLHVCQUFrQkE7NEJBQ2xCQSx1QkFBa0JBLCtCQUE2QkE7OzRCQUkvQ0E7O3dCQUVKQSx3QkFBbUJBOzs7Z0JBRzNCQTs7d0NBR3lCQTtnQkFFekJBLE9BQU9BLENBQUNBLG1DQUFxQkEsb0NBQWNBLG9DQUFjQSxvQ0FBY0E7O21DQUtuREE7Z0JBRXBCQSxJQUFHQSxzQkFBaUJBO29CQUVoQkEsSUFBR0E7d0JBRUNBLFFBQVFBLDRCQUFvQ0E7d0JBQzVDQSxJQUFHQSxDQUFDQSxzQkFBaUJBOzRCQUVqQkEsSUFBR0Esb0RBQXlCQSxDQUFDQSxrQkFBYUE7Z0NBRXRDQTs7Ozs7b0JBS1pBLElBQUdBO3dCQUVDQSxtQkFBY0E7d0JBQ2RBOzs7b0JBR0pBLG1CQUFjQTs7b0JBRWRBOztvQkFJQUEsSUFBR0E7d0JBRUNBLElBQUdBOzRCQUVDQTs0QkFDQUE7OzRCQUlBQSxJQUFHQTtnQ0FFQ0EsU0FBUUEsNEJBQW9DQTtnQ0FDNUNBLElBQUdBLENBQUNBLHNCQUFpQkE7b0NBRWpCQTs7O2dDQUtKQTs7Ozs7b0JBS1pBLElBQUdBO3dCQUVDQSxJQUFHQTs0QkFFQ0EsU0FBUUEsNEJBQW9DQTs7NEJBRTVDQSxJQUFHQSxDQUFDQSxzQkFBaUJBO2dDQUVqQkE7Z0NBQ0FBLG1CQUFjQTtnQ0FDZEE7O2dDQUlBQTs7Ozt3QkFNUkEsbUJBQWNBO3dCQUNkQTs7d0JBRUFBLElBQUdBOzRCQUVDQTs7NEJBSUFBLG1CQUFjQTs7O29CQUd0QkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cURDNVVzQkE7Z0JBRTFCQSxjQUFTQTs7Z0JBRVRBLGVBQVVBOztnQkFFVkEsZ0JBQVdBLCtCQUFDQTtvQkFFUkEsYUFBYUEsQUFBcUJBO29CQUNsQ0Esb0JBQWVBLG1CQUFNQTtvQkFDckJBLHFCQUFnQkEsbUJBQU1BOztvQkFFdEJBOzs7Ozs7Z0JBTUpBOztnQkFFQUE7Ozs7Ozs7Ozs7OztnQkFTQUEsSUFBR0E7b0JBQ0NBOztnQkFDSkE7OztnQkFLQUEsT0FBT0EsSUFBSUEsc0JBQVNBOzs7Z0JBS3BCQSw2QkFBd0JBLG1CQUFjQTs7Ozs7Ozs7Ozs7O3VDQ3pCQUE7b0JBRXRDQSxPQUFPQTs7Ozs7Ozs7Ozs7O29CQXJCREEsT0FBT0E7OztvQkFDUEEsaUJBQVlBOzs7OztvQkF5QlpBLE9BQU9BOzs7b0JBQ1BBLHNCQUFpQkE7Ozs7OzRCQXZCVkE7Ozs7O3FEQUEwQkEsc0RBQWlEQTtnQkFFeEZBLFlBQU9BLElBQUlBO2dCQUNYQSx1QkFBa0JBO2dCQUNsQkEsMEJBQXFCQSwrQkFBQ0E7b0JBQ2xCQSxJQUFHQSwwQ0FBa0JBO3dCQUNqQkEsb0JBQWVBOzs7Z0JBRXZCQSxZQUFPQTs7Z0JBRVBBLFlBQU9BOztnQkFFUEEsb0RBQTRCQSw2Q0FBTUE7Ozs7Ozs7OztvQ0NnVFJBO29CQUUxQkEsSUFBR0Esd0NBQWtCQSxDQUFDQSxtQ0FBc0JBLDZDQUFzQkEsNkNBQXNCQTt3QkFFcEZBOzt3QkFJQUEsT0FBT0E7Ozs7Ozs7MkJBMVUwQkE7dUJBQ3VCQTtxQkFDRkE7d0JBQ0dBO3dCQUMzQkE7eUJBQ0NBOzRCQUNHQTs7Ozs7O3dCQTJDZEE7Ozs7Ozs7Ozs7O29CQVBsQkEsT0FBT0E7OztvQkFHVEEsc0JBQWlCQTs7Ozs7b0JBMlZqQkEsSUFBR0E7d0JBRUNBLE9BQU9BOzt3QkFJUEEsSUFBR0EsaURBQXNCQTs0QkFFckJBLE9BQU9BOzs0QkFJUEEsT0FBT0E7Ozs7O29CQU1mQSxJQUFHQTt3QkFFQ0EsY0FBU0E7O3dCQUlUQSxJQUFHQSxpREFBc0JBOzRCQUVyQkEsUUFBUUE7NEJBQ1JBLHVCQUEyREE7OzRCQUkzREEscUJBQXdEQTs0QkFDeERBOzs7O29CQUlSQTs7Ozs7b0JBK0RFQSxPQUFPQTs7O29CQUdUQSxlQUFVQTs7b0JBRVZBLElBQUdBO3dCQUVDQSxVQUFVQTt3QkFDVkEsdUJBQXVCQTsyQkFDckJBLElBQUdBO3dCQUVMQSxXQUFVQTt3QkFDVkEsSUFBR0EscUJBQW9CQTs0QkFFbkJBOzs7OztvQkFLUkEsSUFBR0E7d0JBRUNBOzt3QkFJQUE7Ozs7OztvQkFTRkEsT0FBT0E7OztvQkFHVEEsaUJBQVlBO29CQUNaQSxJQUFHQTt3QkFFQ0Esc0NBQXNDQSx5QkFBQ0E7O3dCQUl2Q0E7Ozs7Ozs7Ozs7Ozs7OEJBamRLQSxpQkFBeUNBLGlCQUE2QkE7Ozs7O3FEQUF1Q0E7Z0JBRTFIQSw0QkFBNEJBLEVBQUNBLGlEQUF5Q0EsK0JBQVVBO2dCQUNoRkE7Z0JBQ0FBLElBQUdBO29CQUNDQTs7Ozs7Ozs4QkF3UVNBLE1BQXNCQTs7Ozs7NkVBQTZDQSxnQ0FBU0EsT0FBT0E7Z0JBRWhHQSxZQUFPQTs7Z0JBRVBBLElBQUdBO29CQUVDQTtvQkFDQUE7b0JBQ0FBOztvQkFFQUE7dUJBRUNBLElBQUdBO29CQUVKQSxVQUFVQTtvQkFDVkEsdUJBQUlBLEFBQUtBLG1DQUFUQTtvQkFDQUEsdUJBQUlBLEFBQUtBLHFDQUFUQTtvQkFDQUEsdUJBQUlBLEFBQUtBLG9DQUFUQTtvQkFDQUEsY0FBY0EsSUFBSUE7O29CQUVsQkEsS0FBSUEsV0FBV0EsT0FBT0E7d0JBRWxCQSxlQUFlQSx3QkFBSUEsR0FBSkEsbUNBQVNBOztvQkFFNUJBO29CQUNBQSxxQkFBZ0JBOzs7Z0JBR3BCQTs7Z0JBRUFBOzs7OztnQkFyV0FBLElBQUdBO29CQUVDQSxRQUFRQTtvQkFDUkEsSUFBR0EsY0FBY0EsUUFBUUEsdUNBQW9CQTt3QkFDekNBLGlCQUFpQkE7OztnQkFFekJBLElBQUdBLDBDQUFrQkE7b0JBQ2pCQSxvQkFBZUE7Ozt3Q0FVY0E7Z0JBRWpDQSxzQkFBaUJBO2dCQUNqQkE7OztnQkFLQUEsT0FBT0E7OztnQkFvQlBBLE9BQU9BOztnQ0FHa0JBO2dCQUV6QkEseUJBQW9CQTs7bUNBR0FBO2dCQUVwQkEsYUFBUUEscUJBQWNBLFNBQVFBLHVDQUEwQkE7Ozs7Z0JBaUJ4REEsSUFBR0Esd0JBQVdBO29CQUVWQSxPQUFPQTs7b0JBSVBBLE9BQU9BOzs7O2dCQU1YQSxZQUFnQkE7Z0JBQ2hCQSxPQUFPQTs7O2dCQUtQQSxJQUFHQTtvQkFFQ0EsWUFBWUEsQUFBQ0EsWUFBYUE7b0JBQzFCQSxJQUFHQSxTQUFTQTt3QkFDUkE7O29CQUNKQSxPQUFPQTs7b0JBR1BBLElBQUdBO3dCQUVDQSxhQUFnQkE7d0JBQ2hCQSxPQUFPQTsyQkFFTkEsSUFBR0E7d0JBRUpBLFdBQWdCQTt3QkFDaEJBLE9BQU9BOzt3QkFJUEEsT0FBT0E7Ozs7OEJBS0FBLE9BQVdBO2dCQUUxQkEsSUFBR0EsVUFBVUE7b0JBQ1RBOztnQkFDSkEsbUJBQW1CQTs7O2dCQVduQkEsSUFBR0EsaUNBQTBCQTtvQkFFekJBLE9BQU9BOztvQkFJUEEsSUFBR0E7d0JBRUNBLFlBQWdCQTt3QkFDaEJBLElBQUdBOzRCQUVDQTs0QkFDQUEsSUFBR0E7Z0NBRUNBO2dDQUNBQSxRQUFRQSxBQUFDQTs7OzRCQUdiQSxPQUFPQSxFQUFDQSw2QkFDSkEscUJBQWNBLFVBQVNBLDBHQUF5REE7K0JBRW5GQSxJQUFHQTs0QkFFSkEsT0FBT0EscUJBQWNBLFNBQVFBLGtDQUFxQkEsdURBQWlCQTs7NEJBSW5FQSxPQUFPQSxxQkFBY0EsU0FBUUEsa0NBQXFCQTs7MkJBR3JEQSxJQUFHQTt3QkFFSkEsYUFBaUJBO3dCQUNqQkEsSUFBR0Esc0JBQVNBOzRCQUVSQTs7NEJBSUFBLE9BQU9BLHFCQUFjQSxTQUFRQSxrQ0FBcUJBOzs7d0JBS3REQSxPQUFPQSxxQkFBY0EsU0FBUUEsa0NBQXFCQTs7Ozs7Z0JBTzFEQSxZQUFZQTtnQkFDWkEsSUFBR0EsU0FBU0EsUUFBUUEsK0JBQVNBO29CQUV6QkEsSUFBR0EsQ0FBQ0EsaUNBQTBCQTt3QkFFMUJBO3dCQUNBQSxjQUFpQkE7O3dCQUVqQkEsSUFBR0EsaUNBQVdBOzRCQUVWQSxZQUFPQTs7Ozs7O2dCQVVuQkEsSUFBR0EsQ0FBQ0E7b0JBRUFBLFlBQVlBO29CQUNaQSxJQUFHQSxTQUFTQTt3QkFFUkEsSUFBR0EsQ0FBQ0EsaUNBQTBCQTs0QkFFMUJBLElBQUdBO2dDQUNDQTs7NEJBQ0pBOzs7OztnQkFLWkEsc0JBQXNCQSwrQkFBQ0E7b0JBRW5CQSw0QkFBdUJBOztvQkFFdkJBOztvQkFFQUEsSUFBR0EsdUNBQWVBO3dCQUNkQSxpQkFBWUE7OztnQkFFcEJBLHVCQUF1QkEsK0JBQUNBO29CQUVwQkEsSUFBR0E7d0JBRUNBO3dCQUNBQTs7O29CQUdKQSxpQkFBWUE7b0JBQ1pBOztvQkFFQUE7b0JBQ0FBLGFBQVlBO29CQUNaQSxJQUFHQSxVQUFTQTt3QkFFUkEsSUFBR0EsQ0FBQ0EsaUNBQTBCQTs0QkFFMUJBLElBQUdBO2dDQUVDQTtvQ0FFSUEsWUFBT0E7OztvQ0FJUEE7Ozs7NEJBSVJBLElBQUdBLENBQUNBLG1DQUFzQkEsQ0FBQ0EsaUJBQVlBO2dDQUVuQ0EsY0FBYUE7Ozt3QkFHckJBLElBQUdBLGtEQUNIQSwwQ0FBNkJBLENBQUNBOzRCQUMxQkE7Ozs7OztvQkFLUkEsSUFBR0Esc0NBQWNBO3dCQUNiQSxnQkFBV0E7OztvQkFFZkEsSUFBR0EsQ0FBQ0EsMEJBQXFCQSxDQUFDQSxpQkFBWUEsZ0JBQVdBLGtDQUFxQkEsQ0FBQ0EsQ0FBQ0Esb0RBQThCQSxtQkFBY0E7d0JBRWhIQSxJQUFHQSxDQUFDQTs0QkFDQUEsSUFBSUEsc0JBQVNBLGdCQUFnQkEsSUFBSUE7Ozs7Z0JBRzdDQSx3QkFBd0JBLCtCQUFDQTtvQkFFckJBOztnQkFFSkEsNkJBQTZCQSxVQUFDQTtvQkFFMUJBOztnQkFFSkEsMEJBQTBCQSwrQkFBQ0E7b0JBRXZCQTtvQkFDQUEsSUFBR0Esc0NBQWNBO3dCQUNiQSxnQkFBV0EsTUFBTUE7OztnQkFFekJBLHlCQUF5QkEsK0JBQUNBO29CQUV0QkE7b0JBQ0FBLElBQUdBLHFDQUFhQTt3QkFDWkEsZUFBVUEsTUFBTUE7OztnQkFFeEJBLHVCQUF1QkEsK0JBQUNBO29CQUVwQkE7b0JBQ0FBLElBQUdBLG1DQUFXQTt3QkFDVkEsYUFBUUEsTUFBTUE7OztnQkFFdEJBLHVDQUF1Q0EsQUFBd0JBO29CQUUzREE7O2dCQUVKQSxxQ0FBcUNBLEFBQXdCQTtvQkFFekRBOzs7O2dCQXdESkEsSUFBR0EsbUNBQVFBO29CQUVQQSxJQUFHQSx5Q0FBaUJBO3dCQUNoQkEsbUJBQWNBOztvQkFDbEJBLGdCQUFXQTs7OztnQkFNZkE7Z0JBQ0FBLGdCQUFXQTs7K0JBK0NLQTtnQkFFaEJBLElBQUdBLENBQUNBLGlDQUEwQkE7b0JBRTFCQSxTQUFTQTtvQkFDVEEsSUFBR0Esa0JBQU1BO3dCQUVMQTs7d0JBSUFBLFlBQU9BLHFCQUFjQSxTQUFRQSxrQ0FBcUJBOzs7b0JBS3REQTs7OztnQkFNSkEsSUFBR0EsQ0FBQ0EsaUNBQTBCQTtvQkFFMUJBLFNBQVNBO29CQUNUQSxJQUFHQSxrQkFBTUE7d0JBRUxBOzt3QkFJQUEsT0FBT0EscUJBQWNBLFNBQVFBLGtDQUFxQkE7OztvQkFLdERBOzs7O2dCQU1KQSxPQUFPQTs7O2dCQUtQQSxPQUFPQTs7O2dCQUtQQSxPQUFPQTs7Ozs7Ozs7OztrQ2xDcGV3Q0E7Ozs7Ozs7b0JBa0QzQ0EsSUFBR0Esb0NBQThCQTt3QkFDN0JBLE9BQU9BOztvQkFDWEEsT0FBT0EsMEJBQXFCQTs7O29CQUk1QkEsS0FBSUEsV0FBV0EsbUJBQUlBLGlEQUE2QkE7d0JBRTVDQSxJQUFHQSxpREFBcUJBLGNBQWdCQTs0QkFDcENBLGtDQUE2QkE7OztvQkFFckNBLGtDQUE2QkE7Ozs7O29CQVE3QkEsSUFBR0Esb0NBQThCQTt3QkFDN0JBLE9BQU9BOztvQkFDWEEsT0FBT0EsMEJBQXFCQTs7O29CQUk1QkEsS0FBSUEsV0FBV0EsbUJBQUlBLGlEQUE2QkE7d0JBRTVDQSxJQUFHQSxpREFBcUJBLFVBQVlBOzRCQUNoQ0Esa0NBQTZCQTs7O29CQUVyQ0Esa0NBQTZCQTs7Ozs7b0JBUTNCQSxPQUFPQTs7O29CQUdUQSxlQUFVQTtvQkFDVkEsc0NBQXNDQSx5QkFBQ0EsQ0FBQ0E7Ozs7O29CQVF0Q0EsT0FBT0E7OztvQkFHVEEsaUJBQVlBO29CQUNaQSxzQ0FBc0NBLHlCQUFDQTs7Ozs7OzZDQTFHUkE7Ozs7Ozt1RUFJTUE7Z0JBRXpDQSxvQkFBZUE7O2dCQUVmQSw2QkFBNkJBLFVBQUNBO29CQUUxQkE7OztnQkFHSkEsNkJBQXdCQSwrQkFBQ0E7b0JBRXJCQSxJQUFHQSwrQkFBeUJBO3dCQUV4QkEsSUFBR0EsZ0RBQXdCQTs0QkFDdkJBLDBCQUFxQkE7Ozt3QkFFekJBLDZCQUF3QkE7O29CQUU1QkE7Ozs7O2dDQUlhQTs7O2dCQUVqQkEsT0FBNkJBLEFBQXdEQTs7Z0JBRXJGQSxJQUFHQSxhQUFhQTtvQkFFWkEsS0FBSUEsV0FBV0EsSUFBSUEsa0JBQWtCQTt3QkFFakNBLHFEQUF5QkEsdURBRVRBLDZCQUFVQSxHQUFWQSw2QkFDSkEsNkJBQVVBLEdBQVZBOzs7OztnQkFRcEJBOzs7Ozs7Ozs7O2lDRnBDd0NBOzs7Ozs7Ozs7Ozs7Ozs7Ozs4QkFOSEE7Ozs7OztvQ0FFREEsS0FBSUE7Ozs7OztnQkFReENBLDRCQUE0QkEsK0JBQUNBO29CQUV6QkE7Ozs7OztnQkFPSkE7Z0JBQ0FBLFNBQVNBOztnQkFFVEE7O2dCQUVBQSxLQUFJQSxXQUFXQSxJQUFJQSx5QkFBb0JBO29CQUVuQ0EsUUFBUUEsMEJBQWFBO29CQUNyQkEsSUFBR0EsSUFBSUE7d0JBQUtBLElBQUlBO3dCQUFHQSxLQUFLQTs7OztnQkFHNUJBLElBQUdBLE9BQU1BO29CQUNMQTs7Z0JBQ0pBLGVBQWVBLGtCQUFLQSxrQ0FBYUEsMEJBQWFBLGFBQWFBO2dCQUMzREEsSUFBR0EsV0FBV0E7b0JBQ1ZBLFdBQVdBOztnQkFDZkEsWUFBWUEsQ0FBQ0E7O2dCQUViQTs7Z0JBRUFBLEtBQUlBLFlBQVdBLEtBQUlBLHlCQUFvQkE7b0JBRW5DQSx3QkFBa0JBLDBCQUFhQTtvQkFDL0JBLFNBQVFBO29CQUNSQSxXQUFXQSw2QkFBTUEsMEJBQXdCQSxLQUFLQTs7b0JBRTlDQSxlQUFlQTs2REFBQ0E7NEJBRVpBLElBQUdBO2dDQUVDQSxJQUFHQSxnREFBMkJBO29DQUUxQkEsMEJBQXdCQTs7Z0NBRTVCQTs7Ozs7b0JBSVJBLGdEQUFvQkE7O29CQUVwQkE7O29CQUVBQSxJQUFHQSwwQkFBYUEsa0JBQWlCQSxPQUFLQTt3QkFFbENBO3dCQUNBQSxVQUFVQTs7d0JBRVZBLGdCQUFnQkE7d0JBQ2hCQSxrQkFBa0JBOzt3QkFFbEJBLGdEQUFvQkE7O3dCQUVwQkE7Ozs7Z0JBSVJBOztnQkFFQUEsNENBQXFCQSxPQUFPQTs7NEJBR2ZBO2dCQUViQSxJQUFHQSw0Q0FBbUJBO29CQUVsQkE7b0JBQ0FBLDJDQUFrQkE7O2dCQUV0QkEsMkNBQWtCQTs7Z0JBRWxCQSxJQUFHQTtvQkFFQ0E7O2dCQUVKQSxJQUFHQSxDQUFDQTtvQkFFQUEsZ0RBQW9CQSx5QkFBaUJBO29CQUNyQ0E7O29CQUVBQTtvQkFDQUEsNEJBQXVCQSxpQkFBQ0EsaURBQXNCQTtvQkFDOUNBLGlEQUFzQ0E7b0JBQ3RDQTs7OztnQkFNSkEsSUFBR0E7b0JBRUNBO29CQUNBQSwwQkFBd0RBLGlDQUFrQkE7b0JBQzFFQTs7O2dCQUdKQSxJQUFHQSx5QkFBb0JBO29CQUVuQkE7b0JBQ0FBLHdCQUFtQkE7Ozs7Ozs7Ozs7Ozs7NkJDa29CQUEsS0FBSUE7Ozs7O2dCQUgzQkEsZ0JBQWdCQTs7Ozs7Ozs7Ozs7OzZCQWFPQSxLQUFJQTs7Ozs7Z0JBSDNCQSxnQkFBZ0JBOzs7Ozs7Ozs7Ozs7NkJBN0VXQSxLQUFJQTs7Ozs7Z0JBSC9CQSxnQkFBZ0JBOzs7Ozs7Ozs7Ozs7NkJBMkNVQSxLQUFJQTs7Ozs7Z0JBSDlCQSxnQkFBZ0JBOzs7Ozs7Ozs7Ozs7NkJBdUJTQSxLQUFJQTs7Ozs7Z0JBSDdCQSxnQkFBZ0JBOzs7Ozs7Ozs7Ozs7NkJBUFFBLEtBQUlBOzs7OztnQkFINUJBLGdCQUFnQkE7Ozs7Ozs7Ozs7Ozs2QkFyQ01BLEtBQUlBOzs7OztnQkFIMUJBLGdCQUFnQkE7Ozs7Ozs7Ozs7Ozs2QkFhT0EsS0FBSUE7Ozs7O2dCQUgzQkEsZ0JBQWdCQTs7Ozs7Ozs7Ozs7OzZCQWFRQSxLQUFJQTs7Ozs7Z0JBSDVCQSxnQkFBZ0JBOzs7Ozs7Ozs7Ozs7NkJBK0RRQSxLQUFJQTs7Ozs7Z0JBSDVCQSxnQkFBZ0JBOzs7Ozs7Ozs7Ozs7NkJBakdRQSxLQUFJQTs7Ozs7Z0JBSDVCQSxnQkFBZ0JBOzs7Ozs7Ozs7Ozs7O2dDb0NobkJXQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQXZDckJBLE9BQU9BOzs7b0JBR1RBLElBQUdBLDRCQUFzQkE7d0JBRXJCQSwwQkFBcUJBO3dCQUNyQkE7Ozs7Ozs7MENBVjZCQTs7NEJBcUx0QkE7Ozs7Z0JBRWZBLFlBQU9BLElBQUlBOzs7Z0JBR1hBLFVBQVVBOztnQkFFVkEseUJBQW9CQTs7Z0JBRXBCQSxjQUFTQSxJQUFJQTtnQkFDYkE7Z0JBQ0FBO2dCQUNBQTtnQkFDQUE7Z0JBQ0FBO2dCQUNBQTtnQkFDQUEsZ0NBQTJCQTs7Z0JBRTNCQSx3QkFBbUJBLFVBQUlBLGlEQUVQQSwrQkFBQ0E7b0JBRVRBOzs7Z0JBSVJBO2dCQUNBQTtnQkFDQUE7Z0JBQ0FBO2dCQUNBQTtnQkFDQUE7Z0JBQ0FBLDBDQUFxQ0E7O2dCQUVyQ0EsZUFBVUEsVUFBSUEsK0RBQXdDQSxJQUFJQSwrQ0FBd0JBLElBQUlBLG9EQUE2QkEsK0JBQUNBO29CQUFTQTs7Z0JBQzdIQSxpQ0FBNEJBOztnQkFFNUJBLGdCQUFXQSxVQUFJQSwrREFBd0NBLElBQUlBLDREQUFxQ0EsSUFBSUEsb0RBQTZCQSwrQkFBQ0E7b0JBQVNBOztnQkFDM0lBLGtDQUE2QkEsQUFBd0NBOztnQkFFckVBO2dCQUNBQTs7Z0JBRUFBO2dCQUNBQTs7Z0JBRUFBLElBQUdBO29CQUVDQTtvQkFDQUE7b0JBQ0FBOztvQkFFQUE7b0JBQ0FBOztvQkFFQUEsb0JBQWVBLElBQUlBO29CQUNuQkE7b0JBQ0FBOztvQkFFQUEscUJBQWdCQSxJQUFJQTtvQkFDcEJBO29CQUNBQTtvQkFDQUE7O29CQUVBQSxvQkFBZUEsVUFBSUEseUNBQW1CQSxJQUFJQSw4RUFBdURBLElBQUlBOztvQkFJckdBLG9CQUFlQSxVQUFJQSx5Q0FBbUJBLElBQUlBLDZFQUFzREEsSUFBSUE7OztnQkFHeEdBLHNDQUFpQ0E7O2dCQUVqQ0EsZ0JBQVdBLFVBQUlBLG1GQUlDQSwrQkFBQ0E7b0JBRVRBLHlCQUFvQkE7b0JBQ3BCQSxxQkFBZ0JBOztvQkFFaEJBLElBQUdBLHlDQUFpQkE7d0JBQ2hCQSxtQkFBY0E7OztvQkFFbEJBLElBQUdBLHNDQUFxQkE7d0JBRXBCQSxJQUFHQSw0Q0FBb0JBOzRCQUNuQkE7Ozs7O2dCQUtoQkE7Z0JBQ0FBO2dCQUNBQTs7Z0JBRUFBLElBQUdBO29CQUVDQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7O29CQUlBQTs7O2dCQUdKQSxrQ0FBNkJBOztnQkFFN0JBLDJDQUFtQkEsYUFBUUEsY0FBU0EsdUJBQWtCQSxlQUFVQSxtQkFBY0E7Z0JBQzlFQSxJQUFHQSx5QkFBYUE7b0JBQ1pBLFlBQVlBOzs7Z0JBRWhCQSx5QkFBc0NBOztnQkFFdENBLHFCQUFnQkE7Ozs7O2dCQTFSaEJBLE9BQU9BLHVCQUFhQSxtQkFBY0Esb0JBQWVBOzt1Q0FHekJBO2dCQUV4QkEsc0JBQXNCQTtnQkFDdEJBLHVCQUF1QkE7Z0JBQ3ZCQSxxQkFBcUJBOztnQkFFckJBLElBQUdBLG9CQUFtQkEscUJBQ2xCQSxxQkFBb0JBLHNCQUNwQkEsbUJBQWtCQSxvQkFBZUEsb0JBQVFBO29CQUV6Q0Esb0JBQWVBO29CQUNmQSxxQkFBZ0JBO29CQUNoQkEsbUJBQWNBOztvQkFFZEEsSUFBR0EseUNBQWlCQTt3QkFDaEJBLG1CQUFjQTs7O29CQUVsQkE7Ozs7O2dCQWtCSkEsV0FBV0E7Z0JBQ1hBLG1CQUFjQTs7Z0JBRWRBLFVBQVVBOztnQkFFVkEsUUFBT0E7b0JBRUhBLEtBQUtBO3dCQUNEQSw2QkFBd0JBO3dCQUV4QkEsZ0JBQXFCQSx1QkFBYUEsK0JBQVdBO3dCQUM3Q0EsY0FBbUJBLGlFQUErQkE7d0JBRWxEQSxnQkFBZ0JBLENBQUNBLCtCQUFVQTt3QkFFM0JBLG9CQUFvQkEsRUFBQ0EsNENBQXVCQSw4QkFBdUJBLEFBQUtBO3dCQUN4RUE7d0JBQ0FBO3dCQUVBQSxtQkFBd0JBLHNCQUNwQkEsWUFBWUEsbUNBQWtCQSxHQUFDQTt3QkFFbkNBLGtCQUFrQkEsRUFBQ0EsMENBQXFCQSw4QkFBdUJBLEFBQUtBO3dCQUVwRUEsS0FBSUEsV0FBV0EsUUFBUUE7NEJBRW5CQSxvQkFBbUJBOzs0QkFFbkJBLFVBQVVBLFVBQUlBLDRDQUVIQSxnRUFDRUEsSUFBSUEsNEJBQVFBLGFBQWFBLHNCQUFDQSw4QkFBNkJBLGVBQWVBLENBQUNBLHVEQUEwQ0Esc0JBQUNBLENBQUNBLHVDQUE4QkEsQ0FBQ0Esc0VBQXlEQSxjQUFjQSxDQUFDQSwyR0FDdk5BO3FFQUFDQTtvQ0FFVEEsSUFBR0Esc0NBQXFCQTt3Q0FFcEJBLElBQUdBLDRDQUFvQkE7NENBQ25CQTs7O29DQUVSQSxxQkFBZ0JBOzs7NEJBR3hCQSxJQUFHQTtnQ0FFQ0E7Z0NBQ0FBOzs0QkFFSkEsSUFBR0EseUJBQVdBO2dDQUVWQTs7NEJBRUpBOzs0QkFFQUEsSUFBR0EsOEJBQVVBLGNBQWFBLDhCQUFVQTtnQ0FFaENBO21DQUVDQSxJQUFHQSw0Q0FBcUJBLDZCQUFzQkEsNENBQXFCQTtnQ0FFcEVBO2dDQUNBQTs7Z0NBSUFBOzs0QkFFSkEsd0JBQXdCQTs7NEJBRXhCQSxnQkFBa0NBLGlDQUFrQkE7OzRCQUVwREE7OzRCQUVBQSxJQUFHQTtnQ0FFQ0E7Z0NBQ0FBOzs7NEJBR0pBLGVBQWVBOzRCQUNmQSxJQUFHQTtnQ0FFQ0EsZUFBZUE7Ozt3QkFJdkJBLEtBQUlBLFdBQVdBLE9BQU9BOzRCQUVsQkEsWUFBWUEsMkJBQU1BLGlEQUFLQSxHQUFMQTs0QkFDbEJBLHlDQUFrQkEsYUFBYUEsc0JBQUNBOzRCQUVoQ0EsSUFBR0E7Z0NBRUNBOzs7NEJBR0pBLGdCQUFpQ0E7O3dCQUdyQ0E7b0JBRUpBLEtBQUtBO3dCQUNEQTtvQkFFSkEsS0FBS0E7d0JBQ0RBO29CQUVKQTt3QkFDSUE7OztnQkFHUkE7Z0JBQ0FBLDZEQUFpQ0E7O3FDQUtYQTtnQkFFdEJBLElBQUdBO29CQUVDQSxJQUFHQSw0Q0FBb0JBO3dCQUNuQkE7O29CQUNKQTs7OztnQkErSEpBLHFCQUFnQkE7OztnQkFLaEJBOzt1Q0FRd0JBO2dCQUV4QkEsV0FBV0E7O2dCQUVYQSxRQUFPQTtvQkFFSEE7b0JBQ0FBLEtBQUtBO3dCQUNEQSxPQUFPQSxnQ0FBZUEsQ0FBQ0Esa0JBQUlBO3dCQUMzQkE7b0JBRUpBLEtBQUtBO3dCQUNEQSxPQUFPQSxnQ0FBZUEsQ0FBQ0EsbUJBQUtBO3dCQUM1QkE7b0JBRUpBLEtBQUtBO3dCQUNEQSxPQUFPQSwrQkFBY0EsQ0FBQ0Esb0JBQU1BO3dCQUM1QkE7OztnQkFHUkEscUJBQWdCQTs7O2dCQUtoQkE7Ozs7Ozs7Ozt3QkNsV3FCQTs7MkJBRTRCQTs7Ozs7Ozs7Ozs7OztvQkFNM0NBLE9BQU9BOzs7b0JBRVRBLFFBQVFBLENBQUNBO29CQUNUQSxJQUFHQSwrQkFBU0E7d0JBRVJBLGNBQVNBO3dCQUNUQTs7Ozs7O29CQVNGQSxPQUFPQTs7O29CQUVUQSxJQUFHQSx5QkFBbUJBO3dCQUVsQkEsdUJBQWtCQTt3QkFDbEJBOzs7Ozs7b0JBU0ZBLE9BQU9BOzs7b0JBRVRBLElBQUdBLDBCQUFvQkE7d0JBRW5CQSx3QkFBbUJBO3dCQUNuQkE7Ozs7Ozs7b0JBVUZBLE9BQU9BOzs7b0JBR1RBLElBQUdBLDBCQUFvQkE7d0JBRW5CQSx3QkFBbUJBO3dCQUNuQkE7Ozs7Ozs7b0JBK0hGQSxPQUFPQTs7O29CQUdUQSxJQUFHQSxtQ0FBUUE7d0JBRVBBLHlCQUE2REE7O3dCQUU3REEsSUFBR0Esc0JBQWlCQTs0QkFFaEJBOzRCQUNBQSxxQkFBZ0JBOzt3QkFFcEJBOzs7Ozs7b0JBU0ZBLE9BQU9BOzs7b0JBR1RBLGVBQVVBO29CQUNWQSxJQUFHQTt3QkFFQ0E7O3dCQUlBQSxzQ0FBc0NBLHlCQUFDQSxDQUFDQTs7Ozs7OztvQ0F2TmJBOzs7Ozs7OzhCQTRIbkJBLFFBQTBCQTs7Ozs7OEVBQThDQSxRQUFRQTtnQkFFaEdBLDZCQUF3QkEsVUFBQ0E7b0JBRXJCQTtvQkFDQUE7OztnQkFHSkEsSUFBR0E7b0JBQ0NBLGtCQUFhQTs7O2dCQUVqQkE7O2dCQUVBQSx1QkFBa0JBLCtCQUFDQTtvQkFFZkEsSUFBR0E7d0JBRUNBOzt3QkFFQUEsSUFBR0Esc0JBQWdCQSxzQ0FDZkEsbUJBQWNBLFFBQVFBOzRCQUV0QkEsK0JBQTBCQTs7O3dCQUc5QkEsSUFBR0EscUNBQWFBOzRCQUNaQSxlQUFVQTs7O3dCQUVkQSxJQUFHQSxpQ0FBU0E7NEJBQ1JBLFdBQU1BLE1BQU1BOzs7d0JBRWhCQSxJQUFHQSxzQkFBZ0JBLHNDQUF5QkEsaUNBQTJCQSxzQ0FDbkVBLG1CQUFjQSxRQUFRQTs0QkFFdEJBOzs7O29CQUlSQTtvQkFDQUE7O2dCQUVKQSwwQkFBcUJBLFVBQUNBO29CQUVsQkE7b0JBQ0FBOztnQkFFSkEsMkJBQXNCQSxVQUFDQTtvQkFFbkJBO29CQUNBQTs7Z0JBRUpBLHlCQUFvQkEsVUFBQ0E7b0JBRWpCQTtvQkFDQUE7Ozs7OztnQkFoSEpBLElBQUdBLGlDQUEwQkE7b0JBRXpCQSxJQUFHQSxzQkFBaUJBO3dCQUVoQkE7d0JBQ0FBLHFCQUFnQkE7OztvQkFJcEJBLElBQUdBLHNCQUFpQkE7d0JBRWhCQSxxQkFBZ0JBOzt3QkFHaEJBOztvQkFFSkEsbURBQXVCQSxhQUFRQSxDQUFDQTtvQkFDaENBLGNBQWlCQSx1Q0FBaUNBOztvQkFFbERBLGtDQUE2QkE7b0JBQzdCQTtvQkFDQUE7O29CQUVBQSxJQUFHQSxDQUFDQTt3QkFFQUE7d0JBQ0FBLHVDQUFrQ0E7d0JBQ2xDQTs7d0JBRUFBOzt3QkFFQUEsSUFBR0EsMEJBQXFCQTs0QkFFcEJBLHlCQUFzQ0E7OzRCQUl0Q0EsMEJBQXVDQSxvQkFBZUE7Ozt3QkFLMURBO3dCQUNBQTt3QkFDQUE7d0JBQ0FBLHdDQUFtQ0E7d0JBQ25DQTs7d0JBRUFBLHlCQUFzQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUVDaEhIQTtnQkFFM0NBLGdCQUFXQSxVQUFJQSxvREFBOEJBLElBQUlBO2dCQUNqREEsNEJBQXVCQTtnQkFDdkJBLG9DQUErQkEsK0JBQUNBLFdBQVdBOztvQkFFdkNBOztvQkFFQUEsSUFBR0EsWUFBWUE7d0JBRVhBLGdEQUF5QkEseURBRVRBLENBQUNBLDBDQUF5QkEsV0FBV0EsZ0RBQ3pDQSxDQUFDQSwwQ0FBeUJBLFdBQVdBOztvQkFHckRBLElBQUdBO3dCQUVDQTs7OztnQkFJUkEscUNBQWdDQSwrQkFBQ0E7b0JBRTdCQTs7Z0JBRUpBLDJCQUEyQkEsK0JBQUNBO29CQUV4QkE7b0JBQ0FBO29CQUNBQSxJQUFHQTt3QkFDQ0E7O3dCQUVBQTs7Ozs7OztnQkFNUkEsSUFBR0E7b0JBQ0NBOztnQkFDSkEsUUFBUUEsQUFBcUJBO2dCQUM3QkEseUJBQW9CQSxJQUFJQSw0QkFBUUEsQUFBS0EsUUFBUUEsQUFBS0EsQUFBQ0EsUUFBUUE7O2dCQUUzREE7Z0JBQ0FBLDhEQUF1Q0E7O2dCQUV2Q0E7O2dCQUVBQSxxQ0FBZ0NBLGlCQUFDQSxpREFBa0NBO2dCQUNuRUE7OztnQkFLQUEsSUFBR0E7b0JBRUNBLGdEQUE2REEsaUNBQWtCQTtvQkFDL0VBO29CQUNBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lCQzJCd0JBO2lDQUVjQTtvQ0FDR0E7OEJBQ1hBOzhCQUN5QkE7Ozs7OytCQU8xQkE7Ozs7Ozs7Ozs7Ozs7OzJCQTZwQkhBOzs7Ozs7Ozs7O3dCQXN2Q2VBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQTk5RHZDQSxPQUFPQTs7O29CQUVUQSxJQUFHQSwyQkFBcUJBO3dCQUVwQkEsSUFBR0E7NEJBQ0NBOzs0QkFFQUE7Ozs7Ozs7OztvQkFnQk5BLE9BQU9BOzs7b0JBRVRBLElBQUdBLGdDQUEwQkE7d0JBRXpCQSw4QkFBeUJBO3dCQUN6QkE7Ozs7OztvQkFzR0ZBLE9BQU9BOzs7b0JBR1RBLElBQUdBLHVCQUFpQkE7d0JBRWhCQSxxQkFBZ0JBO3dCQUNoQkE7Ozs7OztvQkFZRkEsT0FBT0E7OztvQkFHVEEsSUFBR0EsMkJBQXFCQTt3QkFFcEJBLHlCQUFvQkE7d0JBQ3BCQSxJQUFHQSxDQUFDQTs0QkFHQUEsS0FBSUEsV0FBV0EsSUFBSUEsb0JBQWVBO2dDQUc5QkEscUJBQVFBLGdCQUFnQkE7Z0NBQ3hCQSxxQkFBUUEsaUJBQWlCQTs7NEJBRTdCQTs7d0JBRUpBOzs7Ozs7b0JBd0NKQSxPQUFPQTs7O29CQUlQQSxJQUFHQSxVQUFTQTt3QkFFUkEsV0FBV0E7d0JBQ1hBLHNCQUFpQkE7d0JBRWpCQSxJQUFHQSxrREFBMEJBOzRCQUN6QkEsNEJBQXVCQSxxQkFBZ0JBOzs7Ozs7O29CQVcvQ0EsT0FBT0E7OztvQkFJUEEsSUFBR0EsVUFBU0E7d0JBRVJBLFdBQVdBOzt3QkFFWEEsMEJBQXFCQTt3QkFDckJBO3dCQUNBQSxJQUFHQSwrQ0FBdUJBOzRCQUN0QkEseUJBQW9CQSx5QkFBb0JBOzs7Ozs7O29CQTZDaERBLE9BQU9BOzs7b0JBSVBBLElBQUdBLFVBQVNBO3dCQUVSQSw2QkFBd0JBOzt3QkFFeEJBOzt3QkFFQUE7Ozs7OztvQkFTSkEsT0FBT0E7OztvQkFJUEEsSUFBR0E7d0JBQ0NBOzt3QkFFQUE7OztvQkFFSkEsSUFBR0EsMEJBQW9CQTt3QkFFbkJBLHdCQUFtQkE7d0JBQ25CQTs7Ozs7O29CQVdKQSxPQUFPQTs7O29CQUlQQSxJQUFHQSxVQUFTQTt3QkFFUkEsb0JBQWVBO3dCQUNmQTs7Ozs7O29CQTRISkEsT0FBT0E7OztvQkFJUEEseUJBQW9CQTtvQkFDcEJBLG9CQUFlQSxLQUFJQTtvQkFDbkJBLHlCQUFvQkEsS0FBSUE7O29CQUV4QkEsSUFBR0Esb0JBQWVBO3dCQUVkQSwyQ0FBbUNBOzs7b0JBR3ZDQSxtQkFBY0E7O29CQUVkQSxJQUFHQSxvQkFBZUE7d0JBRWRBLHdDQUFtQ0E7O3dCQUVuQ0EsSUFBR0EsNEJBQXNCQTs0QkFFckJBLFNBQVNBOzs0QkFFVEEsS0FBSUEsV0FBV0EsSUFBSUEsOEJBQXlCQTtnQ0FFeENBLFVBQVVBOztnQ0FFVkEsVUFBVUEsSUFBSUEsNEJBQWVBO2dDQUM3QkEsY0FBY0EsaUNBQW9CQTtnQ0FDbENBLGFBQWFBLGlDQUFvQkE7Z0NBQ2pDQTs7Z0NBRUFBLFFBQU9BLGlDQUFvQkE7b0NBRXZCQSxLQUFLQTtvQ0FDTEEsS0FBS0E7b0NBQ0xBLEtBQUtBO29DQUNMQSxLQUFLQTtvQ0FDTEEsS0FBS0E7b0NBQ0xBLEtBQUtBO29DQUNMQSxLQUFLQTt3Q0FDREE7d0NBQ0FBO29DQUVKQSxLQUFLQTt3Q0FDREEsSUFBR0E7NENBRUNBLElBQUdBO2dEQUNDQTs7Z0RBRUFBOzs7d0NBR1JBO29DQUVKQSxLQUFLQTt3Q0FDREEsa0JBQWtCQSxJQUFJQTt3Q0FDdEJBOzs7Z0NBR1JBLGlCQUFZQTs7Z0NBRVpBO2dDQUNBQSx5QkFBeUJBLGdDQUFnQ0E7Ozs0QkFHN0RBOzRCQUNBQSx5QkFBeUJBLDZCQUE2QkE7O3dCQUUxREE7Ozs7OztvQkFtVkZBLE9BQU9BOzs7b0JBRVRBLElBQUdBLHdCQUFrQkE7d0JBRWpCQSxzQkFBaUJBO3dCQUNqQkE7Ozs7Ozs7OztvQ0ExeEI2QkEsS0FBSUE7Ozs7Ozs7c0NBNkhoQkE7MENBcUJJQTs7OytCQXFUS0EsS0FBSUE7OENBeUxMQTtnQ0FpSHVCQSxLQUFJQTs7b0NBR3JDQTtpQ0E2cENIQTttQ0FDRUE7OzhCQTJCTEE7a0NBRUlBO2tDQXVCQUE7Ozs7Ozs7OEJBN2xDVEEscUJBQWlDQTs7Ozs7OztnQkFFN0NBLElBQUdBO29CQUVDQTtvQkFDQUE7O29CQUVBQTs7b0JBSUFBO29CQUNBQTtvQkFDQUE7OztnQkFHSkE7Z0JBRUFBLDBCQUFxQkE7b0JBRWpCQSxJQUFHQTt3QkFDQ0E7OztvQkFFSkEsa0JBQWtCQTs7b0JBRWxCQSxzQ0FBaUNBO29CQUNqQ0EsSUFBR0E7d0JBQ0NBOzs7b0JBRUpBOztvQkFFQUEsSUFBR0E7d0JBRUNBO3dCQUNBQTs7O29CQUdKQTtvQkFDQUE7O29CQUVBQSx1QkFBdUJBOztvQkFFdkJBO29CQUNBQTtvQkFDQUE7O29CQUVBQSxrQkFBb0JBLEFBQU9BOzs7b0JBSTNCQSxnQkFBa0JBLEFBQU9BLG9DQUErQkE7b0JBQ3hEQTs7b0JBRUFBLElBQUdBO3dCQUVDQSx5QkFBeUJBLDBCQUEwQkEsY0FBY0E7OztvQkFHckVBO29CQUNBQTs7b0JBRUFBLEtBQUlBLFdBQVdBLElBQUlBLG9CQUFlQTt3QkFFOUJBLElBQUdBLENBQUNBLHFCQUFRQTs0QkFDUkE7Ozt3QkFFSkEscUJBQVFBLGFBQWFBO3dCQUNyQkEsWUFBWUEsd0JBQW1CQSx5QkFBeUJBLHFCQUFRQTt3QkFDaEVBLGdCQUFnQkE7d0JBQ2hCQSxJQUFHQSxDQUFDQSxxQkFBcUJBLGdCQUFnQkE7NEJBRXJDQTs0QkFDQUEsbUJBQW1CQTs0QkFDbkJBLDJCQUEyQkEsQUFBT0EsQUFBQ0EsZUFBZUE7O3dCQUV0REEsSUFBR0EscUJBQXFCQSxDQUFDQSxzQkFBc0JBLGdCQUFnQkE7NEJBRTNEQTs0QkFDQUEsbUJBQW1CQTs0QkFDbkJBOzt3QkFFSkEsSUFBR0EsZ0JBQWVBOzRCQUVkQTs7OztvQkFJUkEsV0FBV0E7O29CQUVYQSxrQkFBa0JBOztvQkFFbEJBLHFCQUFxQkE7O29CQUVyQkEsSUFBR0E7d0JBRUNBLEtBQUlBLFNBQVFBLGtCQUFrQkEsS0FBSUEsa0JBQWtCQTs0QkFFaERBLElBQUdBLE1BQUtBO2dDQUNKQTs7NEJBQ0pBLElBQUdBLENBQUNBLHFCQUFRQTtnQ0FDUkE7Ozs0QkFFSkEsV0FBV0EscUJBQVFBOzRCQUNuQkEsZUFBZUE7NEJBQ2ZBLGdCQUFnQkE7OzRCQUVoQkEsVUFBVUEsNkJBQU1BLGNBQ1pBLENBQUNBLHdCQUFtQkEsZUFBZUEsa0JBQWtCQSxDQUFDQSx3QkFBbUJBLHlCQUF5QkEsY0FBY0EsQ0FBQ0EsT0FBS0EseUJBQ3RIQSx5QkFBeUJBLG1CQUFjQSxxQkFBcUJBOzRCQUNoRUEsSUFBR0Esb0JBQW1CQTtnQ0FFbEJBLGdCQUFnQkEsMkJBQUlBLG9CQUFtQkE7Z0NBQ3ZDQTtnQ0FDQUEsdUNBQWdCQTs7OzRCQUdwQkEsaUJBQVlBLEtBQUtBLElBQUdBOzs0QkFFcEJBLHdCQUF5Q0E7OzRCQUV6Q0EsSUFBR0EsZ0JBQWVBO2dDQUVkQTs7Ozs7O29CQU9aQSxJQUFHQSxvQkFBZUEsUUFBUUEsbUNBQTZCQTt3QkFFbkRBO3dCQUNBQSxtREFBdUJBO3dCQUN2QkE7OztvQkFHSkEsVUFBVUEsa0JBQWFBOztvQkFFdkJBLHFCQUF1QkE7b0JBQ3ZCQSw2QkFBK0JBO29CQUMvQkEseUJBQTJCQTs7b0JBRTNCQSxhQUFhQSxtQkFBS0EsQ0FBQ0EscUJBQXFCQTtvQkFDeENBLFlBQVlBLGtCQUFLQTs7O29CQUlqQkEsS0FBSUEsU0FBUUEsc0NBQTJCQSxTQUFRQTt3QkFFM0NBO3dCQUNBQSxLQUFJQSxRQUFRQSxPQUFPQSxJQUFJQSxRQUFRQTs0QkFFM0JBLElBQUdBLElBQUlBO2dDQUVIQSxvQkFBb0JBLHNCQUFpQkE7Z0NBQ3JDQSxJQUFHQSwrQ0FBMENBLDZCQUFnQkEsZUFBYUE7b0NBRXRFQTtvQ0FDQUE7Ozs0QkFHUkEsSUFBR0EsZ0JBQWVBO2dDQUVkQTs7O3dCQUdSQSxJQUFHQSxnQkFBZUE7NEJBRWRBOzt3QkFFSkEsSUFBR0EsQ0FBQ0E7NEJBRUFBLDhCQUF5QkE7Ozs7O29CQU1qQ0Esa0JBQWtCQTs7b0JBRWxCQSxJQUFHQTt3QkFFQ0EsaUJBQVNBO3dCQUNUQSxtQkFBVUE7OztvQkFHZEEsUUFBVUEsQ0FBQ0EsUUFBUUE7O29CQUVuQkEsSUFBR0E7d0JBRUNBO3dCQUNBQSxLQUFLQTs7O29CQUlUQSxJQUFHQTt3QkFDQ0E7O29CQUNKQSxJQUFHQSxTQUFTQTt3QkFDUkEsU0FBU0E7OztvQkFFYkEsSUFBR0E7d0JBRUNBLElBQUdBOzRCQUVDQSxnQkFBV0EsS0FBSUE7NEJBQ2ZBOzs0QkFJQUEsZ0JBQWdCQTs0QkFDaEJBLGVBQWVBOzRCQUNmQSxtQkFBeUJBLEtBQUlBOzRCQUM3QkEsS0FBSUEsWUFBV0EsS0FBSUEsVUFBVUE7Z0NBRXpCQSxpQkFBaUJBLDRCQUFpRUEseUJBQVNBO2dDQUMzRkEsSUFBR0EsYUFBYUEsU0FBU0EsY0FBY0E7b0NBRW5DQSxpQkFBaUJBO29DQUNqQkEsSUFBR0EscUJBQXFCQTt3Q0FFcEJBOzs7OzRCQUlaQSxXQUFXQTs0QkFDWEEsSUFBR0E7Z0NBQ0NBOzs0QkFDSkEsS0FBSUEsWUFBV0EsS0FBSUEsVUFBVUE7Z0NBRXpCQSxJQUFHQSwwQkFBcUJBLHFCQUFhQTtvQ0FFakNBLFNBQVFBLGtCQUFTQSxxQkFBYUE7b0NBQzlCQSxhQUFZQTtvQ0FDWkEsZ0JBQWVBO29DQUNmQTtvQ0FDQUEsaUJBQWdCQTtvQ0FDaEJBOztvQ0FFQUEscUJBQWdCQSxxQkFBYUE7Ozs7Ozs7b0JBTzdDQSxtQkFBbUJBOztvQkFFbkJBLEtBQUlBLFNBQVFBLE9BQU9BLEtBQUlBLFFBQVFBO3dCQUUzQkEsSUFBR0EsQ0FBQ0EsMEJBQXFCQTs0QkFFckJBLHFCQUFvQkEsc0JBQWlCQTs0QkFDckNBLFNBQVNBOzRCQUNUQSxlQUFlQSxFQUFDQSxxREFBMkNBLENBQUNBLDJCQUFzQkEsNERBQW1EQSxDQUFDQSxtQkFBaUJBOzRCQUN2SkE7NEJBQ0FBLHVDQUFnQkEsR0FBR0Esd0JBQW1CQSxjQUFjQSxVQUFVQTs0QkFDOURBLHFCQUFxQkEsd0JBQWlCQTs7OzRCQUd0Q0EsYUFBYUEsQUFBc0NBOzRCQUNuREEsSUFBR0E7Z0NBRUNBLGdCQUFnQkEsQUFBc0NBOzs0QkFFMURBLGNBQWNBOzs0QkFFZEEsS0FBSUEsU0FBUUEsa0JBQWtCQSxLQUFJQSxrQkFBa0JBO2dDQUVoREEsV0FBVUEscUJBQVFBO2dDQUNsQkEsSUFBR0EsQ0FBQ0E7b0NBQ0FBOzs7Z0NBRUpBLGlCQUFnQkE7Z0NBQ2hCQTtnQ0FDQUEsV0FBK0JBO2dDQUMvQkEsSUFBR0Esb0JBQW1CQSxRQUFRQSxDQUFDQSxjQUFhQTtvQ0FFeENBLG1CQUFtQkEsb0NBQW1DQTs7b0NBRXREQSxPQUFPQTtvQ0FDUEEsaUJBQWlCQTtvQ0FDakJBO29DQUNBQSxrQkFBa0JBO29DQUNsQkEsbUJBQW1CQSxzQkFBQ0Esd0JBQW1CQSx5QkFBeUJBO29DQUNoRUEsdUJBQXVCQSx3QkFBaUJBO29DQUN4Q0EsZUFBZUEsQUFBc0NBOztvQ0FFckRBLElBQUdBLENBQUNBLGlDQUEwQkE7d0NBRTFCQSxtQkFBbUJBO3dDQUNuQkEsSUFBR0E7NENBRUNBLElBQUdBO2dEQUVDQTs7Z0RBSUFBLHVCQUF1QkE7Ozt3Q0FHL0JBLElBQUdBOzRDQUVDQTs7O3dDQUdKQSxJQUFHQSx3QkFBdUJBOzRDQUV0QkEsbUJBQW1CQTs7OztvQ0FJM0JBLGNBQWNBLGFBQ1ZBLGlDQUFnQ0EsTUFBTUEsTUFBTUEsZ0JBQWVBLE1BQzNEQTs7b0NBRUpBLElBQUdBLCtCQUEwQkEsaUNBQTRCQSxDQUFDQSxjQUNuREEsQ0FBQ0EsaUNBQTBCQSxpQkFDM0JBLHFEQUFrQ0E7d0NBRXJDQTt3Q0FDQUEsa0JBQWtCQTt3Q0FDbEJBLGNBQWNBO3dDQUNkQSwwQkFBMEJBLHVCQUEwQkE7d0NBQ3BEQSwrQ0FBdUJBLGFBQWFBLHdCQUFvQ0Esb0JBQXVCQTs7O29DQUduR0Esb0JBQWlDQTs7b0NBSWpDQSxPQUFPQSwwQkFBeUJBLE1BQU1BLGdCQUFlQTtvQ0FDckRBLGtCQUFrQkE7b0NBQ2xCQSxtQkFBbUJBLHFDQUFDQSx3QkFBbUJBLHlCQUF5QkE7O29DQUVoRUEsb0JBQWlDQTs7Z0NBRXJDQSxJQUFHQSxRQUFRQTs7Ozs7OzRCQU9mQSxzQ0FBZUE7OzRCQUVmQSxJQUFHQTtnQ0FFQ0E7O2dDQUVBQSxpQkFBaUJBLEFBQXFDQTs7OzRCQUcxREEsd0JBQXFDQTs7NEJBRXJDQSxrQkFBU0EsSUFBS0E7Ozt3QkFHbEJBLElBQUdBLGdCQUFlQTs0QkFFZEEsSUFBR0E7Z0NBQ0NBOzs7NEJBRUpBLGlEQUFxQkE7OzRCQUVyQkE7Ozt3QkFHSkEsS0FBS0E7O29CQUVUQSxJQUFHQTt3QkFDQ0E7OztvQkFFSkEsSUFBR0EsNENBQW9CQSxTQUFRQSwwQkFBMEJBO3dCQUVyREEsWUFBWUE7d0JBQ1pBLEtBQUlBLFlBQVdBLEtBQUlBLE9BQU9BOzRCQUV0QkEsSUFBR0EsZ0JBQWVBO2dDQUVkQSxpREFBcUJBOztnQ0FFckJBOzs7NEJBR0pBO2dDQUVJQSxZQUFZQSxBQUF5QkEsdUJBQXVCQTtnQ0FDNURBLHNCQUFpQkEsT0FBT0EsU0FBZ0JBOzs7Z0NBSXhDQSxJQUFHQSxnREFBa0NBO29DQUNqQ0EsNkJBQWdCQSxxQkFBZUE7Ozs7OztvQkFLL0NBLG1EQUF1QkE7b0JBQ3ZCQSxpREFBcUJBOztvQkFFckJBLElBQUdBLGdCQUFlQTt3QkFFZEE7OztvQkFHSkEsa0JBQWFBOzs7Z0JBR2pCQSwyQkFBc0JBOztnQkFFdEJBLGtCQUFhQTtnQkFDYkE7Z0JBQ0FBLHlCQUFvQkE7O2dCQUVwQkE7Z0JBQ0FBOztnQkFFQUE7O2dCQUVBQSxnQkFBV0E7Z0JBQ1hBOztnQkFFQUEsMERBQThCQTtnQkFDOUJBLDREQUFnQ0E7O2dCQUVoQ0EscUJBQWdCQTtnQkFDaEJBO2dCQUNBQTs7Z0JBRUFBLHVCQUFrQkEsVUFBSUEsa0RBQThCQSwrQkFBQ0E7b0JBQ2pEQSxJQUFHQSxvQkFBZUE7d0JBRWRBLGFBQXlCQTs7b0JBRTdCQSxJQUFHQSxpQ0FBMEJBO3dCQUN6QkE7O3dCQUVBQSxvQkFBZUEsa0JBQUtBLFdBQXVCQSxBQUFtQ0EsK0JBQUNBOzRCQUFRQTs7O21DQUNoRkEsK0JBQUNBLFFBQVFBO29CQUNwQkEsSUFBR0EsZUFBY0E7d0JBRWJBOzs7Z0JBR1JBLDhCQUF5QkEsSUFBSUE7Z0JBQzdCQTs7Z0JBRUFBLGVBQVVBLFVBQUlBLG1FQUE0Q0EsK0JBQUNBO29CQUN2REEsSUFBR0Esb0JBQWVBO3dCQUVkQSxhQUF5QkE7O29CQUU3QkE7Z0NBQ1FBLElBQUlBO2dCQUNoQkEsZ0JBQVdBLFVBQUlBLG9FQUE2Q0EsK0JBQUNBO29CQUN6REEsSUFBR0Esb0JBQWVBO3dCQUVkQSxhQUF5QkE7O29CQUU3QkEsNEJBQXVCQTtnQ0FDZkEsSUFBSUE7O2dCQUVoQkEsZ0JBQVdBLFVBQUlBLDhDQUEwQkEsSUFBSUEsMkRBQW9DQSwrQkFBQ0E7b0JBQzlFQTtvQkFDQUE7O2dCQUVKQTs7O2dCQUdBQSwwREFBNkJBLGVBQVVBLHNCQUFpQkEsY0FBU0E7O2dCQUVqRUE7O2dCQUVBQSx5QkFBb0JBLCtCQUFDQTtvQkFFakJBLElBQUdBLHFCQUFlQTt3QkFDZEE7O29CQUNKQSxRQUFRQTtvQkFDUkEsSUFBSUEsc0JBQVFBLDBCQUFxQkEsQ0FBQ0EsTUFBSUE7b0JBQ3RDQSxJQUFHQTt3QkFDQ0E7O29CQUNKQSxxQkFBUUEsMEJBQXFCQTs7b0JBRTdCQTs7b0JBRUFBO29CQUNBQTtvQkFDQUE7O29CQUVBQSxtQkFBY0E7b0JBQ2RBLGtCQUFhQTs7O2dCQUdqQkEsZ0JBQVdBLCtCQUFDQTtvQkFFUkEsZ0JBQVdBLEtBQUlBO29CQUNmQTs7O2dCQUdKQTtnQkFDQUEsSUFBR0Esa0NBQXFCQSxDQUFDQTtvQkFFckJBLHNDQUFpQ0EsK0JBQUNBO3dCQUU5QkE7O3dCQUVBQSxJQUFJQTs0QkFFQUEsb0NBQStCQSxDQUFDQSxrQkFBYUEsQ0FBQ0E7Ozs7O2dCQUsxREE7Z0JBQ0FBLGtDQUE2QkEsK0JBQUNBO29CQUUxQkEsSUFBSUE7d0JBQ0FBOzs7b0JBRUpBLElBQUdBLGFBQVlBO3dCQUVYQSxnQkFBV0EsS0FBSUE7d0JBQ2ZBLFdBQVdBLGtCQUFLQTt3QkFDaEJBOzt3QkFHQUEsSUFBR0Esa0NBQXFCQSxDQUFDQTs0QkFHckJBLElBQUdBLDBDQUFvQ0EsbUNBQThCQSx3Q0FBa0NBO2dDQUVuR0EsV0FBV0EsbUNBQThCQTtnQ0FDekNBLElBQUlBO29DQUVBQTtvQ0FDQUEsb0NBQStCQTtvQ0FDL0JBOzs7Ozt3QkFLWkE7OztnQkFHUkEsZ0JBQVdBLCtCQUFDQTtvQkFFUkE7O2dCQUVKQSwwQkFBcUJBLCtCQUFDQTtvQkFFbEJBLHFCQUFnQkEsU0FBZ0JBOztnQkFFcENBLGtCQUFhQSwrQkFBQ0E7b0JBRVZBLElBQUdBLENBQUNBO3dCQUVBQSxJQUFHQSxzQkFBaUJBOzRCQUVoQkEscUJBQWdCQTs7NEJBSWhCQTs0QkFDQUEsVUFBVUE7NEJBQ1ZBLHFCQUFnQkE7OzRCQUVoQkEsSUFBR0E7Z0NBRUNBLG1CQUFjQTs7Ozs7b0JBSzFCQSxvQkFBb0JBLFNBQWdCQTs7b0JBRXBDQSxVQUFVQTtvQkFDVkEsSUFBR0E7d0JBRUNBLElBQUdBOzRCQUVDQSxpQ0FBNEJBOzRCQUM1QkE7K0JBRUNBLElBQUdBLGdCQUFnQkEseUJBQW9CQTs0QkFFeENBOzRCQUNBQTs0QkFDQUEsSUFBR0EsZ0JBQWdCQTtnQ0FFZkEsS0FBSUEsUUFBUUEsZUFBZUEsSUFBSUEsb0NBQXVCQTtvQ0FFbERBLGlDQUE0QkE7OztnQ0FJaENBLEtBQUlBLFNBQVFBLHdCQUFtQkEsS0FBSUEsMkJBQW1CQTtvQ0FFbERBLGlDQUE0QkE7Ozs0QkFHcENBOzRCQUNBQTs0QkFDQUE7OztvQkFHUkEseUNBQW9DQTtvQkFDcENBLElBQUdBLGtCQUFpQkE7d0JBRWhCQSx5QkFBb0JBOzt3QkFJcEJBOzs7Z0JBR1JBO2dCQUNBQSxxQkFBZ0JBLCtCQUFDQTtvQkFFYkEsVUFBVUEsU0FBZ0JBO29CQUMxQkEsSUFBR0EsNENBQW9CQTt3QkFDbkJBLHNCQUFpQkE7OztvQkFFckJBLElBQUdBO3dCQUVDQSxVQUFVQSx3QkFBV0E7O3dCQUVyQkEsV0FBV0EsSUFBSUEsNkJBQWdCQSxLQUFLQTt3QkFDcENBOzs7O2dCQUlSQSx5QkFBb0JBLCtCQUFDQTtvQkFFakJBLFVBQVVBO29CQUVWQSxJQUFHQSw0QkFBdUJBLGVBQWVBLENBQUNBLHNCQUFxQkE7d0JBSTNEQTs7d0JBSUFBLElBQUdBLGdCQUFlQSw0QkFBZUEsZ0JBQWVBOzRCQUU1Q0E7NEJBQ0FBLGtCQUFrQkE7NEJBQ2xCQSxJQUFHQSxnQkFBZUE7Z0NBRWRBLElBQUdBLENBQUNBLENBQUNBO29DQUNEQTs7bUNBRUhBLElBQUdBLGdCQUFlQTtnQ0FFbkJBLElBQUdBLENBQUNBLENBQUNBLHlCQUFvQkE7b0NBQ3JCQTs7OzRCQUVSQSxJQUFHQSxnQkFBZUE7Z0NBRWRBLElBQUdBO29DQUVDQSxpQ0FBNEJBOztvQ0FJNUJBLHlDQUFvQ0E7OztnQ0FHeENBLG9CQUFlQTs7Z0NBRWZBOztnQ0FFQUE7O2dDQUdBQTs7Ozs7OztnQkFRaEJBLG1CQUFjQSxJQUFJQTs7Z0JBRWxCQSx1Q0FBa0NBLG1CQUM5QkEsSUFBSUEsa0RBQThCQSwrQkFBQ0E7b0JBQy9CQSxJQUFHQSxxQkFBZ0JBO3dCQUVmQSxrQkFBV0EscUJBQVFBLHFCQUFnQkE7O3FCQUczQ0EsSUFBSUEsbURBQStCQSwrQkFBQ0E7b0JBQ2hDQSxJQUFHQSxxQkFBZ0JBO3dCQUVmQSxrQkFBV0EscUJBQVFBLHFCQUFnQkE7O3FCQUczQ0EsSUFBSUEscURBQWlDQSwrQkFBQ0E7b0JBQ2xDQTsyQkFJSkEsSUFBSUEsb0RBQWdDQSwrQkFBQ0E7b0JBQ2pDQSxJQUFHQSxxQkFBZ0JBO3dCQUVmQSxxQkFBUUE7d0JBQ1JBOztxQkFLUkEsSUFBSUEsNENBQXdCQSwrQkFBQ0E7b0JBQ3pCQSxJQUFHQSxxQkFBZ0JBO3dCQUVmQSxxQkFBUUEsNEJBQXVCQSx5QkFBb0JBLHFCQUFRQTs7cUJBR25FQSxJQUFJQSwwREFBc0NBLCtCQUFDQTtvQkFDdkNBOzJCQUVKQSxJQUFJQSxtREFBK0JBLCtCQUFDQTtvQkFDaENBOzJCQUdKQSxrQ0FBNEJBLFVBQUlBLHFFQUNkQSwrQkFBQ0E7b0JBQ1hBLElBQUdBO3dCQUVDQTs7d0JBR0FBOzswQkFJWkEsSUFBSUEsOENBQTBCQSwrQkFBQ0E7b0JBQVNBO3FCQUN4Q0EsSUFBSUEsZ0RBQTRCQSwrQkFBQ0E7b0JBQVNBOzs7Z0JBRzlDQSw2QkFBd0JBLCtCQUFDQTtvQkFFckJBLElBQUdBO3dCQUVDQTt3QkFDQUE7O3dCQUVBQSxtQkFBY0E7O3dCQUlkQSxJQUFHQSxvQkFBZUE7NEJBRWRBLHNCQUFpQkEsMkNBQThCQTs0QkFDL0NBOzRCQUNBQTs7Ozs7Z0JBS1pBLHVCQUFrQkEsK0JBQUNBO29CQUVmQSxJQUFHQTt3QkFDQ0E7OztvQkFFSkEsV0FBV0EscUJBQVFBLFNBQWdCQTs7b0JBRW5DQSxLQUFJQSxXQUFXQSxJQUFJQSxvQkFBZUE7d0JBRTlCQSxJQUFHQSw2Q0FBUUEsSUFBTUE7NEJBRWJBLHFCQUFRQSxnQkFBZ0JBOzs7b0JBR2hDQSxRQUFPQTt3QkFFSEE7d0JBQ0FBLEtBQUtBOzRCQUNEQSxrQkFBV0EsTUFBTUE7NEJBQ2pCQTt3QkFFSkEsS0FBS0E7NEJBQ0RBLGtCQUFXQSxNQUFNQTs0QkFDakJBO3dCQUVKQSxLQUFLQTs0QkFDREEsa0JBQVdBLE1BQU1BOzRCQUNqQkE7OztnQkFHWkEseUJBQW9CQSxVQUFDQTtvQkFFakJBLDhDQUE2REE7O2dCQUVqRUEsd0JBQW1CQSxVQUFDQTtvQkFFaEJBOztnQkFFSkEsb0JBQWVBLCtCQUFDQTtvQkFFWkEsSUFBR0EsYUFBYUEsUUFBUUEsQ0FBQ0EsQ0FBQ0E7d0JBQ3RCQTs7O29CQUVKQSxhQUFhQTs7b0JBRWJBLElBQUdBLDhDQUF3QkE7d0JBQ3ZCQTs7O29CQUVKQSxpQkFBaUJBLFNBQWdCQTtvQkFDakNBLG9CQUFvQkE7b0JBQ3BCQSxJQUFHQSxrQkFBaUJBO3dCQUNoQkE7OztvQkFFSkEsSUFBR0E7d0JBQ0NBOzs7b0JBRUpBLFFBQVFBO29CQUNSQSxTQUFLQSxBQUFLQTtvQkFDVkEsUUFBUUEsZ0JBQUtBOztvQkFFYkEsSUFBR0EsZUFBY0EsNkJBQXFCQSxJQUFJQTt3QkFDdENBOztvQkFDSkEsSUFBR0EsZUFBY0EsNkJBQXFCQSxJQUFJQTt3QkFDdENBOzs7b0JBRUpBLElBQUdBLElBQUlBO3dCQUVIQSxpQkFBWUE7O3dCQUlaQSxpQkFBWUE7OztvQkFHaEJBLElBQUdBLHNCQUFpQkE7d0JBQ2hCQTs7b0JBQ0pBLFVBQVVBLHFCQUFRQTtvQkFDbEJBLElBQUdBLG1CQUFhQTt3QkFFWkEsb0JBQWVBO3dCQUNmQSxpQkFBWUE7O3dCQUlaQSxXQUFXQSxxQkFBUUE7d0JBQ25CQSxvQkFBZUE7d0JBQ2ZBLG9CQUFlQSxxQkFBZ0JBLE9BQU9BOzs7b0JBRzFDQTs7Z0JBRUpBLHlCQUFvQkEsK0JBQUNBO29CQUVqQkEsUUFBUUE7b0JBQ1JBLGFBQWFBO29CQUNiQSxTQUFJQSxBQUFLQTtvQkFDVEEsbUJBQWNBOztvQkFFZEEscUJBQWdCQSxTQUFnQkE7O29CQUVoQ0EsSUFBR0EsS0FBS0E7d0JBRUpBLG1CQUFjQSxTQUFnQkE7d0JBQzlCQSxrQkFBYUE7d0JBQ2JBOzt3QkFFQUE7O3dCQUlBQSxrQkFBYUE7d0JBQ2JBLG1CQUFjQTs7O2dCQUd0QkEseUJBQW9CQSwrQkFBQ0E7b0JBRWpCQSxJQUFHQSxxQkFBZUE7d0JBRWRBLFFBQVFBO3dCQUNSQSxhQUFhQTt3QkFDYkEsU0FBS0EsQUFBS0E7O3dCQUVWQSxJQUFHQSxLQUFLQTs0QkFFSkE7NEJBQ0FBOzt3QkFFSkE7Ozs7Z0JBSVJBLDBCQUFxQkEsK0JBQUNBO29CQUVsQkEsSUFBR0EscUJBQWVBO3dCQUVkQTs7OztnQkFJUkEsc0JBQWlCQSwrQkFBQ0E7b0JBRWRBLDJDQUEwREEsZUFBMkJBLHdCQUFXQSxTQUFnQkE7OztnQkFHcEhBLG9EQUF1QkEsb0JBQWVBLDBCQUFxQkE7O2dCQUUzREEseUJBQW9CQSwrQkFBQ0E7b0JBRWpCQSxxQkFBUUEsU0FBZ0JBLDZDQUE2Q0E7OztnQkFHekVBLHFDQUFnQ0E7Z0JBQ2hDQSx1QkFBa0JBOzs7OztnQkFwekRsQkEsT0FBT0EsQ0FBQ0EsMEJBQXFCQSxRQUFRQTs7O2dCQW1CckNBLElBQUdBLENBQUNBO29CQUVBQTtvQkFDQUE7b0JBQ0FBOztvQkFFQUE7O29CQUVBQTs7Ozs7Z0JBT0pBLElBQUdBO29CQUVDQTtvQkFDQUE7b0JBQ0FBOztvQkFFQUE7O29CQUVBQTs7OzRDQW1CeUJBLEdBQUdBLE9BQWVBO2dCQUUvQ0EsSUFBR0E7b0JBRUNBLElBQUdBO3dCQUVDQSxhQUFhQSw0QkFBaUZBLGNBQ2pIQSxBQUF1RkEsVUFBQ0EsR0FBR0E7dUNBQU1BLEtBQUlBLGtFQUFxQkEsR0FBR0E7cUNBQy9GQSxBQUFxRkEsK0JBQUNBO21DQUFNQSx3Q0FBbUNBO29DQUMxSEEsQUFBa0ZBO21DQUFLQTs7O3dCQUd2R0EseUJBQW9CQSw0QkFBbUZBLGVBQU9BLEFBQW9GQTt1Q0FBS0E7Ozt3QkFJdk1BLGNBQWFBLDRCQUFpRkEsY0FDakhBLEFBQXVGQSxVQUFDQSxHQUFHQTt1Q0FBTUEsS0FBSUEsa0VBQXFCQSxHQUFHQTtxQ0FDL0ZBLEFBQXFGQSwrQkFBQ0E7bUNBQU1BLHdDQUFtQ0E7OENBQ2hIQSxBQUFrRkE7bUNBQUtBOzs7d0JBR2pIQSx5QkFBb0JBLDRCQUFtRkEsZ0JBQU9BLEFBQW9GQTt1Q0FBS0E7Ozs7b0JBSzNNQSxJQUFHQTt3QkFFQ0EsY0FBYUEsNEJBQWlGQSxjQUNqSEEsQUFBdUZBLFVBQUNBLEdBQUdBO3VDQUFNQSxLQUFJQSxrRUFBcUJBLEdBQUdBO3VDQUMxRkEsQUFBa0ZBO21DQUFLQTs7O3dCQUd2R0EseUJBQW9CQSw0QkFBbUZBLGdCQUFPQSxBQUFvRkE7dUNBQUtBOzs7d0JBSXZNQSxjQUFhQSw0QkFBaUZBLGNBQ2pIQSxBQUF1RkEsVUFBQ0EsR0FBR0E7dUNBQU1BLEtBQUlBLGtFQUFxQkEsR0FBR0E7aURBQ2hGQSxBQUFrRkE7bUNBQUtBOzs7d0JBR2pIQSx5QkFBb0JBLDRCQUFtRkEsZ0JBQU9BLEFBQW9GQTt1Q0FBS0E7Ozs7Ozs7Z0JBb0QvTUEsc0JBQTRCQSxLQUFJQTs7Z0JBRWhDQSxLQUFJQSxXQUFXQSxJQUFJQSxpQkFBWUE7b0JBRTNCQTs7b0JBRUFBLEtBQUlBLFdBQVdBLElBQUlBLG9CQUFlQTt3QkFFOUJBLElBQUdBLENBQUNBLHFCQUFRQSxvQkFBb0JBOzRCQUU1QkE7NEJBQ0FBOzs7b0JBR1JBLElBQUdBO3dCQUVDQSxvQkFBb0JBOzs7O2dCQUk1QkEseUJBQW9CQTtnQkFDcEJBOzs7Z0JBbURBQSxJQUFHQTtvQkFFQ0E7b0JBQ0FBOztvQkFFQUEsSUFBR0E7d0JBRUNBLHlFQUE2Q0E7d0JBQzdDQSwyREFBK0JBLGtDQUE2QkEsYUFBYUEsc0JBQUNBOzt3QkFJMUVBLHdFQUE0Q0E7d0JBQzVDQSwyREFBK0JBLDZCQUF3QkEsYUFBYUEsc0JBQUNBOzs7b0JBS3pFQTtvQkFDQUE7O29CQUVBQSxJQUFHQTt3QkFFQ0EsMkRBQStCQSxZQUFnQkEsYUFBYUEsQ0FBQ0E7O3dCQUk3REE7Ozs7O2dCQXFFUkEsSUFBR0EscUJBQWdCQTtvQkFFZkEsa0JBQVdBLDBCQUFxQkE7OztvQ0FZakJBLFFBQXVCQTs7O2dCQUUxQ0Esb0JBQW9CQTs7Z0JBRXBCQSxJQUFHQSxxQkFBZ0JBLFFBQVFBLGtEQUF1QkE7b0JBRTlDQSxzQ0FBaUNBO29CQUNqQ0EseUJBQW9CQTs7O2dCQUd4QkEsSUFBR0EsU0FBUUE7b0JBRVBBLHlCQUFvQkE7O29CQUlwQkEsWUFBYUEsU0FBUUE7O29CQUVyQkEsUUFBT0E7d0JBRUhBO3dCQUNBQSxLQUFLQTs0QkFDREEseUNBQTZCQSxDQUFDQSxnRUFBMENBOzRCQUN4RUE7d0JBRUpBLEtBQUtBOzRCQUNEQSw2REFBNEJBLENBQUNBLDhEQUF3Q0E7NEJBQ3JFQTt3QkFFSkEsS0FBS0E7NEJBQ0RBLDhEQUFnQ0EsQ0FBQ0Esa0VBQTRDQTs0QkFDN0VBO3dCQUVKQSxLQUFLQTs0QkFDREEseUNBQTZCQSxDQUFDQSxnRUFBMENBOzRCQUN4RUE7d0JBRUpBLEtBQUtBOzRCQUNEQSwwREFBNEJBLENBQUNBLDhEQUF3Q0E7NEJBQ3JFQTt3QkFFSkEsS0FBS0E7NEJBQ0RBLDJEQUE2QkEsQ0FBQ0EsK0RBQXlDQTs0QkFDdkVBO3dCQUVKQSxLQUFLQTs0QkFDREEsMkRBQTJCQSxDQUFDQSxpRUFBMkNBOzRCQUN2RUE7d0JBRUpBLEtBQUtBOzRCQUNEQSwyREFBNEJBLENBQUNBLDhEQUF3Q0E7NEJBQ3JFQTt3QkFFSkEsS0FBS0E7NEJBQ0RBLDREQUE2QkEsQ0FBQ0EsK0RBQXlDQTs0QkFDdkVBO3dCQUVKQSxLQUFLQTs0QkFDREEsNERBQThCQSxDQUFDQSxnRUFBMENBOzRCQUN6RUE7d0JBRUpBLEtBQUtBOzRCQUNEQSw2REFBK0JBLENBQUNBLGlFQUEyQ0E7NEJBQzNFQTs7OztnQkFJWkE7Z0JBQ0FBLG9CQUFlQSxVQUFJQSx3Q0FFTkEsc0JBQ0VBOzs7Z0JBN0VmQSxJQUFHQSxxQkFBZ0JBO29CQUVmQSxrQkFBV0EsMEJBQXFCQTs7OztnQkFpRnBDQSxPQUFPQTs7O2dCQUtQQSxJQUFHQSxvQkFBZUE7b0JBQ2RBOztnQkFDSkEsT0FBT0E7OztnQkFLUEEsbUNBQThCQSw4QkFBd0JBOzs7Z0JBS3REQTs7aUNBbUY0QkE7Z0JBRTVCQSxPQUFPQSxxQkFBUUE7O2dEQUdrQkE7Z0JBRWpDQSxPQUFPQSw4QkFBdUJBLHFCQUFRQTs7Z0RBZUxBO2dCQUVqQ0EsT0FBT0EsNEJBQXVCQSwwQkFBcUJBOztnREFHbEJBO2dCQUVqQ0EsT0FBT0EsdUJBQWdCQSx3QkFBbUJBOzs4Q0FHVEE7Z0JBRWpDQSxPQUFPQSxxQkFBZ0JBLHdCQUFtQkE7O29EQXhCS0E7Z0JBRS9DQSxLQUFJQSxXQUFXQSxJQUFJQSxvQkFBZUE7b0JBRTlCQSxJQUFHQSw0Q0FBUUEscUJBQXVCQTt3QkFFOUJBLE9BQU9BLHFCQUFRQTs7O2dCQUd2QkEsT0FBT0E7O3NEQXdDd0NBLFdBQWtCQTs7Z0JBRWpFQSxLQUFJQSxXQUFXQSxJQUFJQSxvQkFBZUE7b0JBRTlCQSxJQUFHQSxxQkFBUUEsTUFBTUEsUUFBUUEscUJBQVFBLGFBQWFBLFFBQzFDQSxzQkFBZUEscUJBQVFBLHFCQUFxQkEsV0FBV0E7d0JBQ3ZEQSxPQUFPQSxxQkFBUUE7Ozs7Z0JBR3ZCQSxPQUFPQTs7eUNBL0JtQkEsWUFBZ0JBO2dCQUUxQ0EsT0FBT0EscUJBQWdCQSxZQUFZQTs7dUNBR1RBLFlBQWdCQTtnQkFFMUNBLElBQUdBLGVBQWNBO29CQUNiQSxPQUFPQTs7Z0JBQ1hBLE9BQU9BLG9CQUFvQkE7O3lDQUdEQSxZQUFnQkE7Z0JBRTFDQSxPQUFPQSxxQkFBZ0JBLFlBQVlBLDBCQUFxQkE7O3lDQUc5QkEsWUFBZ0JBO2dCQUUxQ0EsT0FBT0EsdUJBQWdCQSxZQUFZQSxxQkFBUUE7OzRDQWVSQSxXQUFrQkE7O2dCQUVyREEsSUFBR0EsbUJBQWNBO29CQUNiQSxPQUFPQTs7O2dCQUVYQSxLQUFJQSxXQUFXQSxJQUFJQSw2QkFBd0JBO29CQUV2Q0EsSUFBR0EsZ0NBQW1CQSxNQUFNQSxRQUN4QkEsc0JBQWVBLGdDQUFtQkEsY0FBY0EsV0FBV0E7d0JBQzNEQSxPQUFPQSxnQ0FBbUJBOzs7O2dCQUdsQ0EsT0FBT0E7O21DQUdXQSxTQUFnQkEsV0FBa0JBLE9BQWlCQSxjQUEwQkEsV0FBMkJBLFdBQXlCQTs7Ozs7O2dCQUVuSkEsVUFBVUEsMEJBQXFCQTtnQkFDL0JBLElBQUdBLE9BQU9BO29CQUNOQTs7Z0JBQ0pBLGlCQUFVQSxTQUFTQSxLQUFLQSxPQUFPQSxjQUFjQSxXQUFXQSxXQUFXQTs7bUNBR2pEQSxTQUFnQkEsUUFBbUJBLE9BQWlCQSxjQUEwQkEsV0FBMkJBLFdBQXlCQTs7Ozs7OztnQkFFcEpBLGVBQVVBLFVBQUlBLDRCQUFlQSxNQUFNQSxxQkFBbUJBLDRCQUF5QkEsSUFBSUEsMENBQXNCQSxRQUFRQSxXQUFXQSw4QkFBMkJBLDBCQUF1QkE7O2lDQUc1SkE7Z0JBRWxCQSxJQUFHQSxVQUFVQTtvQkFDVEE7OztnQkFFSkEsaUJBQVlBOztnQkFFWkE7O2tDQUdtQkE7O2dCQUVuQkEsSUFBR0EsV0FBV0EsUUFBUUE7b0JBQ2xCQTs7O2dCQUVKQSxzQkFBaUJBOztnQkFFakJBOztvQ0FHcUJBO2dCQUVyQkEsb0JBQWVBOztnQkFFZkE7O3dDQUd3QkE7Z0JBRXhCQSxJQUFHQSwwQkFBcUJBLFFBQVFBO29CQUU1QkEsSUFBR0E7d0JBRUNBLE9BQVFBLHVDQUEwQkE7O29CQUV0Q0EsT0FBT0E7OztnQkFHWEEsT0FBT0EsK0JBQWtCQTs7O2dCQUt6QkEsSUFBR0E7b0JBRUNBLE9BQU9BLEFBQU9BOztvQkFJZEE7b0JBQ0FBLEtBQUlBLFdBQVdBLElBQUlBLG9CQUFlQTt3QkFFOUJBLElBQUdBLHFCQUFRQTs0QkFDUEEsU0FBU0EscUJBQVFBOzs7b0JBRXpCQSxPQUFPQTs7OztnQkFNWEEsb0JBQWVBLEtBQUlBO2dCQUNuQkE7OztnQkFLQUEsYUFBYUE7Z0JBQ2JBLElBQUdBO29CQUVDQTs7b0JBSUFBLFlBQWNBLGtCQUFRQTtvQkFDdEJBLEtBQUlBLFdBQVdBLElBQUlBLFFBQVFBO3dCQUV2QkEseUJBQU1BLEdBQU5BLFVBQVdBLHNCQUFpQkE7O29CQUVoQ0EsNkNBQXdDQTs7Z0JBRTVDQTs7eUNBSzBCQTs7Z0JBRTFCQSxJQUFHQTtvQkFFQ0E7O29CQUlBQSxJQUFHQTt3QkFFQ0EsSUFBR0EsZ0NBQTBCQTs0QkFFekJBLGFBQXlCQTs0QkFDekJBLDhCQUF5QkE7O3dCQUU3QkEsOEJBQXlCQSxrQkFBS0EsV0FBdUJBLEFBQW1DQSwrQkFBQ0E7NEJBRXJGQTs0QkFDQUEsWUFBbUJBOzt3QkFJdkJBOzs7Ozs7Z0JBVVJBLElBQUdBLHlCQUFvQkE7b0JBRW5CQSxPQUFPQSx3QkFBV0Esc0JBQWlCQTs7b0JBSW5DQSxPQUFPQTs7OztnQkFNWEEsSUFBR0EsZ0JBQVdBLFFBQVFBO29CQUNsQkE7O2dCQUNKQSxhQUFhQTtnQkFDYkEsY0FBY0E7O2dCQUVkQSxLQUFJQSxXQUFXQSxJQUFJQSxRQUFRQTtvQkFFdkJBLElBQUdBLENBQUNBLHFCQUFRQTt3QkFDUkE7OztnQkFFUkEsT0FBT0E7OzJDQUdvQkEsUUFBdUJBOztnQkFFbERBLElBQUdBLENBQUNBO29CQUNBQTs7O2dCQUVKQTtnQkFDQUE7O2dCQUVBQSxJQUFHQSx1QkFBdUJBLENBQUNBLGlDQUEwQkE7b0JBRWpEQSxTQUFTQTtvQkFDVEEsWUFBWUE7OztnQkFHaEJBLEtBQUlBLFdBQVdBLElBQUlBLGlCQUFZQTtvQkFFM0JBLFlBQWVBLHNDQUFzQ0E7b0JBQ3JEQSxJQUFHQSxDQUFDQSxpQ0FBMEJBO3dCQUUxQkEsUUFBUUE7d0JBQ1JBLElBQUdBLElBQUlBOzRCQUVIQSxZQUFZQTs0QkFDWkEsU0FBU0E7Ozs7O2dCQUtyQkEsSUFBR0E7b0JBRUNBLE9BQU9BLG9CQUFLQSxrQ0FBYUEsUUFBUUE7O29CQUdqQ0E7Ozt5Q0FJc0JBOztnQkFFMUJBO2dCQUNBQSxLQUFJQSxXQUFXQSxJQUFJQSxvQkFBZUE7b0JBRTlCQSxJQUFHQSxxQkFBUUE7d0JBRVBBLHFCQUFRQSxXQUFXQSx5QkFBb0JBLHFCQUFRQSxJQUFJQTs7O2dCQUczREE7Z0JBQ0FBOzs7Z0JBWUFBLElBQUdBLG1CQUFtQkEsUUFBUUEsQ0FBQ0E7b0JBQzNCQTs7Z0JBQ0pBLHVCQUF1QkEsMkJBQXNCQTs7c0NBR3RCQTtnQkFFdkJBLElBQUdBO29CQUNDQTs7O2dCQUVKQSx5QkFBeUJBOztnQkFFekJBLElBQUdBLFlBQVlBO29CQUVYQSxvQ0FBK0JBLGtCQUFLQSxBQUFDQSxDQUFDQSxxQkFBcUJBLGFBQWFBLGtCQUFhQTs7b0JBSXJGQSxxQkFBcUJBLCtCQUEwQkE7b0JBQy9DQSxJQUFHQSxhQUFhQTt3QkFFWkEsb0NBQStCQSxrQkFBS0EsQUFBQ0EsQ0FBQ0EsQ0FBQ0EsWUFBWUEsMkJBQTJCQSxrQkFBYUE7Ozs7bUNBd0IvRUE7O2dCQUdwQkEsY0FBY0EsSUFBSUE7O2dCQUdsQkEsSUFBR0EsNEJBQXNCQTtvQkFDckJBOztnQkFDSkEsbUJBQW1CQTs7Z0JBRW5CQTs7Z0JBRUFBLEtBQUlBLFdBQVdBLElBQUlBLGNBQWNBO29CQUU3QkEsVUFBVUEscUJBQVFBO29CQUNsQkEsSUFBR0E7d0JBRUNBLGVBQWVBLHNDQUE2QkEscUJBQVFBOzs7O2dCQUk1REE7O2dCQUVBQTs7Z0JBRUFBLGdCQUFnQkE7O2dCQUVoQkEsS0FBSUEsV0FBV0EsSUFBSUEsV0FBV0E7b0JBRTFCQTtvQkFDQUEsb0JBQW9CQSxzQkFBaUJBOzs7b0JBR3JDQSxLQUFJQSxXQUFXQSxJQUFJQSxjQUFjQTt3QkFFN0JBLFdBQVVBLHFCQUFRQTt3QkFDbEJBLElBQUdBLENBQUNBOzRCQUNBQTs7O3dCQUVKQSxtQkFBbUJBLG9DQUFtQ0E7O3dCQUV0REEsZUFBZUEsc0NBQTZCQTs7O29CQUdoREE7Ozs7Z0JBSUpBOzs7Z0JBR0FBOztnQkFFQUEsU0FBU0E7Z0JBQ1RBLFdBQVdBOztnQkFFWEEsSUFBR0E7b0JBRUNBLGFBQWFBO29CQUNiQTtvQkFDQUEsNkJBQTZCQTtvQkFDN0JBO29CQUNBQTtvQkFDQUEsbURBQW1EQTs7b0JBR25EQSxZQUF3QkEsb0NBQW1DQSxtQkFBK0JBOzs7c0RBdTVCdERBLFFBQWVBO2dCQUV2REE7Z0JBQ0FBOzs7Z0JBS0FBO2dCQUNBQTtnQkFDQUE7O2dCQUVBQSxJQUFHQSw4QkFBeUJBOzs7O2dCQU81QkEsT0FBT0EsQUFBT0EsQUFBQ0Esa0RBQTZDQSxzQ0FBaUNBOzs7Z0JBSzdGQSxPQUFPQSxBQUFPQSxBQUFDQSwrQ0FBMENBLG1DQUE4QkEsa0JBQWFBOzs7Z0JBS3BHQSxZQUFZQTtnQkFDWkEsNEJBQXVCQSxxQ0FBQ0E7Z0JBQ3hCQSw4QkFBeUJBLHFDQUFDQSxDQUFDQTtnQkFDM0JBLElBQUdBLHFCQUFnQkE7b0JBRWZBLG9CQUFlQTtvQkFDZkEsaURBQXFCQTs7Z0JBRXpCQSxJQUFHQSwyQkFBc0JBO29CQUVyQkEsMEJBQXFCQTtvQkFDckJBLG1EQUF1QkE7O2dCQUUzQkEsbURBQXVCQTtnQkFDdkJBLHlEQUE2QkE7O29DQUdQQTtnQkFFdEJBLElBQUdBLFdBQVdBO29CQUVWQTs7b0JBSUFBLE9BQU9BOzs7O2dCQU1YQSxRQUFRQTtnQkFDUkEsVUFBVUEsa0JBQWFBO2dCQUN2QkEsYUFBYUEsTUFBTUEsQ0FBQ0E7O2dCQUVwQkEsSUFBR0EsSUFBSUEsbURBQXNDQTtvQkFFekNBLFVBQVVBLEFBQU9BLEFBQUNBLENBQUNBLHNDQUFpQ0EsbUJBQWNBOzs7Z0JBR3RFQSw2QkFBd0JBO2dCQUN4QkEsSUFBR0Esc0JBQWlCQTtvQkFFaEJBLHFCQUFnQkE7b0JBQ2hCQSxpREFBcUJBOztnQkFFekJBLHVEQUEyQkE7OztnQkFLM0JBO2dCQUNBQTs7O2dCQUtBQTtnQkFDQUEsbURBQXVCQTs7O2dCQUt2QkEsZUFBVUEsS0FBSUE7OztnQkFLZEE7Z0JBQ0FBLGVBQVVBLEtBQUlBO2dCQUNkQSx5QkFBb0JBLEtBQUlBO2dCQUN4QkEsb0JBQWVBLEtBQUlBO2dCQUNuQkEsbUJBQWNBO2dCQUNkQTtnQkFDQUE7OztnQkFLQUE7Z0JBQ0FBLHFEQUF3QkEsbUJBQWNBOzs7Z0JBS3RDQTtnQkFDQUE7OztnQkFLQUEsZ0JBQXNCQSxLQUFJQTtnQkFDMUJBLGVBQWVBO2dCQUNmQSxLQUFJQSxXQUFXQSxJQUFJQSxVQUFVQTtvQkFFekJBLFlBQVlBLHNCQUFpQkE7b0JBQzdCQSxJQUFHQSwyQkFBc0JBO3dCQUVyQkEsY0FBY0E7OztnQkFHdEJBLE9BQU9BOzs7Z0JBS1BBLGdCQUFzQkEsS0FBSUE7Z0JBQzFCQSxlQUFlQTtnQkFDZkEsS0FBSUEsV0FBV0EsSUFBSUEsVUFBVUE7b0JBRXpCQSxZQUFZQSxzQkFBaUJBO29CQUM3QkEsSUFBR0EsMkJBQXNCQTt3QkFFckJBLGNBQWNBOzs7Z0JBR3RCQSxPQUFPQTs7bUNBa0JjQSxJQUFnQ0EsT0FBV0E7Z0JBRWhFQSxxQkFBcUJBLHdCQUFpQkE7Z0JBQ3RDQTtnQkFDQUEsYUFBYUEsQUFBc0NBO2dCQUNuREEsaUJBQWlCQSxBQUFxQ0E7Z0JBQ3REQSxnQkFBZ0JBLEFBQXFDQTtnQkFDckRBLFlBQVlBLEFBQXFDQTtnQkFDakRBLGlCQUFpQkEsQUFBc0NBO2dCQUN2REEsaUJBQWlCQSxBQUFzQ0E7Z0JBQ3ZEQSxrQkFBa0JBLEFBQXNDQTs7O2dCQVN4REEsSUFBR0Esb0JBQWNBO29CQUViQTtvQkFDQUEsSUFBR0EsZ0JBQVVBO3dCQUVUQSxhQUF5QkE7d0JBQ3pCQSxjQUFTQTs7O29CQUdiQSxjQUFTQSxrQkFBS0EsV0FBdUJBLEFBQW1DQSwrQkFBQ0E7d0JBRXJFQTs7O2dCQUdSQSxrQkFBYUEsa0JBQUtBOztrQ0FRQ0E7O2dCQUVuQkEsSUFBR0E7b0JBQ0NBOzs7Z0JBRUpBLElBQUdBO29CQUNDQSxnQkFBV0EsS0FBSUE7OztnQkFFbkJBLElBQUdBLGtCQUFhQTtvQkFFWkEsYUFBeUJBO29CQUN6QkEsa0JBQWFBLGtCQUFLQSxXQUF1QkE7O29CQUl6Q0E7OztnQ0FJbUJBLFlBQW1CQTtnQkFFMUNBLFlBQW1CQSxLQUFJQTs7Z0JBRXZCQSxpQkFBa0JBOztnQkFFbEJBO2dCQUNBQTs7Z0JBRUFBO2dCQUNBQTs7Z0JBRUFBLElBQUdBLGFBQVlBO29CQUVYQSxJQUFHQSxlQUFjQTt3QkFFYkE7d0JBQ0FBOzt3QkFJQUE7d0JBQ0FBOzs7b0JBSUpBLElBQUdBLGVBQWNBO3dCQUViQTt3QkFDQUE7O3dCQUlBQTt3QkFDQUE7Ozs7Z0JBSVJBLGFBQWFBLElBQUlBO2dCQUNqQkEsVUFBVUE7O2dCQUVWQTs7Z0JBRUFBLElBQUdBO29CQUNDQSxNQUFNQSxDQUFDQSxRQUFRQTs7O2dCQUVuQkE7O2dCQUVBQSxLQUFJQSxXQUFXQSxJQUFJQSxvQkFBZUE7b0JBRTlCQSxJQUFHQSxxQkFBUUE7d0JBRVBBLGVBQWVBLHVCQUFrQkEsTUFBTUEscUJBQVFBO3dCQUMvQ0E7O3dCQUVBQSxnQkFBZ0JBLElBQUlBO3dCQUNwQkEsbUJBQW1CQSxJQUFJQSw0QkFBUUEsSUFBSUEsSUFBSUEsVUFBVUE7d0JBQ2pEQSxnQ0FBZ0NBLHFCQUFRQTt3QkFDeENBO3dCQUNBQTt3QkFDQUE7O3dCQUVBQSw0Q0FBdUJBOzt3QkFFdkJBLE1BQU1BOzt3QkFFTkEsS0FBSUEsV0FBV0EsSUFBSUEsaUJBQVlBOzRCQUUzQkEsY0FBY0EsSUFBSUE7NEJBQ2xCQSxpQkFBaUJBLElBQUlBLDRCQUFRQSxJQUFJQSxJQUFJQSxVQUFVQTs0QkFDL0NBLDhCQUErQkEscUJBQVFBLGtDQUFrQ0Esc0JBQWlCQTs0QkFDMUZBOzRCQUNBQSw0Q0FBdUJBOzs0QkFFdkJBLE1BQU1BOzt3QkFFVkEsTUFBTUE7Ozs7Z0JBSWRBLE9BQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0NDaHBFc0NBLFVBQW1CQSxjQUFrQkE7Z0JBRWxGQSxZQUFZQSwyQkFBeUJBLGNBQWNBOztnQkFFbkRBLFdBQVdBO2dCQUNYQSxZQUFZQTtnQkFDWkE7Z0JBQ0FBLHdDQUFpQkE7Z0JBQ2pCQTtnQkFDQUEsd0NBQWlCQTs7Z0JBRWpCQSxPQUFPQTs7Ozs7Ozs7Ozs7Z0NDWHNDQSxVQUFtQkEsY0FBa0JBO2dCQUVsRkEsVUFBVUEsbUNBQUNBLGdEQUF5QkEsY0FBY0E7Z0JBQ2xEQSxhQUFhQTs7Z0JBRWJBLHVDQUFnQkEsS0FBS0EsQ0FBQ0E7O2dCQUV0QkEsT0FBT0E7Ozs7Ozs7Ozs7Ozs7b0JDRERBLE9BQU9BOzs7b0JBQ1BBLDBCQUFxQkE7Ozs7Ozs7cURBR0pBO2dCQUV2QkEsZ0RBQXlCQSxlQUFTQTtnQkFDbENBO2dCQUNBQTs7Ozs7Ozs7Ozs7Ozs7O29CQ1ZNQSxPQUFPQTs7O29CQUdUQSxJQUFHQSxnQkFBVUE7d0JBRVRBLGNBQVNBO3dCQUNUQTs7Ozs7O29CQWlDRkEsT0FBT0E7OztvQkFHVEEsSUFBR0Esb0NBQVVBO3dCQUNUQTs7b0JBQ0pBLGNBQVNBO29CQUNUQTs7Ozs7Ozs7Z0JBaENKQSx3QkFBbUJBLElBQUlBO2dCQUN2QkE7Z0JBQ0FBO2dCQUNBQTs7Z0JBRUFBLGdEQUFvQkE7Ozs7O2dCQU9wQkEsSUFBR0EsQ0FBQ0EsaUNBQTBCQTtvQkFFMUJBOztvQkFJQUE7b0JBQ0FBOztnQkFFSkEsbUNBQWNBLGFBQVFBOzs7Ozs7Ozs7Ozs7NEIzQmlvQkZBLFFBQWNBOzs7Z0JBRWxDQSxjQUFTQTtnQkFDVEE7Z0JBQ0FBLGVBQVVBOzs7Ozs7Ozs7Ozs0QkFoQk1BLFFBQWNBOzs7OztnQkFFOUJBLGNBQVNBO2dCQUNUQSxhQUFRQTs7Ozs7Ozs7cUI0QnplWUE7Ozs7O29CQVloQkEsWUFBWUE7b0JBQ1hBLElBQUdBO3dCQUNBQSxPQUFPQTs7b0JBQ1hBLE9BQU9BOzs7O29CQUlQQSwwQkFBcUJBOzs7OztvQkFRckJBLFlBQVlBO29CQUNaQSxJQUFHQTt3QkFDQ0EsT0FBT0E7O29CQUNYQSxPQUFPQTs7O29CQUlQQSw0QkFBdUJBOzs7Ozs7O3FEQWhDVkE7Z0JBRWpCQTs7Z0JBRUFBLGdCQUFXQTs7Ozs7Ozs7OzBCQXZMYUE7OztrQ0FJZUE7Ozs7OztvQkEyQmpDQSxPQUFPQTs7O29CQUVUQSxJQUFHQTt3QkFDQ0E7O29CQUNKQSxJQUFHQTt3QkFDQ0E7O29CQUNKQSxjQUFTQTs7b0JBRVRBLCtCQUEwQkEsZ0NBQVdBOzs7OztvQkFNbkNBLE9BQU9BOzs7b0JBRVRBLElBQUdBLCtCQUFTQTt3QkFFUkEsSUFBR0EscUJBQWdCQTs0QkFDZkE7Ozt3QkFFSkEsb0JBQWVBOzt3QkFFZkEsSUFBR0EsZ0RBQXdCQTs0QkFDdkJBLDBCQUFxQkE7Ozt3QkFFekJBLElBQUdBLHFCQUFnQkE7NEJBQ2ZBOzs7Ozs7Ozs2QkEzRFVBLEtBQUlBOztrQ0FPSEE7Ozs7O2dCQThKdkJBOztnQkFFQUEsZUFBVUE7Z0JBQ1ZBO2dCQUNBQTs7Z0JBR0FBLGdEQUFvQkE7Ozs7Z0NBbktIQTs7Z0JBRWpCQSwwQkFBb0JBOzs7O3dCQUVoQkEsSUFBR0EsVUFBUUE7NEJBRVBBLGVBQVVBOzRCQUNWQSxnREFBb0JBOzs0QkFFcEJBLG1CQUFjQTs7NEJBRWRBLHlCQUF1QkE7cUVBQUNBO29DQUVwQkEsbUJBQWNBO29DQUNkQSxJQUFHQSxxQ0FBZ0JBO3dDQUNmQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2Q0E2Q2NBO2dCQUU5QkEsNkJBQXNCQTs7Ozs7Ozs7Ozs7OytDQU9RQTtnQkFFOUJBLElBQUdBLG9CQUFlQTtvQkFDZEEsTUFBTUEsSUFBSUE7OztnQkFFZEEsNERBQWdDQTs7cUNBR1ZBOzs7Z0JBRXRCQSxXQUFXQSxVQUFJQSxtQ0FFQUEsa0JBQ0ZBOztnQkFHYkEsZUFBVUE7Z0JBQ1ZBLGdEQUFvQkE7O2dCQUVwQkEsbUJBQWNBOztnQkFFZEEsdUJBQXVCQSwrQkFBQ0E7b0JBRXBCQSxtQkFBY0E7b0JBQ2RBLElBQUdBLG1DQUFnQkE7d0JBQ2ZBOzs7O2dCQUdSQSxPQUFPQTs7O2dCQU9QQSxvQkFBb0JBO2dCQUNwQkEsY0FBZUE7O2dCQUVmQTtnQkFDQUEsSUFBR0EsV0FBV0E7b0JBRVZBOztvQkFFQUEsSUFBR0Esb0JBQWNBO3dCQUViQTs7d0JBSUFBOzs7b0JBR0pBLGFBQWFBLFlBQVdBLHFDQUE2QkE7OztnQkFNekRBLElBQUdBLG9CQUFlQTtvQkFFZEE7O2dCQUVKQSw2QkFBNkJBLHNDQUFxQ0EsZ0NBQXdCQTtnQkFDMUZBO2dCQUNBQTs7Z0JBRUFBLHVDQUF1Q0EsQUFBbURBLFVBQUNBO29CQUN2RkE7b0JBQ0FBOzs7OztnQkFXSkEsSUFBR0Esb0JBQWVBO29CQUVkQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQ2xKRUEsT0FBT0E7OztvQkFHVEEsSUFBR0E7d0JBQ0NBOztvQkFDSkEsSUFBR0EsUUFBUUE7d0JBQ1BBLGdCQUFXQTs7b0JBQ2ZBLGVBQVVBO29CQUNWQSxJQUFHQSxDQUFDQTt3QkFDQUE7Ozs7OztvQkFNRkEsT0FBT0E7OztvQkFHVEEsSUFBR0E7d0JBQ0NBOzt3QkFDQ0EsSUFBR0EsUUFBUUE7NEJBQ1pBLFFBQVFBOzs7b0JBQ1pBLGdCQUFXQTtvQkFDWEEsSUFBR0EsQ0FBQ0E7d0JBQ0FBOzs7Ozs7Ozs7Ozs7O2dCQU1SQSwrQkFBMEJBOzs7OztnQkFuQzFCQSxpQ0FBWUE7OztnQkF3Q1pBOztnQkFFQUEsZ0RBQW9CQTs7Z0JBRXBCQTs7O2dCQUtBQSxJQUFHQSxzQkFBaUJBLGdDQUEyQkE7b0JBQzNDQTs7Z0JBQ0pBLElBQUdBLHNCQUFnQkE7b0JBQ2ZBOztvQkFHQUEsYUFBZ0JBO29CQUNoQkEsMkNBQXNDQSxXQUFVQTs7Ozs7Ozs7Ozs7Ozs7OytCQzdENUJBLElBQUlBOzs7Ozs7Ozs7Ozs7b0JBZ0J4QkEsU0FBU0E7b0JBQ1RBLElBQUdBLE9BQU1BLE1BQU1BLE1BQU1BO3dCQUNqQkEsT0FBT0E7O29CQUNYQSxPQUFPQSwyQkFBY0E7Ozs7OztvQkFpQnJCQSxJQUFHQSxzQkFBaUJBLFFBQVFBO3dCQUN4QkEsT0FBT0E7O29CQUNYQTtvQkFDQUEsMEJBQW9CQTs7Ozs0QkFFaEJBLElBQUdBO2dDQUNDQSxPQUFPQTs7NEJBQ1hBOzs7Ozs7O29CQUVKQSxPQUFPQTs7OztvQkFHUEE7b0JBQ0FBLDBCQUFvQkE7Ozs7NEJBRWhCQSxJQUFHQSxNQUFLQTtnQ0FDSkE7O2dDQUVBQTs7NEJBQ0pBOzs7Ozs7Ozs7Ozs7cUNBMUQ4QkEsS0FBSUE7Ozs7OztnQkFRMUNBO2dCQUNBQSxJQUFHQTtvQkFDQ0E7OztnQkFFSkEsbUJBQWNBLDZCQUE0QkEsbUVBQStCQTs7OztnQ0FjeERBOzs7Z0JBRWpCQSxJQUFHQSxTQUFTQSxRQUFRQTtvQkFDaEJBOztnQkFDSkEsMEJBQW9CQTs7Ozt3QkFFaEJBLGdCQUFXQSxXQUFJQSwyQ0FBMkJBOzs7Ozs7OztrQ0FnQzNCQTtnQkFFbkJBLElBQUdBLFdBQVdBLFFBQVFBLG1CQUFtQkE7b0JBRXJDQSxxQ0FBcUNBO29CQUNyQ0Esc0NBQWlCQTtvQkFDakJBLHVCQUFrQkE7b0JBQ2xCQTs7b0JBRUFBLHdCQUF3QkEsK0JBQUNBO3dCQUNyQkEsSUFBR0EsMENBQWtCQTs0QkFDakJBLG9CQUFlQTs7OztvQkFHdkJBLElBQUdBO3dCQUVDQTs7OzttQ0FLWUE7OztnQkFFcEJBLElBQUdBLFlBQVlBO29CQUVYQSwwQkFBdUJBOzs7OzRCQUVuQkEsSUFBR0EsV0FBV0EsUUFBUUEsbUJBQW1CQTtnQ0FFckNBLHFDQUFxQ0E7O2dDQUVyQ0Esc0NBQWlCQTtnQ0FDakJBLHVCQUFrQkE7O2dDQUVsQkE7Z0NBQ0FBLElBQUdBO29DQUVDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3QkNuRzJCQTs7Ozs7OztvQkF3QnZDQSxPQUFPQTs7O29CQUlQQSxJQUFHQSx1Q0FBWUE7d0JBRVhBLGdCQUFXQTt3QkFDWEE7Ozs7OztvQkF1Q0pBLE9BQU9BOzs7b0JBSVBBLGVBQVVBO29CQUNWQSxnQkFBV0E7Ozs7Ozs7Ozs7OzRCQXZDREE7O3VEQUF5QkE7Ozs7OztnQkFqQ3ZDQSxJQUFHQSxtQkFBY0E7b0JBRWJBO29CQUNBQSxrQkFBYUE7O2dCQUVqQkEsSUFBR0EsQ0FBQ0EsaUNBQTBCQTtvQkFFMUJBLGtCQUFhQSwyQkFBSUE7O29CQUVqQkEsNEJBQXVCQTs7b0JBRXZCQSxnREFBb0JBOzs7b0NBMkJRQTtnQkFFaENBLElBQUdBO29CQUVDQSxJQUFHQSxtQkFBY0E7d0JBRWJBOzs7b0JBS0pBLElBQUdBLG1CQUFjQTt3QkFFYkE7Ozs7a0NBTVdBO2dCQUVuQkEsaUJBQVlBO2dCQUNaQSxrQkFBYUE7Ozs7Ozs7Ozs7OzZCQy9EbUNBO2tDQUNFQTs7Ozs7O29CQXVDOUNBLE9BQU9BOzs7b0JBSVBBLElBQUdBO3dCQUNDQTs7b0JBQ0pBLElBQUdBLHNCQUFpQkE7d0JBQ2hCQSxxQkFBZ0JBOzs7b0JBRXBCQSxJQUFHQSx1QkFBaUJBO3dCQUVoQkEscUJBQWdCQTt3QkFDaEJBLElBQUdBLGdEQUF3QkE7NEJBQ3ZCQSwwQkFBcUJBLG9CQUFlQSx5QkFBWUE7OztvQkFFeERBLHNCQUFpQkE7Ozs7Ozs7bUNBeUg2QkEsS0FBSUE7O3FDQTlJOUJBOzs0QkF6QlBBOzs7O3VEQUEwQ0EsbUJBQWtCQSxDQUFDQSxTQUFRQTtnQkFFdEZBLFlBQU9BOztnQkFFUEEsNkJBQXdCQSxVQUFDQTtvQkFFckJBO29CQUNBQTs7Ozs7c0NBSW1CQTs7O2dCQUV2QkEsSUFBR0EsU0FBU0E7b0JBRVJBLDBCQUFvQkE7Ozs7NEJBRWhCQSxJQUFHQSxRQUFRQTtnQ0FFUEEscUJBQWdCQTs7Ozs7Ozs7Ozs7Z0JBaUM1QkEsSUFBR0E7Ozt3Q0FLc0JBO2dCQUV6QkEsSUFBR0Esb0JBQWVBLFFBQVFBO29CQUV0QkEsS0FBSUEsV0FBV0EsSUFBSUEsd0JBQW1CQTt3QkFFbENBLElBQUdBLHlCQUFZQSxtQkFBbUJBOzRCQUU5QkEseUJBQVlBOzRCQUNaQSx5QkFBWUE7OzRCQUVaQSxJQUFHQSxNQUFLQTtnQ0FFSkEseUJBQVlBO2dDQUNaQSx5QkFBWUE7O2dDQUlaQSx5QkFBWUE7Z0NBQ1pBLHlCQUFZQTs7Ozs7OztnQkFTNUJBO2dCQUNBQSxJQUFHQSxjQUFRQTtvQkFFUEEsSUFBR0Esd0JBQW1CQTt3QkFDbEJBOztvQkFDSkEsdUJBQWtCQTtvQkFDbEJBLG1CQUFtQkE7b0JBQ25CQSxnQ0FBZ0NBLHVDQUErQkE7b0JBQy9EQTs7b0JBRUFBLHdEQUE0QkE7O29CQUU1QkEsZ0RBQW9CQTs7O2dCQUd4QkEsSUFBR0Esb0JBQWVBLFFBQVFBO29CQUV0QkE7b0JBQ0FBLEtBQUlBLFdBQVdBLElBQUlBLHdCQUFtQkE7d0JBRWxDQSxJQUFHQSxzQkFBaUJBLDBEQUFZQTs0QkFFNUJBLHNEQUFZQTs0QkFDWkEsc0RBQVlBOzt3QkFFaEJBLHlCQUFZQTs7d0JBRVpBLElBQUdBLGNBQVFBOzRCQUVQQSxJQUFHQSxDQUFDQSxnREFBWUE7Z0NBQ1pBLHlCQUFZQTs7OzRCQUloQkEsSUFBR0EsZ0RBQVlBO2dDQUNYQSx5QkFBWUE7Ozs7d0JBR3BCQSxrQkFBWUE7O3dCQUVaQSxJQUFHQSxNQUFLQTs0QkFFSkEseUJBQVlBLGtCQUFrQkEsMkJBQUlBLDhDQUE2Q0EsQ0FBQ0EsY0FBUUE7NEJBQ3hGQSx5QkFBWUE7OzRCQUlaQSx5QkFBWUEsa0JBQWtCQSwyQkFBSUEsOENBQTZDQSxDQUFDQSxjQUFRQTs0QkFDeEZBLHlCQUFZQTs7O3dCQUdoQkEseUJBQVlBLDhCQUE4QkE7aUVBQUNBO2dDQUV2Q0EscUJBQWdCQTs7O3dCQUVwQkEseUJBQVlBLCtCQUErQkE7aUVBQUNBO2dDQUV4Q0EscUJBQWdCQTs7Ozt3QkFHcEJBLHlCQUFZQSw0QkFBNEJBLHlCQUFZQTs7d0JBRXBEQTs7d0JBRUFBLElBQUdBLENBQUNBLDRCQUFxQkEseUJBQVlBOzRCQUVqQ0EscUJBQVdBLGtCQUFLQSxrQ0FBYUEseUJBQVlBLFlBQVlBOzs7d0JBR3pEQSx5QkFBWUEsNkJBQTZCQTt3QkFDekNBLHlCQUFZQSw4QkFBOEJBOzt3QkFFMUNBLGdEQUFvQkEseUJBQVlBO3dCQUNoQ0EsZ0RBQW9CQSx5QkFBWUE7O3dCQUVoQ0EsaUJBQVNBOzs7Z0JBR2pCQSxxQkFBZ0JBOzs7Ozs7Ozs7Ozt3QkMxSzRCQTtvQkFnR2ZBOzs7OztvQkExRnpCQSxPQUFPQTs7O29CQUlQQSxlQUFVQTtvQkFDVkEsZ0JBQVdBOzs7Ozs7Ozs0QkFxQ0FBOzs7OztnQkFFZkEsZUFBVUE7Z0JBQ1ZBLGFBQVFBLEtBQUlBOzs4QkFHR0EsVUFBaUJBOzs7Ozs7Z0JBRWhDQSxlQUFVQTtnQkFDVkEsYUFBUUEsS0FBSUE7Z0JBQ1pBLElBQUdBLFdBQVdBO29CQUVWQSwwQkFBb0JBOzs7OzRCQUVoQkEsSUFBR0EsUUFBUUE7Z0NBRVBBLGVBQVVBOzs7Ozs7Ozs7Ozs7O2tDQS9DSEE7Z0JBRW5CQSxJQUFHQTtvQkFFQ0EsS0FBSUEsV0FBV0EsSUFBSUEsa0JBQWFBO3dCQUU1QkEsSUFBR0EsQ0FBQ0E7NEJBQ0FBLG1CQUFNQSxjQUFjQTs7NEJBR3BCQSxtQkFBTUEsY0FBY0EsbUJBQU1BOzs7O2dCQUl0Q0EsaUJBQVlBO2dCQUNaQSxJQUFHQTtvQkFFQ0EsSUFBR0EsbUJBQWNBO3dCQUViQTs7O29CQUtKQSxJQUFHQSxtQkFBY0E7d0JBRWJBOzs7OzBDQTRCMENBO2dCQUVsREEsY0FBY0E7Z0JBQ2RBLElBQUdBO29CQUVDQSx1QkFBdUJBOzs7Z0JBRzNCQSxPQUFPQTs7O2dCQXFCUEEsU0FBZ0JBOztnQkFFaEJBLElBQUdBLGVBQVVBO29CQUVUQSxjQUFTQSxLQUFJQTtvQkFDYkEsS0FBSUEsV0FBV0EsSUFBSUEsa0JBQWFBO3dCQUU1QkEsSUFBR0EsTUFBTUE7NEJBRUxBLEtBQUtBLElBQUlBOzRCQUNUQSxlQUFlQSxtQkFBTUE7NEJBQ3JCQSxhQUFhQTs7NEJBSWJBLElBQUdBLGVBQWNBLG1CQUFNQSxrQkFBa0JBLG1CQUFNQSxpQkFBaUJBLENBQUNBLG1CQUFNQSxrQkFBa0JBLENBQUNBLGdCQUFnQkEsUUFBUUEsaUJBQWlCQSxRQUFRQSxnQkFBZ0JBO2dDQUV2SkEsZ0JBQVdBOztnQ0FFWEEsS0FBS0EsSUFBSUE7Z0NBQ1RBLGVBQWVBLG1CQUFNQTtnQ0FDckJBLGFBQWFBLG1CQUFNQTtnQ0FDbkJBLGdCQUFnQkEsbUJBQU1BOztnQ0FJdEJBLElBQUdBLGlCQUFpQkE7b0NBRWhCQSxnQkFBZ0JBLG1CQUFNQTs7b0NBSXRCQSxlQUFlQSxtQkFBTUE7Ozs7OztvQkFNckNBLElBQUdBLE1BQU1BO3dCQUVMQSxnQkFBV0E7d0JBQ1hBLEtBQUtBOzs7O3FDQUtRQTtnQkFFckJBLElBQUdBO29CQUVDQSxPQUFPQTs7Z0JBRVhBOzs7Z0JBS0FBOztnQkFFQUE7O2dCQUVBQTs7Z0JBRUFBOztnQkFFQUEsS0FBSUEsV0FBV0EsSUFBSUEsbUJBQWNBO29CQUU3QkEsU0FBU0Esb0JBQU9BOztvQkFFaEJBLElBQUdBO3dCQUVDQTt3QkFDQUEsV0FBV0E7d0JBQ1hBLGtCQUFrQkE7O3dCQUVsQkEsZ0RBQW9CQTs7O29CQUd4QkE7O29CQUVBQSxJQUFHQTt3QkFFQ0E7O3dCQUVBQSxJQUFHQSxnQkFBZ0JBOzRCQUVmQSxJQUFHQSxpQkFBaUJBO2dDQUVoQkEsV0FBV0EsU0FBU0Esd0JBQUtBLGtDQUFhQSxzQkFBc0JBLDJEQUFpQ0EsbUJBQWNBOzs7O2dDQUkzR0E7O2dDQUVBQSxrQ0FBa0NBO2dDQUNsQ0EsbUNBQW1DQTs7Z0NBRW5DQTs7Z0NBRUFBLGdEQUFvQkE7O2dDQUtwQkEsV0FBV0EsU0FBU0EsYUFBU0Esb0JBQUtBLGtDQUFhQSxzQkFBc0JBLHNDQUF3QkEsbUJBQWNBLHFCQUN2R0Esb0JBQUtBLGtDQUFhQSx1QkFBdUJBLHNDQUF3QkEsbUJBQWNBOztnQ0FFbkZBO2dDQUNBQTs7Z0NBRUFBLGtDQUFrQ0E7Z0NBQ2xDQSxtQ0FBbUNBOztnQ0FFbkNBLGlDQUFpQ0EsQ0FBQ0E7O2dDQUVsQ0EsbUNBQW1DQTtnQ0FDbkNBLG9DQUFvQ0E7O2dDQUVwQ0E7Z0NBQ0FBOztnQ0FFQUEsZ0RBQW9CQTtnQ0FDcEJBLGdEQUFvQkE7Ozs0QkFNeEJBLFdBQVdBLFNBQ1BBLGFBQVNBLFNBQVNBLG9CQUFLQSxrQ0FBYUEsc0JBQXNCQSxzQ0FBd0JBLG1CQUFjQSxxQkFDNUZBLG9CQUFLQSxrQ0FBYUEsdUJBQXVCQSxzQ0FBd0JBLG1CQUFjQSx1QkFDL0VBLG9CQUFLQSxrQ0FBYUEsc0JBQXNCQSxzQ0FBd0JBLG1CQUFjQTs7NEJBRXRGQTs0QkFDQUE7NEJBQ0FBOzs0QkFFQUEsa0NBQWtDQTs0QkFDbENBLG1DQUFtQ0E7NEJBQ25DQSxrQ0FBa0NBOzs0QkFFbENBLG1DQUFtQ0E7NEJBQ25DQSxvQ0FBb0NBOzRCQUNwQ0EsbUNBQW1DQTs7NEJBRW5DQTs0QkFDQUE7NEJBQ0FBOzs0QkFHQUEsZ0RBQW9CQTs0QkFDcEJBLGdEQUFvQkE7NEJBQ3BCQSxnREFBb0JBOzs7d0JBR3hCQSxpQkFBU0E7O3dCQUlUQTs7d0JBRUFBLGtDQUFrQ0E7d0JBQ2xDQTt3QkFDQUEsSUFBR0E7NEJBRUNBLGNBQWNBOzRCQUNkQSxjQUFjQSxJQUFJQTs7NEJBRWxCQSxhQUFhQTs7NEJBRWJBLEtBQUlBLFdBQVdBLElBQUlBLGdCQUFnQkE7Z0NBRS9CQSxJQUFHQSxzQkFBaUJBO29DQUVoQkEsVUFBVUEsbUJBQUtBLGtDQUFhQSxvQkFBb0JBO29DQUNoREE7O2dDQUVKQSxJQUFHQTtvQ0FFQ0EsZUFBZUEsT0FBTUEsMkJBQVFBLEdBQVJBOztvQ0FJckJBLGVBQWVBLDJCQUFRQSxHQUFSQTs7OzRCQUd2QkEsSUFBR0E7Z0NBRUNBLFVBQVVBLG1CQUFLQSxrQ0FBYUEsb0JBQW9CQTs7OzRCQUtwREEsVUFBVUEsbUJBQUtBLGtDQUFhQSxzQkFBc0JBOzs7d0JBR3REQSxJQUFHQTs0QkFFQ0E7Ozt3QkFHSkEscUJBQVdBLG9CQUFjQTs7d0JBRXpCQSxtQ0FBbUNBOzt3QkFFbkNBLGlCQUFTQTs7d0JBRVRBLGdEQUFvQkE7Ozs7Z0JBSTVCQSxlQUFlQSxtQkFBS0Esa0NBQWFBLGNBQVNBOztnQkFFMUNBLElBQUdBLFFBQVFBO29CQUNQQSxRQUFRQTs7O2dCQUVaQTs7Z0JBRUFBLFNBQVNBO2dCQUNUQSxnQkFBZ0JBOztnQkFFaEJBLGdEQUFvQkE7O2dCQUVwQkEsMkJBQXNCQTs7Z0JBRXRCQSxJQUFHQSxDQUFDQSxpQ0FBMEJBO29CQUUxQkEsa0JBQWFBOztvQkFFYkEsNEJBQXVCQTtvQkFDdkJBLGdEQUFvQkE7OztnQkFHeEJBLGdCQUFXQTs7Ozs7Ozs7OzswQkNqVmtDQTs7OztvQ0FtQ09BLEtBQUlBOzs0QkFqQzFDQTs7Ozs7Z0JBRWRBLGVBQVVBOzs7O3VDQUdjQTs7O2dCQUV4QkEsSUFBR0EsU0FBU0E7b0JBRVJBLDBCQUFvQkE7Ozs7NEJBRWhCQSxJQUFHQSxRQUFRQTtnQ0FDUEEsc0JBQWlCQTs7Ozs7Ozs7Ozs7Z0JBTzdCQTtnQkFDQUEsSUFBR0EscUJBQWdCQSxRQUFRQTtvQkFDdkJBOztnQkFDSkE7Z0JBQ0FBLEtBQUlBLFdBQVdBLElBQUlBLHlCQUFvQkE7b0JBRW5DQSwwQkFBYUE7b0JBQ2JBLDBCQUFhQSx3QkFBd0JBO29CQUNyQ0EsaUJBQVNBLFVBQWdCQSwwQkFBYUE7b0JBQ3RDQSxnREFBb0JBLDBCQUFhQTs7Ozs7Ozs7Ozs7Ozs7OzRCQzdCdkJBOzs7Z0JBRWRBLGFBQVFBOzs7Ozs7Ozs7Ozs2QkNKcUNBOzs7Ozs7Ozs7Ozs7O29CQVd2Q0EsT0FBT0E7OztvQkFHVEEsNEJBQXVCQTtvQkFDdkJBOzs7OztvQkFRRUEsT0FBT0E7OztvQkFHVEEsSUFBR0E7d0JBQ0NBOztvQkFDSkEseUJBQW9CQTtvQkFDcEJBOzs7OztvQkFRRUEsT0FBT0E7OztvQkFHVEEsSUFBR0EsVUFBU0E7d0JBRVJBO3dCQUNBQSxrQkFBYUE7Ozs7Ozs7Ozs7eUNBdENPQTs0Q0FFcUJBOzs7Ozs7O2dCQTBEakRBLGNBQVNBLFVBQUlBLDZDQUF1QkEsSUFBSUE7Z0JBQ3hDQSxjQUFTQSxJQUFJQTtnQkFDYkE7Z0JBQ0FBOztnQkFFQUEsZ0JBQVdBLElBQUlBO2dCQUNmQTs7Z0JBRUFBLG9DQUErQkEsK0JBQUNBO29CQUU1QkEsSUFBR0EsQ0FBQ0E7d0JBQ0FBOztvQkFDSkE7b0JBQ0FBLHdCQUFtQkEsMkNBQThCQTtvQkFDakRBLGNBQWNBO29CQUNkQSw0QkFBdUJBLHlCQUFvQkEsVUFBVUEsVUFBVUE7b0JBQy9EQTs7O2dCQUdKQSxnQkFBV0EsK0JBQUNBO29CQUVSQSxJQUFHQSxtQkFBbUJBO3dCQUVsQkEsSUFBR0EsQ0FBQ0E7NEJBRUFBOzs7b0JBR1JBLGdCQUFnQkEsQUFBd0JBOztvQkFFeENBLElBQUdBLHdCQUFtQkE7d0JBRWxCQSx1QkFBa0JBOzs7b0JBR3RCQSxJQUFHQSw4QkFBd0JBO3dCQUV2QkE7d0JBQ0FBO3dCQUNBQTs7d0JBRUFBLElBQUdBOzRCQUVDQSxJQUFHQSxxQkFBb0JBO2dDQUVuQkEsS0FBS0E7Z0NBQ0xBLEtBQUtBO2dDQUNMQTs7OzRCQUtKQSxJQUFHQSxvQkFBbUJBO2dDQUVsQkEsS0FBS0E7Z0NBQ0xBLEtBQUtBO2dDQUNMQTs7O3dCQUdSQSxJQUFHQTs0QkFFQ0Esd0JBQW1CQSxZQUFXQSxlQUFjQSxrQkFBS0EsQUFBQ0Esd0JBQW1CQSxDQUFDQSxLQUFLQTs7OztvQkFJbkZBLHVCQUFrQkE7O29CQUVsQkE7O29CQUVBQTs7O2dCQUdKQSwyQkFBc0JBLCtCQUFDQTtvQkFFbkJBLElBQUdBO3dCQUVDQSwrQkFBMEJBLDJDQUE4QkE7d0JBQ3hEQTt3QkFDQUEsUUFBUUEsa0JBQWFBLENBQUNBLDZCQUFzQkEseUNBQThCQSxDQUFDQSw2QkFBc0JBOzt3QkFFakdBLFFBQVFBO3dCQUNSQSxJQUFHQSxDQUFDQSxLQUFJQSw4QkFBd0JBLDRDQUErQkEsOEJBQXVCQSxVQUFJQSw4QkFBdUJBLFlBQzNHQTs0QkFFRkEsSUFBSUE7O3dCQUVSQSx3QkFBbUJBO3dCQUNuQkEsK0JBQTBCQTs7d0JBRTFCQTs7OztnQkFJUkEseUJBQW9CQSwrQkFBQ0E7b0JBRWpCQTtvQkFDQUE7OztnQkFHSkEsMENBQW9CQSxhQUFRQSxlQUFVQTs7Ozs7Z0JBbEh0Q0E7O2dCQUVBQTs7O2dCQUtBQSxJQUFHQSxtQkFBbUJBLFFBQVFBLGdCQUFnQkE7b0JBRTFDQSwrQkFBK0JBOzs7O2dCQThHbkNBO2dCQUNBQSxJQUFHQSw4QkFBd0JBO29CQUN2QkE7O2dCQUNKQSxjQUFjQSxtQkFBS0EsQ0FBQ0Esa0JBQWFBLEFBQUNBLEFBQXFCQSw4Q0FBK0NBLEFBQUNBLEFBQXFCQSwrQ0FBK0NBO2dCQUMzS0EsSUFBR0E7b0JBQ0NBOztnQkFDSkEsT0FBT0E7OztnQkFLUEEsU0FBU0E7Z0JBQ1RBLGNBQWNBOztnQkFFZEEsSUFBR0Esd0JBQW1CQTtvQkFFbEJBLElBQUdBLEtBQUtBO3dCQUVKQSxLQUFLQTs7OztnQkFJYkEsSUFBR0E7b0JBRUNBO29CQUNBQTtvQkFDQUE7O29CQUVBQTtvQkFDQUE7b0JBQ0FBOztvQkFFQUEsSUFBR0EsOEJBQXdCQTt3QkFFdkJBLHlCQUFvQkEsSUFBSUEsK0JBQVdBOzt3QkFFbkNBLHFCQUFnQkE7d0JBQ2hCQSx1QkFBa0JBLElBQUlBLCtCQUFXQTt3QkFDakNBLHFCQUFnQkEsYUFBYUEsQ0FBQ0E7d0JBQWtCQTs7d0JBSWhEQSx5QkFBb0JBLElBQUlBLCtCQUFXQSxhQUFhQSxDQUFDQTs7d0JBRWpEQSxxQkFBZ0JBLGFBQWFBOzt3QkFFN0JBLHFCQUFnQkE7d0JBQ2hCQSx1QkFBa0JBLElBQUlBLCtCQUFXQSxhQUFhQSxDQUFDQTs7O29CQUtuREE7b0JBQ0FBO29CQUNBQTs7b0JBRUFBO29CQUNBQTtvQkFDQUE7O29CQUVBQSxJQUFHQSw4QkFBd0JBO3dCQUV2QkEseUJBQW9CQSxJQUFJQSw0QkFBUUE7O3dCQUVoQ0Esb0JBQWVBOzt3QkFFZkEsb0JBQWVBLGFBQWFBLENBQUNBO3dCQUM3QkEsdUJBQWtCQSxJQUFJQSw0QkFBUUE7O3dCQUk5QkEseUJBQW9CQSxJQUFJQSw0QkFBUUEsYUFBYUEsQ0FBQ0E7O3dCQUU5Q0Esb0JBQWVBLGFBQWFBLENBQUNBOzt3QkFFN0JBLG9CQUFlQTt3QkFDZkEsdUJBQWtCQSxJQUFJQSw0QkFBUUEsYUFBYUEsQ0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JDaFA5Q0EsT0FBT0E7OztvQkFHVEEsSUFBR0EscUJBQWVBO3dCQUVkQSxtQkFBY0E7d0JBQ2RBO3dCQUNBQTs7Ozs7O29CQVNGQSxPQUFPQTs7O29CQUdUQSxJQUFHQSx5QkFBbUJBO3dCQUVsQkEsdUJBQWtCQTt3QkFDbEJBO3dCQUNBQTs7Ozs7O29CQVNGQSxPQUFPQTs7O29CQUdUQSxJQUFHQSx3QkFBa0JBO3dCQUVqQkEsc0JBQWlCQTt3QkFDakJBO3dCQUNBQTs7Ozs7Ozt1Q0EzQjZCQTs7aUNBZ0NqQkE7Ozs7O2dCQXFCcEJBLFlBQU9BLElBQUlBO2dCQUNYQSxjQUFTQSxJQUFJQTtnQkFDYkEsYUFBUUEsSUFBSUE7Z0JBQ1pBO2dCQUNBQTtnQkFDQUEsWUFBT0E7Z0JBQ1BBOztnQkFFQUE7Z0JBQ0FBOztnQkFFQUEsdURBQTJCQTs7Z0JBRTNCQTs7Z0JBRUFBOztnQkFFQUE7O2dCQUVBQSxJQUFHQTtvQkFFQ0E7b0JBQ0FBOztvQkFJQUE7b0JBQ0FBOzs7Z0JBR0pBOztnQkFFQUEsOEJBQXlCQSwrQkFBQ0E7b0JBRXRCQSxxQkFBZ0JBLENBQUNBOztnQkFFckJBO2dCQUNBQSxvREFBdUJBLFlBQU9BLGFBQVFBOztnQkFFdENBOzs7OztnQkF4REFBLElBQUdBLG1CQUFtQkEsUUFBUUEsZ0JBQWdCQTs7b0JBRzFDQSxJQUFHQSxtQkFBYUE7d0JBRVpBLGFBQXlCQTs7b0JBRTdCQSxpQkFBWUEsa0JBQUtBLFdBQXVCQSxBQUFtQ0EsK0JBQUNBO3dCQUV4RUEsK0JBQStCQTt3QkFDL0JBLGlCQUFZQTs7Ozs7Z0JBbURwQkE7Z0JBQ0FBLElBQUdBO29CQUVDQTs7b0JBSUFBOzs7Z0JBR0pBLElBQUdBLHdCQUFrQkE7b0JBRWpCQSxJQUFHQTt3QkFFQ0E7d0JBQ0FBLG1CQUFjQTt3QkFDZEEsbUJBQWNBO3dCQUNkQSxxQkFBZ0JBLElBQUlBLDRCQUFRQSxVQUFRQTt3QkFDcENBLGlCQUFZQSxJQUFJQSw0QkFBUUEsYUFBYUEsQ0FBQ0EsVUFBUUE7O3dCQUk5Q0E7d0JBQ0FBO3dCQUNBQTt3QkFDQUEscUJBQWdCQSxJQUFJQSw0QkFBUUE7d0JBQzVCQSxpQkFBWUEsSUFBSUEsNEJBQVFBLGFBQWFBLENBQUNBOzs7b0JBRzFDQSxzQkFBaUJBLElBQUlBO29CQUNyQkE7O29CQUtBQSxJQUFHQTt3QkFFQ0E7d0JBQ0FBLG1CQUFjQTt3QkFDZEEsc0JBQWlCQSxJQUFJQSw0QkFBUUEsYUFBYUEsQ0FBQ0E7d0JBQzNDQSxtQkFBY0EsYUFBYUEsQ0FBQ0EsVUFBUUE7d0JBQ3BDQSxpQkFBWUEsSUFBSUEsNEJBQVFBLGFBQWFBLENBQUNBLFVBQVFBOzt3QkFJOUNBO3dCQUNBQSxtQkFBYUEsYUFBYUEsQ0FBQ0E7d0JBQzNCQTt3QkFDQUEsaUJBQVlBLElBQUlBLDRCQUFRQSxhQUFhQSxDQUFDQTs7O29CQUcxQ0EscUJBQWdCQSxJQUFJQTtvQkFDcEJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JDOENFQSxPQUFPQTs7O29CQUVUQSxJQUFHQSxxQ0FBVUE7d0JBRVRBLGNBQVNBO3dCQUNUQSxJQUFHQSwwQ0FBa0JBOzRCQUNqQkEsb0JBQWVBLE1BQU1BOzs7Ozs7Ozs7Ozs7O2dCQVFqQ0E7Z0JBQ0FBO2dCQUNBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBdk5NQSxPQUFPQTs7O29CQUVUQSxJQUFHQSxnREFBcUJBO3dCQUVwQkEsSUFBR0EsMEJBQXFCQTs0QkFFcEJBOzt3QkFFSkEseUJBQW9CQTt3QkFDcEJBLElBQUdBLDBCQUFxQkE7NEJBRXBCQTs0QkFDQUEsSUFBR0EsdURBQStCQTtnQ0FDOUJBLGlDQUE0QkE7Ozs7Ozs7OztvQkFVdENBLE9BQU9BOzs7b0JBRVRBLElBQUdBLHlCQUFtQkE7d0JBRWxCQTt3QkFDQUEsdUJBQWtCQTt3QkFDbEJBLElBQUdBOzRCQUVDQSxtQkFBY0EsSUFBSUE7NEJBQ2xCQSw0QkFBdUJBLElBQUlBOzRCQUMzQkEsd0JBQW1CQSxJQUFJQTs0QkFDdkJBLGlDQUE0QkEsK0JBQUNBO2dDQUV6QkE7Z0NBQ0FBLGtCQUFhQTtnQ0FDYkE7Ozs0QkFHSkEseUJBQXNDQSxpQ0FBa0JBOzs0QkFFeERBOzRCQUNBQSx3QkFBbUJBLElBQUlBOzs0QkFJdkJBLElBQUdBLENBQUNBLGlDQUEwQkE7Z0NBRTFCQTs7Z0NBR0FBOzs0QkFFSkE7NEJBQ0FBLHlCQUFpQ0E7NEJBQ2pDQSxtQkFBY0E7OzRCQUVkQTs0QkFDQUEsd0JBQW1CQSxJQUFJQTs7Ozs7Ozs7a0NBeEVIQSxLQUFJQTs7Ozs7O2dCQWdGcENBLG1CQUFjQSxJQUFJQTtnQkFDbEJBLHdCQUFtQkEsSUFBSUE7Z0JBQ3ZCQTtnQkFDQUEseUJBQXNDQSxpQ0FBa0JBOzs7OytCQUd2Q0E7Z0JBRWpCQSxJQUFHQTtvQkFFQ0EsSUFBR0Esd0JBQUNBLDZDQUEwQ0EsQ0FBQ0E7d0JBRTNDQSxRQUFXQTt3QkFDWEE7O3dCQUVBQSxjQUFjQSxJQUFJQTt3QkFDbEJBLGVBQWVBLElBQUlBOzt3QkFFbkJBLEtBQUlBLFdBQVdBLElBQUlBLFVBQVVBOzRCQUV6QkEsb0NBQWdCQSxhQUFFQTs0QkFDbEJBLG1DQUFlQSxhQUFFQTs0QkFDakJBLElBQUdBLDBEQUFpQ0EsQ0FBQ0E7Z0NBRWpDQSxXQUFXQTtnQ0FDWEEseUNBQWtCQTtnQ0FDbEJBLGVBQWVBLFlBQVdBO2dDQUMxQkEsV0FBV0EsSUFBSUE7bUNBQ2JBLElBQUdBLDBEQUF1Q0EsQ0FBQ0E7Z0NBRTdDQSxZQUFXQSwyQkFBOEJBLCtCQUE2QkE7Z0NBQ3RFQSx5Q0FBa0JBO2dDQUNsQkEsZUFBZUEsWUFBV0E7Z0NBQzFCQSxXQUFXQSxJQUFJQTs7NEJBRW5CQSxJQUFHQSx1QkFBa0JBO2dDQUVqQkEsV0FBV0EsSUFBSUEsMEJBQWNBOzs7O3dCQUlyQ0EsaUJBQWlCQTs7O29CQUlyQkEsS0FBSUEsWUFBWUEsS0FBSUEsd0JBQXdCQTt3QkFFeENBLFlBQVlBLGNBQWNBO3dCQUMxQkEsYUFBUUE7Ozs7O2tDQU1JQTtnQkFFcEJBLElBQUdBLG1EQUFxQ0E7b0JBRXBDQSxpQkFBaUJBOztvQkFJakJBLEtBQUlBLFdBQVlBLElBQUlBLHdCQUF3QkE7d0JBRXhDQSxZQUFZQSxjQUFjQTt3QkFDMUJBLGFBQVFBOzs7Ozs7Z0JBUWhCQTs7Z0JBR0FBLDBCQUFvQkE7Ozs7d0JBRWhCQSxJQUFHQSw0Q0FBd0JBOzRCQUV2QkEseUJBQXVCQTtxRUFBQ0E7b0NBQ3BCQSx3QkFBbUJBOzs7Ozt3QkFJM0JBLElBQUdBOzRCQUVDQSxnQkFBV0E7Ozt3QkFHZkEsSUFBR0EsQ0FBQ0EsaUNBQTBCQTs0QkFFMUJBLElBQUdBLHdCQUFDQSx1REFBa0RBLENBQUNBO2dDQUVuREEsYUFBUUE7Z0NBQ1JBLHFDQUFrREEsaUNBQWtCQTtnQ0FDcEVBLHFDQUE0REE7Ozs0QkFLaEVBLHFDQUFrREEsaUNBQWtCQTs0QkFDcEVBLHFDQUE0REE7Ozs7Ozs7O2dCQUdwRUE7OztnQkFLQUEsSUFBR0EsQ0FBQ0E7b0JBRUFBO29CQUNBQTs7O2dCQUdKQTs7Ozs7Ozs7Ozs7NEJDbk1jQTs7O2dCQUVkQSxhQUFRQTs7Ozs7Ozs7Ozs7O3VDQ2lDbUNBOzs7Ozs7b0JBWnZDQSxPQUFPQTs7O29CQUlQQSxJQUFHQSxVQUFTQTt3QkFFUkEsd0JBQW1CQTt3QkFDbkJBOzs7Ozs7b0JBYUpBLE9BQU9BOzs7b0JBSVBBLElBQUdBO3dCQUNDQTs7b0JBQ0pBLElBQUdBLHVCQUFpQkE7d0JBRWhCQSxxQkFBZ0JBO3dCQUNoQkEscURBQTJCQSxRQUFLQSxBQUFxQ0EsK0JBQWlDQSxTQUFRQTs7O29CQUdsSEEsSUFBR0EsaUJBQVlBLFFBQVFBO3dCQUVuQkEsS0FBSUEsV0FBV0EsSUFBSUEscUJBQWdCQTs0QkFFL0JBLGlCQUFXQSxzQkFBU0E7NEJBQ3BCQSxpQ0FBNEJBLEdBQU9BOzRCQUNuQ0Esc0JBQVNBLEdBQUtBOzs7Ozs7OztnQ0EyTXlCQSxLQUFJQTs7Ozs7O2dCQXJRdkRBLDZCQUF3QkEsVUFBQ0E7b0JBRXJCQTtvQkFDQUE7Ozs7O2dDQUlhQTs7Z0JBRWpCQSx1QkFBa0JBO2dCQUNsQkEsSUFBR0E7b0JBQ0NBOzs7bURBcURpQ0EsR0FBT0E7Z0JBRTVDQSxpQkFBa0JBLE1BQUtBOztnQkFFdkJBLFlBQWVBO2dCQUNmQSxJQUFHQSx3QkFBc0JBO29CQUVyQkE7b0JBQ0FBOztvQkFFQUEsbUNBQWlDQSwyQkFBMEJBOztvQkFJM0RBLHVCQUFxQkEsMkJBQUlBLGdEQUErQ0E7O2dCQUU1RUEsSUFBR0E7b0JBRUNBLElBQUdBO3dCQUVDQTs7d0JBSUFBOztvQkFFSkE7OztnQkFHSkEsdUNBQXFDQTtnQkFDckNBLElBQUdBO29CQUVDQSxJQUFHQSw2QkFBMkJBO3dCQUUxQkEsNEJBQTBCQTt3QkFDMUJBLG9DQUFrQ0EsK0JBQUNBOzRCQUUvQkEsWUFBWUEsU0FBZ0JBOzRCQUM1QkEsWUFBWUEsc0JBQVNBOzRCQUNyQkEsSUFBR0EsaUJBQWlCQTtnQ0FFaEJBO2dDQUNBQTs7NEJBRUpBLElBQUdBLHVCQUF1QkE7Z0NBRXRCQTtnQ0FDQUE7OzRCQUVKQSxxQkFBZ0JBOzRCQUNoQkEsSUFBR0EsUUFBUUE7Z0NBQ1BBLFFBQVFBOzs7NEJBRVpBOzs0QkFFQUEscUJBQWdCQTs7NEJBRWhCQTs7d0JBRUpBLGlDQUErQ0E7OztvQkFLbkRBLElBQUdBLDZCQUEyQkE7d0JBRTFCQSxpQ0FBK0NBOzs7O2dCQUl2REEsa0NBQWdDQTs7OztnQkFLaENBLElBQUdBLG1CQUFjQTtvQkFFYkEsa0JBQWFBLFVBQUlBLGtFQUE0Q0EsSUFBSUE7b0JBQ2pFQSxJQUFHQTt3QkFFQ0E7d0JBQ0FBLDBCQUFxQkEsVUFBSUEsNkNBQXVCQSxJQUFJQTt3QkFDcERBO3dCQUNBQTt3QkFDQUEseURBQStCQTt3QkFDL0JBO3dCQUNBQTs7d0JBRUFBOzt3QkFFQUEseUJBQXNDQSxpQ0FBa0JBOzt3QkFJeERBO3dCQUNBQSx5QkFBc0NBLGlDQUFrQkE7d0JBQ3hEQTs7O2dCQUdSQSxJQUFHQSxpQkFBWUEsUUFBUUE7b0JBRW5CQTs7b0JBRUFBLEtBQUlBLFdBQVdBLElBQUlBLHFCQUFnQkE7d0JBRS9CQSxpQkFBV0Esc0JBQVNBO3dCQUNwQkEsSUFBR0EsVUFBUUEsUUFBUUE7NEJBQ2ZBOzt3QkFDSkE7Ozs7d0JBSUFBLElBQUdBLHdCQUFzQkE7NEJBRXJCQSxpQ0FBNEJBLEdBQU9BOzRCQUNuQ0EsbUNBQWlDQSwrQkFBQ0E7Z0NBRTlCQSxxQkFBZ0JBLFNBQWdCQTs7NEJBRXBDQSxvQ0FBa0NBLCtCQUFDQTtnQ0FFL0JBLHFCQUFnQkEsU0FBZ0JBOzs0QkFFcENBLG9DQUErQ0E7NEJBQy9DQSx5QkFBaUNBOzt3QkFFckNBLHVDQUFxQ0E7O3dCQUVyQ0E7O3dCQUVBQSxJQUFHQSxDQUFDQSw0QkFBcUJBOzRCQUVyQkEsSUFBR0E7Z0NBRUNBLHFCQUFXQSxrQkFBS0Esa0NBQWFBOztnQ0FJN0JBLHFCQUFXQSxrQkFBS0Esa0NBQWFBLGdCQUFjQTs7Ozt3QkFJbkRBLElBQUdBOzRCQUVDQTs7d0JBRUpBLFdBQW1DQTt3QkFDbkNBLEtBQUlBLFdBQVlBLElBQUlBLHNDQUFvQ0E7NEJBRXBEQSxXQUFXQSw4QkFBNEJBOzRCQUN2Q0EsSUFBR0E7Z0NBRUNBLENBQUNBLFFBQU9BLG1CQUFvREE7Z0NBQzVEQTs7O3dCQUdSQSxJQUFHQSxRQUFRQTs0QkFFUEEsT0FBT0EscURBQWdEQTs7NEJBRXZEQSx3REFBK0JBOzt3QkFFbkNBLElBQUdBOzRCQUVDQTs7O3dCQUdKQSxrQ0FBZ0NBO3dCQUNoQ0EsbUNBQWlDQTs7O3dCQUtqQ0EsSUFBR0E7NEJBRUNBOzRCQUNBQTs7O3dCQUdKQSxpQkFBU0E7O3dCQUVUQSxzQkFBU0EsR0FBS0E7O29CQUVsQkEsSUFBR0E7d0JBRUNBLHdCQUFtQkE7Ozs7O2dCQU8zQkE7Z0JBQ0FBOzs7Ozs7Ozs7MkJDcFE4Q0E7Z0NBQ0tBOzs7Ozs7Ozs7Ozs7Ozs7OzswQkNIekJBOzs7Ozs7b0JBS3BCQSxPQUFPQTs7O29CQUdUQSxJQUFHQSxzQkFBZ0JBO3dCQUVmQSxhQUF5QkE7d0JBQ3pCQSxvQkFBZUE7O29CQUVuQkEsSUFBR0EsVUFBU0E7d0JBRVJBLGtCQUFhQTt3QkFDYkEsSUFBR0Esb0JBQWNBOzRCQUViQSxvQkFBZUEsa0JBQUtBLFdBQXVCQSxBQUFtQ0EsK0JBQUNBO2dDQUUzRUE7OzRCQUVKQSxnQkFBV0EsSUFBSUE7OzRCQUVmQSxJQUFHQSw4QkFBeUJBLFFBQVFBLHFCQUFnQkE7Z0NBRWhEQSw0Q0FBdUNBOzs7NEJBSzNDQSxnQkFBV0EsSUFBSUE7NEJBQ2ZBOzRCQUNBQTs0QkFDQUEsSUFBR0EsOEJBQXlCQTtnQ0FFeEJBLG9CQUFlQTtnQ0FDZkE7Ozs7Ozs7Ozs7bUNBZ0xrQ0EsS0FBSUE7a0NBdE52QkE7b0NBRVJBOzs7OztnQkEyTHZCQTtnQkFDQUEsZ0JBQVdBLElBQUlBO2dCQUNmQSxZQUFPQSxJQUFJQTs7Z0JBRVhBO2dCQUNBQTtnQkFDQUE7Ozs7OztnQkFwSkFBO2dCQUNBQTs7Z0JBRUFBLFVBQVVBO2dCQUNWQSxVQUFVQSxJQUFJQTtnQkFDZEE7Z0JBQ0FBO2dCQUNBQTs7Z0JBRUFBLFdBQVdBLElBQUlBO2dCQUNmQTtnQkFDQUE7Z0JBQ0FBO2dCQUNBQTs7Z0JBRUFBO2dCQUNBQTs7Z0JBRUFBLDBCQUFvQkE7Ozs7d0JBRWhCQSxJQUFHQSxDQUFDQSxpQ0FBMEJBOzRCQUUxQkEsVUFBVUEsMkJBQWNBLGlCQUFpQkE7NEJBQ3pDQTs0QkFDQUE7NEJBQ0FBLGdCQUFpQ0E7NEJBQ2pDQTs7O3dCQUdKQSwyQkFBcUJBOzs7O2dDQUVqQkEsMkJBQW9CQTs7Ozt3Q0FFaEJBLElBQUdBOzRDQUVDQSxhQUFhQSxZQUFjQTs7NENBRTNCQTs0Q0FDQUE7OzRDQUVBQSx3QkFBd0JBLCtCQUFDQTtnREFFckJBLGlCQUFZQTs7NENBRWhCQSxJQUFHQTtnREFFQ0E7Z0RBQ0FBO2dEQUNBQTs7Z0RBSUFBO2dEQUNBQTtnREFDQUE7OzRDQUVKQTs0Q0FDQUE7NENBQ0FBOzRDQUNBQTs0Q0FDQUE7NENBQ0FBLFlBQVlBLElBQUlBOzRDQUNoQkEsZ0JBQWdCQSxJQUFJQSw0QkFBUUEsd0JBQXdCQSxDQUFDQSwwREFBd0JBLENBQUNBLGtCQUFJQSxDQUFDQSxxQkFBb0JBOzs0Q0FFdkdBLElBQUdBLG1CQUFtQkE7Z0RBRWxCQSxJQUFHQTtvREFFQ0E7O29EQUlBQTs7O2dEQUdKQTtnREFDQUE7Ozs0Q0FHSkEsSUFBR0EsbUJBQW1CQTtnREFFbEJBO2dEQUNBQSxpQkFBaUJBLDBCQUFDQTtnREFDbEJBO2dEQUNBQSxJQUFHQTs7Ozs7NENBVVBBLElBQUdBO2dEQUVDQTtnREFDQUE7O2dEQUlBQTs7NENBRUpBOzRDQUNBQSxnQkFBa0NBLGlDQUFrQkE7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBTWhFQSxJQUFHQTs0QkFFQ0E7NEJBQ0FBOzs7Ozs7Ozs7Z0JBSVJBLGFBQWFBO2dCQUNiQSxjQUFjQTs7Z0JBRWRBO2dCQUNBQSx3QkFBMENBOztnQkFFMUNBLDJCQUEyQkEsVUFBQ0E7b0JBRXhCQTs7O2dCQUdKQSx5QkFBc0NBLGlDQUFrQkE7Z0JBQ3hEQSx5QkFBc0NBLGlDQUFrQkE7O2dCQUV4REE7OztnQkFLQUE7Z0JBQ0FBOztzQ0FjdUJBOzs7Z0JBRXZCQSxJQUFHQSxTQUFTQTtvQkFFUkEsMEJBQW9CQTs7Ozs0QkFFaEJBLElBQUdBLFFBQVFBO2dDQUVQQSxxQkFBZ0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJoQzdNVkE7OztnQkFFbEJBLGtCQUFXQTs7Ozs0QkFHRUE7O2dCQUViQSxJQUFHQTtvQkFDQ0E7OztnQkFFSkE7O2dCQUVBQSxJQUFHQSxtQkFBWUE7b0JBRVhBLElBQUdBLENBQUNBO3dCQUVBQSxnREFBeUJBLHFGQUFxRkE7O29CQUVsSEEsSUFBR0EsQ0FBQ0E7d0JBRUFBLGdEQUF5QkEsa0ZBQWtGQTs7O2dCQUduSEEsWUFBWUEsMkNBQThCQTs7Z0JBRTFDQSxnQkFBZ0JBLElBQUlBLDRCQUFRQSxTQUFTQTs7Z0JBRXJDQSxJQUFHQSxDQUFDQTtvQkFFQUE7b0JBQ0FBO29CQUNBQSw0QkFBdUJBLGlCQUFDQSxpREFBa0NBO29CQUMxREEsaURBQXNDQTs7OztnQkFNMUNBLElBQUdBO29CQUVDQSxJQUFHQSxnQkFBZ0JBO3dCQUVmQTs7b0JBRUpBO29CQUNBQTs7Ozs7Ozs7OzttRGlDN0NzQ0EsU0FBaUJBOztvQkFFM0RBLElBQUdBO3dCQUNDQSxPQUFPQSxJQUFJQTs7O29CQUVmQSxJQUFHQTt3QkFFQ0EsVUFBVUEsQUFBcUJBO3dCQUMvQkEsT0FBT0EsSUFBSUEsNEJBQVFBLEFBQU9BLFVBQVVBLEFBQU9BLEFBQUNBLFVBQVVBOzt3QkFJdERBLFdBQVVBLEFBQXFCQTt3QkFDL0JBLE9BQU9BLElBQUlBLDRCQUFRQSxBQUFPQSxXQUFVQSxBQUFPQSxBQUFDQSxXQUFVQTs7Ozs7Ozs7Ozs7OztnQkFNMURBO2dCQUNBQTtnQkFDQUE7Z0JBQ0FBO2dCQUNBQTtnQkFDQUE7Z0JBQ0FBOztnQkFFQUEscUJBQWdCQTs7Z0JBRWhCQTtnQkFDQUE7Z0JBQ0FBO2dCQUNBQTtnQkFDQUE7Ozs7aUNBR2tCQTtnQkFFbEJBLGdCQUFnQkE7Z0JBQ2hCQTs7O2dCQUtBQSxnQkFBZ0JBLElBQUlBLDRCQUFRQSxXQUFXQSx3Q0FBcUJBOzs7Z0JBSzVEQTs7Z0JBRUFBLElBQUdBO29CQUVDQTtvQkFDQUEsbUJBQWNBO29CQUNkQTs7b0JBSUFBLFdBQVdBLEFBQXFCQTs7b0JBRWhDQTt3QkFFSUEsSUFBR0EsY0FBY0Esc0JBQW1DQSxjQUFjQTs0QkFFOURBOzs7Ozs7OztnQkFXWkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQy9Fc0NBOzs7Ozs7Ozs7OzsyQ0FFT0E7O29DQUdmQTs7Ozs7b0JBd0c5QkEsSUFBR0EsQ0FBQ0E7d0JBRUFBLHdDQUFlQSxJQUFJQTt3QkFDbkJBOzs7K0JBSWVBLFFBQWVBOztvQkFFbENBO29CQUNBQSxrREFBeUJBLFFBQVFBOzs7b0JBS2pDQTtvQkFDQUE7Ozs7O3dCQTVINENBOzs7Ozs7Z0JBc0Q1Q0Esa0JBQWFBO2dCQUNiQSw2Q0FBc0JBO2dCQUN0QkEsNkJBQTZCQTtnQkFDN0JBOztnQkFFQUEsWUFBWUE7Z0JBQ1pBLElBQUdBO29CQUVDQSxxQkFBcUJBO29CQUNyQkEsWUFBWUE7O29CQUlaQSxxQkFBcUJBO29CQUNyQkEsZ0JBQWdCQTs7b0JBRWhCQSxJQUFHQSw2Q0FBbUJBO3dCQUVsQkEsb0NBQVdBOzs7b0JBR2ZBLFlBQVlBOztvQkFFWkEsSUFBR0EsNkNBQW1CQTt3QkFFbEJBLG9CQUFlQTs7Ozs7OztnQkF2RXZCQTs7bUNBR29CQSxRQUFlQTs7O2dCQUVuQ0EsV0FBV0E7Z0JBQ1hBLFFBQU9BO29CQUVIQSxLQUFLQTt3QkFDREEsbUJBQW1CQTt3QkFDbkJBO29CQUVKQSxLQUFLQTt3QkFDREEsbUJBQW1CQTt3QkFDbkJBOzs7Z0JBR1JBLGlCQUFpQkE7Z0JBQ2pCQSw0QkFBNkNBO2dCQUM3Q0EsSUFBR0E7b0JBRUNBLDRCQUFnQ0E7O2dCQUVwQ0E7OztnQkFLQUEsSUFBR0EsZ0JBQVdBO29CQUVWQTs7Z0JBRUpBOzs7Z0JBS0FBLElBQUdBLGdCQUFXQTtvQkFFVkE7O2dCQUVKQTs7O2dCQXFDQUE7Z0JBQ0FBO2dCQUNBQTs7O2dCQUtBQTs7Z0JBRUFBLG9DQUFXQTtnQkFDWEEsd0NBQWVBO2dCQUNmQSwyQ0FBa0JBOzs7Z0JBS2xCQTtnQkFDQUE7Ozs7Ozs7Ozs7Ozs0QkNwR2NBOzs7OztnQkFFZEEsWUFBWUE7Z0JBQ1pBOzs7Z0JBTUFBLHFCQUFnQkEsSUFBSUE7O2dCQUVwQkEsSUFBR0E7b0JBRUNBO29CQUNBQSwwQkFBcUJBLElBQUlBOzs7Ozs7Z0JBTTdCQSw2Q0FBc0JBO2dCQUN0QkE7Ozs7Ozs7Ozs7Ozs7OztvQkNoQk1BLE9BQU9BOzs7b0JBRVRBLDBCQUFxQkE7b0JBQ3JCQSw2QkFBd0JBO29CQUN4QkEsSUFBR0E7d0JBRUNBO3dCQUNBQSxzQ0FBaUNBO3dCQUNqQ0E7O3dCQUlBQSxzQ0FBaUNBO3dCQUNqQ0E7Ozs7Ozs0QkF5QmFBOzs7Ozt5REFBa0NBO2dCQUV2REE7O2dCQUVBQSxJQUFHQTtvQkFFQ0E7OztnQkFHSkEsWUFBT0E7O2dCQUVQQSxnQkFBV0EsVUFBSUEsOEJBQVVBLHVEQUFrREEsSUFBSUEsNkNBQXNCQSxJQUFJQSw0QkFBUUEsYUFBYUEsQ0FBQ0E7Z0JBQy9IQSw4QkFBeUJBLCtCQUFDQTtvQkFFdEJBLElBQUdBLHlDQUFpQkE7d0JBQ2hCQSxtQkFBY0E7Ozs7Z0JBR3RCQSxzQkFBaUJBOztnQkFFakJBLHNCQUFpQkEsVUFBSUEsZ0RBQTRCQSxJQUFJQSw0QkFBUUEsYUFBYUEscUNBQWtDQSxJQUFJQSw0QkFBUUE7Z0JBQ3hIQSwwQ0FBcUNBLCtCQUFDQTtvQkFFbENBLElBQUdBLENBQUNBLGlCQUFZQTt3QkFDWkEsdUJBQWtCQTs7OztnQkFHMUJBOztnQkFFQUE7O2dCQUVBQSxJQUFHQTtvQkFFQ0E7OztnQkFHSkEsb0RBQXVCQSxlQUFVQTs7Ozs7Z0JBL0VqQ0EsT0FBT0E7OztnQkF5QlBBLE9BQU9BLEFBQU9BLEFBQUNBLEFBQXFCQTs7d0NBR0ZBO2dCQUVsQ0EsK0JBQTBCQTs7O2dCQUsxQkE7OztnQkFLQUEsT0FBT0E7OztnQkE0Q1BBLE9BQU9BOztnQ0FHbUJBO2dCQUUxQkEscUJBQWdCQTs7eUNBR2tCQTs7Ozs7Ozs7Ozs7Ozs7OzZCQzVGVEEsS0FBSUE7Ozs7Ozs7Z0JBTzdCQTtnQkFDQUE7O2dCQUVBQSxJQUFHQTtvQkFFQ0EsNEJBQXVCQSwrQkFBQ0E7d0JBRXBCQSxVQUFjQTt3QkFDZEE7d0JBQ0FBLHVCQUFrQkEsSUFBSUEsNEJBQVFBLFlBQVlBOzt3QkFFMUNBOztvQkFFSkEsMkJBQXNCQSwrQkFBQ0E7d0JBRW5CQSxVQUFjQTt3QkFDZEEsSUFBR0E7NEJBRUNBLFNBQVNBLElBQUlBLDRCQUFRQSxZQUFZQTs0QkFDakNBLGVBQVVBLElBQUlBLDRCQUFRQSwrQkFBaUJBOzRCQUN2Q0EsdUJBQWtCQTs7NEJBRWxCQTs7O29CQUdSQSwwQkFBcUJBLCtCQUFDQTt3QkFFbEJBLFVBQWNBO3dCQUNkQSxTQUFTQSxJQUFJQSw0QkFBUUEsWUFBWUE7d0JBQ2pDQSxJQUFHQSxVQUFTQSwyQkFBc0JBLFVBQVNBOzRCQUV2Q0EsZUFBVUEsSUFBSUEsNEJBQVFBLCtCQUFpQkE7O3dCQUUzQ0E7O3dCQUVBQTs7O29CQUtKQSwyQkFBc0JBLCtCQUFDQTt3QkFFbkJBLFVBQWNBO3dCQUNkQTt3QkFDQUEsdUJBQWtCQSxJQUFJQSw0QkFBUUEsWUFBWUE7O3dCQUUxQ0E7O29CQUVKQSwyQkFBc0JBLCtCQUFDQTt3QkFFbkJBLElBQUdBOzRCQUVDQSxVQUFjQTs0QkFDZEEsU0FBU0EsSUFBSUEsNEJBQVFBLFlBQVlBOzRCQUNqQ0EsZUFBVUEsSUFBSUEsNEJBQVFBLCtCQUFpQkE7NEJBQ3ZDQSx1QkFBa0JBOzs0QkFFbEJBOzs7b0JBR1JBLHlCQUFvQkEsK0JBQUNBO3dCQUVqQkEsVUFBY0E7d0JBQ2RBLFNBQVNBLElBQUlBLDRCQUFRQSxZQUFZQTt3QkFDakNBLElBQUdBLFVBQVNBLDJCQUFzQkEsVUFBU0E7NEJBRXZDQSxlQUFVQSxJQUFJQSw0QkFBUUEsK0JBQWlCQTs7d0JBRTNDQTs7d0JBRUFBOzs7Ozs7Ozs7Z0JBU1JBO2dCQUNBQTtnQkFDQUE7OztnQkFLQUEsUUFBUUE7Z0JBQ1JBLElBQUdBLElBQUlBO29CQUVIQTs7b0JBRUFBLE9BQU1BLElBQUlBLGtCQUFhQTs7d0JBR25CQSxTQUFTQSxtQkFBTUE7O3dCQUVmQSxvQkFBZUEsT0FBT0E7d0JBQ3RCQSxvQkFBZUEsT0FBT0E7OztvQkFHMUJBO29CQUNBQSxtQkFBY0E7Ozs7Ozs7Ozs7Ozs7Z0JDMUdsQkEsMkJBQXNCQSwrQkFBQ0E7b0JBQ25CQSxJQUFHQTt3QkFDQ0EsdUJBQWtCQTs7Ozs7O3lDQUlRQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQ1Y1QkEsT0FBT0EsRUFBS0E7OztvQkFDWkEsb0JBQXFEQSxBQUFNQTs7Ozs7b0JBSzNEQSxPQUFPQSxFQUFLQTs7O29CQUNaQSxvQkFBcURBLEFBQU1BOzs7OztvQkFLM0RBLE9BQU9BLEFBQUtBOzs7b0JBQ1pBLHlCQUEwREE7Ozs7Ozs7Ozs7O3lEQW9CMUNBO2dCQUV0QkE7O2dCQUVBQSxrQkFBYUEsK0JBQUNBO29CQUVWQSxJQUFHQTt3QkFDQ0E7OztvQkFFSkE7b0JBQ0FBLGtCQUFhQTs7b0JBRWJBLElBQUdBO3dCQUNDQSxZQUFPQTs7d0JBR1BBO3dCQUNBQSxlQUFVQTs7O2dCQUdsQkEsbUJBQWNBLCtCQUFDQTtvQkFFWEE7b0JBQ0FBLGVBQVVBO29CQUNWQSxZQUFPQTs7Ozs7O2dCQWhDWEEsT0FBT0E7O2dDQUdtQkE7Z0JBRTFCQSxxQkFBc0RBOzs7Ozs7Ozs7Ozs7OzRCaERzQzNCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCaURsRVRBLFFBQWVBOzs7OztnQkFFakNBLGNBQVNBO2dCQUNUQSxxQkFBZ0JBOztnQkFFaEJBLGlCQUFZQSx1QkFBbUNBLGlDQUEwQkEsa0JBQWlCQTtnQkFDMUZBOztnQkFFQUE7Z0JBQ0FBO2dCQUNBQTs7Z0JBR0FBLDZDQUFzQkE7Ozs7O2dCQUt0QkE7Z0JBRUFBLElBQUdBLHVCQUFpQkE7b0JBRWhCQSxtQ0FBOEJBOztvQkFJOUJBLG9DQUErQkEsa0NBQWFBOzs7Ozs7Ozs7Ozs7OztvQkNyQnBEQSxPQUFPQTs7Ozs7b0JBTVBBLE9BQU9BOzs7Ozs7OztnQkErQkhBLHVCQUFrQkEsSUFBSUE7Z0JBQ3RCQTs7Z0JBRUFBLDZDQUFpQkE7O2dCQUVqQkE7Ozs7Ozs7Ozs7Ozs7OzZDQTdCOEJBO2dCQUU5QkEsNkNBQXNDQTs7Ozs7Ozs7Ozs7OytDQVlSQTtnQkFFOUJBLElBQUdBLG9CQUFlQTtvQkFDZEEsTUFBTUEsSUFBSUE7OztnQkFFZEEsNEVBQWdEQTs7cUNBZDFCQTs7Z0JBRXRCQSxPQUFPQSxtQ0FBOEJBOzs7Z0JBNkJyQ0E7O2dCQUVBQTtnQkFDQUE7Z0JBQ0FBOztnQkFFQUEsbUJBQWNBOzs7Ozs7Ozs7Ozs7OzsrQnJCd0lVQSxJQUFJQTs7Ozs7OzswQkEvRG1CQTs7Ozs7b0JBR3pDQSxPQUFPQTs7O29CQUVUQSxJQUFHQSx1Q0FBWUE7d0JBRVhBLGdCQUFXQTt3QkFDWEE7Ozs7OztvQkFPRkEsT0FBUUE7OztvQkFDUkEsdUJBQXNEQTs7Ozs7Ozs7Z0JBbUQ1REE7Z0JBQ0FBLElBQUdBO29CQUNDQTs7O2dCQUVKQSxrQkFBa0JBLHVCQUFzQkEsdUVBQStCQTtnQkFDdkVBO2dCQUNBQTtnQkFDQUE7Z0JBQ0FBOzs7OztnQkE1RkFBLElBQUdBLHFCQUFnQkE7b0JBQ2ZBOzs7Z0JBRUpBLElBQUdBO29CQUVDQTtvQkFDQUE7b0JBQ0FBOztvQkFJQUE7b0JBQ0FBO29CQUNBQTs7OztnQkF5QkpBLElBQUdBLENBQUNBO29CQUNBQTs7O2dCQUVKQSxJQUFHQSxxQkFBZ0JBO29CQUVmQSxJQUFHQSw4QkFBOEJBO3dCQUU3QkEsb0JBQWVBO3dCQUNmQTt3QkFDQUE7d0JBQ0FBO3dCQUNBQTt3QkFDQUEsNEJBQXVCQTs7d0JBRXZCQSw4QkFBeUJBOzt3QkFFekJBLElBQUdBLG1DQUFtQ0E7NEJBQ2xDQSx1Q0FBa0VBOzs0QkFFbEVBLHdDQUFtRUEsOEJBQWlDQTs7O3dCQUV4R0EsSUFBR0EsbUNBQW1DQTs0QkFDbENBLHVDQUF5REE7OzRCQUV6REEsd0NBQTBEQSxtQkFBY0E7Ozs7b0JBSWhGQSw4QkFBeUJBOzs7Z0JBRzdCQTs7O2dCQUtBQTs7Z0JBRUFBOzs7Ozs7Ozs7OztzQnNCckp5Q0E7Ozs7OztvQkF2Q3JDQSxPQUFPQTs7O29CQUlQQSxJQUFHQSxvQ0FBU0E7d0JBRVJBLGFBQVFBO3dCQUNSQTs7Ozs7O29CQVdKQSxPQUFPQTs7O29CQUlQQSxJQUFHQSx1Q0FBWUE7d0JBRVhBLGdCQUFXQTt3QkFDWEE7Ozs7Ozs7Ozs7NEJBbUNRQSxTQUFxQkE7Ozs7O3dEQUFxQ0E7Z0JBRTFFQSxlQUFVQTtnQkFDVkEsbUJBQWNBOzs7O29DQXRCbUJBO2dCQUVqQ0EsSUFBR0E7b0JBRUNBLElBQUdBLGlCQUFZQTt3QkFFWEE7OztvQkFLSkEsSUFBR0EsaUJBQVlBO3dCQUVYQTs7O2dCQUdSQSwwREFBa0JBOzs7Z0JBYWxCQTs7Z0JBRUFBLHVCQUFrQkEsK0JBQUNBO29CQUVmQSxpQkFBa0JBOztvQkFFbEJBLElBQUdBLGdCQUFXQSx1Q0FBZUE7d0JBQ3pCQSxpQkFBWUE7O29CQUNoQkEsSUFBR0EsY0FBY0EsMENBQWtCQTt3QkFDL0JBLG9CQUFlQTs7O29CQUVuQkE7OztnQkFHSkE7Z0JBQ0FBOztnQkFFQUEsZ0JBQVdBOzs7Z0JBT1hBLElBQUdBLGlCQUFZQTtvQkFFWEEsSUFBR0EsQ0FBQ0EsaUNBQTBCQTt3QkFFMUJBLGdCQUFXQSwyQkFBSUE7d0JBQ2ZBLGlDQUE0QkEsb0NBQWVBOzJCQUUxQ0EsSUFBR0EsQ0FBQ0EsaUNBQTBCQTt3QkFFL0JBLGdCQUFXQSwyQkFBSUE7d0JBQ2ZBLGlDQUE0QkEsdUNBQWtCQTs7b0JBRWxEQSxJQUFHQSxpQkFBWUE7d0JBRVhBLGdEQUFvQkE7OztvQkFLeEJBLElBQUdBLENBQUNBLGlDQUEwQkE7d0JBRTFCQSxpQ0FBNEJBLG9DQUFlQTsyQkFFMUNBLElBQUdBLENBQUNBLGlDQUEwQkE7d0JBRS9CQSxpQ0FBNEJBLHVDQUFrQkE7Ozs7Z0JBSXREQSxJQUFHQSxpQkFBWUE7b0JBRVhBOztvQkFFQUEsSUFBR0EsbUJBQWNBLFFBQVFBO3dCQUNyQkE7OztvQkFJSkEsSUFBR0EsbUJBQWNBLFFBQVFBO3dCQUNyQkE7Ozs7Ozs7Ozs7Ozs7OztvQkM3SEZBLE9BQU9BOzs7b0JBRVRBLGtCQUFhQTtvQkFDYkE7b0JBQ0FBLGlCQUFZQSxhQUFhQSxDQUFDQTtvQkFDMUJBOzs7Ozs0QkFoQmNBLE1BQWdCQTs7Ozs7Z0JBRWxDQSxZQUFPQTtnQkFDUEEsaUJBQVlBO2dCQUNaQSxnREFBeUJBOztnQkFFekJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs0QkNOaUNBLEtBQUlBOytCQUlMQSxLQUFJQTs0QkFDVkEsS0FBSUE7Ozs7O2dCQXdCOUJBO2dCQUNBQTtnQkFDQUEseUNBQTRDQSxBQUE2REEsK0JBQUNBO29CQUN0R0EsU0FBU0E7O29CQUVUQSxJQUFHQTt3QkFFQ0E7d0JBQ0FBOzJCQUVDQSxJQUFHQTt3QkFFSkE7d0JBQ0FBLElBQUdBOzRCQUNDQTs7d0JBQ0pBOzJCQUVDQSxJQUFHQTt3QkFFSkE7d0JBQ0FBLElBQUdBOzRCQUNDQTs7d0JBQ0pBOzJCQUVDQSxJQUFHQTt3QkFFSkE7d0JBQ0FBOzs7Ozs7O2lDQThDVUEsR0FBT0E7Z0JBRW5CQSxPQUFPQSxhQUFRQSxHQUFHQTs7O2dCQTdGeEJBLElBQUdBO29CQUNDQTs7Z0JBQ0pBOzs7Z0JBS0FBOzs7Z0JBS0FBO2dCQUNBQTs7c0NBc0N3QkEsR0FBR0EsTUFBZUE7Z0JBRTFDQSxLQUFJQSxXQUFXQSxJQUFJQSxPQUFPQTtvQkFFdEJBLHVCQUFTQTs7OytCQUlRQSxHQUFPQTs7Z0JBRTVCQSxJQUFHQSxhQUFRQTtvQkFFUEEsWUFBT0EsS0FBSUE7OztnQkFHZkEsSUFBR0EsS0FBS0E7b0JBRUpBLDJDQUF5QkEsV0FBTUEsa0JBQVFBO29CQUN2Q0EsK0VBQWdDQSxXQUFNQSxrQkFBUUE7OztnQkFHbERBLElBQUdBLGtCQUFLQSxNQUFNQTtvQkFFVkEsa0JBQUtBLEdBQUtBLEtBQUlBOzs7Z0JBR2xCQSxJQUFHQSxLQUFLQSxrQkFBS0E7b0JBRVRBLDhDQUE0QkEsY0FBU0Esa0JBQVFBO29CQUM3Q0EsNENBQTBCQSxrQkFBS0EsSUFBSUEsa0JBQVFBLGtCQUFLQTs7Z0JBRXBEQSxZQUFZQSxrQkFBS0EsV0FBR0E7Z0JBQ3BCQSxJQUFHQSxTQUFTQTtvQkFFUkEsUUFBUUEsQ0FBQ0EsTUFBYUEsSUFBSUEsdUJBQVVBLE9BQTNCQSxrQkFBS0EsV0FBR0E7OztnQkFHckJBLE9BQU9BOzt3Q0FRb0JBO2dCQUUzQkE7Z0JBQ0FBLEtBQUlBLFdBQVdBLElBQUlBLFFBQVFBO29CQUV2QkEsTUFBTUEscUJBQWdCQTs7Z0JBRTFCQSxPQUFPQTs7dUNBR21CQTs7Z0JBRTFCQSxrQkFBeUJBLEtBQUlBLHVEQUFXQTs7Z0JBRXhDQTs7Z0JBRUFBLEtBQUlBLFFBQVFBLDZCQUF1QkEsUUFBUUE7b0JBRXZDQSxJQUFHQSxpQkFBQ0Esb0JBQVlBLElBQVpBLDRCQUFZQSxpQkFBWkEsb0JBQVlBO3dCQUVaQSxvQkFBWUE7O3dCQUlaQTt3QkFDQUE7OztnQkFHUkEsSUFBR0E7b0JBRUNBOztnQkFFSkEsT0FBT0EsNEJBQVdBOzs7Z0JBS2xCQTtnQkFDQUEsUUFBUUE7OztnQkFJUkE7Z0JBQ0FBOztnQkFFQUEseUJBQXlCQSxJQUFJQSxzQkFBSUEsSUFBSUEsd0JBQVdBO2dCQUNoREEsd0JBQXdCQSxJQUFJQSxzQkFBSUEsSUFBSUEsd0JBQVdBO2dCQUUvQ0EsbUJBQW1CQSxJQUFJQSx3QkFBV0E7O2dCQUVsQ0EsS0FBSUEsUUFBUUEsd0JBQW1CQSxJQUFJQSxvQkFBZUE7b0JBRTlDQSxJQUFHQSxxQkFBUUEsTUFBTUE7d0JBQ2JBLHFCQUFRQSxHQUFLQSxJQUFJQSx5QkFBWUE7O29CQUNqQ0EsVUFBVUE7b0JBQ1ZBLGNBQWNBLHFCQUFRQTs7b0JBR3RCQSxrQkFBZ0JBLGNBQWNBLEFBQU9BLFFBQVFBLHFCQUFRQTtvQkFDckRBLGtCQUFnQkEsbUJBQW1CQSxBQUFPQSxRQUFRQSxxQkFBUUE7O29CQUUxREEsZUFBYUEsc0JBQWlCQSxJQUFJQSxJQUFJQSxpQ0FBb0JBLElBQUlBLHdCQUFXQSxvQ0FBY0EsQUFBT0EsTUFBTUEsQ0FBQ0EscUJBQVFBLGtCQUFrQkEscUJBQVFBOztvQkFFdklBLGFBQVdBLG9CQUFvQkEsQUFBT0EsZ0JBQWdCQSxBQUFPQSxZQUFZQSxBQUFPQTs7Z0JBRXBGQSxLQUFJQSxRQUFRQSxxQkFBZ0JBLElBQUlBLGlCQUFZQTtvQkFFeENBLElBQUdBLGtCQUFLQSxNQUFNQTt3QkFDVkEsa0JBQUtBLEdBQUtBLElBQUlBLHNCQUFTQTs7b0JBQzNCQSxXQUFVQTtvQkFDVkEsZUFBZUEsa0JBQUtBOztvQkFFcEJBLGtCQUFnQkEsaUJBQWlCQSxBQUFPQSxVQUFTQSxrQkFBS0E7b0JBQ3REQSxrQkFBZ0JBLHNCQUFzQkEsQUFBT0EsVUFBU0Esa0JBQUtBOztvQkFFM0RBLGVBQWFBLGlCQUFDQSxpQkFBbUJBLElBQUlBLGlDQUFvQkEsSUFBSUEsd0JBQVdBLHdDQUFrQkEsQUFBT0EsT0FBTUEsQ0FBQ0Esa0JBQUtBOztvQkFFN0dBLGFBQVdBLHdCQUF3QkEsQUFBT0EsYUFBYUEsQUFBT0EsbUJBQWNBLEFBQU9BOzs7Z0JBR3ZGQTtnQkFDQUE7O2dCQUVBQSxLQUFJQSxTQUFRQSx3QkFBbUJBLEtBQUlBLG9CQUFlQTtvQkFFOUNBO29CQUNBQSxJQUFHQSxxQkFBUUEsT0FBTUE7d0JBQ2JBLHFCQUFRQSxJQUFLQSxJQUFJQSx5QkFBWUE7OztvQkFFakNBLGtCQUFrQkEscUJBQVFBO29CQUMxQkEsS0FBSUEsU0FBUUEscUJBQWdCQSxLQUFJQSxpQkFBWUE7d0JBR3hDQSxXQUFXQSxhQUFRQSxJQUFHQTs7O3dCQUl0QkEsWUFBWUE7O3dCQUVaQSxJQUFHQSxTQUFTQTs0QkFFUkEsbUJBQW1CQSx3QkFBaUJBOzRCQUNwQ0EsSUFBR0EsQ0FBQ0EsaUNBQTBCQTtnQ0FHMUJBLGVBQWFBLGNBQWNBLElBQUlBLGlDQUFvQkEsSUFBSUEsd0JBQVdBLG9DQUFjQSxnQkFBZ0JBLGlCQUFpQkE7Ozs7d0JBSXpIQSxJQUFHQSxrQkFBS0EsT0FBTUE7NEJBQ1ZBLGtCQUFLQSxJQUFLQSxJQUFJQSxzQkFBU0E7Ozt3QkFFM0JBLGVBQWVBLGtCQUFLQTt3QkFDcEJBLElBQUdBLGNBQWNBOzRCQUNiQTs7O29CQUVSQSxjQUFjQTtvQkFDZEEsSUFBR0EsYUFBYUE7d0JBQ1pBOzs7Ozs7Ozs7OzRCQ3hPY0EsWUFBaUJBOzs7OztnQkFFdkNBLGtCQUFrQkE7Z0JBQ2xCQSxvQkFBb0JBOztnQkFFcEJBOzs7Ozs7Ozs7Ozs7Ozs7O2dCQ1lBQSx1Q0FBcUJBO2dCQUNyQkEsMENBQXdCQTs7Ozs7Ozs7Ozs7Ozs7Ozs0QkNiWkE7OztnQkFFWkEsSUFBR0Esc0NBQXNDQSxRQUFRQSxvREFBb0RBLFFBQVFBLGtFQUFrRUE7b0JBRTNLQSx5QkFBb0JBO29CQUNwQkEsdUJBQWtCQTs7O2dCQUd0QkEsb0JBQWVBO2dCQUNmQSxrQkFBYUEsSUFBSUEsK0JBQWtCQTtnQkFDbkNBO2dCQUNBQSwwQkFBcUJBO29CQUVqQkE7b0JBQ0FBOzs7Z0JBR0pBLDBCQUFxQkEsK0JBQUNBO29CQUVsQkEseUJBQW9CQTs7O2dCQUd4QkEsaUJBQVlBOztnQkFFWkEsWUFBT0EsSUFBSUE7Ozs7O2dCQUtYQTtnQkFDQUE7Z0JBQ0FBLElBQUdBLENBQUNBO29CQUNBQTs7b0JBR0FBLHlCQUFvQkEsa0JBQUtBLHlCQUFtQkE7Ozs7Z0JBTWhEQTs7Z0JBRUFBLElBQUdBLENBQUNBO29CQUVBQTtvQkFDQUEsNEJBQXVCQTs7OztnQkFNM0JBO2dCQUNBQSxJQUFHQSxxQkFBZ0JBO29CQUNmQTs7O2dCQUVKQTs7Ozs7Ozs7Ozs7Ozs7OzRCQ2xEbUJBLFVBQWtCQSxXQUFvQkE7Ozs7O2dCQUV6REEsZ0JBQVdBLGtCQUFXQTs7Z0JBRXRCQSxLQUFJQSxXQUFXQSxJQUFJQSxrQ0FBa0NBO29CQUVqREEsaUNBQVNBLEdBQVRBLGtCQUFjQSxpQkFBU0E7OztnQkFHM0JBLGVBQVVBO2dCQUNWQSxnQkFBV0E7Z0JBQ1hBLGdCQUFXQTs7Z0JBRVhBO2dCQUNBQTtnQkFDQUE7Z0JBQ0FBOztnQkFFQUEsYUFBUUE7Z0JBQ1JBO2dCQUNBQTtnQkFDQUE7O2dCQUVBQSx5QkFBb0JBLEFBQTZEQSwrQkFBQ0E7O3dCQUFPQSxRQUFRQSxVQUFJQSxnQ0FBbUJBLE1BQU1BLHlFQUF1REEsSUFBSUEsOEVBQXVEQSwrQkFBQ0E7NEJBQ2pPQSxLQUFLQSxZQUFXQSxLQUFJQSxzQ0FBaUNBO2dDQUVqREEsaUJBQVNBLElBQUtBLGlDQUFTQSxJQUFUQTs7OzRCQUdsQkE7O3dCQUNBQSxRQUFRQSxVQUFJQSxnQ0FBbUJBLE1BQU1BLGlFQUErQ0EsSUFBSUE7d0JBQStDQSxPQUFPQTt1QkFQNUdBLEtBQUlBOztnQkFTdERBLCtEQUFxQ0E7O2dCQUVyQ0EsNkNBQXNCQTs7Z0JBRXRCQTs7Ozs7Z0JBTUFBOztnQkFFQUE7OztnQkFLQUE7O2dCQUVBQSxJQUFHQSxnQkFBV0E7b0JBRVZBLG9CQUFvQkE7b0JBQ3BCQTs7b0JBSUFBOztvQkFFQUE7Ozs7Z0JBTUpBO2dCQUNBQSxhQUFhQTs7Z0JBRWJBO2dCQUNBQTs7Z0JBRUFBLG9CQUFvQkE7Z0JBQ3BCQSxzQkFBc0JBO2dCQUN0QkEsc0JBQXNCQTs7Z0JBRXRCQSxnQkFBZ0JBOztnQkFFaEJBLEtBQUlBLFdBQVdBLElBQUlBLFFBQVFBO29CQUV2QkEsa0JBQWtCQTtvQkFDbEJBLFlBQVlBLHdCQUFtQkE7O29CQUUvQkEsSUFBR0EsQ0FBQ0E7d0JBQ0FBOzs7b0JBRUpBLFlBQVlBOztvQkFFWkEsb0JBQWNBOztvQkFFZEEsSUFBR0E7d0JBRUNBOzs7b0JBR0pBLFFBQU9BO3dCQUVIQSxLQUFLQTs0QkFDREEsY0FBY0EsMkJBQU1BLGVBQWVBLE9BQUtBLENBQUNBLHNCQUFNQSxhQUFZQSxDQUFDQSxzQ0FBV0E7NEJBQ3ZFQSxzQkFBZ0JBLElBQUlBOzRCQUNwQkEsMkNBQW9CQSxPQUFLQSxDQUFDQSxzQkFBTUEsYUFBWUEsQ0FBQ0Esc0NBQVdBLGlDQUFpQkE7NEJBQ3pFQSxvQkFBa0JBLHdCQUFpQkEscUJBQVFBOzRCQUMzQ0EsdUJBQXFCQTs0QkFDckJBLElBQUdBLENBQUNBO2dDQUVBQSw0QkFBMEJBO3lFQUFDQTt3Q0FFdkJBLHFCQUFRQSxXQUFXQTt3Q0FDbkJBLElBQUdBOzRDQUNDQTs7Ozs7NEJBSVpBLGtEQUFxQkEsU0FBU0E7NEJBRTlCQTt3QkFFSkEsS0FBS0E7d0JBQ0xBLEtBQUtBO3dCQUNMQSxLQUFLQTt3QkFDTEEsS0FBS0E7d0JBQ0xBLEtBQUtBO3dCQUNMQSxLQUFLQTt3QkFDTEEsS0FBS0E7d0JBQ0xBLEtBQUtBOzRCQUVEQSxhQUFhQSwyQkFBTUEsZUFBZUEsT0FBS0EsQ0FBQ0Esc0JBQU1BLGFBQVlBLENBQUNBLHNDQUFXQTs0QkFDdEVBOzRCQUNBQSxJQUFHQTtnQ0FFQ0EsYUFBV0EsSUFBSUE7Z0NBQ2ZBLDJDQUFvQkEscUJBQVFBOztnQ0FJNUJBLGFBQVdBLElBQUlBO2dDQUNmQSxrQkFBZ0JBLHdCQUFpQkEscUJBQVFBOzs0QkFHN0NBLDBDQUFtQkEsT0FBS0EsQ0FBQ0Esc0JBQU1BLGFBQVlBLENBQUNBLHNDQUFXQSxpQ0FBaUJBOzRCQUV4RUEsc0JBQW9CQTs0QkFFcEJBLElBQUdBLENBQUNBO2dDQUVBQSwyQkFBeUJBO3lFQUFDQTt3Q0FFdEJBLElBQUdBOzRDQUVDQSxxQkFBUUEsV0FBV0E7OzRDQUluQkEscUJBQVFBLFdBQVdBOzt3Q0FFdkJBLElBQUdBOzRDQUNDQTs7Ozs7NEJBSVpBLGtEQUFxQkEsUUFBUUE7NEJBQzdCQTt3QkFFSkE7d0JBQ0FBLEtBQUtBO3dCQUNMQSxLQUFLQTs0QkFDREEsYUFBYUEsMkJBQU1BLGVBQWVBLE9BQUtBLENBQUNBLHNCQUFNQSxhQUFZQSxDQUFDQSxzQ0FBV0E7NEJBQ3RFQSxxQkFBZUEsSUFBSUE7NEJBQ25CQSwwQ0FBbUJBLE9BQUtBLENBQUNBLHNCQUFNQSxhQUFZQSxDQUFDQSxzQ0FBV0EsaUNBQWlCQTs0QkFDeEVBLGtCQUFnQkEsd0JBQWlCQSxxQkFBUUE7NEJBQ3pDQSxzQkFBb0JBOzRCQUVwQkEsSUFBR0EsQ0FBQ0E7Z0NBRUFBLDJCQUF5QkE7eUVBQUNBO3dDQUV0QkEscUJBQVFBLFdBQVdBOzt3Q0FFbkJBLElBQUdBOzRDQUNDQTs7Ozs7NEJBSVpBLGtEQUFxQkEsUUFBUUE7NEJBWTdCQTs7b0JBRVJBLElBQUdBO3dCQUVDQSxtQkFBVUE7d0JBQ1ZBOzt3QkFJQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0QkNoTklBOzs7Z0JBRVpBLElBQUdBLHNDQUFzQ0EsUUFBUUEsb0RBQW9EQSxRQUFRQSxrRUFBa0VBO29CQUUzS0EseUJBQW9CQTtvQkFDcEJBLHVCQUFrQkE7OztnQkFHdEJBLFlBQU9BLElBQUlBOztnQkFFWEEsb0JBQWVBO2dCQUNmQSxtQkFBY0EsSUFBSUEseUJBQVlBO2dCQUM5QkE7O2dCQUVBQSxpQ0FBNEJBLFVBQUNBO29CQUV6QkEsSUFBR0Esb0JBQVFBO3dCQUVQQTs7d0JBSUFBLHFCQUFxQkEscUJBQWNBLFNBQVFBLDBDQUFrQ0E7Ozs7Z0JBSXJGQSxvQ0FBK0JBO29CQUUzQkE7OztnQkFHSkEseUJBQW9CQTs7Z0JBRXBCQSxpQkFBWUE7Ozs7O2dCQUtaQTtnQkFDQUE7Z0JBQ0FBLElBQUdBLENBQUNBO29CQUNBQTs7b0JBR0FBLHlCQUFvQkEsa0JBQUtBLHlCQUFtQkE7Ozs7Z0JBTWhEQTtnQkFDQUEsSUFBR0EscUJBQWdCQTtvQkFDZkE7OztnQkFFSkE7Ozs7Ozs7Ozs7O2dCQzFEQUEsMEJBQXFCQSwrQkFBQ0EsUUFBUUE7b0JBRTFCQSxJQUFHQSxlQUFjQTt3QkFDYkE7Ozs7Ozt5Q0FJMkJBO2dCQUVuQ0EsSUFBR0EsQ0FBQ0EsaUJBQVlBO29CQUNaQSxDQUFDQSxJQUFJQSxzQkFBU0EsMEJBQ0pBLCtDQUNrQkE7Ozs7Ozs7Ozs7Ozs7Ozs7NEJDbVRWQSxPQUFjQSxPQUFXQTs7d0RBQXdCQTtnQkFFdkVBLGFBQVFBO2dCQUNSQSxlQUFVQTtnQkFDVkEsbUJBQWNBO2dCQUNkQSxpQkFBWUE7Z0JBQ1pBLHlCQUFvQkEsQUFBNkRBLCtCQUFDQTs7d0JBQU9BLFFBQVFBLFVBQUlBLGdDQUFtQkEsTUFBTUE7d0JBQXdDQSxRQUFRQSxVQUFJQSxnQ0FBbUJBLE1BQU1BO3dCQUE0Q0EsT0FBT0E7dUJBQTVNQSxLQUFJQTs7Z0JBRXREQTtnQkFDQUE7Z0JBQ0FBO2dCQUNBQTtnQkFDQUE7Z0JBQ0FBO2dCQUNBQTtnQkFDQUE7Z0JBQ0FBO2dCQUNBQTtnQkFDQUE7O2dCQUVBQSxTQUFTQSxJQUFJQSx1QkFBVUEsVUFBVUE7Z0JBQ2pDQTs7Z0JBRUFBLElBQUdBLENBQUNBO29CQUVBQSxRQUFRQSxxQkFBS0E7b0JBQ2JBLElBQUdBLFFBQVFBO3dCQUNQQSxRQUFRQTs7O2dCQUVoQkEsSUFBR0Esb0JBQW9CQTtvQkFDbkJBLG9CQUFvQkE7O2dCQUN4QkEsSUFBR0Esb0JBQW9CQTtvQkFDbkJBLG9CQUFvQkE7OztnQkFFeEJBLDZCQUF3QkE7Z0JBQ3hCQSxvQkFBZUEsdUJBQWdCQTs7Ozs4QkFTYkE7Z0JBRWxCQSxnREFBb0JBO2dCQUNwQkEsZ0RBQW9CQTtnQkFDcEJBLGdEQUFvQkE7Z0JBQ3BCQSw2Q0FBaUJBOztnQkFFakJBLCtEQUFxQ0E7O2dCQUVyQ0EsY0FBU0E7Z0JBQ1RBOzs7Ozs7Ozs7cUJDclg4Q0E7Ozs7b0JBSzlDQSxJQUFHQSxDQUFDQTt3QkFDQUE7O29CQUNKQSxJQUFHQSxtQ0FBT0E7d0JBRU5BLGtDQUFNQTt3QkFDTkEsc0NBQVVBOztvQkFFZEE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQVVrQkEsUUFBZUE7OERBQTRCQSxRQUFRQSxJQUFJQSxxQ0FBd0JBOzs7Ozs7Ozs7Ozs7Ozs4QkFRL0VBLFFBQWVBLElBQXFCQTs4REFBcUJBLFFBQVFBLElBQUlBLHFDQUF3QkE7Ozs7Ozs7Ozs7Ozs7OzhCQVE3RkEsUUFBZUEsSUFBcUJBOzhEQUFrQ0EsUUFBUUEsSUFBSUEsU0FBU0E7Ozs7Ozs7Ozs7Ozs7Ozs4QkFTM0ZBLFFBQWVBLElBQXFCQSxTQUEyQkE7O3dEQUFxQkE7Z0JBRXRHQSxjQUFjQTtnQkFDZEEsVUFBVUE7Z0JBQ1ZBLGtCQUFrQkE7Z0JBQ2xCQSxlQUFVQTtnQkFDVkEsZ0JBQVdBOztnQkFFWEEsUUFBT0E7b0JBRUhBLEtBQUtBO3dCQUNEQSxJQUFHQSxrQkFBWUE7NEJBRVhBLGdCQUFXQTs7d0JBRWZBO3dCQUNBQTtvQkFFSkEsS0FBS0E7d0JBQ0RBLElBQUdBLGtCQUFZQTs0QkFFWEEsZ0JBQVdBOzt3QkFFZkE7d0JBQ0FBO29CQUVKQSxLQUFLQTt3QkFDREEsSUFBR0Esa0JBQVlBOzRCQUVYQSxnQkFBV0E7O3dCQUVmQTt3QkFDQUE7b0JBRUpBLEtBQUtBO3dCQUNEQSxJQUFHQSxrQkFBWUE7NEJBRVhBLGdCQUFXQTs7d0JBRWZBO3dCQUNBQTtvQkFFSkE7d0JBQ0lBLE1BQU1BLElBQUlBLGdEQUFrQ0Esc0dBQUlBOztnQkFFeERBLGlCQUFvQkE7Z0JBQ3BCQSxRQUFPQTtvQkFFSEEsS0FBS0E7d0JBQ0RBLHlCQUFvQkEsQUFBNkRBLCtCQUFDQTs7Z0NBQU9BLFFBQVFBLFVBQUlBLGdDQUFtQkEsTUFBTUEsaUVBQStDQSxJQUFJQSw4Q0FBMEJBO2dDQUFjQSxPQUFPQTsrQkFBOUtBLEtBQUlBO3dCQUN0REE7b0JBRUpBLEtBQUtBO3dCQUNEQSx5QkFBb0JBLEFBQTZEQSwrQkFBQ0E7O2dDQUFPQSxRQUFRQSxVQUFJQSxnQ0FBbUJBLE1BQU1BLGlFQUErQ0EsSUFBSUEsNkNBQXlCQTtnQ0FBY0EsUUFBUUEsVUFBSUEsZ0NBQW1CQSxNQUFNQSxtRUFBaURBLElBQUlBLDhDQUEwQkE7Z0NBQWNBLE9BQU9BOytCQUEvU0EsS0FBSUE7d0JBQ3REQTtvQkFFSkEsS0FBS0E7d0JBQ0RBLHlCQUFvQkEsQUFBNkRBLCtCQUFDQTs7Z0NBQU9BLFFBQVFBLFVBQUlBLGdDQUFtQkEsTUFBTUEseUVBQXVEQSxJQUFJQSw2Q0FBeUJBO2dDQUFlQSxRQUFRQSxVQUFJQSxnQ0FBbUJBLE1BQU1BLGlFQUErQ0EsSUFBSUEsOENBQTBCQTtnQ0FBZUEsUUFBUUEsVUFBSUEsZ0NBQW1CQSxNQUFNQSxtRUFBaURBLElBQUlBLDhDQUEwQkE7Z0NBQWVBLE9BQU9BOytCQUExYkEsS0FBSUE7d0JBQ3REQTtvQkFFSkEsS0FBS0E7d0JBQ0RBLHlCQUFvQkEsQUFBNkRBLCtCQUFDQTs7Z0NBQU9BLFFBQVFBLFVBQUlBLGdDQUFtQkEsTUFBTUEseUVBQXVEQSxJQUFJQSw2Q0FBeUJBO2dDQUFjQSxRQUFRQSxVQUFJQSxnQ0FBbUJBLE1BQU1BLHFFQUFtREEsSUFBSUEsOENBQTBCQSw0QkFBeUJBLCtCQUFDQTtvQ0FDeFdBLElBQUdBLHdEQUF3QkE7d0NBQ3ZCQSxrQ0FBcUJBOzs7Z0NBQ3hCQSxRQUFRQSxVQUFJQSxnQ0FBbUJBLE1BQU1BLHVFQUFxREEsSUFBSUEsOENBQTBCQSw0QkFBeUJBLFVBQUNBO29DQUNuSkEsVUFBVUE7O29DQUVWQTtvQ0FDQUE7b0NBQ0FBLGtEQUFxQ0E7O2dDQUNyQ0EsT0FBT0E7K0JBVG1DQSxLQUFJQTt3QkFVdERBO29CQUVKQTt3QkFDSUEsTUFBTUEsSUFBSUE7O2dCQUVsQkEsU0FBZUE7O2dCQUVmQTs7Z0JBRUFBLElBQUdBLENBQUNBO29CQUVBQSxLQUFLQSxJQUFJQSx1QkFBVUEsUUFBUUE7b0JBQzNCQTtvQkFDQUEsSUFBR0E7d0JBRUNBLElBQUdBOzRCQUNDQTs7O29CQUVSQSxJQUFHQSxDQUFDQTt3QkFFQUEsUUFBUUEscUJBQUtBO3dCQUNiQSxJQUFHQSxRQUFRQTs0QkFDUEEsUUFBUUE7Ozs7b0JBS2hCQSxZQUFZQTtvQkFDWkEsS0FBSUEsV0FBV0EsSUFBSUEsT0FBT0E7d0JBRXRCQSxVQUFVQSwrQkFBa0JBO3dCQUM1QkE7d0JBQ0FBO3dCQUNBQTt3QkFDQUEsSUFBR0EscUJBQW9CQSxvQ0FBdUJBLHFCQUFvQkE7NEJBRTlEQTs0QkFDQUE7NEJBQ0FBOzs7OztnQkFLWkEsd0JBQXdCQTs7Z0JBRXhCQTtnQkFDQUE7Z0JBQ0FBLDBCQUEwQkE7Z0JBQzFCQSxvQkFBb0NBO2dCQUNwQ0E7Z0JBQ0FBOztnQkFFQUEsaURBQXlCQSxLQUFLQTs7Z0JBRTlCQSxZQUFrQkEsa0JBQVlBO2dCQUM5QkEsS0FBSUEsWUFBV0EsS0FBSUEsY0FBY0E7b0JBRTdCQSx5QkFBTUEsSUFBTkEsVUFBV0EsK0JBQWtCQTs7O2dCQUdqQ0EsK0RBQXFDQTtnQkFDckNBLElBQUdBO29CQUVDQTtvQkFDQUE7O29CQUVBQSxtQkFBY0E7b0JBQ2RBO29CQUNBQTtvQkFDQUE7b0JBQ0FBLHFCQUFnQkE7b0JBQ2hCQTtvQkFDQUE7O29CQUVBQTtvQkFDQUE7b0JBQ0FBOztvQkFFQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7O29CQUlBQSxJQUFHQSxvQkFBb0JBO3dCQUNuQkEsb0JBQW9CQTs7b0JBQ3hCQSxJQUFHQSxvQkFBb0JBO3dCQUNuQkEsb0JBQW9CQTs7O29CQUV4QkEsY0FBY0E7b0JBQ2RBLGFBQWFBOzs7Z0JBR2pCQTs7Ozs7Z0JBS0FBOztnQkFFQUE7Z0JBQ0FBOzs7Ozs7Ozs7OztnQkM1TkFBOzs7O3lDQUdtQ0E7Z0JBRW5DQSxJQUFHQSxDQUFDQSxpQkFBWUE7b0JBRVpBLGVBQWVBLElBQUlBLHNCQUFTQTtvQkFDNUJBLG1CQUNVQSwrQ0FDa0JBO29CQUM1QkEsd0JBQXdCQTt3QkFFcEJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0JDQVJBLDBCQUFxQkEsK0JBQUNBLEtBQUtBO29CQUV2QkEsSUFBR0EscUJBQW9CQTt3QkFFbkJBLHVCQUFrQkEsSUFBSUE7OztnQkFHOUJBLG9DQUErQkEsK0JBQUNBO29CQUU1QkEsdUJBQWtCQSxJQUFJQTs7Ozs7aUNBakJSQSxXQUFrQkE7Z0JBRXBDQSxZQUFZQTtnQkFDWkEsaUJBQVlBOzs7Z0JBd0JaQTs7dUNBR2dDQSxhQUFvQkE7Z0JBRXBEQSxJQUFHQSxvQ0FBWUE7b0JBQ1hBLGNBQVNBLGFBQWFBOzs7O2dCQUsxQkE7O3NDQUcrQkE7Z0JBRS9CQSxJQUFHQSxTQUFTQTtvQkFFUkEsaUJBQVlBO29CQUNaQTs7b0JBSUFBLElBQUdBO3dCQUVDQSxpQkFBWUEsaUJBQWVBOztvQkFFL0JBLElBQUdBLHNCQUFpQkE7d0JBRWhCQSxZQUFPQSxDQUFDQSxzQ0FBZUE7Ozs7b0NBS0ZBO2dDQUlKQTt5Q0FJVUE7Z0JBRW5DQSxJQUFHQSxDQUFDQSxpQkFBWUE7b0JBQ1pBLENBQUNBLElBQUlBLDhCQUFpQkEsaUJBQ1pBLCtDQUNrQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQzVEWkE7Ozs7Z0JBRXBCQSxJQUFHQSxxQ0FBcUNBLFFBQVFBLG1EQUFtREE7b0JBRS9GQSx5QkFBb0JBO29CQUNwQkEsdUJBQWtCQTs7Z0JBRXRCQSxRQUFRQTs7Z0JBRVJBO2dCQUNBQTs7Z0JBRUFBLFVBQVVBO2dCQUNWQSxJQUFHQTtvQkFDQ0E7OztnQkFFSkEsWUFBT0EsSUFBSUEsNEJBQVFBOztnQkFFbkJBOztnQkFFQUEsbUJBQWNBOztnQkFFZEEsV0FBV0E7O2dCQUVYQSw0Q0FDSUEsbUJBQWFBLFVBQUlBLHlDQUVOQSxpQ0FBaUNBLGdHQUcvQkEsSUFBSUEscUVBQ0hBLElBQUlBLHFIQUVsQkEsa0JBQVlBLFVBQUlBLGtFQUdIQSxJQUFJQSx3RUFDREEsK0JBQUNBO29CQUVUQSxpQ0FBNEJBLHNCQUFpQkE7MEJBR3JEQSxhQUFPQSxVQUFJQSw4R0FJRUEsSUFBSUEsNEVBRWpCQSxpQkFBV0EsVUFBSUEsbUVBR0ZBLElBQUlBLHdFQUNEQSwrQkFBQ0E7b0JBRVRBOzBCQUdSQSxlQUFTQSxVQUFJQSwrREFHQUEsSUFBSUEsc0ZBQ0RBLCtCQUFDQTtvQkFFVEEsOEJBQXlCQTswQkFFOUJBLGVBQVNBLFVBQUlBLCtEQUdIQSxJQUFJQSx1RkFDREEsK0JBQUNBO29CQUVUQSxJQUFHQSxnQ0FBMEJBLE1BQU1BO3dCQUUvQkE7O29CQUVKQSxJQUFHQSxtQkFBY0E7d0JBRWJBLGdDQUEyQkE7d0JBQzNCQTs7MEJBSVpBLGlCQUFXQSxVQUFJQSxpRUFHRkEsSUFBSUEsdUZBQ0RBLCtCQUFDQTtvQkFFVEEsa0JBQWFBO29CQUNiQSxnQ0FBMkJBO29CQUMzQkE7OztnQkFJWkE7O2dCQUVBQSxJQUFHQTtvQkFFQ0E7b0JBQ0FBOztvQkFFQUE7b0JBQ0FBOztvQkFFQUE7b0JBQ0FBOztvQkFFQUE7b0JBQ0FBO29CQUNBQTs7b0JBRUFBO29CQUNBQTtvQkFDQUE7O29CQUVBQTtvQkFDQUE7b0JBQ0FBOztvQkFFQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUE7b0JBQ0FBOzs7Z0JBR0pBLDRCQUF1QkEsK0JBQUNBLEtBQUtBO29CQUV6QkEsSUFBR0E7d0JBRUNBO3dCQUNBQTsyQkFFQ0EsSUFBR0E7d0JBRUpBLGlDQUE0QkEsc0JBQWlCQTt3QkFDN0NBLElBQUdBOzRCQUVDQTs7d0JBRUpBOzJCQUVDQSxJQUFHQTt3QkFFSkEsa0JBQWFBO3dCQUNiQTt3QkFDQUE7Ozs7Z0JBSVJBLGdDQUEyQkEsK0JBQUNBLEtBQUtBO29CQUU3QkEsSUFBR0EsOEJBQXlCQTt3QkFFeEJBLGtCQUFhQSw2QkFBZ0JBLDJCQUFzQkE7O3dCQUluREEsa0JBQWFBOztvQkFFakJBLGdDQUEyQkE7O29CQUUzQkEsSUFBR0E7d0JBQ0NBOzs7O2dCQUdSQSw2QkFBd0JBLCtCQUFDQTtvQkFFckJBLElBQUdBLDhCQUF5QkE7d0JBRXhCQSxrQkFBYUEsNkJBQWdCQSwyQkFBc0JBOzt3QkFJbkRBLGtCQUFhQTs7b0JBRWpCQSxnQ0FBMkJBO29CQUMzQkE7OztnQkFHSkEsNkNBQXNCQTs7Z0JBRXRCQSw2QkFBd0JBLCtCQUFDQTtvQkFFckJBLElBQUdBLENBQUNBLGlDQUEwQkE7d0JBRTFCQSw0Q0FBdUNBLENBQU1BOzs7O2dCQUlyREEscUJBQWdCQTs7Ozs7Z0JBdE1oQkE7O2dCQUVBQTs7Z0JBRUFBLElBQUdBO29CQUNDQTs7OztnQkFzTUpBOztnQkFFQUEsMEJBQXFCQTtnQkFDckJBO2dCQUNBQSxJQUFHQSxDQUFDQTtvQkFDQUE7O29CQUdBQSx3QkFBbUJBLGtCQUFLQSx5QkFBbUJBOzs7Ozs7Ozs7Ozs7Ozs0QkN2TW5DQTs7OztnQkFFWkEsSUFBR0EsK0JBQStCQSxRQUFRQSw2Q0FBNkNBO29CQUVuRkEseUJBQW9CQTtvQkFDcEJBLHVCQUFrQkE7OztnQkFHdEJBLG1CQUFjQTs7Z0JBRWRBLGlCQUFZQTs7Z0JBRVpBLElBQUdBO29CQUVDQSxpQkFBWUEsSUFBSUE7O29CQUloQkEsaUJBQVlBLFVBQUlBLDhCQUFVQSxnQ0FBOEJBO29CQUN4REEsMkJBQXNCQSwrQkFBQ0EsR0FBR0E7d0JBRXRCQSxJQUFHQTs0QkFFQ0E7Ozs7O2dCQUtaQSxzQkFBaUJBO2dCQUNqQkE7O2dCQUVBQTtnQkFDQUEsc0JBQWlCQSxJQUFJQTtnQkFDckJBLDBCQUFxQkEsSUFBSUE7O2dCQUV6QkEsZUFBVUEsVUFBSUEsbUVBR0RBLElBQUlBLHlGQUNEQSwrQkFBQ0E7b0JBRVRBO29CQUNBQSxJQUFHQSx1REFBNEJBO3dCQUUzQkEsc0JBQWlCQTs7d0JBRWpCQSxJQUFHQTs0QkFFQ0EsY0FBa0JBOzRCQUNsQkEsUUFBWUE7NEJBQ1pBOzRCQUNBQTs0QkFDQUEsVUFBY0EsT0FBNkJBLEFBQXdEQTs0QkFDbkdBLFlBQVlBOytCQUdYQSxJQUFHQTs0QkFFSkEsUUFBUUE7NEJBQ1JBLGVBQWVBLENBQUtBOzRCQUNwQkEsS0FBSUEsV0FBV0EsSUFBSUEsVUFBVUE7Z0NBRXpCQSxJQUFHQSxFQUFFQSxnQkFBNkNBO29DQUU5Q0EsbUNBQUVBO29DQUNGQTs7Ozs7OztnQkFReEJBO2dCQUNBQTtnQkFDQUE7O2dCQUVBQTtnQkFDQUE7Z0JBQ0FBO2dCQUNBQTs7Z0JBRUFBLCtCQUEwQkEsK0JBQUNBO29CQUV2QkEsSUFBR0Esc0RBQTRCQTt3QkFFM0JBO3dCQUNBQTt3QkFDQUE7O3dCQUlBQSxvQkFBZUEscUNBQWdDQTt3QkFDL0NBO3dCQUNBQTs7OztnQkFJUkEscUJBQWVBLGdCQUFXQTs7Ozs7Z0JBbEgxQkE7O2dCQUVBQSxZQUFlQTtnQkFDZkEsSUFBR0EsQ0FBQ0EsaUNBQTBCQTtvQkFFMUJBLDJDQUFzQ0E7O29CQUl0Q0EsSUFBR0EsQ0FBQ0EsaUNBQTBCQTt3QkFDMUJBLDJDQUFzQ0E7Ozs7Z0JBRzlDQTs7O2dCQTBHQUEsc0JBQWlCQSxrQkFBS0EseUJBQW1CQTtnQkFDekNBO2dCQUNBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJMekh1QkEsT0FBY0E7bUVBQXdCQSxPQUFPQTs7Ozs7Ozs7Ozs7Ozs7OzhCQVc3Q0EsT0FBY0EsVUFBaUJBOzs2REFBaUJBLE9BQU9BLE1BQU1BO2dCQUVwRkEsWUFBWUE7Z0JBQ1pBO2dCQUNBQTtnQkFDQUEsaUJBQWlCQTtvQkFFYkEsY0FBU0E7O2dCQUViQSxrREFBc0JBO2dCQUN0QkEsWUFBT0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQWNjQSxPQUFjQTtpRUFBd0JBLE9BQU9BOzs7Ozs7Ozs7Ozs7Ozs7OEJBVzdDQSxPQUFjQSxVQUFpQkE7OzZEQUFpQkEsT0FBT0EsTUFBTUE7Z0JBRWxGQSxZQUFZQTtnQkFDWkE7Z0JBQ0FBO2dCQUNBQSxpQkFBaUJBO29CQUFRQSxjQUFTQTs7Z0JBQ2xDQSxrREFBc0JBO2dCQUN0QkEsWUFBT0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQWNZQSxPQUFjQTsrREFBd0JBLE9BQU9BOzs7Ozs7Ozs7Ozs7Ozs7OEJBVzdDQSxPQUFjQSxVQUFpQkE7OzZEQUFpQkEsT0FBT0EsTUFBTUE7Z0JBRWhGQSxZQUFZQTtnQkFDWkE7Z0JBQ0FBO2dCQUNBQSxpQkFBaUJBO29CQUFRQSxjQUFTQTs7Z0JBQ2xDQSxrREFBc0JBO2dCQUN0QkEsWUFBT0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQWNxQkEsT0FBY0E7d0VBQXdCQSxPQUFPQTs7Ozs7Ozs7Ozs7Ozs7OzhCQVc3Q0EsT0FBY0EsVUFBaUJBOzs2REFBaUJBLE9BQU9BLE1BQU1BO2dCQUV6RkEsY0FBU0E7Z0JBQ1RBLFlBQVlBO2dCQUNaQTtnQkFDQUE7Z0JBQ0FBLGlCQUFpQkE7b0JBRWJBLGNBQVNBLDJCQUFvQkEsaUNBQWlDQTs7Z0JBRWxFQSxrREFBc0JBO2dCQUN0QkEsWUFBT0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQWlCYUEsT0FBY0E7Z0VBQXdCQSxPQUFPQTs7Ozs7Ozs7Ozs7Ozs7OzhCQVc3Q0EsT0FBY0EsVUFBaUJBOzs2REFBaUJBLE9BQU9BLE1BQU1BO2dCQUVqRkEsWUFBWUE7Z0JBQ1pBO2dCQUNBQTtnQkFDQUEsaUJBQWlCQTtvQkFJYkEsY0FBU0E7O2dCQUViQSxrREFBc0JBO2dCQUN0QkEsWUFBT0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQXVEYUEsT0FBY0E7Z0VBQXdCQSxPQUFPQTs7Ozs7Ozs7Ozs7Ozs7OzhCQVc3Q0EsT0FBY0EsVUFBaUJBOzs2REFBaUJBLE9BQU9BLE1BQU1BO2dCQUVqRkEsWUFBWUE7Z0JBQ1pBO2dCQUNBQTtnQkFDQUEsaUJBQWlCQTtvQkFFYkEsY0FBU0E7O2dCQUViQSxrREFBc0JBO2dCQUN0QkEsWUFBT0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQWlCY0EsT0FBY0E7aUVBQXdCQSxPQUFPQTs7Ozs7Ozs7Ozs7Ozs7OzhCQVc3Q0EsT0FBY0EsVUFBaUJBOzs2REFBaUJBLE9BQU9BLE1BQU1BO2dCQUVsRkEsWUFBWUE7Z0JBQ1pBO2dCQUNBQTtnQkFDQUEsaUJBQWlCQTtvQkFBUUEsY0FBU0E7O2dCQUNsQ0Esa0RBQXNCQTtnQkFDdEJBLFlBQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0QkFjWUEsT0FBY0E7K0RBQXdCQSxPQUFPQTs7Ozs7Ozs7Ozs7Ozs7OzhCQVc3Q0EsT0FBY0EsVUFBaUJBOzs2REFBaUJBLE9BQU9BLE1BQU1BO2dCQUVoRkEsWUFBWUE7Z0JBQ1pBO2dCQUNBQTtnQkFDQUEsaUJBQWlCQTtvQkFBUUEsY0FBU0E7O2dCQUNsQ0Esa0RBQXNCQTtnQkFDdEJBLFlBQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0QkE5SFlBLE9BQWNBOytEQUF3QkEsT0FBT0E7Ozs7Ozs7Ozs7Ozs7Ozs4QkFXN0NBLE9BQWNBLFVBQWlCQTs7NkRBQWlCQSxPQUFPQSxNQUFNQTtnQkFFaEZBLFlBQVlBO2dCQUNaQTtnQkFDQUE7Z0JBQ0FBLGlCQUFpQkE7b0JBRWJBLGNBQVNBOztnQkFFYkEsa0RBQXNCQTtnQkFDdEJBLFlBQU9BIiwKICAic291cmNlc0NvbnRlbnQiOiBbInVzaW5nIEJyaWRnZTtcclxudXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgZW51bSBDb21ib0JveFR5cGVzXHJcbiAgICB7XHJcbiAgICAgICAgRGVmYXVsdFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBDb250cm9sIDogSUxpc3Q8Q29udHJvbD5cclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgUmV0eXBlZC5kb20uSFRNTEVsZW1lbnQgQ29udGVudDtcclxuICAgICAgICBwdWJsaWMgc3RyaW5nIE5hbWU7XHJcbiAgICAgICAgcHVibGljIGJvb2wgSGFzUmVuZGVyZWQgPSBmYWxzZTtcclxuICAgICAgICBwdWJsaWMgY29uc3Qgc3RyaW5nIENvbnRyb2xDbGFzcyA9IFwiY29udHJvbFwiO1xyXG5cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBUb29sVGlwIF90b29sVGlwID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIEFjdGlvbjxSZXR5cGVkLmRvbS5FdmVudD4gX09uTW91c2VFbnRlclRvb2xUaXAgPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgQWN0aW9uPFJldHlwZWQuZG9tLkV2ZW50PiBfT25Nb3VzZUxlYXZlVG9vbFRpcCA9IG51bGw7XHJcblxyXG5cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBMaXN0PENvbnRyb2w+IGlubmVyTGlzdCA9IG5ldyBMaXN0PENvbnRyb2w+KCk7XHJcblxyXG4gICAgICAgIHB1YmxpYyBUb29sVGlwIFRvb2xUaXBcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3Rvb2xUaXA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKF90b29sVGlwICE9IHZhbHVlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZS5BdHRhY2hlZENvbnRyb2wgIT0gbnVsbCAmJiB2YWx1ZS5BdHRhY2hlZENvbnRyb2wgIT0gdGhpcylcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuQXR0YWNoZWRDb250cm9sID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfdG9vbFRpcCA9IHZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihfdG9vbFRpcCAhPSBudWxsICYmICghX3Rvb2xUaXAuSGVhZGluZy5Jc0VtcHR5KCkgfHwgIV90b29sVGlwLkRlc2NyaXB0aW9uLklzRW1wdHkoKSkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfT25Nb3VzZUVudGVyVG9vbFRpcCA9IChldikgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoISh0aGlzIGlzIFRvb2xUaXBDb250cm9sKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb3JtLkFjdGl2ZVRvb2xUaXAgPSBfdG9vbFRpcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX09uTW91c2VMZWF2ZVRvb2xUaXAgPSAoZXYpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCEodGhpcyBpcyBUb29sVGlwQ29udHJvbCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9ybS5BY3RpdmVUb29sVGlwID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRlbnQuYWRkRXZlbnRMaXN0ZW5lcjxSZXR5cGVkLmRvbS5FdmVudD4oXCJtb3ZlZW50ZXJcIiwgKGdsb2JhbDo6U3lzdGVtLkFjdGlvbjxnbG9iYWw6OlJldHlwZWQuZG9tLkV2ZW50PilfT25Nb3VzZUVudGVyVG9vbFRpcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRlbnQuYWRkRXZlbnRMaXN0ZW5lcjxSZXR5cGVkLmRvbS5FdmVudD4oXCJtb3VzZWxlYXZlXCIsIChnbG9iYWw6OlN5c3RlbS5BY3Rpb248Z2xvYmFsOjpSZXR5cGVkLmRvbS5FdmVudD4pX09uTW91c2VMZWF2ZVRvb2xUaXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihfT25Nb3VzZUVudGVyVG9vbFRpcCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQ29udGVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiTW91c2VFbnRlclwiLCAoZ2xvYmFsOjpTeXN0ZW0uQWN0aW9uPGdsb2JhbDo6UmV0eXBlZC5kb20uRXZlbnQ+KV9Pbk1vdXNlRW50ZXJUb29sVGlwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX09uTW91c2VFbnRlclRvb2xUaXAgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZihfT25Nb3VzZUxlYXZlVG9vbFRpcCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQ29udGVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiTW91c2VMZWF2ZVwiLCAoZ2xvYmFsOjpTeXN0ZW0uQWN0aW9uPGdsb2JhbDo6UmV0eXBlZC5kb20uRXZlbnQ+KV9Pbk1vdXNlTGVhdmVUb29sVGlwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX09uTW91c2VMZWF2ZVRvb2xUaXAgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIENvbnRyb2wgU2V0RGF0YShzdHJpbmcgbmFtZSwgc3RyaW5nIHZhbHVlKVxyXG4gICAgICAgIHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIFNldEF0dHJpYnV0ZShcImRhdGEtXCIgKyBuYW1lLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RyaW5nIEdldERhdGEoc3RyaW5nIG5hbWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gR2V0QXR0cmlidXRlKFwiZGF0YS1cIiArIG5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEFjdGlvbjxDb250cm9sPiBPblJlc2l6ZSA9IG51bGw7XHJcbiAgICAgICAgcHVibGljIEFjdGlvbjxDb250cm9sPiBPbkxvYWRlZCA9IG51bGw7ICAgICAgICBcclxuXHJcbiAgICAgICAgcHVibGljIENvbnRleHRNZW51IENvbnRleHRNZW51ID0gbnVsbDtcclxucHVibGljIFJldHlwZWQuZG9tLkNTU1N0eWxlRGVjbGFyYXRpb24gU3R5bGVcclxue1xyXG4gICAgZ2V0XHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIENvbnRlbnQuc3R5bGU7XHJcbiAgICB9XHJcbn1wdWJsaWMgUmV0eXBlZC5kb20uRE9NVG9rZW5MaXN0IENsYXNzTGlzdFxyXG57XHJcbiAgICBnZXRcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gQ29udGVudC5jbGFzc0xpc3Q7XHJcbiAgICB9XHJcbn1cclxuICAgICAgICBwdWJsaWMgQ29udHJvbCBTZXRBdHRyaWJ1dGUoc3RyaW5nIG5hbWUsIFVuaW9uPHN0cmluZywgaW50LCBmbG9hdD4gdmFsdWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLkNvbnRlbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlLlRvU3RyKCkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RyaW5nIEdldEF0dHJpYnV0ZShzdHJpbmcgbmFtZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkNvbnRlbnQuZ2V0QXR0cmlidXRlKG5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGludCBHZXRBdHRyaWJ1dGVpKHN0cmluZyBuYW1lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNjcmlwdC5QYXJzZUludCh0aGlzLkNvbnRlbnQuZ2V0QXR0cmlidXRlKG5hbWUpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBmbG9hdCBHZXRBdHRyaWJ1dGVmKHN0cmluZyBuYW1lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIChmbG9hdClTY3JpcHQuUGFyc2VGbG9hdCh0aGlzLkNvbnRlbnQuZ2V0QXR0cmlidXRlKG5hbWUpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBGb3JtIExpbmtlZEZvcm0gPSBudWxsO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBCYXNlQ2xhc3MoYm9vbCBhZGQgPSB0cnVlLCBib29sIGFjID0gdHJ1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBhYyA/IChhZGQgPyBcIiBcIiArIENvbnRyb2xDbGFzcyA6XHJcbiAgICAgICAgICAgICAgICBDb250cm9sQ2xhc3MpIDogXCJcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBVbmlvbjxzdHJpbmcsIGludCwgZmxvYXQ+IFdpZHRoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gdGhpcy5Db250ZW50LnN0eWxlLndpZHRoOyB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgeCA9IHZhbHVlLlRvSHRtbFZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICB4ID0gVmVjdG9yMi5wZih4KTtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuQ29udGVudC5zdHlsZS53aWR0aCAhPSB4KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQ29udGVudC5zdHlsZS53aWR0aCA9IHg7XHJcbiAgICAgICAgICAgICAgICAgICAgT25TaXplQ2hhbmdlZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgVW5pb248c3RyaW5nLCBpbnQsIGZsb2F0PiBIZWlnaHRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiB0aGlzLkNvbnRlbnQuc3R5bGUuaGVpZ2h0OyB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgeCA9IHZhbHVlLlRvSHRtbFZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICB4ID0gVmVjdG9yMi5wZih4KTtcclxuICAgICAgICAgICAgICAgIGlmKHggIT0gdGhpcy5Db250ZW50LnN0eWxlLmhlaWdodClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkNvbnRlbnQuc3R5bGUuaGVpZ2h0ID0geDtcclxuICAgICAgICAgICAgICAgICAgICBPblNpemVDaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBVbmlvbjxzdHJpbmcsIGludCwgZmxvYXQ+IExlZnRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiB0aGlzLkNvbnRlbnQuc3R5bGUubGVmdDsgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIHggPSB2YWx1ZS5Ub0h0bWxWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgeCA9IFZlY3RvcjIucGYoeCk7XHJcbiAgICAgICAgICAgICAgICBpZih4ICE9IHRoaXMuQ29udGVudC5zdHlsZS5sZWZ0KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQ29udGVudC5zdHlsZS5sZWZ0ID0geDtcclxuICAgICAgICAgICAgICAgICAgICBPbkxvY2F0aW9uQ2hhbmdlZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgVW5pb248c3RyaW5nLCBpbnQsIGZsb2F0PiBUb3BcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiB0aGlzLkNvbnRlbnQuc3R5bGUudG9wOyB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgeCA9IHZhbHVlLlRvSHRtbFZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICB4ID0gVmVjdG9yMi5wZih4KTtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuQ29udGVudC5zdHlsZS50b3AgIT0geClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkNvbnRlbnQuc3R5bGUudG9wID0geDtcclxuICAgICAgICAgICAgICAgICAgICBPbkxvY2F0aW9uQ2hhbmdlZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCB2b2lkIE9uTG9jYXRpb25DaGFuZ2VkKClcclxuICAgICAgICB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCB2b2lkIE9uU2l6ZUNoYW5nZWQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBWZWN0b3IyIFNpemVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBuZXcgVmVjdG9yMih0aGlzLldpZHRoLCB0aGlzLkhlaWdodCk7IH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuV2lkdGggPSB2YWx1ZS5YO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5IZWlnaHQgPSB2YWx1ZS5ZO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgVmVjdG9yMiBMb2NhdGlvblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIG5ldyBWZWN0b3IyKHRoaXMuTGVmdCwgdGhpcy5Ub3ApOyB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkxlZnQgPSB2YWx1ZS5YO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5Ub3AgPSB2YWx1ZS5ZO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgVmVjdG9yNCBCb3VuZHNcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBuZXcgVmVjdG9yNCh0aGlzLkxlZnQsIHRoaXMuVG9wLCB0aGlzLldpZHRoLCB0aGlzLkhlaWdodCk7IH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuTGVmdCA9IHZhbHVlLlg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLlRvcCA9IHZhbHVlLlk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLldpZHRoID0gdmFsdWUuWjtcclxuICAgICAgICAgICAgICAgIHRoaXMuSGVpZ2h0ID0gdmFsdWUuTTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGludCBDb3VudFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEV4Y2VwdGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBJc1JlYWRPbmx5XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEltcGxlbWVudGVkRXhjZXB0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBDb250cm9sIHRoaXNbaW50IGluZGV4XVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEV4Y2VwdGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEltcGxlbWVudGVkRXhjZXB0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEdldEltYWdlU3RyaW5nKHN0cmluZyBzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5Gb3JtYXQoXCJ1cmwoJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCx7MH0nKSBuby1yZXBlYXRcIiwgcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBHZXRQZGZTdHJpbmcoc3RyaW5nIHMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLkZvcm1hdChcImRhdGE6YXBwbGljYXRpb24vcGRmO2Jhc2U2NCx7MH1cIiwgcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBHZXRJbWFnZVN0cmluZ1VSSShzdHJpbmcgcywgYm9vbCB1c2VSZXNvdXJjZVVSTCA9IHRydWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLkZvcm1hdChcInVybCgnezB9ezF9Jykgbm8tcmVwZWF0XCIsIHVzZVJlc291cmNlVVJMID8gU2V0dGluZ3MuUmVzb3VyY2VVUkwgOiBcIlwiLCBzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBDb250cm9sKGJvb2wgYWMgPSB0cnVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ29udGVudCA9IERpdihhYyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgQ29udHJvbChSZXR5cGVkLmRvbS5IVE1MRWxlbWVudCBlbGVtZW50KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ29udGVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgQ29udHJvbChzdHJpbmcgY24sIGJvb2wgYWMgPSB0cnVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ29udGVudCA9IERpdihjbiwgYWMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBwdWJsaWMgQ29udHJvbChzdHJpbmcgY24sIENvbWJvQm94VHlwZXMgY3QsIGJvb2wgYWMgPSB0cnVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ29udGVudCA9IENvbWJvQm94KGNuLCBjdCwgYWMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIENvbnRyb2woc3RyaW5nIGNuLCBib29sIElzSW5wdXQsIHN0cmluZyBpdCwgYm9vbCBhYyA9IHRydWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDb250ZW50ID0gKElzSW5wdXQgPyAoUmV0eXBlZC5kb20uSFRNTEVsZW1lbnQpSW5wdXQoY24sIGl0LCBhYykgOiAoUmV0eXBlZC5kb20uSFRNTEVsZW1lbnQpQnV0dG9uKGNuLCBpdCwgYWMpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2aXJ0dWFsIHZvaWQgUmVuZGVyKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEhhc1JlbmRlcmVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgUmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQgRGl2KGJvb2wgYWMgPSB0cnVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXR5cGVkLmRvbS5IVE1MRGl2RWxlbWVudCgpIHsgY2xhc3NOYW1lID0gQmFzZUNsYXNzKGZhbHNlLCBhYykgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgUmV0eXBlZC5kb20uSFRNTFNwYW5FbGVtZW50IFNwYW4oYm9vbCBhYyA9IHRydWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJldHlwZWQuZG9tLkhUTUxTcGFuRWxlbWVudCgpIHsgY2xhc3NOYW1lID0gQmFzZUNsYXNzKGZhbHNlLCBhYykgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgUmV0eXBlZC5kb20uSFRNTFNwYW5FbGVtZW50IExhYmVsKHN0cmluZyBDYXB0aW9uLCBmbG9hdCBYLCBmbG9hdCBZLCBib29sIElzQm9sZCA9IGZhbHNlLCBib29sIElzVGlueSA9IGZhbHNlLCBib29sIGFjID0gdHJ1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBsYmwgPSBuZXcgUmV0eXBlZC5kb20uSFRNTFNwYW5FbGVtZW50KCkgeyBjbGFzc05hbWUgPSBCYXNlQ2xhc3MoZmFsc2UsIGFjKSB9O1xyXG5cclxuICAgICAgICAgICAgbGJsLmlubmVySFRNTCA9IENhcHRpb24uSHRtbEVzY2FwZSgpO1xyXG4gICAgICAgICAgICBsYmwuU2V0TG9jYXRpb24oWCwgWSk7XHJcbiAgICAgICAgICAgIFNldEJUKGxibCwgSXNCb2xkLCBJc1RpbnkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGxibDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgUmV0eXBlZC5kb20uSFRNTFNwYW5FbGVtZW50IExhYmVsKHN0cmluZyBDYXB0aW9uLCBmbG9hdCBYLCBmbG9hdCBZLCBmbG9hdCB3aWR0aCwgZmxvYXQgaGVpZ2h0LCBib29sIElzQm9sZCA9IGZhbHNlLCBib29sIElzVGlueSA9IGZhbHNlLCBzdHJpbmcgY2xhc3NyID0gXCJcIiwgc3RyaW5nIEFsaWdubWVudCA9IFwibGVmdFwiLCBzdHJpbmcgRm9yZWNvbG9yID0gbnVsbCwgYm9vbCBhYyA9IHRydWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgbGJsID0gbmV3IFJldHlwZWQuZG9tLkhUTUxTcGFuRWxlbWVudCgpIHsgY2xhc3NOYW1lID0gY2xhc3NyICsgQmFzZUNsYXNzKCFzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKGNsYXNzciksIGFjKSB9O1xyXG5cclxuICAgICAgICAgICAgbGJsLmlubmVySFRNTCA9IENhcHRpb24uSHRtbEVzY2FwZSgpO1xyXG4gICAgICAgICAgICBsYmwuU2V0Qm91bmRzKFgsIFksIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICBpZihBbGlnbm1lbnQgIT0gXCJsZWZ0XCIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxibC5zdHlsZS50ZXh0QWxpZ24gPSBBbGlnbm1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgU2V0QlQobGJsLCBJc0JvbGQsIElzVGlueSk7XHJcbiAgICAgICAgICAgIGlmKEZvcmVjb2xvciAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYmwuc3R5bGUuY29sb3IgPSBGb3JlY29sb3I7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBsYmw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50IERpdkxhYmVsKHN0cmluZyBDYXB0aW9uLCBmbG9hdCBYLCBmbG9hdCBZLCBmbG9hdCB3aWR0aCwgYm9vbCBJc0JvbGQgPSBmYWxzZSwgYm9vbCBJc1RpbnkgPSBmYWxzZSwgc3RyaW5nIGNsYXNzciA9IFwiXCIsIHN0cmluZyBBbGlnbm1lbnQgPSBcImxlZnRcIiwgc3RyaW5nIEZvcmVjb2xvciA9IG51bGwsIGJvb2wgYWMgPSB0cnVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGxibCA9IG5ldyBSZXR5cGVkLmRvbS5IVE1MRGl2RWxlbWVudCgpO1xyXG4gICAgICAgICAgICBsYmwuY2xhc3NOYW1lID0gY2xhc3NyICsgQmFzZUNsYXNzKCFzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKGNsYXNzciksIGFjKTtcclxuICAgICAgICAgICAgbGJsLnRleHRDb250ZW50ID0gQ2FwdGlvbjtcclxuICAgICAgICAgICAgbGJsLnN0eWxlLmxlZnQgPSBYLlRvUHgoKTtcclxuICAgICAgICAgICAgbGJsLnN0eWxlLnRvcCA9IFkuVG9QeCgpO1xyXG4gICAgICAgICAgICBsYmwuc3R5bGUud2lkdGggPSB3aWR0aC5Ub1B4KCk7XHJcblxyXG4gICAgICAgICAgICBpZihBbGlnbm1lbnQgIT0gXCJsZWZ0XCIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKEFsaWdubWVudCA9PSBcInJpZ2h0XCIpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGJsLnN0eWxlLmRpcmVjdGlvbiA9IFwicnRsXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGJsLnN0eWxlLnRleHRBbGlnbiA9IEFsaWdubWVudDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihJc0JvbGQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxibC5zdHlsZS5mb250V2VpZ2h0ID0gXCJib2xkXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoSXNUaW55KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYmwuc3R5bGUuZm9udFNpemUgPSBcIjYuNzVwdFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKEZvcmVjb2xvciAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYmwuc3R5bGUuY29sb3IgPSBGb3JlY29sb3I7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBsYmw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFJldHlwZWQuZG9tLkhUTUxTcGFuRWxlbWVudCBMYWJlbChzdHJpbmcgQ2FwdGlvbiwgZmxvYXQgWCwgZmxvYXQgWSwgZmxvYXQgd2lkdGgsIGJvb2wgSXNCb2xkID0gZmFsc2UsIGJvb2wgSXNUaW55ID0gZmFsc2UsIHN0cmluZyBjbGFzc3IgPSBcIlwiLCBzdHJpbmcgQWxpZ25tZW50ID0gXCJsZWZ0XCIsIHN0cmluZyBGb3JlY29sb3IgPSBudWxsLCBib29sIGFjID0gdHJ1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBsYmwgPSBuZXcgUmV0eXBlZC5kb20uSFRNTFNwYW5FbGVtZW50KCk7XHJcbiAgICAgICAgICAgIGxibC5jbGFzc05hbWUgPSBjbGFzc3IgKyBCYXNlQ2xhc3MoIXN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoY2xhc3NyKSwgYWMpO1xyXG4gICAgICAgICAgICBsYmwudGV4dENvbnRlbnQgPSBDYXB0aW9uO1xyXG4gICAgICAgICAgICBsYmwuc3R5bGUubGVmdCA9IFguVG9QeCgpO1xyXG4gICAgICAgICAgICBsYmwuc3R5bGUudG9wID0gWS5Ub1B4KCk7XHJcbiAgICAgICAgICAgIGxibC5zdHlsZS53aWR0aCA9IHdpZHRoLlRvUHgoKTtcclxuXHJcbiAgICAgICAgICAgIGlmKEFsaWdubWVudCAhPSBcImxlZnRcIilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoQWxpZ25tZW50ID09IFwicmlnaHRcIilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBsYmwuc3R5bGUuZGlyZWN0aW9uID0gXCJydGxcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBsYmwuc3R5bGUudGV4dEFsaWduID0gQWxpZ25tZW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFNldEJUKGxibCwgSXNCb2xkLCBJc1RpbnkpO1xyXG4gICAgICAgICAgICBpZihGb3JlY29sb3IgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGJsLnN0eWxlLmNvbG9yID0gRm9yZWNvbG9yO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbGJsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgRm9jdXMoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgUmV0eXBlZC5kb20uc2V0VGltZW91dCgoZ2xvYmFsOjpSZXR5cGVkLmRvbS5zZXRUaW1lb3V0Rm4pbmV3IFJldHlwZWQuZG9tLnNldFRpbWVvdXRGbigoYSkgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5Db250ZW50LmZvY3VzKCk7XHJcbiAgICAgICAgICAgIH0pLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHZvaWQgU2V0QlQoUmV0eXBlZC5kb20uSFRNTFNwYW5FbGVtZW50IGxibCwgYm9vbCBJc0JvbGQsIGJvb2wgSXNUaW55KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoSXNCb2xkKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYmwuc3R5bGUuZm9udFdlaWdodCA9IFwiYm9sZFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKElzVGlueSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGJsLnN0eWxlLmZvbnRTaXplID0gXCI2Ljc1cHRcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBSZXR5cGVkLmRvbS5IVE1MU3BhbkVsZW1lbnQgTGFiZWwoc3RyaW5nIGMsIGZsb2F0IFgsIGZsb2F0IFksIGZsb2F0IHdpZHRoLCBmbG9hdCBoZWlnaHQsIGJvb2wgSXNCb2xkID0gZmFsc2UsIGJvb2wgSXNUaW55ID0gZmFsc2UsIHN0cmluZyBjbGFzc3IgPSBcIlwiLCBib29sIGFjID0gdHJ1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBsYmwgPSBuZXcgUmV0eXBlZC5kb20uSFRNTFNwYW5FbGVtZW50KCkgeyBjbGFzc05hbWUgPSBjbGFzc3IgKyBCYXNlQ2xhc3MoIXN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoY2xhc3NyKSwgYWMpIH07XHJcblxyXG4gICAgICAgICAgICBsYmwuaW5uZXJIVE1MID0gYy5IdG1sRXNjYXBlKCk7XHJcbiAgICAgICAgICAgIGxibC5TZXRCb3VuZHMoWCwgWSwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgIFNldEJUKGxibCwgSXNCb2xkLCBJc1RpbnkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGxibDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgUmV0eXBlZC5kb20uSFRNTFNwYW5FbGVtZW50IExhYmVsKHN0cmluZyBjLCBpbnQgWCwgaW50IFksIGludCB3aWR0aCwgYm9vbCBJc0JvbGQgPSBmYWxzZSwgYm9vbCBJc1RpbnkgPSBmYWxzZSwgc3RyaW5nIGNsYXNzciA9IFwiXCIsIGJvb2wgYWMgPSB0cnVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGxibCA9IG5ldyBSZXR5cGVkLmRvbS5IVE1MU3BhbkVsZW1lbnQoKSB7IGNsYXNzTmFtZSA9IGNsYXNzciArIEJhc2VDbGFzcyghc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShjbGFzc3IpLCBhYykgfTtcclxuXHJcbiAgICAgICAgICAgIGxibC5pbm5lckhUTUwgPSBjLkh0bWxFc2NhcGUoKTtcclxuICAgICAgICAgICAgbGJsLlNldExvY2F0aW9uKFgsIFkpO1xyXG4gICAgICAgICAgICBsYmwuc3R5bGUud2lkdGggPSB3aWR0aC5Ub1B4KCk7XHJcbiAgICAgICAgICAgIFNldEJUKGxibCwgSXNCb2xkLCBJc1RpbnkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGxibDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgUmV0eXBlZC5kb20uSFRNTFNwYW5FbGVtZW50IExhYmVsKHN0cmluZyBjLCBpbnQgWCwgaW50IFksIGJvb2wgSXNCb2xkID0gZmFsc2UsIGJvb2wgSXNUaW55ID0gZmFsc2UsIGJvb2wgYWMgPSB0cnVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIExhYmVsKGMsIChmbG9hdClYLCAoZmxvYXQpWSwgSXNCb2xkLCBJc1RpbnksIGFjKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgUmV0eXBlZC5kb20uSFRNTFNwYW5FbGVtZW50IFNwYW4oc3RyaW5nIGNuLCBib29sIGFjID0gdHJ1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmV0eXBlZC5kb20uSFRNTFNwYW5FbGVtZW50KCkgeyBjbGFzc05hbWUgPSBjbiArIEJhc2VDbGFzcyh0cnVlLCBhYykgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgUmV0eXBlZC5kb20uSFRNTFNlbGVjdEVsZW1lbnQgQ29tYm9Cb3goc3RyaW5nIGNuLCBDb21ib0JveFR5cGVzIGN0LCBib29sIGFjID0gdHJ1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBjb21ibyA9IG5ldyBSZXR5cGVkLmRvbS5IVE1MU2VsZWN0RWxlbWVudCgpIHsgY2xhc3NOYW1lID0gY24gKyBCYXNlQ2xhc3ModHJ1ZSwgYWMpIH07XHJcbiAgICAgICAgICAgIGlmKGN0ID09IENvbWJvQm94VHlwZXMuRGVmYXVsdClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjb21ibztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgUmV0eXBlZC5kb20uSFRNTEJ1dHRvbkVsZW1lbnQgQnV0dG9uKHN0cmluZyBjbiwgc3RyaW5nIGJ0LCBib29sIGFjID0gdHJ1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmV0eXBlZC5kb20uSFRNTEJ1dHRvbkVsZW1lbnQoKSB7IGNsYXNzTmFtZSA9IGNuICsgQmFzZUNsYXNzKHRydWUsIGFjKSwgdHlwZSA9IGJ0IH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50IERpdihzdHJpbmcgY24sIGJvb2wgYWMgPSB0cnVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXR5cGVkLmRvbS5IVE1MRGl2RWxlbWVudCgpIHsgY2xhc3NOYW1lID0gY24gKyBCYXNlQ2xhc3ModHJ1ZSwgYWMpIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFJldHlwZWQuZG9tLkhUTUxJbnB1dEVsZW1lbnQgSW5wdXQoc3RyaW5nIGNuLCBzdHJpbmcgaXQsIGJvb2wgYWMgPSB0cnVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gbmV3IFJldHlwZWQuZG9tLkhUTUxJbnB1dEVsZW1lbnQoKTtcclxuICAgICAgICAgICAgaW5wdXQuY2xhc3NOYW1lID0gY24gKyBCYXNlQ2xhc3MoIXN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoY24pLCBhYyk7XHJcbiAgICAgICAgICAgIGR5bmFtaWMgdHkgPSBpdDtcclxuICAgICAgICAgICAgaWYoQnJvd3Nlci5Jc0lFICYmICh0eSA9PSBcInRleHRcIiB8fCB0eSA9PSBcImRhdGVcIiB8fCB0eSA9PSBcImNvbG9yXCIgfHwgdHkgPT0gMTkgfHwgdHkgPT0gMyB8fCB0eSA9PSAyKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlucHV0LnR5cGUgPSBpdDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCB2aXJ0dWFsIFJldHlwZWQuZG9tLkhUTUxFbGVtZW50IEdldENvbnRyb2xCYXNlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBDb250ZW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgUmV0eXBlZC5kb20uSFRNTENhbnZhc0VsZW1lbnQgY3ZhID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBSZXR1cm5zIFRleHQgTWV0cmljcyBmb3IgYSBnaXZlbiBzdHJpbmdcclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInRcIj50aGUgc3RyaW5nPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJmXCI+dGhlIGZvbnQgdXNlZDwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxyZXR1cm5zPlRleHRNZXRyaWNzPC9yZXR1cm5zPlxyXG5cdFx0cHVibGljIHN0YXRpYyBSZXR5cGVkLmRvbS5UZXh0TWV0cmljcyBHZXRUZXh0TWV0cmljcyhzdHJpbmcgdCwgc3RyaW5nIGYpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihmID09IFwiXCIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGYgPSBcIjguMjVwdCBUYWhvbWFcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgYyA9IChjdmEgPz8gKGN2YSA9IG5ldyBSZXR5cGVkLmRvbS5IVE1MQ2FudmFzRWxlbWVudCgpKSkuZ2V0Q29udGV4dChcIjJkXCIpLkFzPFJldHlwZWQuZG9tLkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRD4oKTtcclxuICAgICAgICAgICAgYy5mb250ID0gZjtcclxuICAgICAgICAgICAgcmV0dXJuIGMubWVhc3VyZVRleHQodCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIFJldHVybnMgdGV4dCB3aWR0aFxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwidFwiPnRoZSBzdHJpbmc8L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImZcIj50aGUgZm9udCB1c2VkPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHJldHVybnM+ZG91YmxlPC9yZXR1cm5zPlxyXG5cdFx0cHVibGljIHN0YXRpYyBkb3VibGUgR2V0VGV4dFdpZHRoKHN0cmluZyB0LCBzdHJpbmcgZilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBHZXRUZXh0TWV0cmljcyh0LCBmKS53aWR0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW1wbGljaXQgb3BlcmF0b3IgUmV0eXBlZC5kb20uTm9kZShDb250cm9sIGNvbnRyb2wpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihTZXR0aW5ncy5BdXRvUmVuZGVyICYmICFjb250cm9sLkhhc1JlbmRlcmVkKVxyXG4gICAgICAgICAgICAgICAgY29udHJvbC5SZW5kZXIoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRyb2wuQ29udGVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIENoYW5nZVN0YXRlKGJvb2wgcywgc3RyaW5nIHNmID0gXCJkaXNhYmxlZFwiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYocylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQ29udGVudC5jbGFzc0xpc3QucmVtb3ZlKHNmKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIENvbnRlbnQuY2xhc3NMaXN0LmFkZChzZik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbnQgSW5kZXhPZihDb250cm9sIGl0ZW0pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5uZXJMaXN0LkluZGV4T2YoaXRlbSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBJbnNlcnQoaW50IGluZGV4LCBDb250cm9sIGl0ZW0pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgY29udGVudCA9IEdldENvbnRyb2xCYXNlKCk7XHJcbiAgICAgICAgICAgIGlubmVyTGlzdC5JbnNlcnQoaW5kZXgsIGl0ZW0pO1xyXG4gICAgICAgICAgICBjb250ZW50Lmluc2VydEJlZm9yZTxSZXR5cGVkLmRvbS5IVE1MRWxlbWVudD4oaXRlbS5Db250ZW50LCAoUmV0eXBlZC5kb20uTm9kZSljb250ZW50LmNoaWxkTm9kZXNbaW5kZXhdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFJlbW92ZUF0KGludCBpbmRleClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBjb250cm9sID0gaW5uZXJMaXN0W2luZGV4XTtcclxuICAgICAgICAgICAgUmVtb3ZlKGNvbnRyb2wpOyAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQWRkKENvbnRyb2wgaXRlbSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlubmVyTGlzdC5BZGQoaXRlbSk7XHJcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gR2V0Q29udHJvbEJhc2UoKTtcclxuICAgICAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZDxIVE1MRWxlbWVudD4oaXRlbS5Db250ZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIENvcHlUbyhDb250cm9sW10gYXJyYXksIGludCBhcnJheUluZGV4KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW5uZXJMaXN0LkNvcHlUbyhhcnJheSwgYXJyYXlJbmRleCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBDbGVhcigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbm5lckxpc3QuQ2xlYXIoKTtcclxuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBHZXRDb250cm9sQmFzZSgpO1xyXG4gICAgICAgICAgICBjb250ZW50LkVtcHR5KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBDb250YWlucyhDb250cm9sIGl0ZW0pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5uZXJMaXN0LkNvbnRhaW5zKGl0ZW0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgUmVtb3ZlKENvbnRyb2wgaXRlbSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlubmVyTGlzdC5SZW1vdmUoaXRlbSk7XHJcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gR2V0Q29udHJvbEJhc2UoKTtcclxuICAgICAgICAgICAgY29udGVudC5yZW1vdmVDaGlsZDxIVE1MRWxlbWVudD4oaXRlbS5Db250ZW50KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIElFbnVtZXJhdG9yPENvbnRyb2w+IEdldEVudW1lcmF0b3IoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlubmVyTGlzdC5HZXRFbnVtZXJhdG9yKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBJRW51bWVyYXRvciBJRW51bWVyYWJsZS5HZXRFbnVtZXJhdG9yKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbm5lckxpc3QuR2V0RW51bWVyYXRvcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIEJyaWRnZTtcclxudXNpbmcgU3lzdGVtO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgQXBwXHJcbiAgICB7XHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBNYWluKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFJldHlwZWQuZG9tLmRvY3VtZW50LmhlYWQuQXBwZW5kQ2hpbGQobmV3IFJldHlwZWQuZG9tLkhUTUxMaW5rRWxlbWVudCgpIHsgaWQgPSBcIkV4cHJlc3NDcmFmdFwiLCByZWwgPSBcIlN0eWxlc2hlZXRcIiwgdHlwZSA9IFwidGV4dC9jc3NcIiwgaHJlZiA9IFwiZGF0YTp0ZXh0L2NzcztiYXNlNjQsXCIgKyBTZXR0aW5ncy5FeHByZXNzQ3JhZnRDc3NCYXNlNjQgfSk7XHJcbiAgICAgICAgICAgIFNldHRpbmdzLlNldHVwKCk7XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFRlc3QgR3JpZC4uLlxyXG4gICAgICAgICAgICAvL3ZhciB4ID0gbmV3IEZvcm0oKTtcclxuXHJcbiAgICAgICAgICAgIC8vdmFyIGdyaWQgPSBuZXcgR3JpZFZpZXcoKTtcclxuXHJcbiAgICAgICAgICAgIC8vdmFyIHJzID0gbmV3IERhdGFUYWJsZSgpO1xyXG4gICAgICAgICAgICAvL3JzLkFkZENvbHVtbihcIkFcIiwgRGF0YVR5cGUuSW50ZWdlcik7XHJcbiAgICAgICAgICAgIC8vcnMuQWRkQ29sdW1uKFwiQlwiLCBEYXRhVHlwZS5JbnRlZ2VyKTtcclxuICAgICAgICAgICAgLy9ycy5BZGRDb2x1bW4oXCJDXCIsIERhdGFUeXBlLkludGVnZXIpO1xyXG4gICAgICAgICAgICAvL3JzLkFkZENvbHVtbihcIkRcIiwgRGF0YVR5cGUuSW50ZWdlcik7XHJcbiAgICAgICAgICAgIC8vcnMuQWRkQ29sdW1uKFwiRVwiLCBEYXRhVHlwZS5JbnRlZ2VyKTtcclxuICAgICAgICAgICAgLy9ycy5BZGRDb2x1bW4oXCJGXCIsIERhdGFUeXBlLkludGVnZXIpO1xyXG4gICAgICAgICAgICAvL3JzLkFkZENvbHVtbihcIkdcIiwgRGF0YVR5cGUuSW50ZWdlcik7XHJcblxyXG4gICAgICAgICAgICAvL3ZhciBybmQgPSBuZXcgUmFuZG9tKCk7XHJcblxyXG4gICAgICAgICAgICAvL2ZvciAoaW50IGkgPSAwOyBpIDwgMTAwOyBpKyspXHJcbiAgICAgICAgICAgIC8veyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gICAgcnMuQWRkUm93KHJuZC5OZXh0KCksIHJuZC5OZXh0KCksIHJuZC5OZXh0KCksIHJuZC5OZXh0KCksIHJuZC5OZXh0KCksIHJuZC5OZXh0KCksIHJuZC5OZXh0KCkpO1xyXG4gICAgICAgICAgICAvL31cclxuXHJcbiAgICAgICAgICAgIC8vZ3JpZC5TZXRCb3VuZHNGdWxsKCk7XHJcbiAgICAgICAgICAgIC8vZ3JpZC5EYXRhU291cmNlID0gcnM7XHJcblxyXG4gICAgICAgICAgICAvL3guTGlua2NoaWxkVG9Gb3JtKGdyaWQpO1xyXG5cclxuICAgICAgICAgICAgLy94LkFwcGVuZENoaWxkKGdyaWQpO1xyXG5cclxuICAgICAgICAgICAgLy9BcHBsaWNhdGlvbi5SdW4oeCk7XHJcblxyXG4gICAgICAgICAgIC8vIC8vdmFyIGZybSA9IG5ldyBGb3JtKCkgeyBTaXplID0gbmV3IFZlY3RvcjIoNTAwLCA1MDApLCBTdGFydFBvc2l0aW9uID0gRm9ybVN0YXJ0UG9zaXRpb24uQ2VudGVyIH07XHJcblxyXG4gICAgICAgICAgIC8vLy8gdmFyIHggPSBuZXcgVGVzdCgpO1xyXG4gICAgICAgICAgIC8vLy8geC5TZXRCb3VuZHNGdWxsKCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgIC8vLy8gZnJtLkFwcGVuZENoaWxkKHgpO1xyXG5cclxuICAgICAgICAgICAvLy8vIGZybS5MaW5rY2hpbGRUb0Zvcm0oeCk7XHJcbiAgICAgICAgICAgLy8gICAgICAgICAgICAgdmFyIHggPSBuZXcgU2hlZXQoKTtcclxuICAgICAgICAgICAvLyB4LlNldEJvdW5kc0Z1bGwoKTtcclxuICAgICAgICAgICAvLyB4LkJlZ2luRGF0YVVwZGF0ZSgpO1xyXG4gICAgICAgICAgIC8vIGZvcihpbnQgeDEgPSAwOyB4MSA8IDI2OyB4MSsrKVxyXG4gICAgICAgICAgIC8vIHtcclxuICAgICAgICAgICAvLyAgICAgZm9yKGludCB5ID0gMDsgeSA8IDEwMDA7IHkrKylcclxuICAgICAgICAgICAvLyAgICAge1xyXG4gICAgICAgICAgIC8vICAgICAgICAgeFt4MSwgeV0uVmFsdWUgPSAkXCJ7eDF9Ont5fVwiO1xyXG4gICAgICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAgICAvLyBmcm0uTGlua2NoaWxkVG9Gb3JtKHgpO1xyXG5cclxuICAgICAgICAgICAvLyBmcm0uQXBwZW5kQ2hpbGQoeCk7XHJcblxyXG4gICAgICAgICAgIC8vIGZybS5TaG93KCk7XHJcblxyXG4gICAgICAgICAgIC8vIHguRW5kRGF0YVVwZGF0ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9wdWJsaWMgY2xhc3MgVGVzdCA6IENhbnZhc0NvbnRyb2xcclxuICAgICAgICAvL3tcclxuICAgICAgICAvLyAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBPblBhaW50KClcclxuICAgICAgICAvLyAgICB7XHJcbiAgICAgICAgLy8gICAgICAgIHZhciBnID0gQ3JlYXRlR3JhcGhpY3MoKTtcclxuICAgICAgICAvLyAgICAgICAgdmFyIHJuZCA9IG5ldyBSYW5kb20oKTtcclxuICAgICAgICAvLyAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IDEwMDsgaSsrKVxyXG4gICAgICAgIC8vICAgICAgICB7XHJcbiAgICAgICAgLy8gICAgICAgICAgICBnLkRyYXdMaW5lKG5ldyBQZW4oQ29sb3IuRnJvbUFyZ2Iocm5kLk5leHQoKSkpLCBybmQuTmV4dCgxMCwgMzAwKSwgcm5kLk5leHQoMTAsIDMwMCksIHJuZC5OZXh0KDEwLCAzMDApLCBybmQuTmV4dCgxMCwgMzAwKSk7XHJcbiAgICAgICAgLy8gICAgICAgIH1cclxuICAgICAgICAvLyAgICAgICAgZy5EcmF3U3RyaW5nKFwiSGVsbG8gV29ybGRcIiwgbmV3IEZvbnQoXCJBcmlhbCAxMHB0XCIpLCBuZXcgU29saWRCcnVzaChDb2xvci5CbGFjayksIDUwLCA1MCk7XHJcblxyXG4gICAgICAgIC8vICAgICAgICBnLkRyYXdFbGxpcHNlKG5ldyBQZW4oQ29sb3IuUmVkLCAyKSwgMTAwLCAxMDAsIDUwLCA1MCk7XHJcblxyXG4gICAgICAgIC8vICAgICAgICBnLkZpbGxFbGxpcHNlKG5ldyBTb2xpZEJydXNoKENvbG9yLkdyZWVuKSwgMTAwLCAyMDAsIDUwLCA1MCk7XHJcblxyXG4gICAgICAgIC8vICAgICAgICB2YXIgc2l6ZSA9IGcuTWVhc3VyZVN0cmluZyhcIkhlbGxvIFdvcmxkXCIsIG5ldyBGb250KFwiQXJpYWwgMTFwdFwiKSk7XHJcblxyXG4gICAgICAgIC8vICAgICAgICBnLkRyYXdTdHJpbmcoc2l6ZS5Ub1N0cmluZygpLCBuZXcgRm9udChcIkFyaWFsIDExcHRcIiksIG5ldyBTb2xpZEJydXNoKENvbG9yLkJsYWNrKSwgMjAwLCA1MCk7XHJcblxyXG4gICAgICAgIC8vICAgICAgICBiYXNlLk9uUGFpbnQoKTtcclxuICAgICAgICAvLyAgICB9XHJcbiAgICAgICAgLy99XHJcbiAgICB9XHJcbn0iLCJcclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgZW51bSBBcHBsaWNhdGlvbkRlZml0bmlvblxyXG4gICAge1xyXG4gICAgICAgIE5vbmUsXHJcbiAgICAgICAgQnJvd3NlckNvbnNvbGUsXHJcbiAgICAgICAgQnJpZGdlQ29uc29sZSxcclxuICAgICAgICBFeHByZXNzQ3JhZnRDb25zb2xlXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBjbGFzcyBBcHBsaWNhdGlvblxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgRm9ybSBNYWluRm9ybSA9IG51bGw7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBDbG9zZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihNYWluRm9ybSAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBNYWluRm9ybS5DbG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFJldHlwZWQuZG9tLndpbmRvdy5jbG9zZSgpO1xyXG4gICAgICAgICAgICBSZXR5cGVkLmRvbS53aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBBcHBsaWNhdGlvbkRlZml0bmlvbiBfYXBwbGljYXRpb25EZWZpdGlvbiA9IEFwcGxpY2F0aW9uRGVmaXRuaW9uLkJyaWRnZUNvbnNvbGU7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBBcHBsaWNhdGlvbkRlZml0bmlvbiBBcGxpY2F0aW9uRGVmaXRpb24geyBnZXQgeyByZXR1cm4gX2FwcGxpY2F0aW9uRGVmaXRpb247IH0gfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgUnVuKEZvcm0gX01haW5mb3JtKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgTWFpbkZvcm0gPSBfTWFpbmZvcm07XHJcbiAgICAgICAgICAgIE1haW5Gb3JtLlNob3dTdGFydE5ld0xldmVsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwidXNpbmcgU3lzdGVtO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgQmFyY29kZVF1YWdnYUpTXHJcbiAgICB7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgRXh0ZXJuYWxQbHVnaW4gRXh0ZXJuYWxRdWFnZ2FKUyA9IG5ldyBFeHRlcm5hbFBsdWdpbihcImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL3F1YWdnYS8wLjEyLjEvcXVhZ2dhLm1pbi5qc1wiKTtcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIFNldHVwKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEV4dGVybmFsUXVhZ2dhSlMuU2V0dXAodHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgRGVjb2RlU2luZ2xlKHN0cmluZyBzb3VyY2UsIEFjdGlvbjxzdHJpbmc+IG9uRGV0ZWN0LCBBY3Rpb24gb25Ob0RldGVjdCA9IG51bGwsIGJvb2wgbG9jYXRlID0gdHJ1ZSwgUmVhZGVycyByZWFkZXIgPSBSZWFkZXJzLkNvZGVfMzlfUmVhZGVyLCBib29sIHNvdXJjZUlzQmFzZTY0ID0gZmFsc2UpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZighRXh0ZXJuYWxRdWFnZ2FKUy5TZXR1cENvbXBsZXRlZClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGlmKG9uRGV0ZWN0ID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBzdHJpbmcgY29kZU5hbWUgPSByZWFkZXIuVG9TdHJpbmcoXCJHXCIpLlRvTG93ZXIoKTtcclxuICAgICAgICAgICAgaWYoY29kZU5hbWUuU3RhcnRzV2l0aChcIl9cIikpXHJcbiAgICAgICAgICAgICAgICBjb2RlTmFtZSA9IGNvZGVOYW1lLlN1YnN0cmluZygxKTtcclxuICAgICAgICAgICAgaWYoc291cmNlSXNCYXNlNjQgJiYgIXNvdXJjZS5TdGFydHNXaXRoKFwiZGF0YTppbWFnZVwiKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc291cmNlID0gXCJkYXRhOmltYWdlL2pwZztiYXNlNjQsXCIgKyBzb3VyY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLypAXHJcbiAgICAgICAgICAgIFF1YWdnYS5kZWNvZGVTaW5nbGUoe1xyXG4gICAgICAgICAgICAgICAgZGVjb2Rlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlYWRlcnM6IFtjb2RlTmFtZV0gLy8gTGlzdCBvZiBhY3RpdmUgcmVhZGVyc1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGxvY2F0ZTogbG9jYXRlLFxyXG4gICAgICAgICAgICAgICAgc3JjOiBzb3VyY2VcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24ob25kLCBvbm5kKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVzdWx0KXtcclxuICAgICAgICAgICAgICAgICAgICBpZihyZXN1bHQuY29kZVJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbmQocmVzdWx0LmNvZGVSZXN1bHQuY29kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYob25uZCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbm5kKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0ob25EZXRlY3QsIG9uTm9EZXRlY3QpKTtcclxuICAgICAgICAgICAgKi9cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBlbnVtIFJlYWRlcnNcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIENvZGVfMTI4X1JlYWRlcixcclxuICAgICAgICAgICAgRWFuX1JlYWRlcixcclxuICAgICAgICAgICAgRWFuXzhfUmVhZGVyLFxyXG4gICAgICAgICAgICBDb2RlXzM5X1JlYWRlcixcclxuICAgICAgICAgICAgQ29kZV8zOV9WaW5fUmVhZGVyLFxyXG4gICAgICAgICAgICBDb2RhYmFyX1JlYWRlcixcclxuICAgICAgICAgICAgVXBjX1JlYWRlcixcclxuICAgICAgICAgICAgVXBjX2VfUmVhZGVyLFxyXG4gICAgICAgICAgICBJMm9mNV9SZWFkZXIsXHJcbiAgICAgICAgICAgIF8yb2Y1X1JlYWRlcixcclxuICAgICAgICAgICAgQ29kZV85M19SZWFkZXIsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAgICAgICAgUXVhZ2dhLmRlY29kZVNpbmdsZSh7XHJcbiAgICAgICAgLy8gICAgZGVjb2Rlcjoge1xyXG4gICAgICAgIC8vICAgICAgICByZWFkZXJzOiBbXCJjb2RlXzEyOF9yZWFkZXJcIl0gLy8gTGlzdCBvZiBhY3RpdmUgcmVhZGVyc1xyXG4gICAgICAgIC8vICAgIH0sXHJcbiAgICAgICAgLy8gICAgbG9jYXRlOiB0cnVlLCAvLyB0cnkgdG8gbG9jYXRlIHRoZSBiYXJjb2RlIGluIHRoZSBpbWFnZVxyXG4gICAgICAgIC8vICAgIHNyYzogJy90ZXN0L2ZpeHR1cmVzL2NvZGVfMTI4L2ltYWdlLTAwMS5qcGcnIC8vIG9yICdkYXRhOmltYWdlL2pwZztiYXNlNjQsJyArIGRhdGFcclxuICAgICAgICAvL30sIGZ1bmN0aW9uKHJlc3VsdCl7XHJcbiAgICAgICAgLy8gICAgaWYocmVzdWx0LmNvZGVSZXN1bHQpIHtcclxuICAgICAgICAvLyAgICAgICAgY29uc29sZS5sb2coXCJyZXN1bHRcIiwgcmVzdWx0LmNvZGVSZXN1bHQuY29kZSk7XHJcbiAgICAgICAgLy8gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyAgICAgICAgY29uc29sZS5sb2coXCJub3QgZGV0ZWN0ZWRcIik7XHJcbiAgICAgICAgLy8gICAgfVxyXG4gICAgICAgIC8vfSk7XHJcbiAgICB9XHJcbn0iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG51c2luZyBCcmlkZ2U7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBzdHJ1Y3QgQ29sb3JcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENvbG9yIEVtcHR5O1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHNob3J0IFN0YXRlS25vd25Db2xvclZhbGlkO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHNob3J0IFN0YXRlQVJHQlZhbHVlVmFsaWQ7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgc2hvcnQgU3RhdGVWYWx1ZU1hc2s7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgc2hvcnQgU3RhdGVOYW1lVmFsaWQ7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgbG9uZyBOb3REZWZpbmVkVmFsdWU7XHJcbiAgICAgICAgcHJpdmF0ZSBjb25zdCBpbnQgQVJHQkFscGhhU2hpZnQgPSAweDE4O1xyXG4gICAgICAgIHByaXZhdGUgY29uc3QgaW50IEFSR0JSZWRTaGlmdCA9IDB4MTA7XHJcbiAgICAgICAgcHJpdmF0ZSBjb25zdCBpbnQgQVJHQkdyZWVuU2hpZnQgPSA4O1xyXG4gICAgICAgIHByaXZhdGUgY29uc3QgaW50IEFSR0JCbHVlU2hpZnQgPSAwO1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc3RyaW5nIG5hbWU7XHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBsb25nIHZhbHVlO1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc2hvcnQga25vd25Db2xvcjtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHNob3J0IHN0YXRlO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIFRyYW5zcGFyZW50XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLlRyYW5zcGFyZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBBbGljZUJsdWVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuQWxpY2VCbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBBbnRpcXVlV2hpdGVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuQW50aXF1ZVdoaXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBBcXVhXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkFxdWEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIEFxdWFtYXJpbmVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuQXF1YW1hcmluZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgQXp1cmVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuQXp1cmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIEJlaWdlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkJlaWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBCaXNxdWVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuQmlzcXVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBCbGFja1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5CbGFjayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgQmxhbmNoZWRBbG1vbmRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuQmxhbmNoZWRBbG1vbmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIEJsdWVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuQmx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgQmx1ZVZpb2xldFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5CbHVlVmlvbGV0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBCcm93blxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5Ccm93bik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgQnVybHlXb29kXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkJ1cmx5V29vZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgQ2FkZXRCbHVlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkNhZGV0Qmx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgQ2hhcnRyZXVzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5DaGFydHJldXNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBDaG9jb2xhdGVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuQ2hvY29sYXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBDb3JhbFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5Db3JhbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgQ29ybmZsb3dlckJsdWVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuQ29ybmZsb3dlckJsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIENvcm5zaWxrXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkNvcm5zaWxrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBDcmltc29uXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkNyaW1zb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIEN5YW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuQ3lhbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgRGFya0JsdWVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuRGFya0JsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIERhcmtDeWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkRhcmtDeWFuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBEYXJrR29sZGVucm9kXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkRhcmtHb2xkZW5yb2QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIERhcmtHcmF5XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkRhcmtHcmF5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBEYXJrR3JlZW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuRGFya0dyZWVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBEYXJrS2hha2lcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuRGFya0toYWtpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBEYXJrTWFnZW50YVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5EYXJrTWFnZW50YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgRGFya09saXZlR3JlZW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuRGFya09saXZlR3JlZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIERhcmtPcmFuZ2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuRGFya09yYW5nZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgRGFya09yY2hpZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5EYXJrT3JjaGlkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBEYXJrUmVkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkRhcmtSZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIERhcmtTYWxtb25cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuRGFya1NhbG1vbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgRGFya1NlYUdyZWVuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkRhcmtTZWFHcmVlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgRGFya1NsYXRlQmx1ZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5EYXJrU2xhdGVCbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBEYXJrU2xhdGVHcmF5XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkRhcmtTbGF0ZUdyYXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIERhcmtUdXJxdW9pc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuRGFya1R1cnF1b2lzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgRGFya1Zpb2xldFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5EYXJrVmlvbGV0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBEZWVwUGlua1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5EZWVwUGluayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgRGVlcFNreUJsdWVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuRGVlcFNreUJsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIERpbUdyYXlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuRGltR3JheSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgRG9kZ2VyQmx1ZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5Eb2RnZXJCbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBGaXJlYnJpY2tcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuRmlyZWJyaWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBGbG9yYWxXaGl0ZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5GbG9yYWxXaGl0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgRm9yZXN0R3JlZW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuRm9yZXN0R3JlZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIEZ1Y2hzaWFcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuRnVjaHNpYSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgR2FpbnNib3JvXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkdhaW5zYm9ybyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgR2hvc3RXaGl0ZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5HaG9zdFdoaXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBHb2xkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkdvbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIEdvbGRlbnJvZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5Hb2xkZW5yb2QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIEdyYXlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuR3JheSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgR3JlZW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuR3JlZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIEdyZWVuWWVsbG93XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkdyZWVuWWVsbG93KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBIb25leWRld1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5Ib25leWRldyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgSG90UGlua1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5Ib3RQaW5rKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBJbmRpYW5SZWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuSW5kaWFuUmVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBJbmRpZ29cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuSW5kaWdvKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBJdm9yeVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5Jdm9yeSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgS2hha2lcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuS2hha2kpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIExhdmVuZGVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkxhdmVuZGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBMYXZlbmRlckJsdXNoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkxhdmVuZGVyQmx1c2gpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIExhd25HcmVlblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5MYXduR3JlZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIExlbW9uQ2hpZmZvblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5MZW1vbkNoaWZmb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIExpZ2h0Qmx1ZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5MaWdodEJsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIExpZ2h0Q29yYWxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuTGlnaHRDb3JhbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgTGlnaHRDeWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkxpZ2h0Q3lhbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgTGlnaHRHb2xkZW5yb2RZZWxsb3dcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuTGlnaHRHb2xkZW5yb2RZZWxsb3cpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIExpZ2h0R3JlZW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuTGlnaHRHcmVlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgTGlnaHRHcmF5XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkxpZ2h0R3JheSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgTGlnaHRQaW5rXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkxpZ2h0UGluayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgTGlnaHRTYWxtb25cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuTGlnaHRTYWxtb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIExpZ2h0U2VhR3JlZW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuTGlnaHRTZWFHcmVlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgTGlnaHRTa3lCbHVlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkxpZ2h0U2t5Qmx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgTGlnaHRTbGF0ZUdyYXlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuTGlnaHRTbGF0ZUdyYXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIExpZ2h0U3RlZWxCbHVlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLkxpZ2h0U3RlZWxCbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBMaWdodFllbGxvd1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5MaWdodFllbGxvdyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgTGltZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5MaW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBMaW1lR3JlZW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuTGltZUdyZWVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBMaW5lblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5MaW5lbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgTWFnZW50YVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5NYWdlbnRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBNYXJvb25cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuTWFyb29uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBNZWRpdW1BcXVhbWFyaW5lXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLk1lZGl1bUFxdWFtYXJpbmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIE1lZGl1bUJsdWVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuTWVkaXVtQmx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgTWVkaXVtT3JjaGlkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLk1lZGl1bU9yY2hpZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgTWVkaXVtUHVycGxlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLk1lZGl1bVB1cnBsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgTWVkaXVtU2VhR3JlZW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuTWVkaXVtU2VhR3JlZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIE1lZGl1bVNsYXRlQmx1ZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5NZWRpdW1TbGF0ZUJsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIE1lZGl1bVNwcmluZ0dyZWVuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLk1lZGl1bVNwcmluZ0dyZWVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBNZWRpdW1UdXJxdW9pc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuTWVkaXVtVHVycXVvaXNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBNZWRpdW1WaW9sZXRSZWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuTWVkaXVtVmlvbGV0UmVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBNaWRuaWdodEJsdWVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuTWlkbmlnaHRCbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBNaW50Q3JlYW1cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuTWludENyZWFtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBNaXN0eVJvc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuTWlzdHlSb3NlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBNb2NjYXNpblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5Nb2NjYXNpbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgTmF2YWpvV2hpdGVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuTmF2YWpvV2hpdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIE5hdnlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuTmF2eSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgT2xkTGFjZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5PbGRMYWNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBPbGl2ZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5PbGl2ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgT2xpdmVEcmFiXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLk9saXZlRHJhYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgT3JhbmdlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLk9yYW5nZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgT3JhbmdlUmVkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLk9yYW5nZVJlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgT3JjaGlkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLk9yY2hpZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgUGFsZUdvbGRlbnJvZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5QYWxlR29sZGVucm9kKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBQYWxlR3JlZW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuUGFsZUdyZWVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBQYWxlVHVycXVvaXNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLlBhbGVUdXJxdW9pc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIFBhbGVWaW9sZXRSZWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuUGFsZVZpb2xldFJlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgUGFwYXlhV2hpcFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5QYXBheWFXaGlwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBQZWFjaFB1ZmZcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuUGVhY2hQdWZmKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBQZXJ1XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLlBlcnUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIFBpbmtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuUGluayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgUGx1bVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5QbHVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBQb3dkZXJCbHVlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLlBvd2RlckJsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIFB1cnBsZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5QdXJwbGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIFJlZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5SZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIFJvc3lCcm93blxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5Sb3N5QnJvd24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIFJveWFsQmx1ZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5Sb3lhbEJsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIFNhZGRsZUJyb3duXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLlNhZGRsZUJyb3duKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBTYWxtb25cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuU2FsbW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBTYW5keUJyb3duXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLlNhbmR5QnJvd24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIFNlYUdyZWVuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLlNlYUdyZWVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBTZWFTaGVsbFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5TZWFTaGVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgU2llbm5hXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLlNpZW5uYSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgU2lsdmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLlNpbHZlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgU2t5Qmx1ZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5Ta3lCbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBTbGF0ZUJsdWVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuU2xhdGVCbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBTbGF0ZUdyYXlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuU2xhdGVHcmF5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBTbm93XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLlNub3cpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIFNwcmluZ0dyZWVuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLlNwcmluZ0dyZWVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBTdGVlbEJsdWVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuU3RlZWxCbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBUYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuVGFuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBUZWFsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLlRlYWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIFRoaXN0bGVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuVGhpc3RsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgVG9tYXRvXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLlRvbWF0byk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgVHVycXVvaXNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLlR1cnF1b2lzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgVmlvbGV0XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLlZpb2xldCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgV2hlYXRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKEtub3duQ29sb3IuV2hlYXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIFdoaXRlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLldoaXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBXaGl0ZVNtb2tlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLldoaXRlU21va2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIFllbGxvd1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoS25vd25Db2xvci5ZZWxsb3cpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIFllbGxvd0dyZWVuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihLbm93bkNvbG9yLlllbGxvd0dyZWVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW50ZXJuYWwgQ29sb3IoS25vd25Db2xvciBrbm93bkNvbG9yKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IDBMO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGVLbm93bkNvbG9yVmFsaWQ7XHJcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMua25vd25Db2xvciA9IChzaG9ydClrbm93bkNvbG9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBDb2xvcihsb25nIHZhbHVlLCBzaG9ydCBzdGF0ZSwgc3RyaW5nIG5hbWUsIEtub3duQ29sb3Iga25vd25Db2xvcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgICAgICB0aGlzLmtub3duQ29sb3IgPSAoc2hvcnQpa25vd25Db2xvcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBieXRlIFJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGJ5dGUpKCh0aGlzLlZhbHVlID4+IDB4MTApICYgMHhmZkwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgYnl0ZSBHXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChieXRlKSgodGhpcy5WYWx1ZSA+PiA4KSAmIDB4ZmZMKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJ5dGUgQlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoYnl0ZSkodGhpcy5WYWx1ZSAmIDB4ZmZMKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJ5dGUgQVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoYnl0ZSkoKHRoaXMuVmFsdWUgPj4gMHgxOCkgJiAweGZmTCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIElzS25vd25Db2xvclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoKHRoaXMuc3RhdGUgJiBTdGF0ZUtub3duQ29sb3JWYWxpZCkgPiAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgSXNFbXB0eVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5zdGF0ZSA9PSAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgSXNOYW1lZENvbG9yXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoKHRoaXMuc3RhdGUgJiBTdGF0ZU5hbWVWYWxpZCkgPT0gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5Jc0tub3duQ29sb3I7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgSXNTeXN0ZW1Db2xvclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKCF0aGlzLklzS25vd25Db2xvcilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLmtub3duQ29sb3IgPiAweDFhKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5rbm93bkNvbG9yID4gMHhhNyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBpbXBsaWNpdCBvcGVyYXRvciBzdHJpbmcoQ29sb3IgY29sb3IpICAvLyBpbXBsaWNpdCBkaWdpdCB0byBieXRlIGNvbnZlcnNpb24gb3BlcmF0b3JcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvci5Ub0hUTUxDb2xvcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBpbXBsaWNpdCBvcGVyYXRvciBDb2xvcihzdHJpbmcgaGV4VmFsdWUpICAvLyBpbXBsaWNpdCBkaWdpdCB0byBieXRlIGNvbnZlcnNpb24gb3BlcmF0b3JcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBDb2xvci5Gcm9tSGV4KGhleFZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RyaW5nIE5hbWVBbmRBUkdCVmFsdWVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLkZvcm1hdChcInt7TmFtZT17MH0sIEFSR0I9KHsxfSwgezJ9LCB7M30sIHs0fSl9fVwiLCB0aGlzLk5hbWUsIHRoaXMuQSwgdGhpcy5SLCB0aGlzLkcsIHRoaXMuQik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgTmFtZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKCh0aGlzLnN0YXRlICYgU3RhdGVOYW1lVmFsaWQpICE9IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKCF0aGlzLklzS25vd25Db2xvcilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ29udmVydC5Ub1N0cmluZyh0aGlzLnZhbHVlLCAweDEwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHN0cmluZyBzdHIgPSBLbm93bkNvbG9yVGFibGUuS25vd25Db2xvclRvTmFtZSgoS25vd25Db2xvcil0aGlzLmtub3duQ29sb3IpO1xyXG4gICAgICAgICAgICAgICAgaWYoc3RyICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmtub3duQ29sb3IuVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBsb25nIFZhbHVlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoKHRoaXMuc3RhdGUgJiBTdGF0ZVZhbHVlTWFzaykgIT0gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuSXNLbm93bkNvbG9yKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAobG9uZylLbm93bkNvbG9yVGFibGUuS25vd25Db2xvclRvQXJnYigoS25vd25Db2xvcil0aGlzLmtub3duQ29sb3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE5vdERlZmluZWRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgdm9pZCBDaGVja0J5dGUoaW50IHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoKHZhbHVlIDwgMCkgfHwgKHZhbHVlID4gMHhmZikpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudEV4Y2VwdGlvbihcIkludmFsaWRFeDJCb3VuZEFyZ3VtZW50XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBsb25nIE1ha2VBcmdiKGJ5dGUgYWxwaGEsIGJ5dGUgcmVkLCBieXRlIGdyZWVuLCBieXRlIGJsdWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKGFscGhhIDw8IDI0KSB8IChyZWQgPDwgMTYpIHwgKGdyZWVuIDw8IDgpIHwgYmx1ZTsgICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgRnJvbUFyZ2IoaW50IGFyZ2IpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKGFyZ2IgJiAoKGxvbmcpMHhmZmZmZmZmZkwpLCBTdGF0ZUFSR0JWYWx1ZVZhbGlkLCBudWxsLCAoS25vd25Db2xvcikwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgRnJvbUFyZ2IoaW50IGFscGhhLCBpbnQgcmVkLCBpbnQgZ3JlZW4sIGludCBibHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ2hlY2tCeXRlKGFscGhhKTtcclxuICAgICAgICAgICAgQ2hlY2tCeXRlKHJlZCk7XHJcbiAgICAgICAgICAgIENoZWNrQnl0ZShncmVlbik7XHJcbiAgICAgICAgICAgIENoZWNrQnl0ZShibHVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihNYWtlQXJnYigoYnl0ZSlhbHBoYSwgKGJ5dGUpcmVkLCAoYnl0ZSlncmVlbiwgKGJ5dGUpYmx1ZSksIFN0YXRlQVJHQlZhbHVlVmFsaWQsIG51bGwsIChLbm93bkNvbG9yKTApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDb2xvciBGcm9tQXJnYihpbnQgYWxwaGEsIENvbG9yIGJhc2VDb2xvcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIENoZWNrQnl0ZShhbHBoYSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoTWFrZUFyZ2IoKGJ5dGUpYWxwaGEsIGJhc2VDb2xvci5SLCBiYXNlQ29sb3IuRywgYmFzZUNvbG9yLkIpLCBTdGF0ZUFSR0JWYWx1ZVZhbGlkLCBudWxsLCAoS25vd25Db2xvcikwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgRnJvbUFyZ2IoaW50IHJlZCwgaW50IGdyZWVuLCBpbnQgYmx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBGcm9tQXJnYigweGZmLCByZWQsIGdyZWVuLCBibHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBJc0VudW1WYWxpZChFbnVtIGVudW1WYWx1ZSwgaW50IHZhbHVlLCBpbnQgbWluVmFsdWUsIGludCBtYXhWYWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKHZhbHVlID49IG1pblZhbHVlKSAmJiAodmFsdWUgPD0gbWF4VmFsdWUpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgRnJvbUtub3duQ29sb3IoS25vd25Db2xvciBjb2xvcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoY29sb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBjb21wb25lbnRUb0hleChieXRlIHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIHggPSB2YWx1ZS5Ub1N0cmluZygxNik7XHJcbiAgICAgICAgICAgIHJldHVybiAoeC5MZW5ndGggPT0gMSA/IFwiMFwiIDogXCJcIikgKyB4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBUb0hUTUxDb2xvcigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihBICE9IDI1NSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5Gb3JtYXQoXCIjezB9ezF9ezJ9ezN9XCIsIGNvbXBvbmVudFRvSGV4KEEpLCBjb21wb25lbnRUb0hleChSKSwgY29tcG9uZW50VG9IZXgoRyksIGNvbXBvbmVudFRvSGV4KEIpKTsgLy8gXCIjXCIgKyAoMTU1KS50b1N0cmluZygxNikgKyAoMTAyKS50b1N0cmluZygxNikgKyAoMTAyKS50b1N0cmluZygxNik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLkZvcm1hdChcIiN7MH17MX17Mn1cIiwgY29tcG9uZW50VG9IZXgoUiksIGNvbXBvbmVudFRvSGV4KEcpLCBjb21wb25lbnRUb0hleChCKSk7IC8vIFwiI1wiICsgKDE1NSkudG9TdHJpbmcoMTYpICsgKDEwMikudG9TdHJpbmcoMTYpICsgKDEwMikudG9TdHJpbmcoMTYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIEZyb21IZXgoc3RyaW5nIHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYodmFsdWUuU3RhcnRzV2l0aChcIiNcIikpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRnJvbUhleCh2YWx1ZS5TdWJzdHJpbmcoMSkpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBDb2xvci5Gcm9tQXJnYihTY3JpcHQuUGFyc2VJbnQodmFsdWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGZsb2F0IEdldEJyaWdodG5lc3MoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZmxvYXQgeiA9IFIgLyBxO1xyXG4gICAgICAgICAgICBmbG9hdCB4ID0gRyAvIHE7XHJcbiAgICAgICAgICAgIGZsb2F0IGMgPSBCIC8gcTtcclxuICAgICAgICAgICAgZmxvYXQgdiA9IHo7XHJcbiAgICAgICAgICAgIGZsb2F0IGIgPSB6O1xyXG4gICAgICAgICAgICBpZih4ID4gdilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdiA9IHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoYyA+IHYpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHYgPSBjO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKHggPCBiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBiID0geDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjIDwgYilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYiA9IGM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuICgodiArIGIpIC8gMmYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGZsb2F0IEdldEh1ZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZigodGhpcy5SID09IHRoaXMuRykgJiYgKHRoaXMuRyA9PSB0aGlzLkIpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMGY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmxvYXQgeiA9IFIgLyBxO1xyXG4gICAgICAgICAgICBmbG9hdCB4ID0gRyAvIHE7XHJcbiAgICAgICAgICAgIGZsb2F0IGMgPSBCIC8gcTtcclxuICAgICAgICAgICAgZmxvYXQgdiA9IDBmO1xyXG4gICAgICAgICAgICBmbG9hdCBiID0gejtcclxuICAgICAgICAgICAgZmxvYXQgbiA9IHo7XHJcbiAgICAgICAgICAgIGlmKHggPiBiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBiID0geDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjID4gYilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYiA9IGM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoeCA8IG4pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG4gPSB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGMgPCBuKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBuID0gYztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmbG9hdCBudW02ID0gYiAtIG47XHJcbiAgICAgICAgICAgIGlmKHogPT0gYilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdiA9ICh4IC0gYykgLyBudW02O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYoeCA9PSBiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2ID0gMmYgKyAoKGMgLSB6KSAvIG51bTYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYoYyA9PSBiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2ID0gNGYgKyAoKHogLSB4KSAvIG51bTYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHYgKj0gNjBmO1xyXG4gICAgICAgICAgICBpZih2IDwgMGYpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHYgKz0gMzYwZjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIGZsb2F0IHEgPSAyNTVmO1xyXG5cclxuICAgICAgICBwdWJsaWMgZmxvYXQgR2V0U2F0dXJhdGlvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmbG9hdCB6ID0gUiAvIHE7XHJcbiAgICAgICAgICAgIGZsb2F0IHggPSBHIC8gcTtcclxuICAgICAgICAgICAgZmxvYXQgYyA9IEIgLyBxO1xyXG4gICAgICAgICAgICBmbG9hdCB2ID0gMGY7XHJcbiAgICAgICAgICAgIGZsb2F0IGIgPSB6O1xyXG4gICAgICAgICAgICBmbG9hdCBuID0gejtcclxuICAgICAgICAgICAgaWYoeCA+IGIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGIgPSB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGMgPiBiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBiID0gYztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZih4IDwgbilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbiA9IHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoYyA8IG4pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG4gPSBjO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGIgPT0gbilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmxvYXQgbSA9IChiICsgbikgLyAyZjtcclxuICAgICAgICAgICAgaWYobSA8PSAwLjUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoKGIgLSBuKSAvIChiICsgbikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAoKGIgLSBuKSAvICgoMmYgLSBiKSAtIG4pKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbnQgVG9BcmdiKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAoaW50KXRoaXMuVmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgS25vd25Db2xvciBUb0tub3duQ29sb3IoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIChLbm93bkNvbG9yKXRoaXMua25vd25Db2xvcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSBzdHJpbmcgVG9TdHJpbmcoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgU3RyaW5nQnVpbGRlciBidWlsZGVyID0gbmV3IFN0cmluZ0J1aWxkZXIoMHgyMCk7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKGJhc2UuR2V0VHlwZSgpLk5hbWUpO1xyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIiBbXCIpO1xyXG4gICAgICAgICAgICBpZigodGhpcy5zdGF0ZSAmIFN0YXRlTmFtZVZhbGlkKSAhPSAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZCh0aGlzLk5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYoKHRoaXMuc3RhdGUgJiBTdGF0ZUtub3duQ29sb3JWYWxpZCkgIT0gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQodGhpcy5OYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKCh0aGlzLnN0YXRlICYgU3RhdGVWYWx1ZU1hc2spICE9IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kRm9ybWF0KFwiQT17MH0sIFI9ezF9LCBHPXsyfSwgQj17M31cIiwgQSwgUiwgRywgQik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIkVtcHR5XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiXVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXIuVG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBvcGVyYXRvciA9PShDb2xvciBsZWZ0LCBDb2xvciByaWdodClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCgobGVmdC52YWx1ZSAhPSByaWdodC52YWx1ZSkgfHwgKGxlZnQuc3RhdGUgIT0gcmlnaHQuc3RhdGUpKSB8fCAobGVmdC5rbm93bkNvbG9yICE9IHJpZ2h0Lmtub3duQ29sb3IpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuICgobGVmdC5uYW1lID09IHJpZ2h0Lm5hbWUpIHx8ICgoKGxlZnQubmFtZSAhPSBudWxsKSAmJiAocmlnaHQubmFtZSAhPSBudWxsKSkgJiYgbGVmdC5uYW1lLkVxdWFscyhyaWdodC5uYW1lKSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIG9wZXJhdG9yICE9KENvbG9yIGxlZnQsIENvbG9yIHJpZ2h0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuICEobGVmdCA9PSByaWdodCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgYm9vbCBFcXVhbHMob2JqZWN0IG9iailcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKG9iaiBpcyBDb2xvcilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQ29sb3IgY29sb3IgPSAoQ29sb3Ipb2JqO1xyXG4gICAgICAgICAgICAgICAgaWYoKCh0aGlzLnZhbHVlID09IGNvbG9yLnZhbHVlKSAmJiAodGhpcy5zdGF0ZSA9PSBjb2xvci5zdGF0ZSkpICYmICh0aGlzLmtub3duQ29sb3IgPT0gY29sb3Iua25vd25Db2xvcikpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgodGhpcy5uYW1lID09IGNvbG9yLm5hbWUpIHx8ICgoKHRoaXMubmFtZSAhPSBudWxsKSAmJiAoY29sb3IubmFtZSAhPSBudWxsKSkgJiYgdGhpcy5uYW1lLkVxdWFscyh0aGlzLm5hbWUpKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIGludCBHZXRIYXNoQ29kZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKCh0aGlzLnZhbHVlLkdldEhhc2hDb2RlKCkgXiB0aGlzLnN0YXRlLkdldEhhc2hDb2RlKCkpIF4gdGhpcy5rbm93bkNvbG9yLkdldEhhc2hDb2RlKCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIENvbG9yKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEVtcHR5ID0gbmV3IENvbG9yKCk7XHJcbiAgICAgICAgICAgIFN0YXRlS25vd25Db2xvclZhbGlkID0gMTtcclxuICAgICAgICAgICAgU3RhdGVBUkdCVmFsdWVWYWxpZCA9IDI7XHJcbiAgICAgICAgICAgIFN0YXRlVmFsdWVNYXNrID0gU3RhdGVBUkdCVmFsdWVWYWxpZDtcclxuICAgICAgICAgICAgU3RhdGVOYW1lVmFsaWQgPSA4O1xyXG4gICAgICAgICAgICBOb3REZWZpbmVkVmFsdWUgPSAwTDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGVudW0gS25vd25Db2xvclxyXG4gICAge1xyXG4gICAgICAgIEFjdGl2ZUJvcmRlciA9IDEsXHJcbiAgICAgICAgQWN0aXZlQ2FwdGlvbiA9IDIsXHJcbiAgICAgICAgQWN0aXZlQ2FwdGlvblRleHQgPSAzLFxyXG4gICAgICAgIEFsaWNlQmx1ZSA9IDB4MWMsXHJcbiAgICAgICAgQW50aXF1ZVdoaXRlID0gMHgxZCxcclxuICAgICAgICBBcHBXb3Jrc3BhY2UgPSA0LFxyXG4gICAgICAgIEFxdWEgPSAzMCxcclxuICAgICAgICBBcXVhbWFyaW5lID0gMHgxZixcclxuICAgICAgICBBenVyZSA9IDB4MjAsXHJcbiAgICAgICAgQmVpZ2UgPSAweDIxLFxyXG4gICAgICAgIEJpc3F1ZSA9IDB4MjIsXHJcbiAgICAgICAgQmxhY2sgPSAweDIzLFxyXG4gICAgICAgIEJsYW5jaGVkQWxtb25kID0gMHgyNCxcclxuICAgICAgICBCbHVlID0gMHgyNSxcclxuICAgICAgICBCbHVlVmlvbGV0ID0gMHgyNixcclxuICAgICAgICBCcm93biA9IDB4MjcsXHJcbiAgICAgICAgQnVybHlXb29kID0gNDAsXHJcbiAgICAgICAgQnV0dG9uRmFjZSA9IDB4YTgsXHJcbiAgICAgICAgQnV0dG9uSGlnaGxpZ2h0ID0gMHhhOSxcclxuICAgICAgICBCdXR0b25TaGFkb3cgPSAxNzAsXHJcbiAgICAgICAgQ2FkZXRCbHVlID0gMHgyOSxcclxuICAgICAgICBDaGFydHJldXNlID0gMHgyYSxcclxuICAgICAgICBDaG9jb2xhdGUgPSA0MyxcclxuICAgICAgICBDb250cm9sID0gNSxcclxuICAgICAgICBDb250cm9sRGFyayA9IDYsXHJcbiAgICAgICAgQ29udHJvbERhcmtEYXJrID0gNyxcclxuICAgICAgICBDb250cm9sTGlnaHQgPSA4LFxyXG4gICAgICAgIENvbnRyb2xMaWdodExpZ2h0ID0gOSxcclxuICAgICAgICBDb250cm9sVGV4dCA9IDEwLFxyXG4gICAgICAgIENvcmFsID0gMHgyYyxcclxuICAgICAgICBDb3JuZmxvd2VyQmx1ZSA9IDB4MmQsXHJcbiAgICAgICAgQ29ybnNpbGsgPSAweDJlLFxyXG4gICAgICAgIENyaW1zb24gPSAweDJmLFxyXG4gICAgICAgIEN5YW4gPSAweDMwLFxyXG4gICAgICAgIERhcmtCbHVlID0gMHgzMSxcclxuICAgICAgICBEYXJrQ3lhbiA9IDUwLFxyXG4gICAgICAgIERhcmtHb2xkZW5yb2QgPSAweDMzLFxyXG4gICAgICAgIERhcmtHcmF5ID0gMHgzNCxcclxuICAgICAgICBEYXJrR3JlZW4gPSAweDM1LFxyXG4gICAgICAgIERhcmtLaGFraSA9IDB4MzYsXHJcbiAgICAgICAgRGFya01hZ2VudGEgPSAweDM3LFxyXG4gICAgICAgIERhcmtPbGl2ZUdyZWVuID0gMHgzOCxcclxuICAgICAgICBEYXJrT3JhbmdlID0gMHgzOSxcclxuICAgICAgICBEYXJrT3JjaGlkID0gMHgzYSxcclxuICAgICAgICBEYXJrUmVkID0gNTksXHJcbiAgICAgICAgRGFya1NhbG1vbiA9IDYwLFxyXG4gICAgICAgIERhcmtTZWFHcmVlbiA9IDB4M2QsXHJcbiAgICAgICAgRGFya1NsYXRlQmx1ZSA9IDB4M2UsXHJcbiAgICAgICAgRGFya1NsYXRlR3JheSA9IDB4M2YsXHJcbiAgICAgICAgRGFya1R1cnF1b2lzZSA9IDB4NDAsXHJcbiAgICAgICAgRGFya1Zpb2xldCA9IDB4NDEsXHJcbiAgICAgICAgRGVlcFBpbmsgPSAweDQyLFxyXG4gICAgICAgIERlZXBTa3lCbHVlID0gMHg0MyxcclxuICAgICAgICBEZXNrdG9wID0gMTEsXHJcbiAgICAgICAgRGltR3JheSA9IDB4NDQsXHJcbiAgICAgICAgRG9kZ2VyQmx1ZSA9IDB4NDUsXHJcbiAgICAgICAgRmlyZWJyaWNrID0gNzAsXHJcbiAgICAgICAgRmxvcmFsV2hpdGUgPSAweDQ3LFxyXG4gICAgICAgIEZvcmVzdEdyZWVuID0gMHg0OCxcclxuICAgICAgICBGdWNoc2lhID0gMHg0OSxcclxuICAgICAgICBHYWluc2Jvcm8gPSAweDRhLFxyXG4gICAgICAgIEdob3N0V2hpdGUgPSA3NSxcclxuICAgICAgICBHb2xkID0gMHg0YyxcclxuICAgICAgICBHb2xkZW5yb2QgPSAweDRkLFxyXG4gICAgICAgIEdyYWRpZW50QWN0aXZlQ2FwdGlvbiA9IDE3MSxcclxuICAgICAgICBHcmFkaWVudEluYWN0aXZlQ2FwdGlvbiA9IDB4YWMsXHJcbiAgICAgICAgR3JheSA9IDB4NGUsXHJcbiAgICAgICAgR3JheVRleHQgPSAxMixcclxuICAgICAgICBHcmVlbiA9IDB4NGYsXHJcbiAgICAgICAgR3JlZW5ZZWxsb3cgPSA4MCxcclxuICAgICAgICBIaWdobGlnaHQgPSAxMyxcclxuICAgICAgICBIaWdobGlnaHRUZXh0ID0gMTQsXHJcbiAgICAgICAgSG9uZXlkZXcgPSAweDUxLFxyXG4gICAgICAgIEhvdFBpbmsgPSAweDUyLFxyXG4gICAgICAgIEhvdFRyYWNrID0gMTUsXHJcbiAgICAgICAgSW5hY3RpdmVCb3JkZXIgPSAweDEwLFxyXG4gICAgICAgIEluYWN0aXZlQ2FwdGlvbiA9IDB4MTEsXHJcbiAgICAgICAgSW5hY3RpdmVDYXB0aW9uVGV4dCA9IDB4MTIsXHJcbiAgICAgICAgSW5kaWFuUmVkID0gMHg1MyxcclxuICAgICAgICBJbmRpZ28gPSAweDU0LFxyXG4gICAgICAgIEluZm8gPSAweDEzLFxyXG4gICAgICAgIEluZm9UZXh0ID0gMjAsXHJcbiAgICAgICAgSXZvcnkgPSAweDU1LFxyXG4gICAgICAgIEtoYWtpID0gMHg1NixcclxuICAgICAgICBMYXZlbmRlciA9IDB4NTcsXHJcbiAgICAgICAgTGF2ZW5kZXJCbHVzaCA9IDB4NTgsXHJcbiAgICAgICAgTGF3bkdyZWVuID0gMHg1OSxcclxuICAgICAgICBMZW1vbkNoaWZmb24gPSA5MCxcclxuICAgICAgICBMaWdodEJsdWUgPSA5MSxcclxuICAgICAgICBMaWdodENvcmFsID0gMHg1YyxcclxuICAgICAgICBMaWdodEN5YW4gPSAweDVkLFxyXG4gICAgICAgIExpZ2h0R29sZGVucm9kWWVsbG93ID0gMHg1ZSxcclxuICAgICAgICBMaWdodEdyYXkgPSAweDVmLFxyXG4gICAgICAgIExpZ2h0R3JlZW4gPSAweDYwLFxyXG4gICAgICAgIExpZ2h0UGluayA9IDB4NjEsXHJcbiAgICAgICAgTGlnaHRTYWxtb24gPSAweDYyLFxyXG4gICAgICAgIExpZ2h0U2VhR3JlZW4gPSAweDYzLFxyXG4gICAgICAgIExpZ2h0U2t5Qmx1ZSA9IDEwMCxcclxuICAgICAgICBMaWdodFNsYXRlR3JheSA9IDB4NjUsXHJcbiAgICAgICAgTGlnaHRTdGVlbEJsdWUgPSAweDY2LFxyXG4gICAgICAgIExpZ2h0WWVsbG93ID0gMHg2NyxcclxuICAgICAgICBMaW1lID0gMHg2OCxcclxuICAgICAgICBMaW1lR3JlZW4gPSAweDY5LFxyXG4gICAgICAgIExpbmVuID0gMHg2YSxcclxuICAgICAgICBNYWdlbnRhID0gMTA3LFxyXG4gICAgICAgIE1hcm9vbiA9IDB4NmMsXHJcbiAgICAgICAgTWVkaXVtQXF1YW1hcmluZSA9IDB4NmQsXHJcbiAgICAgICAgTWVkaXVtQmx1ZSA9IDExMCxcclxuICAgICAgICBNZWRpdW1PcmNoaWQgPSAweDZmLFxyXG4gICAgICAgIE1lZGl1bVB1cnBsZSA9IDB4NzAsXHJcbiAgICAgICAgTWVkaXVtU2VhR3JlZW4gPSAweDcxLFxyXG4gICAgICAgIE1lZGl1bVNsYXRlQmx1ZSA9IDB4NzIsXHJcbiAgICAgICAgTWVkaXVtU3ByaW5nR3JlZW4gPSAweDczLFxyXG4gICAgICAgIE1lZGl1bVR1cnF1b2lzZSA9IDB4NzQsXHJcbiAgICAgICAgTWVkaXVtVmlvbGV0UmVkID0gMHg3NSxcclxuICAgICAgICBNZW51ID0gMHgxNSxcclxuICAgICAgICBNZW51QmFyID0gMHhhZCxcclxuICAgICAgICBNZW51SGlnaGxpZ2h0ID0gMHhhZSxcclxuICAgICAgICBNZW51VGV4dCA9IDB4MTYsXHJcbiAgICAgICAgTWlkbmlnaHRCbHVlID0gMHg3NixcclxuICAgICAgICBNaW50Q3JlYW0gPSAweDc3LFxyXG4gICAgICAgIE1pc3R5Um9zZSA9IDEyMCxcclxuICAgICAgICBNb2NjYXNpbiA9IDB4NzksXHJcbiAgICAgICAgTmF2YWpvV2hpdGUgPSAweDdhLFxyXG4gICAgICAgIE5hdnkgPSAxMjMsXHJcbiAgICAgICAgT2xkTGFjZSA9IDB4N2MsXHJcbiAgICAgICAgT2xpdmUgPSAweDdkLFxyXG4gICAgICAgIE9saXZlRHJhYiA9IDB4N2UsXHJcbiAgICAgICAgT3JhbmdlID0gMHg3ZixcclxuICAgICAgICBPcmFuZ2VSZWQgPSAweDgwLFxyXG4gICAgICAgIE9yY2hpZCA9IDB4ODEsXHJcbiAgICAgICAgUGFsZUdvbGRlbnJvZCA9IDEzMCxcclxuICAgICAgICBQYWxlR3JlZW4gPSAweDgzLFxyXG4gICAgICAgIFBhbGVUdXJxdW9pc2UgPSAweDg0LFxyXG4gICAgICAgIFBhbGVWaW9sZXRSZWQgPSAweDg1LFxyXG4gICAgICAgIFBhcGF5YVdoaXAgPSAweDg2LFxyXG4gICAgICAgIFBlYWNoUHVmZiA9IDB4ODcsXHJcbiAgICAgICAgUGVydSA9IDB4ODgsXHJcbiAgICAgICAgUGluayA9IDB4ODksXHJcbiAgICAgICAgUGx1bSA9IDB4OGEsXHJcbiAgICAgICAgUG93ZGVyQmx1ZSA9IDEzOSxcclxuICAgICAgICBQdXJwbGUgPSAxNDAsXHJcbiAgICAgICAgUmVkID0gMHg4ZCxcclxuICAgICAgICBSb3N5QnJvd24gPSAweDhlLFxyXG4gICAgICAgIFJveWFsQmx1ZSA9IDB4OGYsXHJcbiAgICAgICAgU2FkZGxlQnJvd24gPSAweDkwLFxyXG4gICAgICAgIFNhbG1vbiA9IDB4OTEsXHJcbiAgICAgICAgU2FuZHlCcm93biA9IDB4OTIsXHJcbiAgICAgICAgU2Nyb2xsQmFyID0gMHgxNyxcclxuICAgICAgICBTZWFHcmVlbiA9IDB4OTMsXHJcbiAgICAgICAgU2VhU2hlbGwgPSAweDk0LFxyXG4gICAgICAgIFNpZW5uYSA9IDB4OTUsXHJcbiAgICAgICAgU2lsdmVyID0gMTUwLFxyXG4gICAgICAgIFNreUJsdWUgPSAweDk3LFxyXG4gICAgICAgIFNsYXRlQmx1ZSA9IDB4OTgsXHJcbiAgICAgICAgU2xhdGVHcmF5ID0gMHg5OSxcclxuICAgICAgICBTbm93ID0gMHg5YSxcclxuICAgICAgICBTcHJpbmdHcmVlbiA9IDE1NSxcclxuICAgICAgICBTdGVlbEJsdWUgPSAweDljLFxyXG4gICAgICAgIFRhbiA9IDB4OWQsXHJcbiAgICAgICAgVGVhbCA9IDB4OWUsXHJcbiAgICAgICAgVGhpc3RsZSA9IDB4OWYsXHJcbiAgICAgICAgVG9tYXRvID0gMTYwLFxyXG4gICAgICAgIFRyYW5zcGFyZW50ID0gMjcsXHJcbiAgICAgICAgVHVycXVvaXNlID0gMHhhMSxcclxuICAgICAgICBWaW9sZXQgPSAweGEyLFxyXG4gICAgICAgIFdoZWF0ID0gMHhhMyxcclxuICAgICAgICBXaGl0ZSA9IDB4YTQsXHJcbiAgICAgICAgV2hpdGVTbW9rZSA9IDB4YTUsXHJcbiAgICAgICAgV2luZG93ID0gMHgxOCxcclxuICAgICAgICBXaW5kb3dGcmFtZSA9IDB4MTksXHJcbiAgICAgICAgV2luZG93VGV4dCA9IDB4MWEsXHJcbiAgICAgICAgWWVsbG93ID0gMHhhNixcclxuICAgICAgICBZZWxsb3dHcmVlbiA9IDB4YTdcclxuICAgIH1cclxuXHJcbiAgICBpbnRlcm5hbCBzdGF0aWMgY2xhc3MgS25vd25Db2xvclRhYmxlXHJcbiAgICB7XHJcbiAgICAgICAgLy8gRmllbGRzXHJcbiAgICAgICAgcHJpdmF0ZSBjb25zdCBpbnQgQWxwaGFTaGlmdCA9IDB4MTg7XHJcblxyXG4gICAgICAgIHByaXZhdGUgY29uc3QgaW50IEJsdWVTaGlmdCA9IDA7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgc3RyaW5nW10gY29sb3JOYW1lVGFibGU7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgaW50W10gY29sb3JUYWJsZTtcclxuICAgICAgICBwcml2YXRlIGNvbnN0IGludCBHcmVlblNoaWZ0ID0gODtcclxuICAgICAgICBwcml2YXRlIGNvbnN0IGludCBSZWRTaGlmdCA9IDB4MTA7XHJcbiAgICAgICAgcHJpdmF0ZSBjb25zdCBpbnQgV2luMzJCbHVlU2hpZnQgPSAweDEwO1xyXG4gICAgICAgIHByaXZhdGUgY29uc3QgaW50IFdpbjMyR3JlZW5TaGlmdCA9IDg7XHJcbiAgICAgICAgcHJpdmF0ZSBjb25zdCBpbnQgV2luMzJSZWRTaGlmdCA9IDA7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEdldENvbG9yTmFtZShpbnQgaW5kZXgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBFbnN1cmVDb2xvck5hbWVUYWJsZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gY29sb3JOYW1lVGFibGVbaW5kZXhdO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vIE1ldGhvZHNcclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbG9yIEFyZ2JUb0tub3duQ29sb3IoaW50IHRhcmdldEFSR0IpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBFbnN1cmVDb2xvclRhYmxlKCk7XHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgY29sb3JUYWJsZS5MZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaW50IG51bTIgPSBjb2xvclRhYmxlW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKG51bTIgPT0gdGFyZ2V0QVJHQilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBDb2xvciBjb2xvciA9IENvbG9yLkZyb21Lbm93bkNvbG9yKChLbm93bkNvbG9yKWkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY29sb3IuSXNTeXN0ZW1Db2xvcilcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xvcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIENvbG9yLkZyb21BcmdiKHRhcmdldEFSR0IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgaW50IEVuY29kZShpbnQgYWxwaGEsIGludCByZWQsIGludCBncmVlbiwgaW50IGJsdWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKCgoKHJlZCA8PCAweDEwKSB8IChncmVlbiA8PCA4KSkgfCBibHVlKSB8IChhbHBoYSA8PCAweDE4KSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyB2b2lkIEVuc3VyZUNvbG9yTmFtZVRhYmxlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmIChjb2xvck5hbWVUYWJsZSA9PSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBJbml0Q29sb3JOYW1lVGFibGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgdm9pZCBFbnN1cmVDb2xvclRhYmxlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmIChjb2xvclRhYmxlID09IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIEluaXRDb2xvclRhYmxlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIGludCBGcm9tV2luMzJWYWx1ZShpbnQgdmFsdWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gRW5jb2RlKDB4ZmYsIHZhbHVlICYgMHhmZiwgKHZhbHVlID4+IDgpICYgMHhmZiwgKHZhbHVlID4+IDB4MTApICYgMHhmZik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyB2b2lkIEluaXRDb2xvck5hbWVUYWJsZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmdbXSBzID0gbmV3IHN0cmluZ1sweGFmXTtcclxuICAgICAgICAgICAgc1sxXSA9IFwiQWN0aXZlQm9yZGVyXCI7XHJcbiAgICAgICAgICAgIHNbMl0gPSBcIkFjdGl2ZUNhcHRpb25cIjtcclxuICAgICAgICAgICAgc1szXSA9IFwiQWN0aXZlQ2FwdGlvblRleHRcIjtcclxuICAgICAgICAgICAgc1s0XSA9IFwiQXBwV29ya3NwYWNlXCI7XHJcbiAgICAgICAgICAgIHNbMHhhOF0gPSBcIkJ1dHRvbkZhY2VcIjtcclxuICAgICAgICAgICAgc1sweGE5XSA9IFwiQnV0dG9uSGlnaGxpZ2h0XCI7XHJcbiAgICAgICAgICAgIHNbMTcwXSA9IFwiQnV0dG9uU2hhZG93XCI7XHJcbiAgICAgICAgICAgIHNbNV0gPSBcIkNvbnRyb2xcIjtcclxuICAgICAgICAgICAgc1s2XSA9IFwiQ29udHJvbERhcmtcIjtcclxuICAgICAgICAgICAgc1s3XSA9IFwiQ29udHJvbERhcmtEYXJrXCI7XHJcbiAgICAgICAgICAgIHNbOF0gPSBcIkNvbnRyb2xMaWdodFwiO1xyXG4gICAgICAgICAgICBzWzldID0gXCJDb250cm9sTGlnaHRMaWdodFwiO1xyXG4gICAgICAgICAgICBzWzEwXSA9IFwiQ29udHJvbFRleHRcIjtcclxuICAgICAgICAgICAgc1sxMV0gPSBcIkRlc2t0b3BcIjtcclxuICAgICAgICAgICAgc1sxNzFdID0gXCJHcmFkaWVudEFjdGl2ZUNhcHRpb25cIjtcclxuICAgICAgICAgICAgc1sweGFjXSA9IFwiR3JhZGllbnRJbmFjdGl2ZUNhcHRpb25cIjtcclxuICAgICAgICAgICAgc1sxMl0gPSBcIkdyYXlUZXh0XCI7XHJcbiAgICAgICAgICAgIHNbMTNdID0gXCJIaWdobGlnaHRcIjtcclxuICAgICAgICAgICAgc1sxNF0gPSBcIkhpZ2hsaWdodFRleHRcIjtcclxuICAgICAgICAgICAgc1sxNV0gPSBcIkhvdFRyYWNrXCI7XHJcbiAgICAgICAgICAgIHNbMHgxMF0gPSBcIkluYWN0aXZlQm9yZGVyXCI7XHJcbiAgICAgICAgICAgIHNbMHgxMV0gPSBcIkluYWN0aXZlQ2FwdGlvblwiO1xyXG4gICAgICAgICAgICBzWzB4MTJdID0gXCJJbmFjdGl2ZUNhcHRpb25UZXh0XCI7XHJcbiAgICAgICAgICAgIHNbMHgxM10gPSBcIkluZm9cIjtcclxuICAgICAgICAgICAgc1syMF0gPSBcIkluZm9UZXh0XCI7XHJcbiAgICAgICAgICAgIHNbMHgxNV0gPSBcIk1lbnVcIjtcclxuICAgICAgICAgICAgc1sweGFkXSA9IFwiTWVudUJhclwiO1xyXG4gICAgICAgICAgICBzWzB4YWVdID0gXCJNZW51SGlnaGxpZ2h0XCI7XHJcbiAgICAgICAgICAgIHNbMHgxNl0gPSBcIk1lbnVUZXh0XCI7XHJcbiAgICAgICAgICAgIHNbMHgxN10gPSBcIlNjcm9sbEJhclwiO1xyXG4gICAgICAgICAgICBzWzB4MThdID0gXCJXaW5kb3dcIjtcclxuICAgICAgICAgICAgc1sweDE5XSA9IFwiV2luZG93RnJhbWVcIjtcclxuICAgICAgICAgICAgc1sweDFhXSA9IFwiV2luZG93VGV4dFwiO1xyXG4gICAgICAgICAgICBzWzI3XSA9IFwiVHJhbnNwYXJlbnRcIjtcclxuICAgICAgICAgICAgc1sweDFjXSA9IFwiQWxpY2VCbHVlXCI7XHJcbiAgICAgICAgICAgIHNbMHgxZF0gPSBcIkFudGlxdWVXaGl0ZVwiO1xyXG4gICAgICAgICAgICBzWzMwXSA9IFwiQXF1YVwiO1xyXG4gICAgICAgICAgICBzWzB4MWZdID0gXCJBcXVhbWFyaW5lXCI7XHJcbiAgICAgICAgICAgIHNbMHgyMF0gPSBcIkF6dXJlXCI7XHJcbiAgICAgICAgICAgIHNbMHgyMV0gPSBcIkJlaWdlXCI7XHJcbiAgICAgICAgICAgIHNbMHgyMl0gPSBcIkJpc3F1ZVwiO1xyXG4gICAgICAgICAgICBzWzB4MjNdID0gXCJCbGFja1wiO1xyXG4gICAgICAgICAgICBzWzB4MjRdID0gXCJCbGFuY2hlZEFsbW9uZFwiO1xyXG4gICAgICAgICAgICBzWzB4MjVdID0gXCJCbHVlXCI7XHJcbiAgICAgICAgICAgIHNbMHgyNl0gPSBcIkJsdWVWaW9sZXRcIjtcclxuICAgICAgICAgICAgc1sweDI3XSA9IFwiQnJvd25cIjtcclxuICAgICAgICAgICAgc1s0MF0gPSBcIkJ1cmx5V29vZFwiO1xyXG4gICAgICAgICAgICBzWzB4MjldID0gXCJDYWRldEJsdWVcIjtcclxuICAgICAgICAgICAgc1sweDJhXSA9IFwiQ2hhcnRyZXVzZVwiO1xyXG4gICAgICAgICAgICBzWzQzXSA9IFwiQ2hvY29sYXRlXCI7XHJcbiAgICAgICAgICAgIHNbMHgyY10gPSBcIkNvcmFsXCI7XHJcbiAgICAgICAgICAgIHNbMHgyZF0gPSBcIkNvcm5mbG93ZXJCbHVlXCI7XHJcbiAgICAgICAgICAgIHNbMHgyZV0gPSBcIkNvcm5zaWxrXCI7XHJcbiAgICAgICAgICAgIHNbMHgyZl0gPSBcIkNyaW1zb25cIjtcclxuICAgICAgICAgICAgc1sweDMwXSA9IFwiQ3lhblwiO1xyXG4gICAgICAgICAgICBzWzB4MzFdID0gXCJEYXJrQmx1ZVwiO1xyXG4gICAgICAgICAgICBzWzUwXSA9IFwiRGFya0N5YW5cIjtcclxuICAgICAgICAgICAgc1sweDMzXSA9IFwiRGFya0dvbGRlbnJvZFwiO1xyXG4gICAgICAgICAgICBzWzB4MzRdID0gXCJEYXJrR3JheVwiO1xyXG4gICAgICAgICAgICBzWzB4MzVdID0gXCJEYXJrR3JlZW5cIjtcclxuICAgICAgICAgICAgc1sweDM2XSA9IFwiRGFya0toYWtpXCI7XHJcbiAgICAgICAgICAgIHNbMHgzN10gPSBcIkRhcmtNYWdlbnRhXCI7XHJcbiAgICAgICAgICAgIHNbMHgzOF0gPSBcIkRhcmtPbGl2ZUdyZWVuXCI7XHJcbiAgICAgICAgICAgIHNbMHgzOV0gPSBcIkRhcmtPcmFuZ2VcIjtcclxuICAgICAgICAgICAgc1sweDNhXSA9IFwiRGFya09yY2hpZFwiO1xyXG4gICAgICAgICAgICBzWzU5XSA9IFwiRGFya1JlZFwiO1xyXG4gICAgICAgICAgICBzWzYwXSA9IFwiRGFya1NhbG1vblwiO1xyXG4gICAgICAgICAgICBzWzB4M2RdID0gXCJEYXJrU2VhR3JlZW5cIjtcclxuICAgICAgICAgICAgc1sweDNlXSA9IFwiRGFya1NsYXRlQmx1ZVwiO1xyXG4gICAgICAgICAgICBzWzB4M2ZdID0gXCJEYXJrU2xhdGVHcmF5XCI7XHJcbiAgICAgICAgICAgIHNbMHg0MF0gPSBcIkRhcmtUdXJxdW9pc2VcIjtcclxuICAgICAgICAgICAgc1sweDQxXSA9IFwiRGFya1Zpb2xldFwiO1xyXG4gICAgICAgICAgICBzWzB4NDJdID0gXCJEZWVwUGlua1wiO1xyXG4gICAgICAgICAgICBzWzB4NDNdID0gXCJEZWVwU2t5Qmx1ZVwiO1xyXG4gICAgICAgICAgICBzWzB4NDRdID0gXCJEaW1HcmF5XCI7XHJcbiAgICAgICAgICAgIHNbMHg0NV0gPSBcIkRvZGdlckJsdWVcIjtcclxuICAgICAgICAgICAgc1s3MF0gPSBcIkZpcmVicmlja1wiO1xyXG4gICAgICAgICAgICBzWzB4NDddID0gXCJGbG9yYWxXaGl0ZVwiO1xyXG4gICAgICAgICAgICBzWzB4NDhdID0gXCJGb3Jlc3RHcmVlblwiO1xyXG4gICAgICAgICAgICBzWzB4NDldID0gXCJGdWNoc2lhXCI7XHJcbiAgICAgICAgICAgIHNbMHg0YV0gPSBcIkdhaW5zYm9yb1wiO1xyXG4gICAgICAgICAgICBzWzc1XSA9IFwiR2hvc3RXaGl0ZVwiO1xyXG4gICAgICAgICAgICBzWzB4NGNdID0gXCJHb2xkXCI7XHJcbiAgICAgICAgICAgIHNbMHg0ZF0gPSBcIkdvbGRlbnJvZFwiO1xyXG4gICAgICAgICAgICBzWzB4NGVdID0gXCJHcmF5XCI7XHJcbiAgICAgICAgICAgIHNbMHg0Zl0gPSBcIkdyZWVuXCI7XHJcbiAgICAgICAgICAgIHNbODBdID0gXCJHcmVlblllbGxvd1wiO1xyXG4gICAgICAgICAgICBzWzB4NTFdID0gXCJIb25leWRld1wiO1xyXG4gICAgICAgICAgICBzWzB4NTJdID0gXCJIb3RQaW5rXCI7XHJcbiAgICAgICAgICAgIHNbMHg1M10gPSBcIkluZGlhblJlZFwiO1xyXG4gICAgICAgICAgICBzWzB4NTRdID0gXCJJbmRpZ29cIjtcclxuICAgICAgICAgICAgc1sweDU1XSA9IFwiSXZvcnlcIjtcclxuICAgICAgICAgICAgc1sweDU2XSA9IFwiS2hha2lcIjtcclxuICAgICAgICAgICAgc1sweDU3XSA9IFwiTGF2ZW5kZXJcIjtcclxuICAgICAgICAgICAgc1sweDU4XSA9IFwiTGF2ZW5kZXJCbHVzaFwiO1xyXG4gICAgICAgICAgICBzWzB4NTldID0gXCJMYXduR3JlZW5cIjtcclxuICAgICAgICAgICAgc1s5MF0gPSBcIkxlbW9uQ2hpZmZvblwiO1xyXG4gICAgICAgICAgICBzWzkxXSA9IFwiTGlnaHRCbHVlXCI7XHJcbiAgICAgICAgICAgIHNbMHg1Y10gPSBcIkxpZ2h0Q29yYWxcIjtcclxuICAgICAgICAgICAgc1sweDVkXSA9IFwiTGlnaHRDeWFuXCI7XHJcbiAgICAgICAgICAgIHNbMHg1ZV0gPSBcIkxpZ2h0R29sZGVucm9kWWVsbG93XCI7XHJcbiAgICAgICAgICAgIHNbMHg1Zl0gPSBcIkxpZ2h0R3JheVwiO1xyXG4gICAgICAgICAgICBzWzB4NjBdID0gXCJMaWdodEdyZWVuXCI7XHJcbiAgICAgICAgICAgIHNbMHg2MV0gPSBcIkxpZ2h0UGlua1wiO1xyXG4gICAgICAgICAgICBzWzB4NjJdID0gXCJMaWdodFNhbG1vblwiO1xyXG4gICAgICAgICAgICBzWzB4NjNdID0gXCJMaWdodFNlYUdyZWVuXCI7XHJcbiAgICAgICAgICAgIHNbMTAwXSA9IFwiTGlnaHRTa3lCbHVlXCI7XHJcbiAgICAgICAgICAgIHNbMHg2NV0gPSBcIkxpZ2h0U2xhdGVHcmF5XCI7XHJcbiAgICAgICAgICAgIHNbMHg2Nl0gPSBcIkxpZ2h0U3RlZWxCbHVlXCI7XHJcbiAgICAgICAgICAgIHNbMHg2N10gPSBcIkxpZ2h0WWVsbG93XCI7XHJcbiAgICAgICAgICAgIHNbMHg2OF0gPSBcIkxpbWVcIjtcclxuICAgICAgICAgICAgc1sweDY5XSA9IFwiTGltZUdyZWVuXCI7XHJcbiAgICAgICAgICAgIHNbMHg2YV0gPSBcIkxpbmVuXCI7XHJcbiAgICAgICAgICAgIHNbMTA3XSA9IFwiTWFnZW50YVwiO1xyXG4gICAgICAgICAgICBzWzB4NmNdID0gXCJNYXJvb25cIjtcclxuICAgICAgICAgICAgc1sweDZkXSA9IFwiTWVkaXVtQXF1YW1hcmluZVwiO1xyXG4gICAgICAgICAgICBzWzExMF0gPSBcIk1lZGl1bUJsdWVcIjtcclxuICAgICAgICAgICAgc1sweDZmXSA9IFwiTWVkaXVtT3JjaGlkXCI7XHJcbiAgICAgICAgICAgIHNbMHg3MF0gPSBcIk1lZGl1bVB1cnBsZVwiO1xyXG4gICAgICAgICAgICBzWzB4NzFdID0gXCJNZWRpdW1TZWFHcmVlblwiO1xyXG4gICAgICAgICAgICBzWzB4NzJdID0gXCJNZWRpdW1TbGF0ZUJsdWVcIjtcclxuICAgICAgICAgICAgc1sweDczXSA9IFwiTWVkaXVtU3ByaW5nR3JlZW5cIjtcclxuICAgICAgICAgICAgc1sweDc0XSA9IFwiTWVkaXVtVHVycXVvaXNlXCI7XHJcbiAgICAgICAgICAgIHNbMHg3NV0gPSBcIk1lZGl1bVZpb2xldFJlZFwiO1xyXG4gICAgICAgICAgICBzWzB4NzZdID0gXCJNaWRuaWdodEJsdWVcIjtcclxuICAgICAgICAgICAgc1sweDc3XSA9IFwiTWludENyZWFtXCI7XHJcbiAgICAgICAgICAgIHNbMTIwXSA9IFwiTWlzdHlSb3NlXCI7XHJcbiAgICAgICAgICAgIHNbMHg3OV0gPSBcIk1vY2Nhc2luXCI7XHJcbiAgICAgICAgICAgIHNbMHg3YV0gPSBcIk5hdmFqb1doaXRlXCI7XHJcbiAgICAgICAgICAgIHNbMTIzXSA9IFwiTmF2eVwiO1xyXG4gICAgICAgICAgICBzWzB4N2NdID0gXCJPbGRMYWNlXCI7XHJcbiAgICAgICAgICAgIHNbMHg3ZF0gPSBcIk9saXZlXCI7XHJcbiAgICAgICAgICAgIHNbMHg3ZV0gPSBcIk9saXZlRHJhYlwiO1xyXG4gICAgICAgICAgICBzWzB4N2ZdID0gXCJPcmFuZ2VcIjtcclxuICAgICAgICAgICAgc1sweDgwXSA9IFwiT3JhbmdlUmVkXCI7XHJcbiAgICAgICAgICAgIHNbMHg4MV0gPSBcIk9yY2hpZFwiO1xyXG4gICAgICAgICAgICBzWzEzMF0gPSBcIlBhbGVHb2xkZW5yb2RcIjtcclxuICAgICAgICAgICAgc1sweDgzXSA9IFwiUGFsZUdyZWVuXCI7XHJcbiAgICAgICAgICAgIHNbMHg4NF0gPSBcIlBhbGVUdXJxdW9pc2VcIjtcclxuICAgICAgICAgICAgc1sweDg1XSA9IFwiUGFsZVZpb2xldFJlZFwiO1xyXG4gICAgICAgICAgICBzWzB4ODZdID0gXCJQYXBheWFXaGlwXCI7XHJcbiAgICAgICAgICAgIHNbMHg4N10gPSBcIlBlYWNoUHVmZlwiO1xyXG4gICAgICAgICAgICBzWzB4ODhdID0gXCJQZXJ1XCI7XHJcbiAgICAgICAgICAgIHNbMHg4OV0gPSBcIlBpbmtcIjtcclxuICAgICAgICAgICAgc1sweDhhXSA9IFwiUGx1bVwiO1xyXG4gICAgICAgICAgICBzWzEzOV0gPSBcIlBvd2RlckJsdWVcIjtcclxuICAgICAgICAgICAgc1sxNDBdID0gXCJQdXJwbGVcIjtcclxuICAgICAgICAgICAgc1sweDhkXSA9IFwiUmVkXCI7XHJcbiAgICAgICAgICAgIHNbMHg4ZV0gPSBcIlJvc3lCcm93blwiO1xyXG4gICAgICAgICAgICBzWzB4OGZdID0gXCJSb3lhbEJsdWVcIjtcclxuICAgICAgICAgICAgc1sweDkwXSA9IFwiU2FkZGxlQnJvd25cIjtcclxuICAgICAgICAgICAgc1sweDkxXSA9IFwiU2FsbW9uXCI7XHJcbiAgICAgICAgICAgIHNbMHg5Ml0gPSBcIlNhbmR5QnJvd25cIjtcclxuICAgICAgICAgICAgc1sweDkzXSA9IFwiU2VhR3JlZW5cIjtcclxuICAgICAgICAgICAgc1sweDk0XSA9IFwiU2VhU2hlbGxcIjtcclxuICAgICAgICAgICAgc1sweDk1XSA9IFwiU2llbm5hXCI7XHJcbiAgICAgICAgICAgIHNbMTUwXSA9IFwiU2lsdmVyXCI7XHJcbiAgICAgICAgICAgIHNbMHg5N10gPSBcIlNreUJsdWVcIjtcclxuICAgICAgICAgICAgc1sweDk4XSA9IFwiU2xhdGVCbHVlXCI7XHJcbiAgICAgICAgICAgIHNbMHg5OV0gPSBcIlNsYXRlR3JheVwiO1xyXG4gICAgICAgICAgICBzWzB4OWFdID0gXCJTbm93XCI7XHJcbiAgICAgICAgICAgIHNbMTU1XSA9IFwiU3ByaW5nR3JlZW5cIjtcclxuICAgICAgICAgICAgc1sweDljXSA9IFwiU3RlZWxCbHVlXCI7XHJcbiAgICAgICAgICAgIHNbMHg5ZF0gPSBcIlRhblwiO1xyXG4gICAgICAgICAgICBzWzB4OWVdID0gXCJUZWFsXCI7XHJcbiAgICAgICAgICAgIHNbMHg5Zl0gPSBcIlRoaXN0bGVcIjtcclxuICAgICAgICAgICAgc1sxNjBdID0gXCJUb21hdG9cIjtcclxuICAgICAgICAgICAgc1sweGExXSA9IFwiVHVycXVvaXNlXCI7XHJcbiAgICAgICAgICAgIHNbMHhhMl0gPSBcIlZpb2xldFwiO1xyXG4gICAgICAgICAgICBzWzB4YTNdID0gXCJXaGVhdFwiO1xyXG4gICAgICAgICAgICBzWzB4YTRdID0gXCJXaGl0ZVwiO1xyXG4gICAgICAgICAgICBzWzB4YTVdID0gXCJXaGl0ZVNtb2tlXCI7XHJcbiAgICAgICAgICAgIHNbMHhhNl0gPSBcIlllbGxvd1wiO1xyXG4gICAgICAgICAgICBzWzB4YTddID0gXCJZZWxsb3dHcmVlblwiO1xyXG4gICAgICAgICAgICBjb2xvck5hbWVUYWJsZSA9IHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyB2b2lkIEluaXRDb2xvclRhYmxlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludFtdIGMgPSBuZXcgaW50WzB4YWZdO1xyXG5cclxuICAgICAgICAgICAgY1syN10gPSAweGZmZmZmZjtcclxuICAgICAgICAgICAgY1sweDFjXSA9IC05ODQ4MzM7XHJcbiAgICAgICAgICAgIGNbMHgxZF0gPSAtMzMyODQxO1xyXG4gICAgICAgICAgICBjWzMwXSA9IC0xNjcxMTY4MTtcclxuICAgICAgICAgICAgY1sweDFmXSA9IC04Mzg4NjUyO1xyXG4gICAgICAgICAgICBjWzB4MjBdID0gLTk4MzA0MTtcclxuICAgICAgICAgICAgY1sweDIxXSA9IC02NTc5NTY7XHJcbiAgICAgICAgICAgIGNbMHgyMl0gPSAtNjk3MjtcclxuICAgICAgICAgICAgY1sweDIzXSA9IC0xNjc3NzIxNjtcclxuICAgICAgICAgICAgY1sweDI0XSA9IC01MTcxO1xyXG4gICAgICAgICAgICBjWzB4MjVdID0gLTE2Nzc2OTYxO1xyXG4gICAgICAgICAgICBjWzB4MjZdID0gLTc3MjIwMTQ7XHJcbiAgICAgICAgICAgIGNbMHgyN10gPSAtNTk1Mjk4MjtcclxuICAgICAgICAgICAgY1s0MF0gPSAtMjE4MDk4NTtcclxuICAgICAgICAgICAgY1sweDI5XSA9IC0xMDUxMDY4ODtcclxuICAgICAgICAgICAgY1sweDJhXSA9IC04Mzg4ODY0O1xyXG4gICAgICAgICAgICBjWzQzXSA9IC0yOTg3NzQ2O1xyXG4gICAgICAgICAgICBjWzB4MmNdID0gLTMyOTQ0O1xyXG4gICAgICAgICAgICBjWzB4MmRdID0gLTEwMTg1MjM1O1xyXG4gICAgICAgICAgICBjWzB4MmVdID0gLTE4Mjg7XHJcbiAgICAgICAgICAgIGNbMHgyZl0gPSAtMjM1NDExNjtcclxuICAgICAgICAgICAgY1sweDMwXSA9IC0xNjcxMTY4MTtcclxuICAgICAgICAgICAgY1sweDMxXSA9IC0xNjc3NzA3NztcclxuICAgICAgICAgICAgY1s1MF0gPSAtMTY3NDE0OTM7XHJcbiAgICAgICAgICAgIGNbMHgzM10gPSAtNDY4NDI3NztcclxuICAgICAgICAgICAgY1sweDM0XSA9IC01NjU4MTk5O1xyXG4gICAgICAgICAgICBjWzB4MzVdID0gLTE2NzUxNjE2O1xyXG4gICAgICAgICAgICBjWzB4MzZdID0gLTQzNDM5NTc7XHJcbiAgICAgICAgICAgIGNbMHgzN10gPSAtNzY2NzU3MztcclxuICAgICAgICAgICAgY1sweDM4XSA9IC0xMTE3OTIxNztcclxuICAgICAgICAgICAgY1sweDM5XSA9IC0yOTY5NjtcclxuICAgICAgICAgICAgY1sweDNhXSA9IC02NzM3MjA0O1xyXG4gICAgICAgICAgICBjWzU5XSA9IC03NjY3NzEyO1xyXG4gICAgICAgICAgICBjWzYwXSA9IC0xNDY4ODA2O1xyXG4gICAgICAgICAgICBjWzB4M2RdID0gLTczNTczMDE7XHJcbiAgICAgICAgICAgIGNbMHgzZV0gPSAtMTIwNDI4Njk7XHJcbiAgICAgICAgICAgIGNbMHgzZl0gPSAtMTM2NzY3MjE7XHJcbiAgICAgICAgICAgIGNbMHg0MF0gPSAtMTY3MjQyNzE7XHJcbiAgICAgICAgICAgIGNbMHg0MV0gPSAtNzA3NzY3NztcclxuICAgICAgICAgICAgY1sweDQyXSA9IC02MDI2OTtcclxuICAgICAgICAgICAgY1sweDQzXSA9IC0xNjcyODA2NTtcclxuICAgICAgICAgICAgY1sweDQ0XSA9IC05ODY4OTUxO1xyXG4gICAgICAgICAgICBjWzB4NDVdID0gLTE0Nzc0MDE3O1xyXG4gICAgICAgICAgICBjWzcwXSA9IC01MTAzMDcwO1xyXG4gICAgICAgICAgICBjWzB4NDddID0gLTEyOTY7XHJcbiAgICAgICAgICAgIGNbMHg0OF0gPSAtMTQ1MTMzNzQ7XHJcbiAgICAgICAgICAgIGNbMHg0OV0gPSAtNjUyODE7XHJcbiAgICAgICAgICAgIGNbMHg0YV0gPSAtMjMwMjc1NjtcclxuICAgICAgICAgICAgY1s3NV0gPSAtNDYwNTQ1O1xyXG4gICAgICAgICAgICBjWzB4NGNdID0gLTEwNDk2O1xyXG4gICAgICAgICAgICBjWzB4NGRdID0gLTI0NDgwOTY7XHJcbiAgICAgICAgICAgIGNbMHg0ZV0gPSAtODM1NTcxMjtcclxuICAgICAgICAgICAgY1sweDRmXSA9IC0xNjc0NDQ0ODtcclxuICAgICAgICAgICAgY1s4MF0gPSAtNTM3NDE2MTtcclxuICAgICAgICAgICAgY1sweDUxXSA9IC05ODMwNTY7XHJcbiAgICAgICAgICAgIGNbMHg1Ml0gPSAtMzg0NzY7XHJcbiAgICAgICAgICAgIGNbMHg1M10gPSAtMzMxODY5MjtcclxuICAgICAgICAgICAgY1sweDU0XSA9IC0xMTg2MTg4NjtcclxuICAgICAgICAgICAgY1sweDU1XSA9IC0xNjtcclxuICAgICAgICAgICAgY1sweDU2XSA9IC05ODk1NTY7XHJcbiAgICAgICAgICAgIGNbMHg1N10gPSAtMTY0NDgwNjtcclxuICAgICAgICAgICAgY1sweDU4XSA9IC0zODUxO1xyXG4gICAgICAgICAgICBjWzB4NTldID0gLTg1ODYyNDA7XHJcbiAgICAgICAgICAgIGNbOTBdID0gLTEzMzE7XHJcbiAgICAgICAgICAgIGNbOTFdID0gLTUzODM5NjI7XHJcbiAgICAgICAgICAgIGNbMHg1Y10gPSAtMTAxNTY4MDtcclxuICAgICAgICAgICAgY1sweDVkXSA9IC0yMDMxNjE3O1xyXG4gICAgICAgICAgICBjWzB4NWVdID0gLTMyOTAwNjtcclxuICAgICAgICAgICAgY1sweDVmXSA9IC0yODk0ODkzO1xyXG4gICAgICAgICAgICBjWzB4NjBdID0gLTcyNzg5NjA7XHJcbiAgICAgICAgICAgIGNbMHg2MV0gPSAtMTg3NTE7XHJcbiAgICAgICAgICAgIGNbMHg2Ml0gPSAtMjQ0NTQ7XHJcbiAgICAgICAgICAgIGNbMHg2M10gPSAtMTQ2MzQzMjY7XHJcbiAgICAgICAgICAgIGNbMTAwXSA9IC03ODc2ODcwO1xyXG4gICAgICAgICAgICBjWzB4NjVdID0gLTg5NDM0NjM7XHJcbiAgICAgICAgICAgIGNbMHg2Nl0gPSAtNTE5MjQ4MjtcclxuICAgICAgICAgICAgY1sweDY3XSA9IC0zMjtcclxuICAgICAgICAgICAgY1sweDY4XSA9IC0xNjcxMTkzNjtcclxuICAgICAgICAgICAgY1sweDY5XSA9IC0xMzQ0Nzg4NjtcclxuICAgICAgICAgICAgY1sweDZhXSA9IC0zMzE1NDY7XHJcbiAgICAgICAgICAgIGNbMTA3XSA9IC02NTI4MTtcclxuICAgICAgICAgICAgY1sweDZjXSA9IC04Mzg4NjA4O1xyXG4gICAgICAgICAgICBjWzB4NmRdID0gLTEwMDM5ODk0O1xyXG4gICAgICAgICAgICBjWzExMF0gPSAtMTY3NzcwMTE7XHJcbiAgICAgICAgICAgIGNbMHg2Zl0gPSAtNDU2NTU0OTtcclxuICAgICAgICAgICAgY1sweDcwXSA9IC03MTE0NTMzO1xyXG4gICAgICAgICAgICBjWzB4NzFdID0gLTEyNzk5MTE5O1xyXG4gICAgICAgICAgICBjWzB4NzJdID0gLTg2ODk0MjY7XHJcbiAgICAgICAgICAgIGNbMHg3M10gPSAtMTY3MTMwNjI7XHJcbiAgICAgICAgICAgIGNbMHg3NF0gPSAtMTIwMDQ5MTY7XHJcbiAgICAgICAgICAgIGNbMHg3NV0gPSAtMzczMDA0MztcclxuICAgICAgICAgICAgY1sweDc2XSA9IC0xNTEzMjMwNDtcclxuICAgICAgICAgICAgY1sweDc3XSA9IC02NTUzNjY7XHJcbiAgICAgICAgICAgIGNbMTIwXSA9IC02OTQzO1xyXG4gICAgICAgICAgICBjWzB4NzldID0gLTY5ODc7XHJcbiAgICAgICAgICAgIGNbMHg3YV0gPSAtODUzMTtcclxuICAgICAgICAgICAgY1sxMjNdID0gLTE2Nzc3MDg4O1xyXG4gICAgICAgICAgICBjWzB4N2NdID0gLTEzMzY1ODtcclxuICAgICAgICAgICAgY1sweDdkXSA9IC04MzU1ODQwO1xyXG4gICAgICAgICAgICBjWzB4N2VdID0gLTk3Mjg0Nzc7XHJcbiAgICAgICAgICAgIGNbMHg3Zl0gPSAtMjMyOTY7XHJcbiAgICAgICAgICAgIGNbMHg4MF0gPSAtNDc4NzI7XHJcbiAgICAgICAgICAgIGNbMHg4MV0gPSAtMjQ2MTQ4MjtcclxuICAgICAgICAgICAgY1sxMzBdID0gLTExMjAwODY7XHJcbiAgICAgICAgICAgIGNbMHg4M10gPSAtNjc1MTMzNjtcclxuICAgICAgICAgICAgY1sweDg0XSA9IC01MjQ3MjUwO1xyXG4gICAgICAgICAgICBjWzB4ODVdID0gLTIzOTYwMTM7XHJcbiAgICAgICAgICAgIGNbMHg4Nl0gPSAtNDEzOTtcclxuICAgICAgICAgICAgY1sweDg3XSA9IC05NTQzO1xyXG4gICAgICAgICAgICBjWzB4ODhdID0gLTMzMDgyMjU7XHJcbiAgICAgICAgICAgIGNbMHg4OV0gPSAtMTYxODE7XHJcbiAgICAgICAgICAgIGNbMHg4YV0gPSAtMjI1MjU3OTtcclxuICAgICAgICAgICAgY1sxMzldID0gLTUxODUzMDY7XHJcbiAgICAgICAgICAgIGNbMTQwXSA9IC04Mzg4NDgwO1xyXG4gICAgICAgICAgICBjWzB4OGRdID0gLTY1NTM2O1xyXG4gICAgICAgICAgICBjWzB4OGVdID0gLTQ0MTk2OTc7XHJcbiAgICAgICAgICAgIGNbMHg4Zl0gPSAtMTI0OTAyNzE7XHJcbiAgICAgICAgICAgIGNbMHg5MF0gPSAtNzY1MDAyOTtcclxuICAgICAgICAgICAgY1sweDkxXSA9IC0zNjAzMzQ7XHJcbiAgICAgICAgICAgIGNbMHg5Ml0gPSAtNzQ0MzUyO1xyXG4gICAgICAgICAgICBjWzB4OTNdID0gLTEzNzI2ODg5O1xyXG4gICAgICAgICAgICBjWzB4OTRdID0gLTI1Nzg7XHJcbiAgICAgICAgICAgIGNbMHg5NV0gPSAtNjI3MDQxOTtcclxuICAgICAgICAgICAgY1sxNTBdID0gLTQxNDQ5NjA7XHJcbiAgICAgICAgICAgIGNbMHg5N10gPSAtNzg3Njg4NTtcclxuICAgICAgICAgICAgY1sweDk4XSA9IC05ODA3MTU1O1xyXG4gICAgICAgICAgICBjWzB4OTldID0gLTk0MDQyNzI7XHJcbiAgICAgICAgICAgIGNbMHg5YV0gPSAtMTI4NjtcclxuICAgICAgICAgICAgY1sxNTVdID0gLTE2NzExODA5O1xyXG4gICAgICAgICAgICBjWzB4OWNdID0gLTEyMTU2MjM2O1xyXG4gICAgICAgICAgICBjWzB4OWRdID0gLTI5Njg0MzY7XHJcbiAgICAgICAgICAgIGNbMHg5ZV0gPSAtMTY3NDQzMjA7XHJcbiAgICAgICAgICAgIGNbMHg5Zl0gPSAtMjU3MjMyODtcclxuICAgICAgICAgICAgY1sxNjBdID0gLTQwMTIxO1xyXG4gICAgICAgICAgICBjWzB4YTFdID0gLTEyNTI1MzYwO1xyXG4gICAgICAgICAgICBjWzB4YTJdID0gLTExNDYxMzA7XHJcbiAgICAgICAgICAgIGNbMHhhM10gPSAtNjYzODg1O1xyXG4gICAgICAgICAgICBjWzB4YTRdID0gLTE7XHJcbiAgICAgICAgICAgIGNbMHhhNV0gPSAtNjU3OTMxO1xyXG4gICAgICAgICAgICBjWzB4YTZdID0gLTI1NjtcclxuICAgICAgICAgICAgY1sweGE3XSA9IC02NjMyMTQyO1xyXG4gICAgICAgICAgICBjb2xvclRhYmxlID0gYztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IEtub3duQ29sb3JUb0FyZ2IoS25vd25Db2xvciBjb2xvcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEVuc3VyZUNvbG9yVGFibGUoKTtcclxuICAgICAgICAgICAgaWYgKGNvbG9yIDw9IEtub3duQ29sb3IuTWVudUhpZ2hsaWdodClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbG9yVGFibGVbKGludCljb2xvcl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBLbm93bkNvbG9yVG9OYW1lKEtub3duQ29sb3IgY29sb3IpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBFbnN1cmVDb2xvck5hbWVUYWJsZSgpO1xyXG4gICAgICAgICAgICBpZiAoY29sb3IgPD0gS25vd25Db2xvci5NZW51SGlnaGxpZ2h0KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sb3JOYW1lVGFibGVbKGludCljb2xvcl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIENvbnRleHRNZW51IDogQ29udHJvbFxyXG4gICAge1xyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gRm9yIGludGVybmFsIHVzZSBvbmx5IC0gc28gaWYgd2UgY2xpY2sgb24gZG9jdW1lbnQgLSB3ZSBjYW4gY2xvc2UgYWxsIGNvbnRleHQgbWVudXMgLS0tXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICBwcm90ZWN0ZWQgQ29udGV4dE1lbnUgU3ViQ29udGV4dE9wZW5lZCA9IG51bGw7XHJcblxyXG4gICAgICAgIHB1YmxpYyBMaXN0PENvbnRleHRJdGVtPiBDb250ZXh0SXRlbXMgPSBuZXcgTGlzdDxDb250ZXh0SXRlbT4oKTtcclxuICAgICAgICBwcm90ZWN0ZWQgYm9vbCBWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBpbnQgVG90YWxDb250ZXh0SGFuZGxlcyA9IDA7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29udGV4dE1lbnUgTWFpbkNvbnRleHRNZW51ID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHVibGljIENvbnRleHRNZW51KCkgOiBiYXNlKFwiY29udGV4dG1lbnVcIilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuQ29udGVudC5vbm1vdXNlbGVhdmUgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuQ2xvc2UoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCB2b2lkIFJlbmRlckNvbnRleHRNZW51KClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIFdoYXQgd2UgbmVlZCB0byBkbyBmaXJzdCBpcyBnZXQgdGhlIG1heGVkIHNpemUgdGV4dC4uLlxyXG4gICAgICAgICAgICBpbnQgeCA9IDA7XHJcbiAgICAgICAgICAgIGludCBpaSA9IC0xO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5Db250ZW50LkVtcHR5KCk7XHJcblxyXG4gICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgQ29udGV4dEl0ZW1zLkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGludCB5ID0gQ29udGV4dEl0ZW1zW2ldLkNhcHRpb24uTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgaWYoeSA+IHgpIHsgeCA9IHk7IGlpID0gaTsgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihpaSA9PSAtMSlcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgaW50IGNhbHdpZHRoID0gKGludClHZXRUZXh0V2lkdGgoQ29udGV4dEl0ZW1zW2lpXS5DYXB0aW9uLCBTZXR0aW5ncy5EZWZhdWx0Rm9udCk7XHJcbiAgICAgICAgICAgIGlmKGNhbHdpZHRoIDwgU2V0dGluZ3MuQ29udGV4dE1lbnVNaW5XaWR0aClcclxuICAgICAgICAgICAgICAgIGNhbHdpZHRoID0gU2V0dGluZ3MuQ29udGV4dE1lbnVNaW5XaWR0aDtcclxuICAgICAgICAgICAgaW50IHdpZHRoID0gKGNhbHdpZHRoICsgMzQgKyA4ICsgMik7XHJcblxyXG4gICAgICAgICAgICBpbnQgdG9wID0gMTtcclxuXHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBDb250ZXh0SXRlbXMuQ291bnQ7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHRJdGVtID0gQ29udGV4dEl0ZW1zW2ldO1xyXG4gICAgICAgICAgICAgICAgaW50IHkgPSBjb250ZXh0SXRlbS5DYXB0aW9uLkxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gTGFiZWwoY29udGV4dEl0ZW0uQ2FwdGlvbiwgMSwgdG9wLCB3aWR0aCAtIDIsIGZhbHNlLCBmYWxzZSwgXCJjb250ZXh0aXRlbVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpdGVtLm9uY2xpY2sgPSAoZXYpID0+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY29udGV4dEl0ZW0uRW5hYmxlZClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNvbnRleHRJdGVtLk9uSXRlbUNsaWNrICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRJdGVtLk9uSXRlbUNsaWNrKGNvbnRleHRJdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBDb250ZW50LkFwcGVuZENoaWxkKGl0ZW0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHRvcCArPSAyNDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihDb250ZXh0SXRlbXNbaV0uQmVnaW5Hcm91cCAmJiBpICE9IENvbnRleHRJdGVtcy5Db3VudClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0b3AgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VwID0gRGl2KFwiY29udGV4dGl0ZW1zZXBlcmF0b3JcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlcC5zdHlsZS50b3AgPSB0b3AuVG9QeCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcC5zdHlsZS53aWR0aCA9IGNhbHdpZHRoLlRvUHgoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgQ29udGVudC5BcHBlbmRDaGlsZChzZXApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0b3AgKz0gMjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG9wKys7XHJcblxyXG4gICAgICAgICAgICB0aGlzLkNvbnRlbnQuU2V0U2l6ZSh3aWR0aCwgdG9wKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNob3coVmVjdG9yMiBMb2NhdGlvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKE1haW5Db250ZXh0TWVudSAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBNYWluQ29udGV4dE1lbnUuQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIE1haW5Db250ZXh0TWVudSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgTWFpbkNvbnRleHRNZW51ID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIGlmKFZpc2libGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuQ2xvc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZighVmlzaWJsZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQ29udGVudC5TZXRMb2NhdGlvbihMb2NhdGlvbi5YaSAtIDUsIExvY2F0aW9uLllpIC0gNSk7XHJcbiAgICAgICAgICAgICAgICBSZW5kZXJDb250ZXh0TWVudSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIFRvdGFsQ29udGV4dEhhbmRsZXMrKztcclxuICAgICAgICAgICAgICAgIENvbnRlbnQuc3R5bGUuekluZGV4ID0gKFRvdGFsQ29udGV4dEhhbmRsZXMgKyBTZXR0aW5ncy5Db250ZXh0TWVudVN0YXJ0aW5nWkluZGV4KS5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgUmV0eXBlZC5kb20uZG9jdW1lbnQuYm9keS5BcHBlbmRDaGlsZCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIFZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBDbG9zZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihWaXNpYmxlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBUb3RhbENvbnRleHRIYW5kbGVzLS07XHJcbiAgICAgICAgICAgICAgICBSZXR5cGVkLmRvbS5kb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkPFJldHlwZWQuZG9tLk5vZGU+KChSZXR5cGVkLmRvbS5Ob2RlKXRoaXMpO1xyXG4gICAgICAgICAgICAgICAgVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihTdWJDb250ZXh0T3BlbmVkICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFN1YkNvbnRleHRPcGVuZWQuQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIFN1YkNvbnRleHRPcGVuZWQgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBDb250ZXh0SXRlbVxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgQ2FwdGlvbiA9IFwiXCI7XHJcbiAgICAgICAgcHVibGljIEFjdGlvbjxDb250ZXh0SXRlbT4gT25JdGVtQ2xpY2sgPSBudWxsO1xyXG4gICAgICAgIHB1YmxpYyBib29sIEJlZ2luR3JvdXAgPSBmYWxzZTtcclxuICAgICAgICBwdWJsaWMgYm9vbCBFbmFibGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgcHVibGljIENvbnRleHRJdGVtKClcclxuICAgICAgICB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgQ29udGV4dEl0ZW0oc3RyaW5nIGNhcHRpb24sIGJvb2wgYmVnaW5Hcm91cCA9IGZhbHNlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ2FwdGlvbiA9IGNhcHRpb247XHJcbiAgICAgICAgICAgIEJlZ2luR3JvdXAgPSBiZWdpbkdyb3VwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIENvbnRleHRJdGVtKHN0cmluZyBjYXB0aW9uLCBBY3Rpb248Q29udGV4dEl0ZW0+IF9Pbkl0ZW1DbGljaywgYm9vbCBiZWdpbkdyb3VwID0gZmFsc2UpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDYXB0aW9uID0gY2FwdGlvbjtcclxuICAgICAgICAgICAgQmVnaW5Hcm91cCA9IGJlZ2luR3JvdXA7XHJcbiAgICAgICAgICAgIE9uSXRlbUNsaWNrID0gX09uSXRlbUNsaWNrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBlbnVtIERhdGFUeXBlXHJcbiAgICB7XHJcbiAgICAgICAgT2JqZWN0LFxyXG4gICAgICAgIERhdGVUaW1lLFxyXG4gICAgICAgIFN0cmluZyxcclxuICAgICAgICBJbnRlZ2VyLFxyXG4gICAgICAgIExvbmcsXHJcbiAgICAgICAgRmxvYXQsXHJcbiAgICAgICAgRG91YmxlLFxyXG4gICAgICAgIERlY2ltYWwsXHJcbiAgICAgICAgQm9vbCxcclxuICAgICAgICBCeXRlLFxyXG4gICAgICAgIFNob3J0XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIERhdGFUYWJsZVxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBMaXN0PERhdGFDb2x1bW4+IENvbHVtbnMgPSBuZXcgTGlzdDxEYXRhQ29sdW1uPigpO1xyXG4gICAgICAgIHB1YmxpYyBMaXN0PGludD4gX3NlYXJjaFJlc3VsdHMgPSBuZXcgTGlzdDxpbnQ+KCk7XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIF9zZWFyY2hBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlIHN0cmluZyBfc2VhcmNoU3RyaW5nO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RyaW5nIFNlYXJjaFN0cmluZ1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIF9zZWFyY2hTdHJpbmc7IH0gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNlYXJjaChzdHJpbmcgc2VhcmNoRGF0YSwgR3JpZFZpZXcgdmlldylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHZpZXcgPT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgX3NlYXJjaFN0cmluZyA9IHN0cmluZy5FbXB0eTtcclxuICAgICAgICAgICAgICAgIF9zZWFyY2hBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIF9zZWFyY2hSZXN1bHRzID0gbmV3IExpc3Q8aW50PigpO1xyXG4gICAgICAgICAgICAgICAgUmVxdWlyZU9uRGF0YUNoYW5nZUV2ZW50KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF9zZWFyY2hTdHJpbmcgPSBzZWFyY2hEYXRhLlRvTG93ZXIoKTtcclxuICAgICAgICAgICAgX3NlYXJjaEFjdGl2ZSA9ICFzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKF9zZWFyY2hTdHJpbmcpO1xyXG4gICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIGlmKF9zZWFyY2hBY3RpdmUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIF9zZWFyY2hSZXN1bHRzID0gbmV3IExpc3Q8aW50PigpO1xyXG4gICAgICAgICAgICAgICAgaW50IGNvdW50ID0gdmlldy5Db2x1bW5Db3VudCgpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB2YXIgVXNlRm9ybWF0ID0gbmV3IExpc3Q8VHVwbGU8Ym9vbCwgc3RyaW5nPj4oKTtcclxuICAgICAgICAgICAgICAgIGZvcihpbnQgeCA9IDA7IHggPCBjb3VudDsgeCsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBncmlkQ29sID0gdmlldy5HZXRDb2x1bW4oeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZ3JpZENvbC5WaXNpYmxlKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIEZvcm1hdFN0cmluZyA9IGdyaWRDb2wuRm9ybWF0U3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVc2VGb3JtYXQuQWRkKG5ldyBUdXBsZTxib29sLCBzdHJpbmc+KHN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoRm9ybWF0U3RyaW5nKSwgRm9ybWF0U3RyaW5nKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVzZUZvcm1hdC5BZGQobmV3IFR1cGxlPGJvb2wsIHN0cmluZz4oZmFsc2UsIHN0cmluZy5FbXB0eSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IoaW50IHkgPSAwOyB5IDwgX1Jvd0NvdW50OyB5KyspXHJcbiAgICAgICAgICAgICAgICB7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBmb3IoaW50IHggPSAwOyB4IDwgY291bnQ7IHgrKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncmlkQ29sID0gdmlldy5HZXRDb2x1bW4oeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGdyaWRDb2wuVmlzaWJsZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIENvbHVtbiA9IGdyaWRDb2wuQ29sdW1uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlbHBlcldoYXRUb0RvID0gVXNlRm9ybWF0W3hdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIHZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGhlbHBlcldoYXRUb0RvLkl0ZW0xKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gQ29sdW1uLkdldERpc3BsYXlWYWx1ZSh5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IENvbHVtbi5HZXREaXNwbGF5VmFsdWUoeSwgaGVscGVyV2hhdFRvRG8uSXRlbTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKHZhbHVlKSAmJiB2YWx1ZS5Ub0xvd2VyKCkuU3RhcnRzV2l0aChzZWFyY2hEYXRhKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2VhcmNoUmVzdWx0cy5BZGQoeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIF9zZWFyY2hSZXN1bHRzID0gbmV3IExpc3Q8aW50PigpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBSZXF1aXJlT25EYXRhQ2hhbmdlRXZlbnQoKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBwdWJsaWMgZXZlbnQgRXZlbnRIYW5kbGVyIE9uRGF0YVNvdXJjZUNoYW5nZWQgPSBudWxsO1xyXG5cclxuICAgICAgICBwcml2YXRlIGJvb2wgX2luRGF0YUNoYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgIHByaXZhdGUgYm9vbCBfcmVxdWVzdGVkT25EYXRhQ2hhbmdlID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFJlcXVpcmVPbkRhdGFDaGFuZ2VFdmVudCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZighX2luRGF0YUNoYW5nZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgX3JlcXVlc3RlZE9uRGF0YUNoYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYoT25EYXRhU291cmNlQ2hhbmdlZCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIE9uRGF0YVNvdXJjZUNoYW5nZWQodGhpcywgbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBfcmVxdWVzdGVkT25EYXRhQ2hhbmdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQ2xlYXJSb3dzKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIF9Sb3dDb3VudCA9IDA7XHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBDb2x1bW5zLkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIENsZWFyQ2VsbHMoQ29sdW1uc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgaW50IF9Db2xDb3VudDtcclxuXHJcbiAgICAgICAgcHVibGljIGludCBDb2x1bW5Db3VudFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfQ29sQ291bnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbnQgX1Jvd0NvdW50O1xyXG5cclxuICAgICAgICBwdWJsaWMgaW50IFJvd0NvdW50XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoX3NlYXJjaEFjdGl2ZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3NlYXJjaFJlc3VsdHMuQ291bnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX1Jvd0NvdW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIExpc3Q8RGF0YVJvdz4gTmV3Um93cyA9IG5ldyBMaXN0PERhdGFSb3c+KCk7XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIENsZWFyQ2VsbHM8VD4oRGF0YUNvbHVtbiBfY29sdW1uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZHluYW1pYyBfY29sID0gX2NvbHVtbjtcclxuICAgICAgICAgICAgX2NvbC5DZWxscyA9IG5ldyBMaXN0PFQ+KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBDbGVhckNlbGxzKERhdGFDb2x1bW4gX2NvbHVtbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN3aXRjaChfY29sdW1uLkRhdGFUeXBlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5PYmplY3Q6XHJcbiAgICAgICAgICAgICAgICAgICAgQ2xlYXJDZWxsczxvYmplY3Q+KF9jb2x1bW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuRGF0ZVRpbWU6XHJcbiAgICAgICAgICAgICAgICAgICAgQ2xlYXJDZWxsczxEYXRlVGltZT8+KF9jb2x1bW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuU3RyaW5nOlxyXG4gICAgICAgICAgICAgICAgICAgIENsZWFyQ2VsbHM8c3RyaW5nPihfY29sdW1uKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkludGVnZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgQ2xlYXJDZWxsczxpbnQ/PihfY29sdW1uKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkxvbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgQ2xlYXJDZWxsczxsb25nPz4oX2NvbHVtbik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5GbG9hdDpcclxuICAgICAgICAgICAgICAgICAgICBDbGVhckNlbGxzPGZsb2F0Pz4oX2NvbHVtbik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5Eb3VibGU6XHJcbiAgICAgICAgICAgICAgICAgICAgQ2xlYXJDZWxsczxkb3VibGU/PihfY29sdW1uKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkRlY2ltYWw6XHJcbiAgICAgICAgICAgICAgICAgICAgQ2xlYXJDZWxsczxkZWNpbWFsPz4oX2NvbHVtbik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5Cb29sOlxyXG4gICAgICAgICAgICAgICAgICAgIENsZWFyQ2VsbHM8Ym9vbD8+KF9jb2x1bW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuQnl0ZTpcclxuICAgICAgICAgICAgICAgICAgICBDbGVhckNlbGxzPGJ5dGU/PihfY29sdW1uKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLlNob3J0OlxyXG4gICAgICAgICAgICAgICAgICAgIENsZWFyQ2VsbHM8c2hvcnQ/PihfY29sdW1uKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBSZXF1aXJlT25EYXRhQ2hhbmdlRXZlbnQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBEYXRhQ29sdW1uIEdldENvbHVtbkJ5RGF0YVR5cGUoRGF0YVR5cGUgdHlwZSA9IERhdGFUeXBlLk9iamVjdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN3aXRjaCh0eXBlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5PYmplY3Q6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRhQ29sdW1uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5EYXRlVGltZTpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGFDb2x1bW5EYXRlVGltZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuU3RyaW5nOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0YUNvbHVtblN0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuSW50ZWdlcjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGFDb2x1bW5JbnRlZ2VyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5Mb25nOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0YUNvbHVtbkxvbmcoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkZsb2F0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0YUNvbHVtbkZsb2F0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5Eb3VibGU6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRhQ29sdW1uRG91YmxlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5EZWNpbWFsOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0YUNvbHVtbkRlY2ltYWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkJvb2w6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRhQ29sdW1uQm9vbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuQnl0ZTpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGFDb2x1bW5CeXRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5TaG9ydDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGFDb2x1bW5TaG9ydCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBBZGRDb2x1bW4oc3RyaW5nIGZpZWxkTmFtZSwgRGF0YVR5cGUgdHlwZSA9IERhdGFUeXBlLk9iamVjdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBjb2wgPSBHZXRDb2x1bW5CeURhdGFUeXBlKHR5cGUpO1xyXG4gICAgICAgICAgICBjb2wuRmllbGROYW1lID0gZmllbGROYW1lO1xyXG5cclxuICAgICAgICAgICAgQ29sdW1ucy5BZGQoY29sKTtcclxuICAgICAgICAgICAgX0NvbENvdW50ID0gQ29sdW1ucy5Db3VudDtcclxuXHJcbiAgICAgICAgICAgIFJlcXVpcmVPbkRhdGFDaGFuZ2VFdmVudCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIERhdGFSb3cgdGhpc1tpbnQgcm93SW5kZXhdXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRhUm93KHRoaXMsIHJvd0luZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQmVnaW5OZXdSb3coaW50IEVzdGltYXRlZE5ld1Jvd3MpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBOZXdSb3dzID0gbmV3IExpc3Q8RGF0YVJvdz4oRXN0aW1hdGVkTmV3Um93cyk7XHJcbiAgICAgICAgICAgIEJlZ2luRGF0YVVwZGF0ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIERhdGFSb3cgQWRkUm93KClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBkciA9IG5ldyBEYXRhUm93KHRoaXMsIF9Sb3dDb3VudCsrKTtcclxuICAgICAgICAgICAgaW50IGNvbExlbmd0aCA9IENvbHVtbnMuQ291bnQ7XHJcbiAgICAgICAgICAgIGZvcihpbnQgeCA9IDA7IHggPCBjb2xMZW5ndGg7IHgrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZHluYW1pYyBjb2wgPSBDb2x1bW5zW3hdO1xyXG4gICAgICAgICAgICAgICAgY29sLkNlbGxzLmFkZChudWxsKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgUmVxdWlyZU9uRGF0YUNoYW5nZUV2ZW50KCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZHI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBBZGRSb3cocGFyYW1zIG9iamVjdFtdIHJvdylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHJvdy5MZW5ndGggPT0gQ29sdW1uQ291bnQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIF9Sb3dDb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgaW50IGNvbExlbmd0aCA9IENvbHVtbnMuQ291bnQ7XHJcbiAgICAgICAgICAgICAgICBmb3IoaW50IHggPSAwOyB4IDwgY29sTGVuZ3RoOyB4KyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pYyBjb2wgPSBDb2x1bW5zW3hdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbC5DZWxscy5hZGQocm93W3hdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFJlcXVpcmVPbkRhdGFDaGFuZ2VFdmVudCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgRGF0YVJvdyBOZXdSb3coKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGRyID0gbmV3IERhdGFSb3codGhpcyk7XHJcblxyXG4gICAgICAgICAgICBOZXdSb3dzLkFkZChkcik7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZHI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBBY2NlcHROZXdSb3dzKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKE5ld1Jvd3MgPT0gbnVsbCB8fCBOZXdSb3dzLkNvdW50ID09IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGludCBjb2xMZW5ndGggPSBDb2x1bW5zLkNvdW50O1xyXG4gICAgICAgICAgICBpbnQgcm93TGVuZ3RoID0gTmV3Um93cy5Db3VudDtcclxuICAgICAgICAgICAgaW50IGNvbE4xID0gY29sTGVuZ3RoIC0gMTtcclxuXHJcbiAgICAgICAgICAgIGZvcihpbnQgeCA9IDA7IHggPCBjb2xMZW5ndGg7IHgrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZHluYW1pYyBjb2wgPSBDb2x1bW5zW3hdO1xyXG4gICAgICAgICAgICAgICAgdmFyIERhdGFDZWxscyA9IG5ldyBvYmplY3Rbcm93TGVuZ3RoXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZih4ID09IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGludCB5ID0gMDsgeSA8IHJvd0xlbmd0aDsgeSsrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTmV3Um93c1t5XS5Sb3dJbmRleCA9IF9Sb3dDb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEYXRhQ2VsbHNbeV0gPSBOZXdSb3dzW3ldLmJhdGNoRGF0YVt4XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKHggPT0gY29sTjEpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGludCB5ID0gMDsgeSA8IHJvd0xlbmd0aDsgeSsrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGF0YUNlbGxzW3ldID0gTmV3Um93c1t5XS5iYXRjaERhdGFbeF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE5ld1Jvd3NbeV0uYmF0Y2hEYXRhID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGludCB5ID0gMDsgeSA8IHJvd0xlbmd0aDsgeSsrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGF0YUNlbGxzW3ldID0gTmV3Um93c1t5XS5iYXRjaERhdGFbeF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29sLkNlbGxzLkFkZFJhbmdlKERhdGFDZWxscyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgTmV3Um93cy5DbGVhcigpO1xyXG5cclxuICAgICAgICAgICAgRW5kRGF0YVVwZGF0ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQmVnaW5EYXRhVXBkYXRlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIF9pbkRhdGFDaGFuZ2UgPSB0cnVlO1xyXG4gICAgICAgICAgICBfcmVxdWVzdGVkT25EYXRhQ2hhbmdlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBFbmREYXRhVXBkYXRlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIF9pbkRhdGFDaGFuZ2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYoX3JlcXVlc3RlZE9uRGF0YUNoYW5nZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgX3JlcXVlc3RlZE9uRGF0YUNoYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYoT25EYXRhU291cmNlQ2hhbmdlZCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIE9uRGF0YVNvdXJjZUNoYW5nZWQodGhpcywgbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFJlamVjdE5ld1Jvd3MoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgTmV3Um93cy5DbGVhcigpO1xyXG4gICAgICAgICAgICBfaW5EYXRhQ2hhbmdlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBEYXRhUm93XHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIERhdGFUYWJsZSBQYXJlbnRUYWJsZTtcclxuICAgICAgICBwdWJsaWMgaW50IFJvd0luZGV4ID0gLTE7XHJcbiAgICAgICAgcHVibGljIG9iamVjdFtdIGJhdGNoRGF0YTtcclxuXHJcbiAgICAgICAgcHVibGljIERhdGFSb3cgR2V0T2ZmbGluZURhdGFSb3coKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGRyID0gbmV3IERhdGFSb3coUGFyZW50VGFibGUuQ29sdW1uQ291bnQpO1xyXG4gICAgICAgICAgICB2YXIgZGF0YSA9IG5ldyBvYmplY3RbUGFyZW50VGFibGUuQ29sdW1uQ291bnRdO1xyXG4gICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgUGFyZW50VGFibGUuQ29sdW1uQ291bnQ7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0YVtpXSA9IHRoaXNbaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZHIuYmF0Y2hEYXRhID0gZGF0YTtcclxuICAgICAgICAgICAgcmV0dXJuIGRyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIERhdGFSb3coKVxyXG4gICAgICAgIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBEYXRhUm93KGludCBjb2x1bW5MZW5ndGgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBQYXJlbnRUYWJsZSA9IG51bGw7XHJcbiAgICAgICAgICAgIFJvd0luZGV4ID0gLTE7XHJcbiAgICAgICAgICAgIGJhdGNoRGF0YSA9IG5ldyBvYmplY3RbY29sdW1uTGVuZ3RoXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBEYXRhUm93KERhdGFUYWJsZSBwYXJlbnRUYWJsZSwgaW50IHJvd0luZGV4ID0gLTEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBQYXJlbnRUYWJsZSA9IHBhcmVudFRhYmxlO1xyXG4gICAgICAgICAgICBSb3dJbmRleCA9IHJvd0luZGV4O1xyXG4gICAgICAgICAgICBpZihyb3dJbmRleCA9PSAtMSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYmF0Y2hEYXRhID0gbmV3IG9iamVjdFtwYXJlbnRUYWJsZS5Db2x1bW5Db3VudF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNldFZhbHVlKHN0cmluZyBmaWVsZE5hbWUsIG9iamVjdCB2YWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBQYXJlbnRUYWJsZS5Db2x1bW5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihQYXJlbnRUYWJsZS5Db2x1bW5zW2ldLkZpZWxkTmFtZSA9PSBmaWVsZE5hbWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoUm93SW5kZXggPT0gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihiYXRjaERhdGFbaV0gIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhdGNoRGF0YVtpXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFyZW50VGFibGUuUmVxdWlyZU9uRGF0YUNoYW5nZUV2ZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pYyBjb2wgPSBQYXJlbnRUYWJsZS5Db2x1bW5zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGNvbC5DZWxscy5faXRlbXNbUm93SW5kZXhdICE9IHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sLkNlbGxzLl9pdGVtc1tSb3dJbmRleF0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUGFyZW50VGFibGUuUmVxdWlyZU9uRGF0YUNoYW5nZUV2ZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG9iamVjdCBHZXRWYWx1ZShzdHJpbmcgZmllbGROYW1lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IFBhcmVudFRhYmxlLkNvbHVtbkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKFBhcmVudFRhYmxlLkNvbHVtbnNbaV0uRmllbGROYW1lID09IGZpZWxkTmFtZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihSb3dJbmRleCA9PSAtMSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBiYXRjaERhdGFbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWMgY29sID0gUGFyZW50VGFibGUuQ29sdW1uc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29sLkNlbGxzLl9pdGVtc1tSb3dJbmRleF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb2JqZWN0IEdldFZhbHVlKGludCBjb2x1bW5JbmRleClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKFJvd0luZGV4ID09IC0xKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYmF0Y2hEYXRhW2NvbHVtbkluZGV4XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkeW5hbWljIGNvbCA9IFBhcmVudFRhYmxlLkNvbHVtbnNbY29sdW1uSW5kZXhdO1xyXG4gICAgICAgICAgICByZXR1cm4gY29sLkNlbGxzLl9pdGVtc1tSb3dJbmRleF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBTZXRWYWx1ZShpbnQgY29sdW1uSW5kZXgsIG9iamVjdCB2YWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKFJvd0luZGV4ID09IC0xKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihiYXRjaERhdGFbY29sdW1uSW5kZXhdICE9IHZhbHVlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhdGNoRGF0YVtjb2x1bW5JbmRleF0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBQYXJlbnRUYWJsZS5SZXF1aXJlT25EYXRhQ2hhbmdlRXZlbnQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZHluYW1pYyBjb2wgPSBQYXJlbnRUYWJsZS5Db2x1bW5zW2NvbHVtbkluZGV4XTtcclxuICAgICAgICAgICAgaWYoY29sLkNlbGxzLl9pdGVtc1tSb3dJbmRleF0gIT0gdmFsdWUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbC5DZWxscy5faXRlbXNbUm93SW5kZXhdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBQYXJlbnRUYWJsZS5SZXF1aXJlT25EYXRhQ2hhbmdlRXZlbnQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG9iamVjdCB0aGlzW2ludCBjb2x1bW5JbmRleF1cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gR2V0VmFsdWUoY29sdW1uSW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBTZXRWYWx1ZShjb2x1bW5JbmRleCwgdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBEYXRhQ29sdW1uXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHN0cmluZyBGaWVsZE5hbWU7XHJcbiAgICAgICAgcHVibGljIERhdGFUeXBlIERhdGFUeXBlO1xyXG4gICAgICAgIHB1YmxpYyBkeW5hbWljIFNlbGY7XHJcblxyXG4gICAgICAgIHB1YmxpYyBEYXRhQ29sdW1uKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFNlbGYgPSB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9wdWJsaWMgTGlzdDxvYmplY3Q+IENlbGxzID0gbmV3IExpc3Q8b2JqZWN0PigpO1xyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgR2V0RGlzcGxheVZhbHVlKGludCByb3dJbmRleCwgc3RyaW5nIGZvcm1hdFN0cmluZylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN3aXRjaChEYXRhVHlwZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuT2JqZWN0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmcuRm9ybWF0KGZvcm1hdFN0cmluZywgKCgoRGF0YUNvbHVtbk9iamVjdCl0aGlzKS5DZWxsc1tyb3dJbmRleF0pKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkRhdGVUaW1lOlxyXG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWMgb2JqID0gKChEYXRhQ29sdW1uRGF0ZVRpbWUpdGhpcykuQ2VsbHNbcm93SW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKG9iaiA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5FbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgRGF0ZVRpbWUgZDtcclxuICAgICAgICAgICAgICAgICAgICBpZihvYmogaXMgRGF0ZVRpbWUpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gKERhdGVUaW1lKW9iajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZCA9PSBEYXRlVGltZS5NaW5WYWx1ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmcuRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmcuRm9ybWF0KGZvcm1hdFN0cmluZywgZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoRGF0ZVRpbWUuVHJ5UGFyc2Uob2JqLCBvdXQgZCkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihkID09IERhdGVUaW1lLk1pblZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5FbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5Gb3JtYXQoZm9ybWF0U3RyaW5nLCBkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9IG9iaiBhcyBzdHJpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShzdHIpKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5FbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5Gb3JtYXQoZm9ybWF0U3RyaW5nLCBzdHIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuU3RyaW5nOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmcuRm9ybWF0KGZvcm1hdFN0cmluZywgKChEYXRhQ29sdW1uU3RyaW5nKXRoaXMpLkNlbGxzW3Jvd0luZGV4XSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5JbnRlZ2VyOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmcuRm9ybWF0KGZvcm1hdFN0cmluZywgKChEYXRhQ29sdW1uSW50ZWdlcil0aGlzKS5DZWxsc1tyb3dJbmRleF0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuTG9uZzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLkZvcm1hdChmb3JtYXRTdHJpbmcsICgoRGF0YUNvbHVtbkxvbmcpdGhpcykuQ2VsbHNbcm93SW5kZXhdKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkZsb2F0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmcuRm9ybWF0KGZvcm1hdFN0cmluZywgKChEYXRhQ29sdW1uRmxvYXQpdGhpcykuQ2VsbHNbcm93SW5kZXhdKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkRvdWJsZTpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLkZvcm1hdChmb3JtYXRTdHJpbmcsICgoRGF0YUNvbHVtbkRvdWJsZSl0aGlzKS5DZWxsc1tyb3dJbmRleF0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuRGVjaW1hbDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLkZvcm1hdChmb3JtYXRTdHJpbmcsICgoRGF0YUNvbHVtbkRlY2ltYWwpdGhpcykuQ2VsbHNbcm93SW5kZXhdKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkJ5dGU6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5Gb3JtYXQoZm9ybWF0U3RyaW5nLCAoKERhdGFDb2x1bW5CeXRlKXRoaXMpLkNlbGxzW3Jvd0luZGV4XSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5TaG9ydDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLkZvcm1hdChmb3JtYXRTdHJpbmcsICgoRGF0YUNvbHVtblNob3J0KXRoaXMpLkNlbGxzW3Jvd0luZGV4XSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5Cb29sOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmcuRm9ybWF0KGZvcm1hdFN0cmluZywgKChEYXRhQ29sdW1uQm9vbCl0aGlzKS5DZWxsc1tyb3dJbmRleF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb2JqZWN0IEdldENlbGxWYWx1ZShpbnQgcm93SW5kZXgpXHJcbiAgICAgICAgeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihTZWxmLkNlbGxzLkNvdW50IDw9IHJvd0luZGV4KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3dpdGNoKERhdGFUeXBlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5PYmplY3Q6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgoRGF0YUNvbHVtbk9iamVjdCl0aGlzKS5DZWxsc1tyb3dJbmRleF07XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5EYXRlVGltZTpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKChEYXRhQ29sdW1uRGF0ZVRpbWUpdGhpcykuQ2VsbHNbcm93SW5kZXhdO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuU3RyaW5nOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKERhdGFDb2x1bW5TdHJpbmcpdGhpcykuQ2VsbHNbcm93SW5kZXhdO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuSW50ZWdlcjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCgoRGF0YUNvbHVtbkludGVnZXIpdGhpcykuQ2VsbHNbcm93SW5kZXhdKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkxvbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgoKERhdGFDb2x1bW5Mb25nKXRoaXMpLkNlbGxzW3Jvd0luZGV4XSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5GbG9hdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCgoRGF0YUNvbHVtbkZsb2F0KXRoaXMpLkNlbGxzW3Jvd0luZGV4XSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5Eb3VibGU6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgoKERhdGFDb2x1bW5Eb3VibGUpdGhpcykuQ2VsbHNbcm93SW5kZXhdKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkRlY2ltYWw6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgoKERhdGFDb2x1bW5EZWNpbWFsKXRoaXMpLkNlbGxzW3Jvd0luZGV4XSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5CeXRlOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKChEYXRhQ29sdW1uQnl0ZSl0aGlzKS5DZWxsc1tyb3dJbmRleF0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuQm9vbDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCgoRGF0YUNvbHVtbkJvb2wpdGhpcykuQ2VsbHNbcm93SW5kZXhdKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLlNob3J0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKChEYXRhQ29sdW1uU2hvcnQpdGhpcykuQ2VsbHNbcm93SW5kZXhdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBHZXREaXNwbGF5VmFsdWUoaW50IHJvd0luZGV4KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoU2VsZi5DZWxscy5Db3VudCA8PSByb3dJbmRleClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN3aXRjaChEYXRhVHlwZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuT2JqZWN0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDb252ZXJ0LlRvU3RyaW5nKCgoRGF0YUNvbHVtbk9iamVjdCl0aGlzKS5DZWxsc1tyb3dJbmRleF0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuRGF0ZVRpbWU6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENvbnZlcnQuVG9TdHJpbmcoKChEYXRhQ29sdW1uRGF0ZVRpbWUpdGhpcykuQ2VsbHNbcm93SW5kZXhdKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLlN0cmluZzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKChEYXRhQ29sdW1uU3RyaW5nKXRoaXMpLkNlbGxzW3Jvd0luZGV4XTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkludGVnZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENvbnZlcnQuVG9TdHJpbmcoKChEYXRhQ29sdW1uSW50ZWdlcil0aGlzKS5DZWxsc1tyb3dJbmRleF0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuTG9uZzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ29udmVydC5Ub1N0cmluZygoKERhdGFDb2x1bW5Mb25nKXRoaXMpLkNlbGxzW3Jvd0luZGV4XSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5GbG9hdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ29udmVydC5Ub1N0cmluZygoKERhdGFDb2x1bW5GbG9hdCl0aGlzKS5DZWxsc1tyb3dJbmRleF0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuRG91YmxlOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDb252ZXJ0LlRvU3RyaW5nKCgoRGF0YUNvbHVtbkRvdWJsZSl0aGlzKS5DZWxsc1tyb3dJbmRleF0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuRGVjaW1hbDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ29udmVydC5Ub1N0cmluZygoKERhdGFDb2x1bW5EZWNpbWFsKXRoaXMpLkNlbGxzW3Jvd0luZGV4XSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5CeXRlOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDb252ZXJ0LlRvU3RyaW5nKCgoRGF0YUNvbHVtbkJ5dGUpdGhpcykuQ2VsbHNbcm93SW5kZXhdKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkJvb2w6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENvbnZlcnQuVG9TdHJpbmcoKChEYXRhQ29sdW1uQm9vbCl0aGlzKS5DZWxsc1tyb3dJbmRleF0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuU2hvcnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENvbnZlcnQuVG9TdHJpbmcoKChEYXRhQ29sdW1uU2hvcnQpdGhpcykuQ2VsbHNbcm93SW5kZXhdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgRGF0YUNvbHVtblN0cmluZyA6IERhdGFDb2x1bW5cclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgRGF0YUNvbHVtblN0cmluZygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiYXNlLkRhdGFUeXBlID0gRGF0YVR5cGUuU3RyaW5nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIExpc3Q8c3RyaW5nPiBDZWxscyA9IG5ldyBMaXN0PHN0cmluZz4oKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgRGF0YUNvbHVtbkRhdGVUaW1lIDogRGF0YUNvbHVtblxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBEYXRhQ29sdW1uRGF0ZVRpbWUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYmFzZS5EYXRhVHlwZSA9IERhdGFUeXBlLkRhdGVUaW1lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIExpc3Q8RGF0ZVRpbWU/PiBDZWxscyA9IG5ldyBMaXN0PERhdGVUaW1lPz4oKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgRGF0YUNvbHVtbkludGVnZXIgOiBEYXRhQ29sdW1uXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIERhdGFDb2x1bW5JbnRlZ2VyKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhc2UuRGF0YVR5cGUgPSBEYXRhVHlwZS5JbnRlZ2VyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIExpc3Q8aW50Pz4gQ2VsbHMgPSBuZXcgTGlzdDxpbnQ/PigpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBEYXRhQ29sdW1uTG9uZyA6IERhdGFDb2x1bW5cclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgRGF0YUNvbHVtbkxvbmcoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYmFzZS5EYXRhVHlwZSA9IERhdGFUeXBlLkxvbmc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgTGlzdDxsb25nPz4gQ2VsbHMgPSBuZXcgTGlzdDxsb25nPz4oKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgRGF0YUNvbHVtbk9iamVjdCA6IERhdGFDb2x1bW5cclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgRGF0YUNvbHVtbk9iamVjdCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiYXNlLkRhdGFUeXBlID0gRGF0YVR5cGUuT2JqZWN0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIExpc3Q8b2JqZWN0PiBDZWxscyA9IG5ldyBMaXN0PG9iamVjdD4oKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgRGF0YUNvbHVtbkRlY2ltYWwgOiBEYXRhQ29sdW1uXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIERhdGFDb2x1bW5EZWNpbWFsKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhc2UuRGF0YVR5cGUgPSBEYXRhVHlwZS5EZWNpbWFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIExpc3Q8ZGVjaW1hbD8+IENlbGxzID0gbmV3IExpc3Q8ZGVjaW1hbD8+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIERhdGFDb2x1bW5GbG9hdCA6IERhdGFDb2x1bW5cclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgRGF0YUNvbHVtbkZsb2F0KClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhc2UuRGF0YVR5cGUgPSBEYXRhVHlwZS5GbG9hdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBMaXN0PGZsb2F0Pz4gQ2VsbHMgPSBuZXcgTGlzdDxmbG9hdD8+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIERhdGFDb2x1bW5Eb3VibGUgOiBEYXRhQ29sdW1uXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIERhdGFDb2x1bW5Eb3VibGUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYmFzZS5EYXRhVHlwZSA9IERhdGFUeXBlLkRvdWJsZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBMaXN0PGRvdWJsZT8+IENlbGxzID0gbmV3IExpc3Q8ZG91YmxlPz4oKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgRGF0YUNvbHVtbkJvb2wgOiBEYXRhQ29sdW1uXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIERhdGFDb2x1bW5Cb29sKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhc2UuRGF0YVR5cGUgPSBEYXRhVHlwZS5Cb29sO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIExpc3Q8Ym9vbD8+IENlbGxzID0gbmV3IExpc3Q8Ym9vbD8+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIERhdGFDb2x1bW5CeXRlIDogRGF0YUNvbHVtblxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBEYXRhQ29sdW1uQnl0ZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiYXNlLkRhdGFUeXBlID0gRGF0YVR5cGUuQnl0ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBMaXN0PGJ5dGU/PiBDZWxscyA9IG5ldyBMaXN0PGJ5dGU/PigpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBEYXRhQ29sdW1uU2hvcnQgOiBEYXRhQ29sdW1uXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIERhdGFDb2x1bW5TaG9ydCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiYXNlLkRhdGFUeXBlID0gRGF0YVR5cGUuU2hvcnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgTGlzdDxzaG9ydD8+IENlbGxzID0gbmV3IExpc3Q8c2hvcnQ/PigpO1xyXG4gICAgfVxyXG59IiwidXNpbmcgU3lzdGVtO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgQ29tYm9Cb3hFZGl0IDogQ29udHJvbFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBSZXR5cGVkLmRvbS5IVE1MU2VsZWN0RWxlbWVudCBDb21ib0JveEJhc2U7XHJcbiAgICAgICAgcHJpdmF0ZSBkb3VibGUgcHJldmlvdXNTZWxlY3RlZEluZGV4ID0gLTE7XHJcblxyXG4gICAgICAgIHB1YmxpYyBBY3Rpb248Q29tYm9Cb3hFZGl0PiBTZWxlY3RlZEluZGV4Q2hhbmdlZCA9IG51bGw7XHJcblxyXG4gICAgICAgIHB1YmxpYyBDb21ib0JveEVkaXQoKSA6IGJhc2UoXCJpbnB1dGNvbnRyb2xcIiwgQ29tYm9Cb3hUeXBlcy5EZWZhdWx0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ29tYm9Cb3hCYXNlID0gdGhpcy5Db250ZW50IGFzIFJldHlwZWQuZG9tLkhUTUxTZWxlY3RFbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5Db250ZW50Lm9uY29udGV4dG1lbnUgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgQ29tYm9Cb3hCYXNlLm9uY2hhbmdlID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihwcmV2aW91c1NlbGVjdGVkSW5kZXggIT0gQ29tYm9Cb3hCYXNlLnNlbGVjdGVkSW5kZXgpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoU2VsZWN0ZWRJbmRleENoYW5nZWQgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2VsZWN0ZWRJbmRleENoYW5nZWQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzU2VsZWN0ZWRJbmRleCA9IENvbWJvQm94QmFzZS5zZWxlY3RlZEluZGV4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBGaWxsRGF0YShwYXJhbXMgRGF0YUl0ZW1bXSBkYXRhaXRlbXMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBSZXR5cGVkLmpxdWVyeS5qUXVlcnkuc2VsZWN0KChSZXR5cGVkLmpxdWVyeS5KUXVlcnkuVHlwZU9yQXJyYXk8UmV0eXBlZC5kb20uRWxlbWVudD4pQ29tYm9Cb3hCYXNlKS5lbXB0eSgpO1xyXG5cclxuICAgICAgICAgICAgaWYoZGF0YWl0ZW1zID09IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBkYXRhaXRlbXMuTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgQ29tYm9Cb3hCYXNlLkFwcGVuZENoaWxkKG5ldyBSZXR5cGVkLmRvbS5IVE1MT3B0aW9uRWxlbWVudCgpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbm5lckhUTUwgPSBkYXRhaXRlbXNbaV0uVGV4dCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBkYXRhaXRlbXNbaV0uVmFsdWVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHZvaWQgUmVuZGVyKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhc2UuUmVuZGVyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RyaW5nIFRleHRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihDb21ib0JveEJhc2Uuc2VsZWN0ZWRJbmRleCA9PSAtMSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLkVtcHR5O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIENvbWJvQm94QmFzZS5vcHRpb25zW0NvbWJvQm94QmFzZS5zZWxlY3RlZEluZGV4XS5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBDb21ib0JveEJhc2Uub3B0aW9ucy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihDb21ib0JveEJhc2Uub3B0aW9uc1tpXS5pbm5lckhUTUwgPT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbWJvQm94QmFzZS5zZWxlY3RlZEluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIENvbWJvQm94QmFzZS5zZWxlY3RlZEluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgVmFsdWVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihDb21ib0JveEJhc2Uuc2VsZWN0ZWRJbmRleCA9PSAtMSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLkVtcHR5O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIENvbWJvQm94QmFzZS5vcHRpb25zW0NvbWJvQm94QmFzZS5zZWxlY3RlZEluZGV4XS52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IENvbWJvQm94QmFzZS5vcHRpb25zLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKENvbWJvQm94QmFzZS5vcHRpb25zW2ldLnZhbHVlID09IHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBDb21ib0JveEJhc2Uuc2VsZWN0ZWRJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBDb21ib0JveEJhc2Uuc2VsZWN0ZWRJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGJvb2wgZW5hYmxlZCA9IHRydWU7XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIEVuYWJsZWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBlbmFibGVkOyB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkNvbnRlbnQuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgKCFlbmFibGVkKS5Ub1N0cmluZygpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBib29sIF9yZWFkb25seSA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBSZWFkb25seVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIF9yZWFkb25seTsgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgX3JlYWRvbmx5ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkNvbnRlbnQuc2V0QXR0cmlidXRlKFwicmVhZG9ubHlcIiwgKF9yZWFkb25seSkuVG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIERhdGFJdGVtXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHN0cmluZyBUZXh0O1xyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgVmFsdWU7XHJcblxyXG4gICAgICAgIHB1YmxpYyBEYXRhSXRlbShzdHJpbmcgdGV4dCwgc3RyaW5nIHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVGV4dCA9IHRleHQ7XHJcbiAgICAgICAgICAgIFZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgRGF0YUl0ZW0oc3RyaW5nIHRleHQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUZXh0ID0gdGV4dDtcclxuICAgICAgICAgICAgVmFsdWUgPSB0ZXh0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbTtcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIERpYWxvZ1Jlc3VsdFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBEaWFsb2dSZXN1bHRFbnVtIFJlc3VsdEVudW0gPSBEaWFsb2dSZXN1bHRFbnVtLk5vbmU7XHJcbiAgICAgICAgcHVibGljIEFjdGlvbiBDYWxsQmFjayA9IG51bGw7XHJcblxyXG4gICAgICAgIHB1YmxpYyBEaWFsb2dSZXN1bHQoRGlhbG9nUmVzdWx0RW51bSByZXN1bHRFbnVtLCBBY3Rpb24gY2FsbEJhY2spXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBSZXN1bHRFbnVtID0gcmVzdWx0RW51bTtcclxuICAgICAgICAgICAgQ2FsbEJhY2sgPSBjYWxsQmFjaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEludm9rZUlmUmVzdWx0KERpYWxvZ1Jlc3VsdEVudW0gcmVzdWx0RW51bSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHJlc3VsdEVudW0gPT0gUmVzdWx0RW51bSAmJiBDYWxsQmFjayAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgQ2FsbEJhY2suSW52b2tlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBlbnVtIERpYWxvZ1Jlc3VsdEVudW1cclxuICAgIHtcclxuICAgICAgICBOb25lLFxyXG4gICAgICAgIE9LLFxyXG4gICAgICAgIENhbmNlbCxcclxuICAgICAgICBBYm9ydCxcclxuICAgICAgICBTZW5kLFxyXG4gICAgICAgIElnbm9yZSxcclxuICAgICAgICBZZXMsXHJcbiAgICAgICAgTm9cclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbTtcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIEV4dGVybmFsUGx1Z2luXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHN0cmluZyBTb3VyY2VVcmw7XHJcbiAgICAgICAgcHVibGljIGJvb2wgU2V0dXBDb21wbGV0ZWQgPSBmYWxzZTtcclxuICAgICAgICBwdWJsaWMgYm9vbCBJbkxvYWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgcHVibGljIEFjdGlvbiBPblJlYWR5ID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHVibGljIEV4dGVybmFsUGx1Z2luKHN0cmluZyBzb3VyY2VVcmwpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBTb3VyY2VVcmwgPSBzb3VyY2VVcmw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBTZXR1cChib29sIGFzeW5jID0gZmFsc2UsIGJvb2wgZGVmZXIgPSBmYWxzZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCFTZXR1cENvbXBsZXRlZClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoSW5Mb2FkKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBJbkxvYWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNjcmlwdCA9IG5ldyBSZXR5cGVkLmRvbS5IVE1MU2NyaXB0RWxlbWVudCgpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25sb2FkID0gKGVsZSkgPT5cclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNldHVwQ29tcGxldGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSW5Mb2FkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKE9uUmVhZHkgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9uUmVhZHkoKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHNyYyA9IFNvdXJjZVVybFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGlmKGFzeW5jKVxyXG4gICAgICAgICAgICAgICAgICAgIHNjcmlwdC5hc3luYyA9IGFzeW5jO1xyXG4gICAgICAgICAgICAgICAgaWYoZGVmZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgc2NyaXB0LmRlZmVyID0gZGVmZXI7XHJcbiAgICAgICAgICAgICAgICBSZXR5cGVkLmRvbS5kb2N1bWVudC5oZWFkLkFwcGVuZENoaWxkKHNjcmlwdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFVzYWdlQ2hlY2soKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIVNldHVwQ29tcGxldGVkKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIidcIiArIFNvdXJjZVVybCArIFwiJyByZXF1aXJlcyB0byBiZSBzZXR1cCFcIik7XHJcbiAgICAgICAgICAgIGlmKEluTG9hZClcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCInXCIgKyBTb3VyY2VVcmwgKyBcIicgaXMgY3VycmVudGx5IGxvYWRpbmcsIFBsZWFzZSB0cnkgYWdhaW4gaW4gYSBmZXcgc2Vjb25kcyFcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwidXNpbmcgQnJpZGdlO1xyXG51c2luZyBTeXN0ZW07XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBGaXJlYmFzZVxyXG4gICAge1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIEV4dGVybmFsUGx1Z2luIEV4dGVybmFsRmlyZUJhc2UgPSBuZXcgRXh0ZXJuYWxQbHVnaW4oXCJodHRwczovL3d3dy5nc3RhdGljLmNvbS9maXJlYmFzZWpzLzMuNi44L2ZpcmViYXNlLmpzXCIpO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBEaXNwbGF5TmFtZTtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBQaG90b1VSTDtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgVXNlclNpZ25lZEluO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgU2V0dXAoQWN0aW9uIE9uUmVhZHkgPSBudWxsKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRXh0ZXJuYWxGaXJlQmFzZS5PblJlYWR5ID0gT25SZWFkeTtcclxuICAgICAgICAgICAgRXh0ZXJuYWxGaXJlQmFzZS5TZXR1cCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIEluaXRpYWxpemVBcHAoc3RyaW5nIEFwaUtleSwgc3RyaW5nIEF1dGhEb21haW4sIHN0cmluZyBEYXRhYmFzZVVSTCwgc3RyaW5nIFByb2plY3RJZCwgc3RyaW5nIFN0b3JhZ2VCdWNrZXQsIHN0cmluZyBNZXNzYWdpbmdTZW5kZXJJZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEV4dGVybmFsRmlyZUJhc2UuVXNhZ2VDaGVjaygpO1xyXG4gICAgICAgICAgICBpZihzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKEFwaUtleSkpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKHN0cmluZy5Gb3JtYXQoXCJJbnZhbGlkIEZpcmViYXNlIHswfSAhXCIsXCJBcGlLZXlcIikpO1xyXG4gICAgICAgICAgICBpZihzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKEF1dGhEb21haW4pKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihzdHJpbmcuRm9ybWF0KFwiSW52YWxpZCBGaXJlYmFzZSB7MH0hXCIsXCJBdXRoRG9tYWluXCIpKTtcclxuICAgICAgICAgICAgaWYoc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShEYXRhYmFzZVVSTCkpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKHN0cmluZy5Gb3JtYXQoXCJJbnZhbGlkIEZpcmViYXNlIHswfSFcIixcIkRhdGFiYXNlVVJMXCIpKTtcclxuICAgICAgICAgICAgaWYoc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShQcm9qZWN0SWQpKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihzdHJpbmcuRm9ybWF0KFwiSW52YWxpZCBGaXJlYmFzZSB7MH0hXCIsXCJQcm9qZWN0SWRcIikpO1xyXG4gICAgICAgICAgICBpZihzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKFN0b3JhZ2VCdWNrZXQpKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihzdHJpbmcuRm9ybWF0KFwiSW52YWxpZCBGaXJlYmFzZSB7MH0hXCIsXCJTdG9yYWdlQnVja2V0XCIpKTtcclxuICAgICAgICAgICAgaWYoc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShNZXNzYWdpbmdTZW5kZXJJZCkpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKHN0cmluZy5Gb3JtYXQoXCJJbnZhbGlkIEZpcmViYXNlIHswfSFcIixcIk1lc3NhZ2luZ1NlbmRlcklkXCIpKTtcclxuXHJcbiAgICAgICAgICAgIC8qQFxyXG5cdFx0XHRmaXJlYmFzZS5pbml0aWFsaXplQXBwKHthcGlLZXk6IEFwaUtleSwgYXV0aERvbWFpbjogQXV0aERvbWFpbiwgZGF0YWJhc2VVUkw6IERhdGFiYXNlVVJMLCBwcm9qZWN0SWQgOiBQcm9qZWN0SWQsIHN0b3JhZ2VCdWNrZXQ6IFN0b3JhZ2VCdWNrZXQsIG1lc3NhZ2luZ1NlbmRlcklkOiBNZXNzYWdpbmdTZW5kZXJJZCB9KTtcclxuXHRcdFx0ZmlyZWJhc2UuYXV0aCgpLm9uQXV0aFN0YXRlQ2hhbmdlZChmdW5jdGlvbih1c2VyKSB7XHJcblx0XHRcdFx0aWYgKHVzZXIpIHtcclxuXHRcdFx0XHRcdHRoaXMuVXNlclNpZ25lZEluID0gdHJ1ZTtcclxuXHRcdFx0XHRcdHRoaXMuRGlzcGxheU5hbWUgPSB1c2VyLmRpc3BsYXlOYW1lO1xyXG5cdFx0XHRcdFx0dGhpcy5QaG90b1VSTCA9IHVzZXIucGhvdG9VUkw7XHJcblx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHR0aGlzLlVzZXJTaWduZWRJbiA9IGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdCovXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgU2lnbkluKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8qQFxyXG5cdFx0XHRmaXJlYmFzZS5hdXRoKCkuc2lnbkluV2l0aFBvcHVwKG5ldyBmaXJlYmFzZS5hdXRoLkdvb2dsZUF1dGhQcm92aWRlcigpKTtcclxuXHRcdFx0Ki9cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBTaWduT3V0KClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8qQFxyXG5cdFx0XHRmaXJlYmFzZS5hdXRoKCkuc2lnbk91dCgpO1xyXG5cdFx0XHQqL1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBvYmplY3QgRGF0YWJhc2VSZWYoc3RyaW5nIG5hbWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgZGF0YVJlZiA9IFNjcmlwdC5Xcml0ZTxkeW5hbWljPihcImZpcmViYXNlLmRhdGFiYXNlKCkucmVmKG5hbWUpXCIpO1xyXG4gICAgICAgICAgICBkYXRhUmVmLm9mZigpO1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YVJlZjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBJc1NpZ25lZEluV2l0aEZpcmViYXNlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBTY3JpcHQuV3JpdGU8Ym9vbD4oQFwiXHJcblx0XHRcdGlmKGZpcmViYXNlLmF1dGgoKS5jdXJyZW50VXNlcilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5MaW5xO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxudXNpbmcgU3lzdGVtLlRocmVhZGluZy5UYXNrcztcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIEZvbnRcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgc3RyaW5nIEZvbnRTdHJpbmc7XHJcbiAgICAgICAgcHVibGljIEZvbnQoc3RyaW5nIGZvbnRTdHJpbmcpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBGb250U3RyaW5nID0gZm9udFN0cmluZztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwidXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBGb3JtQ29sbGVjdGlvblxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBGb3JtIEZvcm1Pd25lcjtcclxuICAgICAgICBwdWJsaWMgTGlzdDxGb3JtPiBWaXNpYmxlRm9ybXMgPSBuZXcgTGlzdDxGb3JtPigpO1xyXG5cclxuICAgICAgICBwdWJsaWMgRm9ybUNvbGxlY3Rpb24oRm9ybSBmb3JtT3duZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBGb3JtT3duZXIgPSBmb3JtT3duZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcbnVzaW5nIEJyaWRnZTtcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgW09ic29sZXRlKFwiTm90IEltcGxlbWVudGVkIVwiKV1cclxuICAgIHB1YmxpYyBzdGF0aWMgY2xhc3MgR21haWxcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIEV4dGVybmFsUGx1Z2luIEV4dGVybmFsR21haWwgPSBuZXcgRXh0ZXJuYWxQbHVnaW4oXCJodHRwczovL2FwaXMuZ29vZ2xlLmNvbS9qcy9hcGkuanNcIik7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgQ2xpZW50SWQ7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBvYmplY3QgR29vZ2xlQXV0aDtcclxuICAgICAgICBcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBMaXN0PEFjdGlvbj4gX29uZVRpbWVDYWxsID0gbmV3IExpc3Q8QWN0aW9uPigpO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgQXV0aG9yaXplKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vaWYoIUV4dGVybmFsR21haWwuU2V0dXBDb21wbGV0ZWQpXHJcbiAgICAgICAgICAgIC8vICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIC8vaWYoSXNTaWduZWRJbigpKVxyXG4gICAgICAgICAgICAvLyAgICByZXR1cm47XHJcbiAgICAgICAgICAgIC8vdHJ5XHJcbiAgICAgICAgICAgIC8ve1xyXG4gICAgICAgICAgICAvLyAgICAvKkBcclxuICAgICAgICAgICAgLy8gICAgRXhwcmVzc0NyYWZ0LkdtYWlsLkdvb2dsZUF1dGggPSBnYXBpLmF1dGgyLmdldEF1dGhJbnN0YW5jZSgpXHJcbiAgICAgICAgICAgIC8vICAgIGdhcGkuYXV0aDIuZ2V0QXV0aEluc3RhbmNlKCkuc2lnbkluKCk7XHJcbiAgICAgICAgICAgIC8vICAgICovXHJcbiAgICAgICAgICAgIC8vICAgIF9oYXNSYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gICAgUHVzaEV2ZW50c1RpbWVDYWxsKCk7XHJcbiAgICAgICAgICAgIC8vICAgIHdpbmRvdy5mb2N1cygpO1xyXG4gICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgLy9jYXRjaChFeGNlcHRpb24pXHJcbiAgICAgICAgICAgIC8ve1xyXG4gICAgICAgICAgICAvL31cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIGJvb2wgX2hhc1JhbiA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgUHVzaEV2ZW50c1RpbWVDYWxsKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vaWYoX2hhc1JhbilcclxuICAgICAgICAgICAgLy8gICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAvL19oYXNSYW4gPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgLy90cnlcclxuICAgICAgICAgICAgLy97XHJcbiAgICAgICAgICAgIC8vICAgIGZvcmVhY2godmFyIGNhbGxwdW1wIGluIF9vbmVUaW1lQ2FsbClcclxuICAgICAgICAgICAgLy8gICAge1xyXG4gICAgICAgICAgICAvLyAgICAgICAgaWYoY2FsbHB1bXAgIT0gbnVsbClcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICBjYWxscHVtcCgpO1xyXG4gICAgICAgICAgICAvLyAgICB9XHJcbiAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICAvL2NhdGNoKEV4Y2VwdGlvbilcclxuICAgICAgICAgICAgLy97XHJcbiAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICAvL19vbmVUaW1lQ2FsbCA9IG5ldyBMaXN0PEFjdGlvbj4oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBPblNpZ25lZEluKEFjdGlvbiBtZXRob2QpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL2lmKG1ldGhvZCA9PSBudWxsKVxyXG4gICAgICAgICAgICAvLyAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAvL2lmKF9oYXNSYW4pXHJcbiAgICAgICAgICAgIC8ve1xyXG4gICAgICAgICAgICAvLyAgICB0cnlcclxuICAgICAgICAgICAgLy8gICAge1xyXG4gICAgICAgICAgICAvLyAgICAgICAgbWV0aG9kKCk7XHJcbiAgICAgICAgICAgIC8vICAgIH1cclxuICAgICAgICAgICAgLy8gICAgY2F0Y2goRXhjZXB0aW9uKVxyXG4gICAgICAgICAgICAvLyAgICB7XHJcbiAgICAgICAgICAgIC8vICAgIH1cclxuICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgIC8vZWxzZVxyXG4gICAgICAgICAgICAvL3tcclxuICAgICAgICAgICAgLy8gICAgX29uZVRpbWVDYWxsLkFkZChtZXRob2QpO1xyXG4gICAgICAgICAgICAvL31cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBJc1NpZ25lZEluKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgLy8gICAgICAgICBpZighRXh0ZXJuYWxHbWFpbC5TZXR1cENvbXBsZXRlZClcclxuICAgLy8gICAgICAgICB7XHJcbiAgIC8vICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJTZXR1cCBmb3IgZ21haWwgaXMgbm90IHJlYWR5IHlldCFcIik7XHJcbiAgIC8vICAgICAgICAgfVxyXG4gICAvLyAgICAgICAgIGlmKEdvb2dsZUF1dGggPT0gbnVsbClcclxuICAgLy8gICAgICAgICB7XHJcbiAgIC8vICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24oXCJHb29nbGVBdXRoXCIpO1xyXG4gICAvLyAgICAgICAgIH1cclxuICAgLy8gICAgICAgICBib29sIHNpZ25lZEluID0gZmFsc2U7XHJcblxyXG4gICAvLyAgICAgICAgIC8qQFxyXG5cdFx0XHQvL3NpZ25lZEluID0gRXhwcmVzc0NyYWZ0LkdtYWlsLkdvb2dsZUF1dGguaXNTaWduZWRJbi5nZXQoKTtcclxuXHRcdFx0Ly8qL1xyXG5cclxuICAgLy8gICAgICAgICByZXR1cm4gc2lnbmVkSW47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBBY2Nlc3NUb2tlbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgLy8gICAgICAgICBpZighRXh0ZXJuYWxHbWFpbC5TZXR1cENvbXBsZXRlZClcclxuICAgLy8gICAgICAgICB7XHJcbiAgIC8vICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJTZXR1cCBmb3IgZ21haWwgaXMgbm90IHJlYWR5IHlldCFcIik7XHJcbiAgIC8vICAgICAgICAgfVxyXG4gICAvLyAgICAgICAgIGlmKEdvb2dsZUF1dGggPT0gbnVsbClcclxuICAgLy8gICAgICAgICB7XHJcbiAgIC8vICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24oXCJHb29nbGVBdXRoXCIpO1xyXG4gICAvLyAgICAgICAgIH1cclxuXHJcbiAgIC8vICAgICAgICAgc3RyaW5nIGFjY2Vzc190b2tlbiA9IFwiXCI7XHJcblxyXG4gICAvLyAgICAgICAgIC8qQFxyXG5cdFx0XHQvL2FjY2Vzc190b2tlbiA9IEV4cHJlc3NDcmFmdC5HbWFpbC5Hb29nbGVBdXRoLmN1cnJlbnRVc2VyLkFiLlppLmFjY2Vzc190b2tlbjtcclxuXHRcdFx0Ly8qL1xyXG5cclxuICAgLy8gICAgICAgICByZXR1cm4gYWNjZXNzX3Rva2VuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgRnVsbG5hbWUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgIC8vICAgICAgICAgaWYoIUV4dGVybmFsR21haWwuU2V0dXBDb21wbGV0ZWQpXHJcbiAgIC8vICAgICAgICAge1xyXG4gICAvLyAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiU2V0dXAgZm9yIGdtYWlsIGlzIG5vdCByZWFkeSB5ZXQhXCIpO1xyXG4gICAvLyAgICAgICAgIH1cclxuICAgLy8gICAgICAgICBpZihHb29nbGVBdXRoID09IG51bGwpXHJcbiAgIC8vICAgICAgICAge1xyXG4gICAvLyAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKFwiR29vZ2xlQXV0aFwiKTtcclxuICAgLy8gICAgICAgICB9XHJcblxyXG4gICAvLyAgICAgICAgIHN0cmluZyBmdWxsbmFtZSA9IFwiXCI7XHJcblxyXG4gICAvLyAgICAgICAgIC8qQFxyXG5cdFx0XHQvL2Z1bGxuYW1lID0gRXhwcmVzc0NyYWZ0LkdtYWlsLkdvb2dsZUF1dGguY3VycmVudFVzZXIuQWIudzMuaWc7XHJcblx0XHRcdC8vKi9cclxuXHJcbiAgIC8vICAgICAgICAgcmV0dXJuIGZ1bGxuYW1lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgRW1haWwoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgIC8vICAgICAgICAgaWYoIUV4dGVybmFsR21haWwuU2V0dXBDb21wbGV0ZWQpXHJcbiAgIC8vICAgICAgICAge1xyXG4gICAvLyAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiU2V0dXAgZm9yIGdtYWlsIGlzIG5vdCByZWFkeSB5ZXQhXCIpO1xyXG4gICAvLyAgICAgICAgIH1cclxuICAgLy8gICAgICAgICBpZihHb29nbGVBdXRoID09IG51bGwpXHJcbiAgIC8vICAgICAgICAge1xyXG4gICAvLyAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKFwiR29vZ2xlQXV0aFwiKTtcclxuICAgLy8gICAgICAgICB9XHJcblxyXG4gICAvLyAgICAgICAgIHN0cmluZyBlbWFpbCA9IFwiXCI7XHJcblxyXG4gICAvLyAgICAgICAgIC8qQFxyXG5cdFx0XHQvL2VtYWlsID0gRXhwcmVzc0NyYWZ0LkdtYWlsLkdvb2dsZUF1dGguY3VycmVudFVzZXIuQWIudzMuVTM7XHJcblx0XHRcdC8vKi9cclxuXHJcbiAgIC8vICAgICAgICAgcmV0dXJuIGVtYWlsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgR2V0Q29udGVudFR5cGVGcm9tRmlsZU5hbWUoc3RyaW5nIGZpbGVuYW1lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgICAgICAvL2lmKHN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoZmlsZW5hbWUpKVxyXG4gICAgICAgICAgICAvLyAgICByZXR1cm4gXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIjtcclxuXHJcbiAgICAgICAgICAgIC8vZmlsZW5hbWUgPSBmaWxlbmFtZS5Ub0xvd2VyKCk7XHJcblxyXG4gICAgICAgICAgICAvL2lmKGZpbGVuYW1lLkVuZHNXaXRoKFwiLnBkZlwiKSlcclxuICAgICAgICAgICAgLy8gICAgcmV0dXJuIFwiYXBwbGljYXRpb24vcGRmXCI7XHJcbiAgICAgICAgICAgIC8vZWxzZSBpZihmaWxlbmFtZS5FbmRzV2l0aChcIi5wbmdcIikpXHJcbiAgICAgICAgICAgIC8vICAgIHJldHVybiBcImltYWdlL3BuZ1wiO1xyXG4gICAgICAgICAgICAvL2Vsc2UgaWYoZmlsZW5hbWUuRW5kc1dpdGgoXCIuanBnXCIpIHx8IGZpbGVuYW1lLkVuZHNXaXRoKFwiLmpwZWdcIikpXHJcbiAgICAgICAgICAgIC8vICAgIHJldHVybiBcImltYWdlL2pwZWdcIjtcclxuICAgICAgICAgICAgLy9lbHNlXHJcbiAgICAgICAgICAgIC8vICAgIHJldHVybiBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIFNlbmRFbWFpbChHbWFpbE1lc3NhZ2UgbWVzc2FnZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vaWYobWVzc2FnZSA9PSBudWxsKVxyXG4gICAgICAgICAgICAvLyAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAvL3ZhciBidWlsZGVyID0gbmV3IFN0cmluZ0J1aWxkZXIoKTtcclxuXHJcbiAgICAgICAgICAgIC8vYnVpbGRlci5BcHBlbmQoXCJDb250ZW50LVR5cGU6IG11bHRpcGFydC9taXhlZDsgYm91bmRhcnk9XFxcIl9pbnRlbG9neV84YWIzMzdlYzJlMzhlMWE4YjgyYTAxYTU3MTJhOGJkYlxcXCJcXHJcXG5cIik7XHJcbiAgICAgICAgICAgIC8vYnVpbGRlci5BcHBlbmQoXCJNSU1FLVZlcnNpb246IDEuMFxcclxcblwiKTtcclxuICAgICAgICAgICAgLy9idWlsZGVyLkFwcGVuZChcIkZyb206IFwiICsgRW1haWwoKSArIFwiXFxyXFxuXCIpO1xyXG4gICAgICAgICAgICAvL2J1aWxkZXIuQXBwZW5kKFwiVG86IFwiICsgbWVzc2FnZS5Ub0VtYWlsICsgXCJcXHJcXG5cIik7XHJcbiAgICAgICAgICAgIC8vYnVpbGRlci5BcHBlbmQoXCJTdWJqZWN0OiBcIiArIG1lc3NhZ2UuU3ViamVjdCArIFwiXFxyXFxuXFxyXFxuXCIpO1xyXG5cclxuICAgICAgICAgICAgLy9idWlsZGVyLkFwcGVuZChcIi0tX2ludGVsb2d5XzhhYjMzN2VjMmUzOGUxYThiODJhMDFhNTcxMmE4YmRiXFxyXFxuXCIpO1xyXG4gICAgICAgICAgICAvL2J1aWxkZXIuQXBwZW5kKFwiQ29udGVudC1UeXBlOiB0ZXh0L1wiICsgKG1lc3NhZ2UuSXNIVE1MID8gXCJodG1sXCIgOiBcInBsYWluXCIpICsgXCI7IGNoYXJzZXQ9XFxcIlVURi04XFxcIlxcclxcblwiKTtcclxuICAgICAgICAgICAgLy9idWlsZGVyLkFwcGVuZChcIk1JTUUtVmVyc2lvbjogMS4wXFxyXFxuXCIpO1xyXG4gICAgICAgICAgICAvL2J1aWxkZXIuQXBwZW5kKFwiQ29udGVudC1UcmFuc2Zlci1FbmNvZGluZzogN2JpdFxcclxcblxcclxcblwiKTtcclxuXHJcbiAgICAgICAgICAgIC8vaWYobWVzc2FnZS5Jc0hUTUwpXHJcbiAgICAgICAgICAgIC8ve1xyXG4gICAgICAgICAgICAvLyAgICBidWlsZGVyLkFwcGVuZCgobWVzc2FnZS5Cb2R5ICsgXCJcIikuUmVwbGFjZShcIlxcclxcblwiLCBcIjxiciAvPlwiKSArIFwiXFxyXFxuXFxyXFxuXCIpO1xyXG4gICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgLy9lbHNlXHJcbiAgICAgICAgICAgIC8ve1xyXG4gICAgICAgICAgICAvLyAgICBidWlsZGVyLkFwcGVuZChtZXNzYWdlLkJvZHkgKyBcIlxcclxcblxcclxcblwiKTtcclxuICAgICAgICAgICAgLy99XHJcblxyXG4gICAgICAgICAgICAvL2J1aWxkZXIuQXBwZW5kKFwiLS1faW50ZWxvZ3lfOGFiMzM3ZWMyZTM4ZTFhOGI4MmEwMWE1NzEyYThiZGJcXHJcXG5cIik7XHJcblxyXG4gICAgICAgICAgICAvL2lmKG1lc3NhZ2UuQXR0YWNobWVudHMgIT0gbnVsbClcclxuICAgICAgICAgICAgLy97XHJcbiAgICAgICAgICAgIC8vICAgIGZvcmVhY2godmFyIGF0dGFjaG1lbnQgaW4gbWVzc2FnZS5BdHRhY2htZW50cylcclxuICAgICAgICAgICAgLy8gICAge1xyXG4gICAgICAgICAgICAvLyAgICAgICAgaWYoIXN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoYXR0YWNobWVudC5EYXRhKSlcclxuICAgICAgICAgICAgLy8gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIi0tX2ludGVsb2d5XzhhYjMzN2VjMmUzOGUxYThiODJhMDFhNTcxMmE4YmRiXFxyXFxuXCIpO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiQ29udGVudC1UeXBlOiBcIiArIEdldENvbnRlbnRUeXBlRnJvbUZpbGVOYW1lKGF0dGFjaG1lbnQuRmlsZW5hbWUpICsgXCI7IGNoYXJzZXQ9XFxcIlVURi04XFxcIlxcclxcblwiKTtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIk1JTUUtVmVyc2lvbjogMS4wXFxyXFxuXCIpO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiQ29udGVudC1UcmFuc2Zlci1FbmNvZGluZzogYmFzZTY0XFxyXFxuXCIpO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiQ29udGVudC1EaXNwb3NpdGlvbjogYXR0YWNobWVudDsgZmlsZW5hbWU9XFxcIlwiICsgKGF0dGFjaG1lbnQuRmlsZW5hbWUpLlJlcGxhY2UoXCJcXFwiXCIsIFwiXCIpICsgXCJcXFwiXFxyXFxuXFxyXFxuXCIpO1xyXG5cclxuICAgICAgICAgICAgLy8gICAgICAgICAgICBpZihhdHRhY2htZW50LklzQmFzZTY0KVxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoYXR0YWNobWVudC5EYXRhKTtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoYnRvYShhdHRhY2htZW50LkRhdGEpKTtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiXFxyXFxuXFxyXFxuXCIpO1xyXG5cclxuICAgICAgICAgICAgLy8gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIi0tX2ludGVsb2d5XzhhYjMzN2VjMmUzOGUxYThiODJhMDFhNTcxMmE4YmRiXFxyXFxuXCIpO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAgICB9XHJcbiAgICAgICAgICAgIC8vfVxyXG5cclxuICAgICAgICAgICAgLy92YXIgeCA9IG5ldyBKUXVlcnlBamF4U2V0dGluZ3MuaGVhZGVyc0NvbmZpZygpO1xyXG4gICAgICAgICAgICAvL3hbXCJBdXRob3JpemF0aW9uXCJdID0gXCJCZWFyZXIgXCIgKyBBY2Nlc3NUb2tlbigpO1xyXG5cclxuICAgICAgICAgICAgLy92YXIgc2V0dGluZ3MgPSBuZXcgSlF1ZXJ5QWpheFNldHRpbmdzKClcclxuICAgICAgICAgICAgLy97XHJcbiAgICAgICAgICAgIC8vICAgIHR5cGUgPSBcIlBPU1RcIixcclxuICAgICAgICAgICAgLy8gICAgdXJsID0gXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS91cGxvYWQvZ21haWwvdjEvdXNlcnMvbWUvbWVzc2FnZXMvc2VuZD91cGxvYWRUeXBlPW11bHRpcGFydFwiLFxyXG4gICAgICAgICAgICAvLyAgICBjb250ZW50VHlwZSA9IFwibWVzc2FnZS9yZmM4MjJcIixcclxuICAgICAgICAgICAgLy8gICAgZGF0YSA9IGJ1aWxkZXIuVG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgLy8gICAgaGVhZGVycyA9IHgsXHJcbiAgICAgICAgICAgIC8vICAgIGVycm9yID0gbmV3IEpRdWVyeUFqYXhTZXR0aW5ncy5lcnJvckZuKChhLCBiLCBjKSA9PlxyXG4gICAgICAgICAgICAvLyAgICB7XHJcbiAgICAgICAgICAgIC8vICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgLy8gICAgfSksXHJcbiAgICAgICAgICAgIC8vICAgIGNvbXBsZXRlID0gbmV3IEpRdWVyeUFqYXhTZXR0aW5ncy5jb21wbGV0ZUZuKCAoanEsIGRhdGEpID0+XHJcbiAgICAgICAgICAgIC8vICAgIHtcclxuICAgICAgICAgICAgLy8gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAvLyAgICB9KSxcclxuICAgICAgICAgICAgLy8gICAgc3VjY2VzcyA9IG5ldyBKUXVlcnlBamF4U2V0dGluZ3Muc3VjY2Vzc0ZuKChvYmosIGRhdGEsIGpxKSA9PlxyXG4gICAgICAgICAgICAvLyAgICB7XHJcbiAgICAgICAgICAgIC8vICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgLy8gICAgfSlcclxuICAgICAgICAgICAgLy99O1xyXG5cclxuICAgICAgICAgICAgLy9qUXVlcnkuYWpheChzZXR0aW5ncyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBJY29uVVJMKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAvLyAgICAgICAgIGlmKCFFeHRlcm5hbEdtYWlsLlNldHVwQ29tcGxldGVkKVxyXG4gICAvLyAgICAgICAgIHtcclxuICAgLy8gICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIlNldHVwIGZvciBnbWFpbCBpcyBub3QgcmVhZHkgeWV0IVwiKTtcclxuICAgLy8gICAgICAgICB9XHJcbiAgIC8vICAgICAgICAgaWYoR29vZ2xlQXV0aCA9PSBudWxsKVxyXG4gICAvLyAgICAgICAgIHtcclxuICAgLy8gICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihcIkdvb2dsZUF1dGhcIik7XHJcbiAgIC8vICAgICAgICAgfVxyXG5cclxuICAgLy8gICAgICAgICBzdHJpbmcgaWNvblVybCA9IFwiXCI7XHJcblxyXG4gICAvLyAgICAgICAgIC8qQFxyXG5cdFx0XHQvL2ljb25VcmwgPSBFeHByZXNzQ3JhZnQuR21haWwuR29vZ2xlQXV0aC5jdXJyZW50VXNlci5BYi53My5QYWE7XHJcblx0XHRcdC8vKi9cclxuXHJcbiAgIC8vICAgICAgICAgcmV0dXJuIGljb25Vcmw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgU2V0dXAoc3RyaW5nIGNsaWVudElkKVxyXG4gICAgICAgIHtcclxuICAgICAgIC8vICAgICBDbGllbnRJZCA9IGNsaWVudElkO1xyXG5cclxuICAgICAgIC8vICAgICBFeHRlcm5hbEdtYWlsLk9uUmVhZHkgPSAoKSA9PlxyXG4gICAgICAgLy8gICAgIHtcclxuICAgICAgIC8vICAgICAgICAgdHJ5XHJcbiAgICAgICAvLyAgICAgICAgIHtcclxuICAgICAgIC8vICAgICAgICAgICAgIC8qQFxyXG5cdFx0XHQgICAgLy9nYXBpLmxvYWQoJ2NsaWVudDphdXRoMicsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgLy8gICAgICAgICAgICAgZ2FwaS5jbGllbnQuaW5pdCh7XHJcbiAgICAgICAvLyAgICAgICAgICAgICAgIGRpc2NvdmVyeURvY3M6IFtcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2Rpc2NvdmVyeS92MS9hcGlzL2dtYWlsL3YxL3Jlc3RcIl0sXHJcbiAgICAgICAvLyAgICAgICAgICAgICAgIGNsaWVudElkOiBFeHByZXNzQ3JhZnQuR21haWwuQ2xpZW50SWQsXHJcbiAgICAgICAvLyAgICAgICAgICAgICAgIHNjb3BlOiAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9nbWFpbC5zZW5kJ1xyXG4gICAgICAgLy8gICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAvLyAgICAgICAgICAgICAgIC8vIExpc3RlbiBmb3Igc2lnbi1pbiBzdGF0ZSBjaGFuZ2VzLlxyXG4gICAgICAgLy8gICAgICAgICAgICAgICBFeHByZXNzQ3JhZnQuR21haWwuR29vZ2xlQXV0aCA9IGdhcGkuYXV0aDIuZ2V0QXV0aEluc3RhbmNlKClcclxuICAgICAgIC8vICAgICAgICAgICAgICAgZ2FwaS5hdXRoMi5nZXRBdXRoSW5zdGFuY2UoKS5zaWduSW4oKTtcclxuXHJcbiAgICAgICAvLyAgICAgICAgICAgICAgIEV4cHJlc3NDcmFmdC5HbWFpbC5QdXNoRXZlbnRzVGltZUNhbGwoKTtcclxuICAgICAgIC8vICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgLy8gICAgICAgICB9KTtcclxuXHRcdFx0ICAgIC8vKi9cclxuICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgLy8gICAgICAgICBjYXRjaChFeGNlcHRpb24pXHJcbiAgICAgICAvLyAgICAgICAgIHtcclxuICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgLy8gICAgIH07XHJcbiAgICAgICAvLyAgICAgRXh0ZXJuYWxHbWFpbC5TZXR1cCh0cnVlLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIEdtYWlsTWVzc2FnZVxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgVG9FbWFpbCB7IGdldDsgc2V0OyB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgU3ViamVjdCB7IGdldDsgc2V0OyB9XHJcbiAgICAgICAgcHVibGljIHN0cmluZyBCb2R5IHsgZ2V0OyBzZXQ7IH1cclxuICAgICAgICBwdWJsaWMgYm9vbCBJc0hUTUwgeyBnZXQ7IHNldDsgfVxyXG5cclxuICAgICAgICBwdWJsaWMgR21haWxNZXNzYWdlKHN0cmluZyB0b0VtYWlsLCBzdHJpbmcgc3ViamVjdCwgc3RyaW5nIGJvZHksIGJvb2wgaXNIVE1MKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVG9FbWFpbCA9IHRvRW1haWw7XHJcbiAgICAgICAgICAgIFN1YmplY3QgPSBzdWJqZWN0O1xyXG4gICAgICAgICAgICBCb2R5ID0gYm9keTtcclxuICAgICAgICAgICAgSXNIVE1MID0gaXNIVE1MO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIExpc3Q8R21haWxNZXNzYWdlQXR0YWNobWVudD4gQXR0YWNobWVudHMgeyBnZXQ7IHNldDsgfVxyXG5cbiAgICBcbnByaXZhdGUgTGlzdDxHbWFpbE1lc3NhZ2VBdHRhY2htZW50PiBfX1Byb3BlcnR5X19Jbml0aWFsaXplcl9fQXR0YWNobWVudHM9bmV3IExpc3Q8R21haWxNZXNzYWdlQXR0YWNobWVudD4oKTt9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIEdtYWlsTWVzc2FnZUF0dGFjaG1lbnRcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgc3RyaW5nIEZpbGVuYW1lIHsgZ2V0OyBzZXQ7IH1cclxuICAgICAgICBwdWJsaWMgc3RyaW5nIERhdGEgeyBnZXQ7IHNldDsgfVxyXG4gICAgICAgIHB1YmxpYyBib29sIElzQmFzZTY0IHsgZ2V0OyBzZXQ7IH1cclxuXHJcbiAgICAgICAgcHVibGljIEdtYWlsTWVzc2FnZUF0dGFjaG1lbnQoc3RyaW5nIGZpbGVuYW1lLCBzdHJpbmcgZGF0YSwgYm9vbCBpc0Jhc2U2NCA9IGZhbHNlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRmlsZW5hbWUgPSBmaWxlbmFtZTsgRGF0YSA9IGRhdGE7IElzQmFzZTY0ID0gaXNCYXNlNjQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwidXNpbmcgU3lzdGVtO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgR29vZ2xlQ2xvdWRQcmludFxyXG4gICAge1xyXG4gICAgICAgIHByaXZhdGUgc3RyaW5nIF9zb3VyY2U7XHJcbiAgICAgICAgcHJpdmF0ZSBzdHJpbmcgX21pbWV0eXBlO1xyXG4gICAgICAgIHByaXZhdGUgc3RyaW5nIF9lbmNvZGluZyA9IFwiXCI7XHJcbiAgICAgICAgcHJpdmF0ZSBzdHJpbmcgX3RpdGxlO1xyXG4gICAgICAgIHByaXZhdGUgb2JqZWN0IF9nYWRnZXQgPSBudWxsO1xyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBFeHRlcm5hbFBsdWdpbiBFeHRlcm5hbEdvb2dsZUNsb3VkUHJpbnQgPSBuZXcgRXh0ZXJuYWxQbHVnaW4oXCJodHRwczovL3d3dy5nb29nbGUuY29tL2Nsb3VkcHJpbnQvY2xpZW50L2NwZ2FkZ2V0LmpzXCIpO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgU2V0dXAoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRXh0ZXJuYWxHb29nbGVDbG91ZFByaW50LlNldHVwKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgR29vZ2xlQ2xvdWRQcmludChzdHJpbmcgc291cmNlLCBzdHJpbmcgdGl0bGUgPSBcIlwiLCBHb29nbGVDbG91ZFByaW50aW5nTWltZVR5cGUgZ2NwbXQgPSBHb29nbGVDbG91ZFByaW50aW5nTWltZVR5cGUuVXJsLCBzdHJpbmcgZW5jb2RpbmcgPSBcIlwiKSA6IGJhc2UoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgX3RpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgICAgIF9zb3VyY2UgPSBzb3VyY2U7XHJcbiAgICAgICAgICAgIF9lbmNvZGluZyA9IGVuY29kaW5nO1xyXG4gICAgICAgICAgICBfbWltZXR5cGUgPSBnY3BtdC5Ub1N0cmluZyhcIkdcIikuVG9Mb3dlcigpLlJlcGxhY2UoXCJfXCIsIFwiLlwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNob3coKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRXh0ZXJuYWxHb29nbGVDbG91ZFByaW50LlVzYWdlQ2hlY2soKTtcclxuXHJcbiAgICAgICAgICAgIC8qQFxyXG5cdFx0XHR0aGlzLl9nYWRnZXQgPSBuZXcgY2xvdWRwcmludC5HYWRnZXQoKTtcclxuXHRcdFx0Ki9cclxuICAgICAgICAgICAgaWYoIXN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoX2VuY29kaW5nKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLypAXHJcblx0XHRcdFx0dGhpcy5fZ2FkZ2V0LnNldFByaW50RG9jdW1lbnQodGhpcy5fbWltZXR5cGUsIHRoaXMuX3RpdGxlLCB0aGlzLl9zb3VyY2UsIHRoaXMuX2VuY29kaW5nKTtcclxuXHRcdFx0XHQqL1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLypAXHJcblx0XHRcdFx0dGhpcy5fZ2FkZ2V0LnNldFByaW50RG9jdW1lbnQodGhpcy5fbWltZXR5cGUsIHRoaXMuX3RpdGxlLCB0aGlzLl9zb3VyY2UpO1xyXG5cdFx0XHRcdCovXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLypAXHJcblx0XHRcdHRoaXMuX2dhZGdldC5vcGVuUHJpbnREaWFsb2coKTtcclxuXHRcdFx0dGhpcy5fZ2FkZ2V0LnNldE9uQ2xvc2VDYWxsYmFjayh0aGlzLmNsZWFyQ29udGVudCk7XHJcblx0XHRcdCovXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBjbGVhckNvbnRlbnQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFJldHlwZWQuanF1ZXJ5LmpRdWVyeS5zZWxlY3QoXCIuX19nY3BfZGlhbG9nX2NvbnRhaW5lcl9jbHNcIikucGFyZW50KCkuZ2V0KDApLkRlbGV0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoKEV4Y2VwdGlvbilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBDbG9zZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZih0aGlzLl9nYWRnZXQgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLypAXHJcblx0XHRcdFx0dGhpcy5fZ2FkZ2V0LmNsb3NlUHJpbnREaWFsb2coKTtcclxuXHRcdFx0XHR0aGlzLl9nYWRnZXQgPSBudWxsO1xyXG5cdFx0XHRcdCovXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vPHNjcmlwdCBzcmMgPSBcImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vY2xvdWRwcmludC9jbGllbnQvY3BnYWRnZXQuanNcIiA+XHJcbi8vPC8gc2NyaXB0ID5cclxuLy88IHNjcmlwdCA+XHJcbi8vICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbi8vICAgIHZhciBnYWRnZXQgPSBuZXcgY2xvdWRwcmludC5HYWRnZXQoKTtcclxuLy9nYWRnZXQuc2V0UHJpbnREb2N1bWVudChcInVybFwiLCBcIlRlc3QgUGFnZVwiLCBcImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20uYXUvP2dmZV9yZD1jciZlaT1KcHFHV0p3NXhPdndCOEdXb2NBQlwiKTtcclxuLy9cdGdhZGdldC5vcGVuUHJpbnREaWFsb2coKTtcclxuLy8gIH1cclxuLy88L3NjcmlwdD4iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uTGlucTtcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcbnVzaW5nIFN5c3RlbS5UaHJlYWRpbmcuVGFza3M7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBHcmFwaGljc1xyXG4gICAge1xyXG4gICAgICAgIHByaXZhdGUgUmV0eXBlZC5kb20uSFRNTENhbnZhc0VsZW1lbnQgX2NhbnZhcztcclxuICAgICAgICBwdWJsaWMgUmV0eXBlZC5kb20uQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIF9jb250ZXh0O1xyXG5cclxuICAgICAgICBwdWJsaWMgR3JhcGhpY3MoQ2FudmFzQ29udHJvbCBjb250cm9sKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgX2NhbnZhcyA9IGNvbnRyb2wuQ2FudmFzO1xyXG4gICAgICAgICAgICBfY29udGV4dCA9IF9jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpLkFzPFJldHlwZWQuZG9tLkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRD4oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIENsZWFyKENvbG9yIGNvbG9yKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgX2NvbnRleHQuY2xlYXJSZWN0KDAsIDAsIF9jYW52YXMud2lkdGgsIF9jYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICAgICAgaWYoQ29sb3IuVHJhbnNwYXJlbnQgIT0gY29sb3IpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIEZpbGxSZWN0YW5nbGUobmV3IFNvbGlkQnJ1c2goY29sb3IpLCAwLCAwLCAoZmxvYXQpX2NhbnZhcy53aWR0aCwgKGZsb2F0KV9jYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICAgICAgfSAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQXBwbHlGaWxsKEJydXNoIGJydXNoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoYnJ1c2ggaXMgU29saWRCcnVzaClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgX2NvbnRleHQuZmlsbFN0eWxlID0gYnJ1c2guQXM8U29saWRCcnVzaD4oKS5Db2xvci5Ub0hUTUxDb2xvcigpO1xyXG4gICAgICAgICAgICB9ZWxzZSBpZihicnVzaCBpcyBTdHlsZUJydXNoKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBfY29udGV4dC5maWxsU3R5bGUgPSBicnVzaC5BczxTdHlsZUJydXNoPigpLlN0eWxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBBcHBseVBlbihQZW4gcGVuKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYocGVuLkJydXNoIGlzIFNvbGlkQnJ1c2gpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIF9jb250ZXh0LnN0cm9rZVN0eWxlID0gcGVuLkJydXNoLkFzPFNvbGlkQnJ1c2g+KCkuQ29sb3IuVG9IVE1MQ29sb3IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKHBlbi5CcnVzaCBpcyBTdHlsZUJydXNoKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBfY29udGV4dC5zdHJva2VTdHlsZSA9IHBlbi5CcnVzaC5BczxTdHlsZUJydXNoPigpLlN0eWxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZsb2F0IHdpZHRoID0gcGVuLldpZHRoO1xyXG4gICAgICAgICAgICBpZih3aWR0aCA8IDApXHJcbiAgICAgICAgICAgICAgICB3aWR0aCA9IDE7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIF9jb250ZXh0LmxpbmVXaWR0aCA9IHdpZHRoO1xyXG5cclxuICAgICAgICAgICAgLy8gd2hvIGtub3dzPz8/XHJcbiAgICAgICAgICAgIGlmKHBlbi5EYXNoU3R5bGUgIT0gRGFzaFN0eWxlLlNvbGlkKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2gocGVuLkRhc2hTdHlsZSlcclxuICAgICAgICAgICAgICAgIHsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRGFzaFN0eWxlLkRhc2g6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnNldExpbmVEYXNoKG5ldyBkb3VibGVbXSB7IDIsIDIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRGFzaFN0eWxlLkRvdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQuc2V0TGluZURhc2gobmV3IGRvdWJsZVtdIHsgMSwgMSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXNoU3R5bGUuRGFzaERvdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQuc2V0TGluZURhc2gobmV3IGRvdWJsZVtdIHsgMiwgMSwgMSwgMSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXNoU3R5bGUuRGFzaERvdERvdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXNoU3R5bGUuQ3VzdG9tOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEZpbGxSZWN0YW5nbGUoQnJ1c2ggYnJ1c2gsIGZsb2F0IHgsIGZsb2F0IHksIGZsb2F0IHdpZHRoLCBmbG9hdCBoZWlnaHQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBGaWxsUmVjdGFuZ2xlKGJydXNoLCAoaW50KXgsIChpbnQpeSwgKGludCl3aWR0aCwgKGludCloZWlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBwdWJsaWMgdm9pZCBGaWxsUmVjdGFuZ2xlKEJydXNoIGJydXNoLCBpbnQgeCwgaW50IHksIGludCB3aWR0aCwgaW50IGhlaWdodClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEFwcGx5RmlsbChicnVzaCk7XHJcbiAgICAgICAgICAgIF9jb250ZXh0LmZpbGxSZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBwdWJsaWMgdm9pZCBGaWxsUmVjdGFuZ2xlKEJydXNoIGJydXNoLCBSZWN0YW5nbGUgcmVjdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEZpbGxSZWN0YW5nbGUoYnJ1c2gsIHJlY3QuWCwgcmVjdC5ZLCByZWN0LldpZHRoLCByZWN0LkhlaWdodCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEZpbGxSZWN0YW5nbGUoQnJ1c2ggYnJ1c2gsIFJlY3RhbmdsZUYgcmVjdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEZpbGxSZWN0YW5nbGUoYnJ1c2gsIHJlY3QuWCwgcmVjdC5ZLCByZWN0LldpZHRoLCByZWN0LkhlaWdodCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEVsbGNpcHNlXHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEZpbGxFbGxpcHNlKEJydXNoIGJydXNoLCBmbG9hdCB4LCBmbG9hdCB5LCBmbG9hdCB3aWR0aCwgZmxvYXQgaGVpZ2h0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIHdpZHRoX292ZXJfMiA9IHdpZHRoIC8gMjtcclxuICAgICAgICAgICAgdmFyIHdpZHRoX3R3b190aGlyZHMgPSB3aWR0aCAqIDIgLyAzO1xyXG4gICAgICAgICAgICB2YXIgaGVpZ2h0X292ZXJfMiA9IGhlaWdodCAvIDI7XHJcblxyXG4gICAgICAgICAgICB4ICs9IHdpZHRoX292ZXJfMjtcclxuICAgICAgICAgICAgeSArPSBoZWlnaHRfb3Zlcl8yO1xyXG5cclxuICAgICAgICAgICAgX2NvbnRleHQuYmVnaW5QYXRoKCk7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIF9jb250ZXh0Lm1vdmVUbyh4LCB5IC0gaGVpZ2h0X292ZXJfMik7XHJcbiAgICAgICAgICAgIF9jb250ZXh0LmJlemllckN1cnZlVG8oeCArIHdpZHRoX3R3b190aGlyZHMsIHkgLSBoZWlnaHRfb3Zlcl8yLCB4ICsgd2lkdGhfdHdvX3RoaXJkcywgeSArIGhlaWdodF9vdmVyXzIsIHgsIHkgKyBoZWlnaHRfb3Zlcl8yKTtcclxuICAgICAgICAgICAgX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh4IC0gd2lkdGhfdHdvX3RoaXJkcywgeSArIGhlaWdodF9vdmVyXzIsIHggLSB3aWR0aF90d29fdGhpcmRzLCB5IC0gaGVpZ2h0X292ZXJfMiwgeCwgeSAtIGhlaWdodF9vdmVyXzIpO1xyXG4gICAgICAgICAgICBfY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICAgICAgQXBwbHlGaWxsKGJydXNoKTtcclxuICAgICAgICAgICAgX2NvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgRmlsbEVsbGlwc2UoQnJ1c2ggYnJ1c2gsIGludCB4LCBpbnQgeSwgaW50IHdpZHRoLCBpbnQgaGVpZ2h0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRmlsbEVsbGlwc2UoYnJ1c2gsIChmbG9hdCl4LCAoZmxvYXQpeSwgKGZsb2F0KXdpZHRoLCAoZmxvYXQpaGVpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEZpbGxFbGxpcHNlKEJydXNoIGJydXNoLCBSZWN0YW5nbGUgcmVjdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEZpbGxFbGxpcHNlKGJydXNoLCByZWN0LlgsIHJlY3QuWSwgcmVjdC5XaWR0aCwgcmVjdC5IZWlnaHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgRmlsbEVsbGlwc2UoQnJ1c2ggYnJ1c2gsIFJlY3RhbmdsZUYgcmVjdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEZpbGxFbGxpcHNlKGJydXNoLCByZWN0LlgsIHJlY3QuWSwgcmVjdC5XaWR0aCwgcmVjdC5IZWlnaHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgRHJhd0VsbGlwc2UoUGVuIHBlbiwgZmxvYXQgeCwgZmxvYXQgeSwgZmxvYXQgd2lkdGgsIGZsb2F0IGhlaWdodClcclxuICAgICAgICB7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciB3aWR0aF9vdmVyXzIgPSB3aWR0aCAvIDI7XHJcbiAgICAgICAgICAgIHZhciB3aWR0aF90d29fdGhpcmRzID0gd2lkdGggKiAyIC8gMztcclxuICAgICAgICAgICAgdmFyIGhlaWdodF9vdmVyXzIgPSBoZWlnaHQgLyAyO1xyXG5cclxuICAgICAgICAgICAgeCArPSB3aWR0aF9vdmVyXzI7XHJcbiAgICAgICAgICAgIHkgKz0gaGVpZ2h0X292ZXJfMjtcclxuXHJcbiAgICAgICAgICAgIF9jb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICBBcHBseVBlbihwZW4pO1xyXG4gICAgICAgICAgICBfY29udGV4dC5tb3ZlVG8oeCwgeSAtIGhlaWdodF9vdmVyXzIpO1xyXG4gICAgICAgICAgICBfY29udGV4dC5iZXppZXJDdXJ2ZVRvKHggKyB3aWR0aF90d29fdGhpcmRzLCB5IC0gaGVpZ2h0X292ZXJfMiwgeCArIHdpZHRoX3R3b190aGlyZHMsIHkgKyBoZWlnaHRfb3Zlcl8yLCB4LCB5ICsgaGVpZ2h0X292ZXJfMik7XHJcbiAgICAgICAgICAgIF9jb250ZXh0LmJlemllckN1cnZlVG8oeCAtIHdpZHRoX3R3b190aGlyZHMsIHkgKyBoZWlnaHRfb3Zlcl8yLCB4IC0gd2lkdGhfdHdvX3RoaXJkcywgeSAtIGhlaWdodF9vdmVyXzIsIHgsIHkgLSBoZWlnaHRfb3Zlcl8yKTtcclxuICAgICAgICAgICAgX2NvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgICAgIF9jb250ZXh0LnN0cm9rZSgpOyAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgRHJhd0VsbGlwc2UoUGVuIHBlbiwgaW50IHgsIGludCB5LCBpbnQgd2lkdGgsIGludCBoZWlnaHQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBEcmF3RWxsaXBzZShwZW4sIChmbG9hdCl4LCAoZmxvYXQpeSwgKGZsb2F0KXdpZHRoLCAoZmxvYXQpaGVpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXdFbGxpcHNlKFBlbiBwZW4sIFJlY3RhbmdsZSByZWN0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRHJhd0VsbGlwc2UocGVuLCByZWN0LlgsIHJlY3QuWSwgcmVjdC5XaWR0aCwgcmVjdC5IZWlnaHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgRHJhd0VsbGlwc2UoUGVuIHBlbiwgUmVjdGFuZ2xlRiByZWN0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRHJhd0VsbGlwc2UocGVuLCByZWN0LlgsIHJlY3QuWSwgcmVjdC5XaWR0aCwgcmVjdC5IZWlnaHQpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vIERyYXcgcmVjXHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXdSZWN0YW5nbGUoUGVuIHBlbiwgZmxvYXQgeCwgZmxvYXQgeSwgZmxvYXQgd2lkdGgsIGZsb2F0IGhlaWdodClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIERyYXdSZWN0YW5nbGUocGVuLCAoaW50KXgsIChpbnQpeSwgKGludCl3aWR0aCwgKGludCloZWlnaHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgRHJhd1JlY3RhbmdsZShQZW4gcGVuLCBpbnQgeCwgaW50IHksIGludCB3aWR0aCwgaW50IGhlaWdodClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEFwcGx5UGVuKHBlbik7XHJcbiAgICAgICAgICAgIF9jb250ZXh0LnN0cm9rZVJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7ICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBEcmF3UmVjdGFuZ2xlKFBlbiBwZW4sIFJlY3RhbmdsZSByZWN0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRHJhd1JlY3RhbmdsZShwZW4sIHJlY3QuWCwgcmVjdC5ZLCByZWN0LldpZHRoLCByZWN0LkhlaWdodCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBEcmF3UmVjdGFuZ2xlKFBlbiBwZW4sIFJlY3RhbmdsZUYgcmVjdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIERyYXdSZWN0YW5nbGUocGVuLCByZWN0LlgsIHJlY3QuWSwgcmVjdC5XaWR0aCwgcmVjdC5IZWlnaHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRW5kIERyYXcgcmVjXHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXdMaW5lKFBlbiBwZW4sIGZsb2F0IHgxLCBmbG9hdCB5MSwgZmxvYXQgeDIsIGZsb2F0IHkyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgX2NvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIF9jb250ZXh0Lm1vdmVUbyh4MSwgeTEpO1xyXG4gICAgICAgICAgICBfY29udGV4dC5saW5lVG8oeDIsIHkyKTtcclxuICAgICAgICAgICAgQXBwbHlQZW4ocGVuKTtcclxuICAgICAgICAgICAgX2NvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXdMaW5lKFBlbiBwZW4sIFBvaW50RiBwdDEsIFBvaW50RiBwdDIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBEcmF3TGluZShwZW4sIHB0MS5YLCBwdDEuWSwgcHQyLlgsIHB0Mi5ZKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcHVibGljIHZvaWQgRHJhd0xpbmUoUGVuIHBlbiwgaW50IHgxLCBpbnQgeTEsIGludCB4MiwgaW50IHkyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgX2NvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIF9jb250ZXh0Lm1vdmVUbyh4MSwgeTEpO1xyXG4gICAgICAgICAgICBfY29udGV4dC5saW5lVG8oeDIsIHkyKTtcclxuICAgICAgICAgICAgQXBwbHlQZW4ocGVuKTtcclxuICAgICAgICAgICAgX2NvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXdMaW5lKFBlbiBwZW4sIFBvaW50IHB0MSwgUG9pbnQgcHQyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRHJhd0xpbmUocGVuLCBwdDEuWCwgcHQxLlksIHB0Mi5YLCBwdDIuWSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBcclxuICAgICAgICBwdWJsaWMgdm9pZCBEcmF3U3RyaW5nKHN0cmluZyBzLCBGb250IGZvbnQsIEJydXNoIGJydXNoLCBSZWN0YW5nbGVGIGxheW91dFJlY3RhbmdsZSwgU3RyaW5nRm9ybWF0IGZvcm1hdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIERyYXdTdHJpbmcocywgZm9udCwgYnJ1c2gsIGxheW91dFJlY3RhbmdsZS5YLCBsYXlvdXRSZWN0YW5nbGUuWSwgZm9ybWF0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcHVibGljIHZvaWQgRHJhd1N0cmluZyhzdHJpbmcgcywgRm9udCBmb250LCBCcnVzaCBicnVzaCwgUmVjdGFuZ2xlRiBsYXlvdXRSZWN0YW5nbGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBEcmF3U3RyaW5nKHMsIGZvbnQsIGJydXNoLCBsYXlvdXRSZWN0YW5nbGUsIG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBwdWJsaWMgdm9pZCBEcmF3U3RyaW5nKHN0cmluZyBzLCBGb250IGZvbnQsIEJydXNoIGJydXNoLCBQb2ludEYgcG9pbnQsIFN0cmluZ0Zvcm1hdCBmb3JtYXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBEcmF3U3RyaW5nKHMsIGZvbnQsIGJydXNoLCBwb2ludC5YLCBwb2ludC5ZLCBmb3JtYXQpO1xyXG4gICAgICAgIH0gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXdTdHJpbmcoc3RyaW5nIHMsIEZvbnQgZm9udCwgQnJ1c2ggYnJ1c2gsIGZsb2F0IHgsIGZsb2F0IHksIFN0cmluZ0Zvcm1hdCBmb3JtYXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBBcHBseUZpbGwoYnJ1c2gpO1xyXG4gICAgICAgICAgICBfY29udGV4dC5mb250ID0gZm9udC5Gb250U3RyaW5nO1xyXG4gICAgICAgICAgICBfY29udGV4dC5maWxsVGV4dChzLCB4LCB5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXdTdHJpbmcoc3RyaW5nIHMsIEZvbnQgZm9udCwgQnJ1c2ggYnJ1c2gsIGRvdWJsZSB4LCBkb3VibGUgeSwgZG91YmxlIG1heFdpZHRoLCBib29sIGFsaWdubWVudENlbnRyZSA9IGZhbHNlLCBib29sIGJhc2VJc1RvcCA9IHRydWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBBcHBseUZpbGwoYnJ1c2gpO1xyXG4gICAgICAgICAgICBpZihiYXNlSXNUb3ApXHJcbiAgICAgICAgICAgICAgICBfY29udGV4dC50ZXh0QmFzZWxpbmUgPSBcInRvcFwiO1xyXG5cclxuICAgICAgICAgICAgaWYoYWxpZ25tZW50Q2VudHJlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBfY29udGV4dC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgICAgICAgICB9ZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBfY29udGV4dC50ZXh0QWxpZ24gPSBcImxlZnRcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgX2NvbnRleHQuZm9udCA9IGZvbnQuRm9udFN0cmluZztcclxuICAgICAgICAgICAgX2NvbnRleHQuZmlsbFRleHQocywgeCwgeSwgbWF4V2lkdGgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgRHJhd1N0cmluZyhzdHJpbmcgcywgRm9udCBmb250LCBCcnVzaCBicnVzaCwgUG9pbnRGIHBvaW50KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRHJhd1N0cmluZyhzLCBmb250LCBicnVzaCwgcG9pbnQuWCwgcG9pbnQuWSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXdTdHJpbmcoc3RyaW5nIHMsIEZvbnQgZm9udCwgQnJ1c2ggYnJ1c2gsIGZsb2F0IHgsIGZsb2F0IHkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBEcmF3U3RyaW5nKHMsIGZvbnQsIGJydXNoLCB4LCB5LCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcHVibGljIHZvaWQgRHJhd0JlemllcihQZW4gcGVuLCBmbG9hdCB4MSwgZmxvYXQgeTEsIGZsb2F0IHgyLCBmbG9hdCB5MiwgZmxvYXQgeDMsIGZsb2F0IHkzLCBmbG9hdCB4NCwgZmxvYXQgeTQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBfY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgQXBwbHlQZW4ocGVuKTtcclxuICAgICAgICAgICAgX2NvbnRleHQubW92ZVRvKHgxLCB5MSk7XHJcbiAgICAgICAgICAgIF9jb250ZXh0LmJlemllckN1cnZlVG8oeDIsIHkyLCB4MywgeTMsIHg0LCB5NCk7XHJcbiAgICAgICAgICAgIF9jb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgICBfY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcHVibGljIHZvaWQgRHJhd0JlemllcihQZW4gcGVuLCBQb2ludEYgcHQxLCBQb2ludEYgcHQyLCBQb2ludEYgcHQzLCBQb2ludEYgcHQ0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRHJhd0JlemllcihwZW4sIHB0MS5YLCBwdDEuWSwgcHQyLlgsIHB0Mi5ZLCBwdDMuWCwgcHQzLlksIHB0NC5YLCBwdDQuWSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXdCZXppZXIoUGVuIHBlbiwgUG9pbnQgcHQxLCBQb2ludCBwdDIsIFBvaW50IHB0MywgUG9pbnQgcHQ0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRHJhd0JlemllcihwZW4sIHB0MS5YLCBwdDEuWSwgcHQyLlgsIHB0Mi5ZLCBwdDMuWCwgcHQzLlksIHB0NC5YLCBwdDQuWSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXdCZXppZXJzKFBlbiBwZW4sIFBvaW50RltdIHBvaW50cylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIF9jb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICBBcHBseVBlbihwZW4pO1xyXG4gICAgICAgICAgICB2YXIgcG9pbnQgPSBwb2ludHNbMF07XHJcbiAgICAgICAgICAgIF9jb250ZXh0Lm1vdmVUbyhwb2ludC5YLCBwb2ludC5ZKTtcclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDE7IGkgPCBwb2ludHMuTGVuZ3RoOyBpKz0zKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwb2ludCA9IHBvaW50c1tpXTtcclxuICAgICAgICAgICAgICAgIHZhciBwb2ludDIgPSBwb2ludHNbaSArIDFdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHBvaW50MyA9IHBvaW50c1tpICsgMl07XHJcbiAgICAgICAgICAgICAgICBfY29udGV4dC5iZXppZXJDdXJ2ZVRvKHBvaW50LlgsIHBvaW50LlksIHBvaW50Mi5YLCBwb2ludDIuWSwgcG9pbnQzLlgsIHBvaW50My5ZKTtcclxuICAgICAgICAgICAgfSAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBfY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICAgICAgX2NvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBEcmF3QmV6aWVycyhQZW4gcGVuLCBQb2ludFtdIHBvaW50cylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIF9jb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICBBcHBseVBlbihwZW4pO1xyXG4gICAgICAgICAgICB2YXIgcG9pbnQgPSBwb2ludHNbMF07XHJcbiAgICAgICAgICAgIF9jb250ZXh0Lm1vdmVUbyhwb2ludC5YLCBwb2ludC5ZKTtcclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDE7IGkgPCBwb2ludHMuTGVuZ3RoOyBpICs9IDMpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBvaW50ID0gcG9pbnRzW2ldO1xyXG4gICAgICAgICAgICAgICAgdmFyIHBvaW50MiA9IHBvaW50c1tpICsgMV07XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9pbnQzID0gcG9pbnRzW2kgKyAyXTtcclxuICAgICAgICAgICAgICAgIF9jb250ZXh0LmJlemllckN1cnZlVG8ocG9pbnQuWCwgcG9pbnQuWSwgcG9pbnQyLlgsIHBvaW50Mi5ZLCBwb2ludDMuWCwgcG9pbnQzLlkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF9jb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgICBfY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgXHJcbiAgICAgICAgcHVibGljIFNpemVGIE1lYXN1cmVTdHJpbmcoc3RyaW5nIHRleHQsIEZvbnQgZm9udCwgU2l6ZUYgbGF5b3V0QXJlYSwgU3RyaW5nRm9ybWF0IHN0cmluZ0Zvcm1hdCwgb3V0IGludCBjaGFyYWN0ZXJzRml0dGVkLCBvdXQgaW50IGxpbmVzRmlsbGVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEltcGxlbWVudGVkRXhjZXB0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyBTaXplRiBNZWFzdXJlU3RyaW5nKHN0cmluZyB0ZXh0LCBGb250IGZvbnQsIGludCB3aWR0aClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEV4Y2VwdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBwdWJsaWMgU2l6ZUYgTWVhc3VyZVN0cmluZyhzdHJpbmcgdGV4dCwgRm9udCBmb250LCBpbnQgd2lkdGgsIFN0cmluZ0Zvcm1hdCBmb3JtYXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgTm90SW1wbGVtZW50ZWRFeGNlcHRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcHVibGljIFNpemVGIE1lYXN1cmVTdHJpbmcoc3RyaW5nIHRleHQsIEZvbnQgZm9udCwgUG9pbnRGIG9yaWdpbiwgU3RyaW5nRm9ybWF0IHN0cmluZ0Zvcm1hdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEV4Y2VwdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBwdWJsaWMgU2l6ZUYgTWVhc3VyZVN0cmluZyhzdHJpbmcgdGV4dCwgRm9udCBmb250LCBTaXplRiBsYXlvdXRBcmVhLCBTdHJpbmdGb3JtYXQgc3RyaW5nRm9ybWF0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEltcGxlbWVudGVkRXhjZXB0aW9uKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZmxvYXQgTWVhc3VyZVN0cmluZ1dpZHRoKHN0cmluZyB0ZXh0LCBGb250IGZvbnQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBfY29udGV4dC5mb250ID0gZm9udC5Gb250U3RyaW5nO1xyXG4gICAgICAgICAgICB2YXIgc2l6ZSA9IF9jb250ZXh0Lm1lYXN1cmVUZXh0KHRleHQpO1xyXG4gICAgICAgICAgICB2YXIgc3AgPSBuZXcgUmV0eXBlZC5kb20uSFRNTFNwYW5FbGVtZW50KCk7XHJcbiAgICAgICAgICAgIHNwLnN0eWxlLmZvbnQgPSBmb250LkZvbnRTdHJpbmc7XHJcbiAgICAgICAgICAgIHJldHVybiAoZmxvYXQpc2l6ZS53aWR0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBmbG9hdCBNZWFzdXJlU3RyaW5nSGVpZ2h0KHN0cmluZyB0ZXh0LCBGb250IGZvbnQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gaW50ZXJuYWxNZWFzdXJlSGVpZ2h0KHRleHQsIGZvbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFNpemVGIE1lYXN1cmVTdHJpbmcoc3RyaW5nIHRleHQsIEZvbnQgZm9udClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIF9jb250ZXh0LmZvbnQgPSBmb250LkZvbnRTdHJpbmc7XHJcbiAgICAgICAgICAgIHZhciBzaXplID0gX2NvbnRleHQubWVhc3VyZVRleHQodGV4dCk7XHJcbiAgICAgICAgICAgIHZhciBzcCA9IG5ldyBSZXR5cGVkLmRvbS5IVE1MU3BhbkVsZW1lbnQoKTtcclxuICAgICAgICAgICAgc3Auc3R5bGUuZm9udCA9IGZvbnQuRm9udFN0cmluZztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2l6ZUYoc2l6ZS53aWR0aCwgaW50ZXJuYWxNZWFzdXJlSGVpZ2h0KHRleHQsIGZvbnQpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIERpY3Rpb25hcnk8c3RyaW5nLCBmbG9hdD4gY2FjaGVHZXRIZWlnaHQgPSBuZXcgRGljdGlvbmFyeTxzdHJpbmcsIGZsb2F0PigpO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIGZsb2F0IGludGVybmFsTWVhc3VyZUhlaWdodChzdHJpbmcgdGV4dCwgRm9udCBmb250KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKGNhY2hlR2V0SGVpZ2h0LkNvbnRhaW5zS2V5KGZvbnQuRm9udFN0cmluZykpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZUdldEhlaWdodFtmb250LkZvbnRTdHJpbmddO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgZGl2ID0gbmV3IENvbnRyb2woKTtcclxuICAgICAgICAgICAgZGl2LkNvbnRlbnQudGV4dENvbnRlbnQgPSB0ZXh0OyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBkaXYuTGVmdCA9IC0xMDA7XHJcbiAgICAgICAgICAgIGRpdi5Ub3AgPSAtMTAwO1xyXG4gICAgICAgICAgICBkaXYuU3R5bGUuZm9udCA9IGZvbnQuRm9udFN0cmluZztcclxuXHJcbiAgICAgICAgICAgIFJldHlwZWQuZG9tLmRvY3VtZW50LmJvZHkuQXBwZW5kQ2hpbGQoZGl2KTtcclxuXHJcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSAoZmxvYXQpKChSZXR5cGVkLmRvbS5ET01SZWN0KWRpdi5Db250ZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKS5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICBSZXR5cGVkLmRvbS5kb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkPFJldHlwZWQuZG9tLk5vZGU+KChSZXR5cGVkLmRvbS5Ob2RlKWRpdik7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVHZXRIZWlnaHRbZm9udC5Gb250U3RyaW5nXSA9IGhlaWdodDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcHVibGljIFNpemVGIE1lYXN1cmVTdHJpbmcoc3RyaW5nIHRleHQsIEZvbnQgZm9udCwgU2l6ZUYgbGF5b3V0QXJlYSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEV4Y2VwdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJcclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgR3JpZFZpZXdDZWxsQXBwYXJlbmNlXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIGJvb2wgSXNCb2xkID0gZmFsc2U7XHJcbiAgICAgICAgcHVibGljIHN0cmluZyBBbGlnbm1lbnQgPSBcImxlZnRcIjtcclxuICAgICAgICBwdWJsaWMgc3RyaW5nIEZvcmVjb2xvciA9IG51bGw7XHJcblxyXG4gICAgICAgIHB1YmxpYyBHcmlkVmlld0NlbGxBcHBhcmVuY2UoKVxyXG4gICAgICAgIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBHcmlkVmlld0NlbGxBcHBhcmVuY2UoYm9vbCBpc0JvbGQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBJc0JvbGQgPSBpc0JvbGQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgR3JpZFZpZXdDZWxsQXBwYXJlbmNlKGJvb2wgaXNCb2xkLCBzdHJpbmcgYWxpZ25tZW50KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgSXNCb2xkID0gaXNCb2xkO1xyXG4gICAgICAgICAgICBBbGlnbm1lbnQgPSBhbGlnbm1lbnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgR3JpZFZpZXdDZWxsQXBwYXJlbmNlKGJvb2wgaXNCb2xkLCBzdHJpbmcgYWxpZ25tZW50LCBzdHJpbmcgZm9yZWNvbG9yKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgSXNCb2xkID0gaXNCb2xkO1xyXG4gICAgICAgICAgICBBbGlnbm1lbnQgPSBhbGlnbm1lbnQ7XHJcbiAgICAgICAgICAgIEZvcmVjb2xvciA9IGZvcmVjb2xvcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJcclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgR3JpZFZpZXdDZWxsRGlzcGxheVxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBib29sIFVzZURlZmF1bHRFbGVtZW50O1xyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCBSZXR5cGVkLmRvbS5IVE1MRWxlbWVudCBPbkNyZWF0ZShHcmlkVmlldyBncmlkVmlldywgaW50IGRhdGFSb3dJbmRleCwgaW50IGNvbHVtbkluZGV4KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCBSZXR5cGVkLmRvbS5IVE1MRWxlbWVudCBPbkNyZWF0ZURlZmF1bHQoUmV0eXBlZC5kb20uSFRNTEVsZW1lbnQgb3JpZ2luYWxFbGVtZW50LCBHcmlkVmlldyBncmlkVmlldywgaW50IGRhdGFSb3dJbmRleCwgaW50IGNvbHVtbkluZGV4KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsRWxlbWVudDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJuYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBHcmlkVmlld0NvbHVtblxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBEYXRhQ29sdW1uIENvbHVtbjtcclxuICAgICAgICBwdWJsaWMgR3JpZFZpZXcgVmlldztcclxuICAgICAgICBwdWJsaWMgc3RyaW5nIENhcHRpb247XHJcbiAgICAgICAgcHVibGljIGJvb2wgVmlzaWJsZTtcclxuICAgICAgICBwdWJsaWMgZmxvYXQgQ2FjaGVkWDtcclxuICAgICAgICBwdWJsaWMgc3RyaW5nIEZvcm1hdFN0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgcHVibGljIEdyaWRWaWV3Q2VsbEFwcGFyZW5jZSBIZWFkaW5nQXBwYXJlbmNlID0gbmV3IEdyaWRWaWV3Q2VsbEFwcGFyZW5jZSgpO1xyXG4gICAgICAgIHB1YmxpYyBHcmlkVmlld0NlbGxBcHBhcmVuY2UgQm9keUFwcGFyZW5jZSA9IG5ldyBHcmlkVmlld0NlbGxBcHBhcmVuY2UoKTtcclxuICAgICAgICBwdWJsaWMgR3JpZFZpZXdDZWxsRGlzcGxheSBDZWxsRGlzcGxheSA9IG51bGw7XHJcbiAgICAgICAgcHVibGljIEdyaWRWaWV3U29ydE1vZGUgU29ydGVkTW9kZSA9IEdyaWRWaWV3U29ydE1vZGUuTm9uZTtcclxuXHJcbiAgICAgICAgcHVibGljIFRleHRJbnB1dCBGaWx0ZXJFZGl0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBvYmplY3QgZmlsdGVyVmFsdWU7XHJcblxyXG4gICAgICAgIHB1YmxpYyBvYmplY3QgRmlsdGVyVmFsdWVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBmaWx0ZXJWYWx1ZTsgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoZmlsdGVyVmFsdWUgIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZihWaWV3LlNob3dBdXRvRmlsdGVyUm93KVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVmlldy5DYWxjdWxhdGVWaXNpYmxlUm93cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgVmFsdWVNYXRjaEZpbHRlcihpbnQgaW5kZXgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihmaWx0ZXJWYWx1ZSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgICAgICBvYmplY3QgYWJjID0gR2V0RGlzcGxheVZhbHVlQnlEYXRhUm93SGFuZGxlKGluZGV4KTtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaChDb2x1bW4uRGF0YVR5cGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLk9iamVjdDpcclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuSW50ZWdlcjpcclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuTG9uZzpcclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuRmxvYXQ6XHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkRvdWJsZTpcclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuRGVjaW1hbDpcclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuQm9vbDpcclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuQnl0ZTpcclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuU2hvcnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFiYyA9PSBmaWx0ZXJWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkRhdGVUaW1lOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5TdHJpbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChhYmMgKyBcIlwiKS5TdGFydHNXaXRoKGZpbHRlclZhbHVlICsgXCJcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIEFsbG93RWRpdCA9IHRydWU7XHJcbiAgICAgICAgcHVibGljIGJvb2wgUmVhZE9ubHkgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgcHVibGljIGludCBHZXREYXRhQ29sdW1uSW5kZXgoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IFZpZXcuRGF0YVNvdXJjZS5Db2x1bW5Db3VudDtcclxuICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihWaWV3LkRhdGFTb3VyY2UuQ29sdW1uc1tpXSA9PSBDb2x1bW4pXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH0gICAgICAgIFxyXG5cclxuICAgICAgICBwdWJsaWMgc3RyaW5nIEdldERpc3BsYXlWYWx1ZUJ5RGF0YVJvd0hhbmRsZShpbnQgUm93SGFuZGxlKVxyXG4gICAgICAgIHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShGb3JtYXRTdHJpbmcpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29sdW1uLkdldERpc3BsYXlWYWx1ZShSb3dIYW5kbGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIENvbHVtbi5HZXREaXNwbGF5VmFsdWUoUm93SGFuZGxlLCBGb3JtYXRTdHJpbmcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RyaW5nIEdldERpc3BsYXlWYWx1ZShpbnQgUm93SGFuZGxlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoVmlldy5WaXNpYmxlUm93SGFuZGxlcyAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBSb3dIYW5kbGUgPSBWaWV3LlZpc2libGVSb3dIYW5kbGVzW1Jvd0hhbmRsZV07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKHN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoRm9ybWF0U3RyaW5nKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIENvbHVtbi5HZXREaXNwbGF5VmFsdWUoUm93SGFuZGxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBDb2x1bW4uR2V0RGlzcGxheVZhbHVlKFJvd0hhbmRsZSwgRm9ybWF0U3RyaW5nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBpbnQgX3dpZHRoO1xyXG5cclxuICAgICAgICBwdWJsaWMgaW50IFdpZHRoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF93aWR0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYodmFsdWUgPCAyNClcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IDI0O1xyXG4gICAgICAgICAgICAgICAgaWYoX3dpZHRoICE9IHZhbHVlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIF93aWR0aCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIFZpZXcuUmVuZGVyR3JpZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgR3JpZFZpZXdDb2x1bW4oR3JpZFZpZXcgdmlldywgaW50IHdpZHRoID0gMTAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVmlldyA9IHZpZXc7XHJcbiAgICAgICAgICAgIF93aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgSW5kZXhWYWx1ZTxUPlxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBpbnQgSW5kZXg7XHJcbiAgICAgICAgcHVibGljIFQgVmFsdWU7XHJcblxyXG4gICAgICAgIHB1YmxpYyBJbmRleFZhbHVlKGludCBpbmRleCwgVCB2YWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEluZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgICAgIFZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBIYXJkU29mdExpc3Q8VD5cclxuICAgIHtcclxuICAgICAgICBwcml2YXRlIExpc3Q8VD4gX2hobCA9IG5ldyBMaXN0PFQ+KCk7XHJcbiAgICAgICAgcHJvdGVjdGVkIExpc3Q8SW5kZXhWYWx1ZTxUPj4gX2hsID0gbmV3IExpc3Q8SW5kZXhWYWx1ZTxUPj4oKTtcclxuICAgICAgICBwdWJsaWMgTGlzdDxpbnQ+IFNMID0gbmV3IExpc3Q8aW50PigpO1xyXG5cclxuICAgICAgICBwcml2YXRlIGludCBMaW1pdDtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBpbnQgSGFyZExlbmd0aCA9IDA7XHJcblxyXG4gICAgICAgIHB1YmxpYyBJbmRleFZhbHVlPFQ+IEdldEluZGV4VmFsdWVCeUhhcmRMaXN0SW5kZXgoaW50IGluZGV4KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9obFtpbmRleF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgVCBEZWZhdWx0VmFsdWU7XHJcblxyXG4gICAgICAgIHB1YmxpYyBIYXJkU29mdExpc3QoVCBkZWZhdWx0VmFsdWUsIGludCBsaW1pdCA9IDEwMDAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICBMaW1pdCA9IGxpbWl0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQ2xlYXJBbGwoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgX2hobCA9IG5ldyBMaXN0PFQ+KCk7XHJcbiAgICAgICAgICAgIF9obCA9IG5ldyBMaXN0PEluZGV4VmFsdWU8VD4+KCk7XHJcbiAgICAgICAgICAgIFNMID0gbmV3IExpc3Q8aW50PigpO1xyXG4gICAgICAgICAgICBIYXJkTGVuZ3RoID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIENsZWFyQWxsU2V0SGFyZFJhbmdlKFQgdmFsdWUsIHBhcmFtcyBpbnRbXSBJbmRleHMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBIYXJkTGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgaWYoSW5kZXhzID09IG51bGwgfHwgSW5kZXhzLkxlbmd0aCA9PSAwKVxyXG4gICAgICAgICAgICAgICAgQ2xlYXJBbGwoKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihJbmRleHMuTGVuZ3RoID4gTGltaXQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgSGFyZExlbmd0aCA9IEluZGV4cy5MZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgX2hsID0gbmV3IExpc3Q8SW5kZXhWYWx1ZTxUPj4oKTtcclxuICAgICAgICAgICAgICAgICAgICBTTCA9IG5ldyBMaXN0PGludD4oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaW50IG1heCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IEhhcmRMZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKEluZGV4c1tpXSA+IG1heClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heCA9IEluZGV4c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaW50IGxlbmd0aCA9IG1heCArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgX2hobCA9IG5ldyBMaXN0PFQ+KGxlbmd0aCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGxlbmd0aCA9PSBJbmRleHMuTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IEhhcmRMZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hobC5BZGQodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hobC5BZGQoRGVmYXVsdFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgSGFyZExlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaGhsW0luZGV4c1tpXV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBfaGhsID0gbmV3IExpc3Q8VD4oKTtcclxuICAgICAgICAgICAgICAgICAgICBIYXJkTGVuZ3RoID0gSW5kZXhzLkxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBfaGwgPSBuZXcgTGlzdDxJbmRleFZhbHVlPFQ+PihIYXJkTGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgSGFyZExlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2hsLkFkZChuZXcgSW5kZXhWYWx1ZTxUPihJbmRleHNbaV0sIHZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFNMID0gbmV3IExpc3Q8aW50PigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBDbGVhclNvZnRMaXN0KClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFNMID0gbmV3IExpc3Q8aW50PigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQ2xlYXJBbmRBZGRPclNldChUIHZhbHVlLCBpbnQgaW5kZXgsIGJvb2wgQWRkVG9Tb2Z0TGlzdCA9IGZhbHNlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgX2hobCA9IG5ldyBMaXN0PFQ+KCk7XHJcbiAgICAgICAgICAgIF9obCA9IG5ldyBMaXN0PEluZGV4VmFsdWU8VD4+KCk7XHJcbiAgICAgICAgICAgIFNMID0gbmV3IExpc3Q8aW50PigpO1xyXG4gICAgICAgICAgICBIYXJkTGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgQWRkT3JTZXQodmFsdWUsIGluZGV4LCBBZGRUb1NvZnRMaXN0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBJbmRleFZhbHVlPFQ+IEdldEhhcmRPclNvZnRJbmRleFZhbHVlKGludCBpbmRleCwgYm9vbCBBZGRUb1NvZnRMaXN0ID0gZmFsc2UpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgbGVuZ3RoID0gU0wuQ291bnQ7XHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNsSSA9IFNMW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYoX2hsW3NsSV0uSW5kZXggPT0gaW5kZXgpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9obFtzbEldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZW5ndGggPSBfaGwuQ291bnQ7XHJcblxyXG4gICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciBobGkgPSBfaGxbaV07XHJcbiAgICAgICAgICAgICAgICBpZihobGkuSW5kZXggPT0gaW5kZXgpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoQWRkVG9Tb2Z0TGlzdClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNMLkFkZChpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhsaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgSW5kZXhWYWx1ZTxUPiBHZXRIYXJkSW5kZXhWYWx1ZShyZWYgaW50IGluZGV4KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IGxlbmd0aCA9IF9obC5Db3VudDtcclxuXHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhsaSA9IF9obFtpXTtcclxuICAgICAgICAgICAgICAgIGlmKGhsaS5JbmRleCA9PSBpbmRleClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhsaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFQgR2V0VmFsdWUoaW50IGluZGV4LCBib29sIEFkZFRvU29mdExpc3QgPSBmYWxzZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKEhhcmRMZW5ndGggPiBMaW1pdClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9oaGxbaW5kZXhdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBoaXYgPSBHZXRIYXJkT3JTb2Z0SW5kZXhWYWx1ZShpbmRleCwgQWRkVG9Tb2Z0TGlzdCk7XHJcbiAgICAgICAgICAgIGlmKGhpdiA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIERlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIGhpdi5WYWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbnQgR2V0SW5kZXgoaW50IGluZGV4KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoSGFyZExlbmd0aCA+IExpbWl0KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBoaXYgPSBHZXRIYXJkT3JTb2Z0SW5kZXhWYWx1ZShpbmRleCk7XHJcbiAgICAgICAgICAgIGlmKGhpdiA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICByZXR1cm4gaGl2LkluZGV4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQWRkT3JTZXQoVCB2YWx1ZSwgaW50IGluZGV4LCBib29sIEFkZFRvU29mdExpc3QgPSBmYWxzZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKEhhcmRMZW5ndGggPiBMaW1pdClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoaW5kZXggPj0gSGFyZExlbmd0aClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnQgYWRkRGlmZiA9IChpbmRleCArIDEpIC0gX2hobC5Db3VudDtcclxuICAgICAgICAgICAgICAgICAgICBpZihhZGREaWZmID4gMClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRbXSBkYXRhID0gbmV3IFRbYWRkRGlmZl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBhZGREaWZmOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbaV0gPSBEZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2hobC5BZGRSYW5nZShkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgX2hobC5BZGQodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIEhhcmRMZW5ndGggPSBfaGhsLkNvdW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIF9oaGxbaW5kZXhdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGludCBsZW5ndGggPSBTTC5Db3VudDtcclxuICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGxpID0gX2hsW1NMW2ldXTtcclxuICAgICAgICAgICAgICAgIGlmKGhsaS5JbmRleCA9PSBpbmRleClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBobGkuVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGludCBoaW5kZXggPSBpbmRleDtcclxuICAgICAgICAgICAgdmFyIGhpdiA9IEdldEhhcmRJbmRleFZhbHVlKHJlZiBoaW5kZXgpO1xyXG4gICAgICAgICAgICBpZihoaXYgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIF9obC5BZGQoKGhpdiA9IG5ldyBJbmRleFZhbHVlPFQ+KGluZGV4LCB2YWx1ZSkpKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgaGl2LlZhbHVlID0gdmFsdWU7XHJcblxyXG4gICAgICAgICAgICBpZihBZGRUb1NvZnRMaXN0KVxyXG4gICAgICAgICAgICAgICAgU0wuQWRkKGhpbmRleCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBSZW1vdmUoaW50IGluZGV4LCBib29sIE9ubHlTb2Z0TGlzdCA9IGZhbHNlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoSGFyZExlbmd0aCA+IExpbWl0KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihIYXJkTGVuZ3RoIC0gMSA+IExpbWl0KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIF9oaGxbaW5kZXhdID0gRGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBIYXJkTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpICE9IGluZGV4ICYmICFfaGhsW2ldLkVxdWFscyhEZWZhdWx0VmFsdWUpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaGwuQWRkKG5ldyBJbmRleFZhbHVlPFQ+KGksIF9oaGxbaV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgSGFyZExlbmd0aCAtPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaW50IExlbmd0aCA9IFNMLkNvdW50O1xyXG4gICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IExlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzbGkgPSBTTFtpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZihfaGxbc2xpXS5JbmRleCA9PSBpbmRleClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNMLlJlbW92ZUF0KGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihPbmx5U29mdExpc3QpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9obC5SZW1vdmVBdChzbGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaW50IGxlbmd0aCA9IF9obC5Db3VudDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhsaSA9IF9obFtpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZihobGkuSW5kZXggPT0gaW5kZXgpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaGwuUmVtb3ZlQXQoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJ1c2luZyBCcmlkZ2U7XHJcbnVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5EaWFnbm9zdGljcztcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBzdGF0aWMgY2xhc3MgSGVscGVyXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIGNsYXNzIERhdGFUYWJsZUpzb25cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmdbXSBmaWVsZE5hbWVzID0gbnVsbDtcclxuICAgICAgICAgICAgcHVibGljIG9iamVjdFtdW10gcm93cyA9IG51bGw7XHJcbiAgICAgICAgICAgIHB1YmxpYyBEYXRhVHlwZVtdIGRhdGFUeXBlcyA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIERhdGFUYWJsZUpzb24gRnJvbUV4dGVybmFsKG9iamVjdCBvKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBEYXRhVGFibGVKc29uIHg7XHJcbiAgICAgICAgICAgICAgICB4ID0gU2NyaXB0LldyaXRlPERhdGFUYWJsZUpzb24+KFwiQnJpZGdlLm1lcmdlKEJyaWRnZS5jcmVhdGVJbnN0YW5jZShFeHByZXNzQ3JhZnQuSGVscGVyLkRhdGFUYWJsZUpzb24pLCBvKTtcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBEYXRhVGFibGUgUGFyc2UoZHluYW1pYyBvKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBEYXRhVGFibGUgZHQgPSBuZXcgRGF0YVRhYmxlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gby5maWVsZE5hbWVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBkdC5BZGRDb2x1bW4oby5maWVsZE5hbWVzW2ldLCBvLmRhdGFUeXBlc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZihvLnJvd3MgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSBvLnJvd3MubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGR0LkJlZ2luTmV3Um93KGxlbmd0aCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkciA9IGR0Lk5ld1JvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkci5iYXRjaERhdGEgPSBvLnJvd3NbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGR0LkFjY2VwdE5ld1Jvd3MoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBkdDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcHVibGljIERhdGFUYWJsZSBUb1RhYmxlKClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIGR0ID0gbmV3IERhdGFUYWJsZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBmaWVsZE5hbWVzLkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGR0LkFkZENvbHVtbihmaWVsZE5hbWVzW2ldLCBkYXRhVHlwZXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKHJvd3MgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBkdC5CZWdpbk5ld1Jvdyhyb3dzLkxlbmd0aCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCByb3dzLkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRyID0gZHQuTmV3Um93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyLmJhdGNoRGF0YSA9IHJvd3NbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGR0LkFjY2VwdE5ld1Jvd3MoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBJc0lQaG9uZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBib29sIHIgPSBmYWxzZTtcclxuICAgICAgICAgICAgLypAXHJcbiAgICAgICAgICAgciA9ICEhbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVBob25lL2kpO1xyXG4gICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHJldHVybiByO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIElzSVBhZCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBib29sIHIgPSBmYWxzZTtcclxuICAgICAgICAgICAgLypAXHJcbiAgICAgICAgICAgciA9ICEhbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVBhZC9pKTtcclxuICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICByZXR1cm4gcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIGJvb2wgX25vdERlc2t0b3A7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIF9zZXR1cERlc2t0b3A7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBOb3REZXNrdG9wXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IF9zZXR1cERlc2t0b3AgPyBfbm90RGVza3RvcCA6IF9ub3REZXNrdG9wID0gKCFCcm93c2VyLklzRGVza3RvcCB8fCBJc0lQaG9uZSgpIHx8IElzSVBhZCgpKTtcclxuICAgICAgICAgICAgICAgIF9zZXR1cERlc2t0b3AgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBpbnQgSXNUcnVlKHRoaXMgc3RyaW5nIHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuICgodmFsdWUgPSB2YWx1ZS5Ub0xvd2VyKCkpID09IFwidHJ1ZVwiIHx8IHZhbHVlID09IFwiMVwiIHx8IHZhbHVlID09IFwib25cIikgPyAxIDogMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IFRvSW50KHRoaXMgVW5pb248c3RyaW5nLCBpbnQsIGZsb2F0PiB2YWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBTY3JpcHQuUGFyc2VJbnQodmFsdWUuQXM8c3RyaW5nPigpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZmxvYXQgVG9GbG9hdCh0aGlzIFVuaW9uPHN0cmluZywgaW50LCBmbG9hdD4gdmFsdWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKGZsb2F0KVNjcmlwdC5QYXJzZUZsb2F0KHZhbHVlLkFzPHN0cmluZz4oKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBUb1N0cih0aGlzIFVuaW9uPHN0cmluZywgaW50LCBmbG9hdD4gdmFsdWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuQXM8c3RyaW5nPigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIElzRmlyZUZveCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBib29sIHZhbHVlID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAvKkBcclxuaWYobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2ZpcmVmb3gnKSA+IC0xKVxyXG57XHJcbiAgICB2YWx1ZSA9IHRydWU7XHJcbn1cclxuXHRcdFx0Ki9cclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIEZvY3VzRWxlbWVudCh0aGlzIFJldHlwZWQuZG9tLkhUTUxFbGVtZW50IGVsZW1lbnQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBSZXR5cGVkLmRvbS5zZXRUaW1lb3V0KChnbG9iYWw6OlJldHlwZWQuZG9tLnNldFRpbWVvdXRGbikoKGFyZykgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5mb2N1cygpOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSksIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBkZWNpbWFsIFN0cmlwTm9uTnVtYmVyU3RyaW5nKHRoaXMgc3RyaW5nIHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZSh2YWx1ZSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuXHJcbiAgICAgICAgICAgIHZhciBidWlsZGVyID0gbmV3IFN0cmluZ0J1aWxkZXIoKTtcclxuXHJcbiAgICAgICAgICAgIGJvb2wgQWRkZWREaWdpdHMgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCB2YWx1ZS5MZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoY2hhci5Jc0RpZ2l0KHZhbHVlW2ldKSB8fCB2YWx1ZVtpXSA9PSAnLicpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQodmFsdWVbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIEFkZGVkRGlnaXRzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYodmFsdWVbaV0gPT0gJy0nICYmICFBZGRlZERpZ2l0cylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZCh2YWx1ZVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgQWRkZWREaWdpdHMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZWNpbWFsIHZhbHVlMSA9IDA7XHJcbiAgICAgICAgICAgIGRlY2ltYWwuVHJ5UGFyc2UoYnVpbGRlci5Ub1N0cmluZygpLCBvdXQgdmFsdWUxKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIERhdGVUaW1lIFN0cmlwTm9uRGF0ZVN0cmluZyh0aGlzIHN0cmluZyB2YWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UodmFsdWUpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGVUaW1lLk1pblZhbHVlO1xyXG5cclxuICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuVHJpbSgpLlJlcGxhY2UoJ1xcXFwnLCBFeHByZXNzQ3JhZnQuU2V0dGluZ3MuRGF0ZVNlcGVyYXRvcik7XHJcblxyXG4gICAgICAgICAgICAgICAgYm9vbCBzdGFydHNXaXRoUGx1cyA9ICh2YWx1ZS5TdGFydHNXaXRoKFwiK1wiKSk7XHJcbiAgICAgICAgICAgICAgICBib29sIHN0YXJ0c1dpdGhNdW51cyA9ICFzdGFydHNXaXRoUGx1cyAmJiAodmFsdWUuU3RhcnRzV2l0aChcIi1cIikpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHN0YXJ0c1dpdGhNdW51cylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLlN1YnN0cmluZygxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLlJlcGxhY2UoJy0nLCBFeHByZXNzQ3JhZnQuU2V0dGluZ3MuRGF0ZVNlcGVyYXRvcik7XHJcblxyXG4gICAgICAgICAgICAgICAgYm9vbCBlbmRzV2l0aE1vbnRoID0gKHN0YXJ0c1dpdGhQbHVzIHx8IHN0YXJ0c1dpdGhNdW51cykgJiYgKHZhbHVlLlRvTG93ZXIoKS5FbmRzV2l0aChcIm1cIikpO1xyXG4gICAgICAgICAgICAgICAgYm9vbCBlbmRzV2l0aHllYXIgPSAhZW5kc1dpdGhNb250aCAmJiAoc3RhcnRzV2l0aFBsdXMgfHwgc3RhcnRzV2l0aE11bnVzKSAmJiAodmFsdWUuVG9Mb3dlcigpLkVuZHNXaXRoKFwieVwiKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodmFsdWUuVG9Mb3dlcigpID09IFwiZFwiKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBEYXRlVGltZS5Ub2RheTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgYnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgTGlzdDxpbnQ+IFZhbHVlcyA9IG5ldyBMaXN0PGludD4oKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgdmFsdWUuTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY2hhci5Jc0RpZ2l0KHZhbHVlW2ldKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQodmFsdWVbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYodmFsdWVbaV0gPT0gRXhwcmVzc0NyYWZ0LlNldHRpbmdzLkRhdGVTZXBlcmF0b3IpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBWYWx1ZXMuQWRkKGludC5QYXJzZShidWlsZGVyLlRvU3RyaW5nKCkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKGJ1aWxkZXIuTGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBWYWx1ZXMuQWRkKGludC5QYXJzZShidWlsZGVyLlRvU3RyaW5nKCkpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBidWlsZGVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmKFZhbHVlcy5Db3VudCA+PSAzKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoVmFsdWVzWyhpbnQpRXhwcmVzc0NyYWZ0LlNldHRpbmdzLlllYXJQb3NpdGlvbl0sIFZhbHVlc1soaW50KUV4cHJlc3NDcmFmdC5TZXR0aW5ncy5Nb250aFBvc2l0aW9uXSwgVmFsdWVzWyhpbnQpRXhwcmVzc0NyYWZ0LlNldHRpbmdzLkRheVBvc2l0aW9uXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKFZhbHVlcy5Db3VudCA9PSAxKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKEV4cHJlc3NDcmFmdC5TZXR0aW5ncy5EYXlQb3NpdGlvbiA9PSBFeHByZXNzQ3JhZnQuU2V0dGluZ3MuRGF0ZVBvc2l0aW9uLkZpcnN0KVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoc3RhcnRzV2l0aFBsdXMgfHwgc3RhcnRzV2l0aE11bnVzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IERhdGVUaW1lLlRvZGF5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZW5kc1dpdGhNb250aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlID0gZGF0ZS5BZGRNb250aHMoc3RhcnRzV2l0aE11bnVzID8gLVZhbHVlc1swXSA6IFZhbHVlc1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGVuZHNXaXRoeWVhcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihzdGFydHNXaXRoTXVudXMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlID0gZGF0ZS5BZGRZZWFycygtVmFsdWVzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IGRhdGUuQWRkWWVhcnMoVmFsdWVzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IGRhdGUuQWRkRGF5cyhzdGFydHNXaXRoTXVudXMgPyAtVmFsdWVzWzBdIDogVmFsdWVzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGUuSG91ciA9PSAyMylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlLkFkZEhvdXJzKDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGVUaW1lKERhdGVUaW1lLlRvZGF5LlllYXIsIERhdGVUaW1lLlRvZGF5Lk1vbnRoLCBWYWx1ZXNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoRXhwcmVzc0NyYWZ0LlNldHRpbmdzLk1vbnRoUG9zaXRpb24gPT0gRXhwcmVzc0NyYWZ0LlNldHRpbmdzLkRhdGVQb3NpdGlvbi5GaXJzdClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoRGF0ZVRpbWUuVG9kYXkuWWVhciwgVmFsdWVzWzBdLCBEYXRlVGltZS5Ub2RheS5EYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKEV4cHJlc3NDcmFmdC5TZXR0aW5ncy5ZZWFyUG9zaXRpb24gPT0gRXhwcmVzc0NyYWZ0LlNldHRpbmdzLkRhdGVQb3NpdGlvbi5GaXJzdClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoVmFsdWVzWzBdLCBEYXRlVGltZS5Ub2RheS5Nb250aCwgRGF0ZVRpbWUuVG9kYXkuRGF5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKFZhbHVlcy5Db3VudCA9PSAyKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKEV4cHJlc3NDcmFmdC5TZXR0aW5ncy5EYXlQb3NpdGlvbiA9PSBFeHByZXNzQ3JhZnQuU2V0dGluZ3MuRGF0ZVBvc2l0aW9uIC5GaXJzdCAmJiBFeHByZXNzQ3JhZnQuU2V0dGluZ3MuTW9udGhQb3NpdGlvbiA9PSBFeHByZXNzQ3JhZnQuU2V0dGluZ3MuRGF0ZVBvc2l0aW9uLlNlY29uZClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoRGF0ZVRpbWUuVG9kYXkuWWVhciwgVmFsdWVzWzFdLCBWYWx1ZXNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKEV4cHJlc3NDcmFmdC5TZXR0aW5ncy5EYXlQb3NpdGlvbiA9PSBFeHByZXNzQ3JhZnQuU2V0dGluZ3MuRGF0ZVBvc2l0aW9uIC5TZWNvbmQgJiYgRXhwcmVzc0NyYWZ0LlNldHRpbmdzLk1vbnRoUG9zaXRpb24gPT0gRXhwcmVzc0NyYWZ0LlNldHRpbmdzLkRhdGVQb3NpdGlvbi5GaXJzdClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoRGF0ZVRpbWUuVG9kYXkuWWVhciwgVmFsdWVzWzBdLCBWYWx1ZXNbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKEV4cHJlc3NDcmFmdC5TZXR0aW5ncy5ZZWFyUG9zaXRpb24gPT0gRXhwcmVzc0NyYWZ0LlNldHRpbmdzLkRhdGVQb3NpdGlvbiAuU2Vjb25kICYmIEV4cHJlc3NDcmFmdC5TZXR0aW5ncy5Nb250aFBvc2l0aW9uID09IEV4cHJlc3NDcmFmdC5TZXR0aW5ncy5EYXRlUG9zaXRpb24uRmlyc3QpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGVUaW1lKFZhbHVlc1sxXSwgVmFsdWVzWzBdLCBEYXRlVGltZS5Ub2RheS5EYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKEV4cHJlc3NDcmFmdC5TZXR0aW5ncy5ZZWFyUG9zaXRpb24gPT0gRXhwcmVzc0NyYWZ0LlNldHRpbmdzLkRhdGVQb3NpdGlvbiAuRmlyc3QgJiYgRXhwcmVzc0NyYWZ0LlNldHRpbmdzLk1vbnRoUG9zaXRpb24gPT0gRXhwcmVzc0NyYWZ0LlNldHRpbmdzLkRhdGVQb3NpdGlvbi5TZWNvbmQpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGVUaW1lKFZhbHVlc1swXSwgVmFsdWVzWzFdLCBEYXRlVGltZS5Ub2RheS5EYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaChFeGNlcHRpb24pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIERhdGVUaW1lLk1pblZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBkZWNpbWFsIEFkZFRheChkZWNpbWFsIHZhbHVlLCBkZWNpbWFsIHRheFBlcmNlbnQgPSAtMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHZhbHVlID09IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcblxyXG4gICAgICAgICAgICBpZih0YXhQZXJjZW50ID09IC0xKVxyXG4gICAgICAgICAgICAgICAgdGF4UGVyY2VudCA9IFNldHRpbmdzLlRheFBlcmNlbnQ7XHJcbiAgICAgICAgICAgIGlmKHRheFBlcmNlbnQgPT0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSAqICgxICsgdGF4UGVyY2VudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGRlY2ltYWwgR2V0UG9ydGlvblRheChkZWNpbWFsIHZhbHVlLCBkZWNpbWFsIHRheFBlcmNlbnQgPSAtMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHZhbHVlID09IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcblxyXG4gICAgICAgICAgICBpZih0YXhQZXJjZW50ID09IC0xKVxyXG4gICAgICAgICAgICAgICAgdGF4UGVyY2VudCA9IFNldHRpbmdzLlRheFBlcmNlbnQ7XHJcbiAgICAgICAgICAgIGlmKHRheFBlcmNlbnQgPT0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlIC0gdmFsdWUgLyAoMSArIHRheFBlcmNlbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBkZWNpbWFsIERlZHVjdFRheChkZWNpbWFsIHZhbHVlLCBkZWNpbWFsIHRheFBlcmNlbnQgPSAtMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHZhbHVlID09IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcblxyXG4gICAgICAgICAgICBpZih0YXhQZXJjZW50ID09IC0xKVxyXG4gICAgICAgICAgICAgICAgdGF4UGVyY2VudCA9IFNldHRpbmdzLlRheFBlcmNlbnQ7XHJcbiAgICAgICAgICAgIGlmKHRheFBlcmNlbnQgPT0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSAtIEdldFBvcnRpb25UYXgodmFsdWUsIHRheFBlcmNlbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIElzTnVtYmVyKHRoaXMgb2JqZWN0IHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlIGlzIHNieXRlXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgdmFsdWUgaXMgYnl0ZVxyXG4gICAgICAgICAgICAgICAgICAgIHx8IHZhbHVlIGlzIHNob3J0XHJcbiAgICAgICAgICAgICAgICAgICAgfHwgdmFsdWUgaXMgdXNob3J0XHJcbiAgICAgICAgICAgICAgICAgICAgfHwgdmFsdWUgaXMgaW50XHJcbiAgICAgICAgICAgICAgICAgICAgfHwgdmFsdWUgaXMgdWludFxyXG4gICAgICAgICAgICAgICAgICAgIHx8IHZhbHVlIGlzIGxvbmdcclxuICAgICAgICAgICAgICAgICAgICB8fCB2YWx1ZSBpcyB1bG9uZ1xyXG4gICAgICAgICAgICAgICAgICAgIHx8IHZhbHVlIGlzIGZsb2F0XHJcbiAgICAgICAgICAgICAgICAgICAgfHwgdmFsdWUgaXMgZG91YmxlXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgdmFsdWUgaXMgZGVjaW1hbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBFbXB0eSh0aGlzIFJldHlwZWQuZG9tLkhUTUxFbGVtZW50IGVsZW1lbnQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvKkBcclxuXHRcdFx0dmFyIGxlbiA9IGVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGg7XHJcblx0XHRcdHdoaWxlKGxlbi0tKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50Lmxhc3RDaGlsZCk7XHJcblx0XHRcdH07XHJcblx0XHRcdCovXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjIgR2V0Q2xpZW50TW91c2VMb2NhdGlvbihvYmplY3QgZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciB4ID0gMDtcclxuICAgICAgICAgICAgdmFyIHkgPSAwO1xyXG4gICAgICAgICAgICAvKkBcclxuXHRcdFx0ICBpZiAoIWUpIHZhciBlID0gd2luZG93LmV2ZW50O1xyXG5cclxuXHRcdFx0ICBpZiAoZS5wYWdlWCB8fCBlLnBhZ2VZKSB7XHJcblx0XHRcdFx0eCA9IGUucGFnZVg7XHJcblx0XHRcdFx0eSA9IGUucGFnZVk7XHJcblx0XHRcdCAgfSBlbHNlIGlmIChlLmNsaWVudFggfHwgZS5jbGllbnRZKSB7XHJcblx0XHRcdFx0eCA9IGUuY2xpZW50WCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCArXHJcblx0XHRcdFx0XHRcdFx0XHQgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdDtcclxuXHRcdFx0XHR5ID0gZS5jbGllbnRZICsgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgK1xyXG5cdFx0XHRcdFx0XHRcdFx0ICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcclxuXHRcdFx0ICB9XHJcblx0XHRcdCovXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih4LCB5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBTZXRDaGVja2VkKHRoaXMgQ29udHJvbCBpbnB1dCwgb2JqZWN0IHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW5wdXQuQ29udGVudC5TZXRDaGVja2VkKHZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBTZXRDaGVja2VkKHRoaXMgUmV0eXBlZC5kb20uSFRNTEVsZW1lbnQgaW5wdXQsIG9iamVjdCB2YWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJvb2wgY2hlY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYodmFsdWUgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYodmFsdWUgaXMgYm9vbCB8fCB2YWx1ZS5Jc051bWJlcigpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrID0gKGJvb2wpdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKHZhbHVlIGlzIHN0cmluZylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgc3RyVmFsdWUgPSAoKHN0cmluZyl2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2sgPSAoc3RyVmFsdWUgPT0gXCIxXCIgfHwgc3RyaW5nLkNvbXBhcmUoc3RyVmFsdWUuVG9Mb3dlcigpLCBcInRydWVcIikgPT0gMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoIWNoZWNrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dC5yZW1vdmVBdHRyaWJ1dGUoR3JpZFZpZXdDZWxsRGlzcGxheUNoZWNrQm94LnJlc291cmNlX2NoZWNrZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKEdyaWRWaWV3Q2VsbERpc3BsYXlDaGVja0JveC5yZXNvdXJjZV9jaGVja2VkLCBudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBJRSBkb2VzIG5vdCBzdXBwb3J0IC5yZW1vdmUgb24gRWxlbWVudCB1c2UgZGVsZXRlXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJjXCI+PC9wYXJhbT5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgRGVsZXRlKHRoaXMgUmV0eXBlZC5kb20uRWxlbWVudCBjKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoYyAhPSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICBjLnBhcmVudEVsZW1lbnQgIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgYy5wYXJlbnRFbGVtZW50LmNvbnRhaW5zKGMpKVxyXG4gICAgICAgICAgICAgICAgYy5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkPEVsZW1lbnQ+KGMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBJRSBkb2VzIG5vdCBzdXBwb3J0IC5yZW1vdmUgb24gRWxlbWVudCB1c2UgZGVsZXRlXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJjXCI+PC9wYXJhbT5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgRGVsZXRlKHRoaXMgUmV0eXBlZC5kb20uSFRNTEVsZW1lbnQgYylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKGMgIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgYy5wYXJlbnRFbGVtZW50ICE9IG51bGwgJiZcclxuICAgICAgICAgICAgICAgIGMucGFyZW50RWxlbWVudC5jb250YWlucyhjKSlcclxuICAgICAgICAgICAgICAgIGMucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZDxIVE1MRWxlbWVudD4oYyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBUb1B4KHRoaXMgb2JqZWN0IGkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gU2NyaXB0LldyaXRlPHN0cmluZz4oXCJpICsgJ3B4J1wiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBMb2cob2JqZWN0IGpzbylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFNjcmlwdC5DYWxsKFwiY29uc29sZS5sb2dcIiwganNvKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBBcHBlbmRDaGlsZHJlbih0aGlzIFJldHlwZWQuZG9tLk5vZGUgYywgcGFyYW1zIFJldHlwZWQuZG9tLk5vZGVbXSBOb2RlcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKE5vZGVzICE9IG51bGwgJiYgTm9kZXMuTGVuZ3RoID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IE5vZGVzLkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKE5vZGVzW2ldICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuYXBwZW5kQ2hpbGQ8Tm9kZT4oTm9kZXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgQXBwZW5kQ2hpbGRyZW5UYWJJbmRleCh0aGlzIFJldHlwZWQuZG9tLk5vZGUgYywgcGFyYW1zIENvbnRyb2xbXSBOb2RlcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKE5vZGVzICE9IG51bGwgJiYgTm9kZXMuTGVuZ3RoID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IE5vZGVzLkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKE5vZGVzW2ldICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBOb2Rlc1tpXS5Db250ZW50LnRhYkluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYy5hcHBlbmRDaGlsZDxSZXR5cGVkLmRvbS5Ob2RlPigoUmV0eXBlZC5kb20uTm9kZSlOb2Rlc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgQXBwZW5kQ2hpbGRyZW5UYWJJbmRleCh0aGlzIENvbnRyb2wgYywgcGFyYW1zIENvbnRyb2xbXSBOb2RlcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGMuQ29udGVudC5BcHBlbmRDaGlsZHJlblRhYkluZGV4KE5vZGVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29udHJvbCBBcHBlbmRDaGlsZCh0aGlzIENvbnRyb2wgYywgQ29udHJvbCBOb2RlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYy5Db250ZW50LkFwcGVuZENoaWxkKE5vZGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gYztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29udHJvbCBBcHBlbmRDaGlsZHJlbih0aGlzIENvbnRyb2wgYywgcGFyYW1zIENvbnRyb2xbXSBOb2RlcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGMuQ29udGVudC5BcHBlbmRDaGlsZHJlbihOb2Rlcyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gYztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBBcHBlbmRDaGlsZCh0aGlzIFJldHlwZWQuZG9tLkhUTUxFbGVtZW50IGMsIENvbnRyb2wgYilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGMuYXBwZW5kQ2hpbGQ8UmV0eXBlZC5kb20uTm9kZT4oYik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgQXBwZW5kQ2hpbGQodGhpcyBSZXR5cGVkLmRvbS5IVE1MRWxlbWVudCBjLCBSZXR5cGVkLmRvbS5Ob2RlIGIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjLmFwcGVuZENoaWxkPE5vZGU+KGIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIEFwcGVuZENoaWxkcmVuKHRoaXMgUmV0eXBlZC5kb20uTm9kZSBjLCBwYXJhbXMgQ29udHJvbFtdIE5vZGVzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoTm9kZXMgIT0gbnVsbCAmJiBOb2Rlcy5MZW5ndGggPiAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgTm9kZXMuTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoTm9kZXNbaV0gIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgYy5hcHBlbmRDaGlsZDxSZXR5cGVkLmRvbS5Ob2RlPigoUmV0eXBlZC5kb20uTm9kZSlOb2Rlc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ29udHJvbCBTZXRCb3VuZHModGhpcyBDb250cm9sIGMsIFVuaW9uPHN0cmluZywgaW50LCBmbG9hdD4gbGVmdCwgVW5pb248c3RyaW5nLCBpbnQsIGZsb2F0PiB0b3AsIFVuaW9uPHN0cmluZywgaW50LCBmbG9hdD4gd2lkdGgsIFVuaW9uPHN0cmluZywgaW50LCBmbG9hdD4gaGVpZ2h0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYy5Db250ZW50LlNldEJvdW5kcyhsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbnRyb2wgU2V0Qm91bmRzRnVsbCh0aGlzIENvbnRyb2wgYylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGMuQ29udGVudC5TZXRCb3VuZHNGdWxsKCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gYztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBTZXRCb3VuZHNGdWxsKHRoaXMgUmV0eXBlZC5kb20uSFRNTEVsZW1lbnQgYylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGMuU2V0Qm91bmRzKDAsIDAsIFwiMTAwJVwiLCBcIjEwMCVcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENvbnRyb2wgU2V0U2l6ZSh0aGlzIENvbnRyb2wgYywgVW5pb248c3RyaW5nLCBpbnQsIGZsb2F0PiB3aWR0aCwgVW5pb248c3RyaW5nLCBpbnQsIGZsb2F0PiBoZWlnaHQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjLkNvbnRlbnQuU2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIFNldEJvdW5kcyh0aGlzIFJldHlwZWQuZG9tLkhUTUxFbGVtZW50IGMsIFVuaW9uPHN0cmluZywgaW50LCBmbG9hdD4gbGVmdCwgVW5pb248c3RyaW5nLCBpbnQsIGZsb2F0PiB0b3AsIFVuaW9uPHN0cmluZywgaW50LCBmbG9hdD4gd2lkdGgsIFVuaW9uPHN0cmluZywgaW50LCBmbG9hdD4gaGVpZ2h0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYy5zdHlsZS5sZWZ0ID0gbGVmdC5Ub0h0bWxWYWx1ZSgpO1xyXG4gICAgICAgICAgICBjLnN0eWxlLnRvcCA9IHRvcC5Ub0h0bWxWYWx1ZSgpO1xyXG4gICAgICAgICAgICBjLnN0eWxlLndpZHRoID0gd2lkdGguVG9IdG1sVmFsdWUoKTtcclxuICAgICAgICAgICAgYy5zdHlsZS5oZWlnaHQgPSBoZWlnaHQuVG9IdG1sVmFsdWUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFRvSHRtbFZhbHVlKHRoaXMgVW5pb248c3RyaW5nLCBpbnQsIGZsb2F0PiB2YWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHZhbHVlLklzPHN0cmluZz4oKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBWZWN0b3IyLnBmKHZhbHVlLkFzPHN0cmluZz4oKSk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYodmFsdWUuSXM8aW50PigpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLkFzPGludD4oKS5Ub1B4KCk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5BczxmbG9hdD4oKS5Ub1B4KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgU2V0SW1hZ2UodGhpcyBDb250cm9sIGMsIHN0cmluZyBzdHIsIGJvb2wgdXNlVVJMID0gdHJ1ZSwgYm9vbCB1c2VSZXNvdXJjZSA9IHRydWUsIGJvb2wgY2VudGVyID0gdHJ1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCFzdHIuU3RhcnRzV2l0aChcInVybChcIikpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0ciA9IHVzZVVSTCA/IENvbnRyb2wuR2V0SW1hZ2VTdHJpbmdVUkkoc3RyLCB1c2VSZXNvdXJjZSkgOiBDb250cm9sLkdldEltYWdlU3RyaW5nKHN0cik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgU2V0SW1hZ2UoYy5Db250ZW50LCBzdHIsIHVzZVVSTCwgY2VudGVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBTZXRJbWFnZSh0aGlzIFJldHlwZWQuZG9tLkhUTUxFbGVtZW50IGMsIHN0cmluZyBzdHIsIGJvb2wgdXNlVVJMID0gdHJ1ZSwgYm9vbCBjZW50ZXIgPSB0cnVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShzdHIpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjLnN0eWxlLmJhY2tncm91bmQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgYy5zdHlsZS5iYWNrZ3JvdW5kU2l6ZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZighc3RyLlN0YXJ0c1dpdGgoXCJ1cmwoXCIpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHIgPSB1c2VVUkwgPyBDb250cm9sLkdldEltYWdlU3RyaW5nVVJJKHN0cikgOiBDb250cm9sLkdldEltYWdlU3RyaW5nKHN0cik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYy5zdHlsZS5iYWNrZ3JvdW5kID0gc3RyO1xyXG4gICAgICAgICAgICBpZihjZW50ZXIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGMuc3R5bGUuYmFja2dyb3VuZFNpemUgPSBcIjEwMCUgMTAwJVwiO1xyXG4gICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIFNldFNpemUodGhpcyBSZXR5cGVkLmRvbS5IVE1MRWxlbWVudCBjLCBVbmlvbjxzdHJpbmcsIGludCwgZmxvYXQ+IHdpZHRoLCBVbmlvbjxzdHJpbmcsIGludCwgZmxvYXQ+IGhlaWdodClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGMuc3R5bGUud2lkdGggPSB3aWR0aC5Ub0h0bWxWYWx1ZSgpO1xyXG4gICAgICAgICAgICBjLnN0eWxlLmhlaWdodCA9IGhlaWdodC5Ub0h0bWxWYWx1ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIFNldExvY2F0aW9uKHRoaXMgQ29udHJvbCBjLCBpbnQgbGVmdCwgaW50IHRvcClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGMuQ29udGVudC5TZXRMb2NhdGlvbihsZWZ0LlRvUHgoKSwgdG9wLlRvUHgoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgU2V0TG9jYXRpb24odGhpcyBDb250cm9sIGMsIFVuaW9uPHN0cmluZywgaW50LCBmbG9hdD4gbGVmdCwgVW5pb248c3RyaW5nLCBpbnQsIGZsb2F0PiB0b3ApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjLkNvbnRlbnQuU2V0TG9jYXRpb24obGVmdCwgdG9wKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBTZXRMb2NhdGlvbih0aGlzIFJldHlwZWQuZG9tLkhUTUxFbGVtZW50IGMsIFVuaW9uPHN0cmluZywgaW50LCBmbG9hdD4gbGVmdCwgVW5pb248c3RyaW5nLCBpbnQsIGZsb2F0PiB0b3ApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjLnN0eWxlLmxlZnQgPSBsZWZ0LlRvSHRtbFZhbHVlKCk7XHJcbiAgICAgICAgICAgIGMuc3R5bGUudG9wID0gdG9wLlRvSHRtbFZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIEh0bWxFc2NhcGUgWFNTXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJvYmpcIj48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgSHRtbEVzY2FwZSh0aGlzIG9iamVjdCBvYmopXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKG9iaiBhcyBzdHJpbmcpLkh0bWxFc2NhcGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gSHRtbFVybFVuZXNjYXBlIFhTU1xyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBIdG1sVXJsVW5lc2NhcGUodGhpcyBzdHJpbmcgaW5wdXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gIXN0cmluZy5Jc051bGxPckVtcHR5KGlucHV0KVxyXG4gICAgICAgICAgICAgICAgPyBpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgIC5SZXBsYWNlKFwiJmFtcFwiLCBcIiZcIilcclxuICAgICAgICAgICAgICAgICAgICAuUmVwbGFjZShcIiZsdFwiLCBcIjxcIilcclxuICAgICAgICAgICAgICAgICAgICAuUmVwbGFjZShcIiZndFwiLCBcIj5cIilcclxuICAgICAgICAgICAgICAgICAgICAuUmVwbGFjZShcIiYjeDI3XCIsIFwiJ1wiKVxyXG4gICAgICAgICAgICAgICAgOiBcIlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBIdG1sVXJsRXNjYXBlIFhTU1xyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiaW5wdXRcIj48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgSHRtbFVybEVzY2FwZSh0aGlzIHN0cmluZyBpbnB1dClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAhc3RyaW5nLklzTnVsbE9yRW1wdHkoaW5wdXQpXHJcbiAgICAgICAgICAgICAgICA/IGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgLlJlcGxhY2UoXCImXCIsIFwiJmFtcFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5SZXBsYWNlKFwiPFwiLCBcIiZsdFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5SZXBsYWNlKFwiPlwiLCBcIiZndFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5SZXBsYWNlKFwiJ1wiLCBcIiYjeDI3XCIpXHJcbiAgICAgICAgICAgICAgICA6IHN0cmluZy5FbXB0eTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gSHRtbEVzY2FwZSBYU1NcclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImlucHV0XCI+PC9wYXJhbT5cclxuICAgICAgICAvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEh0bWxFc2NhcGUodGhpcyBzdHJpbmcgaW5wdXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gIXN0cmluZy5Jc051bGxPckVtcHR5KGlucHV0KSA/XHJcbiAgICAgICAgICAgICAgICBIdG1sVXJsRXNjYXBlKGlucHV0KS5SZXBsYWNlKEBcIlxcL1wiLCBcIiYjeDJGXCIpLlJlcGxhY2UoXCJcXFwiXCIsIFwiJnF1b3RcIikgOlxyXG4gICAgICAgICAgICAgICAgc3RyaW5nLkVtcHR5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBIdG1sVW5lc2NhcGUgWFNTXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEh0bWxVbmVzY2FwZSh0aGlzIHN0cmluZyBpbnB1dClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAhSXNFbXB0eShpbnB1dCkgP1xyXG4gICAgICAgICAgICAgICAgSHRtbFVybFVuZXNjYXBlKGlucHV0KS5SZXBsYWNlKFwiJiN4MkZcIiwgQFwiXFwvXCIpLlJlcGxhY2UoXCImcXVvdFwiLCBcIlxcXCJcIikgOlxyXG4gICAgICAgICAgICAgICAgc3RyaW5nLkVtcHR5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIEV4Y2hhbmdlQ2xhc3ModGhpcyBDb250cm9sIGNvbnRyb2wsIHN0cmluZyBvbGRDbGFzcywgc3RyaW5nIG5ld0NsYXNzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRXhjaGFuZ2VDbGFzcyhjb250cm9sLkNvbnRlbnQsIG9sZENsYXNzLCBuZXdDbGFzcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgRXhjaGFuZ2VDbGFzcyh0aGlzIFJldHlwZWQuZG9tLkhUTUxFbGVtZW50IGNvbnRyb2wsIHN0cmluZyBvbGRDbGFzcywgc3RyaW5nIG5ld0NsYXNzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIUlzRW1wdHkob2xkQ2xhc3MpICYmIGNvbnRyb2wuY2xhc3NMaXN0LmNvbnRhaW5zKG9sZENsYXNzKSlcclxuICAgICAgICAgICAgICAgIGNvbnRyb2wuY2xhc3NMaXN0LnJlbW92ZShvbGRDbGFzcyk7XHJcbiAgICAgICAgICAgIGlmKCFJc0VtcHR5KG5ld0NsYXNzKSAmJiAhY29udHJvbC5jbGFzc0xpc3QuY29udGFpbnMobmV3Q2xhc3MpKVxyXG4gICAgICAgICAgICAgICAgY29udHJvbC5jbGFzc0xpc3QuYWRkKG5ld0NsYXNzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBJc0VtcHR5KHRoaXMgc3RyaW5nIHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UodmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIFN0b3BBbmRMb2codGhpcyBTdG9wd2F0Y2ggc3csIHN0cmluZyBsb2dOYW1lID0gXCJUYXNrXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdy5TdG9wKCk7XHJcbiAgICAgICAgICAgIENvbnNvbGVGb3JtLkxvZyhsb2dOYW1lICsgXCIgdG9vayBcIiArIHN3LkVsYXBzZWRNaWxsaXNlY29uZHMgKyBcIm1zIHRvIGZpbmlzaFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJuYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBzdGF0aWMgY2xhc3MgS2V5Q29kZXNcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgY29uc3QgaW50IE1vZGlmaWVycyA9IC02NTUzNixcclxuICAgICAgICBOb25lID0gMCxcclxuICAgICAgICBMQnV0dG9uID0gMSxcclxuICAgICAgICBSQnV0dG9uID0gMixcclxuICAgICAgICBDYW5jZWwgPSAzLFxyXG4gICAgICAgIE1CdXR0b24gPSA0LFxyXG4gICAgICAgIFhCdXR0b24xID0gNSxcclxuICAgICAgICBYQnV0dG9uMiA9IDYsXHJcbiAgICAgICAgQmFjayA9IDgsXHJcbiAgICAgICAgVGFiID0gOSxcclxuICAgICAgICBMaW5lRmVlZCA9IDEwLFxyXG4gICAgICAgIENsZWFyID0gMTIsXHJcbiAgICAgICAgUmV0dXJuID0gMTMsXHJcbiAgICAgICAgRW50ZXIgPSAxMyxcclxuICAgICAgICBTaGlmdEtleSA9IDE2LFxyXG4gICAgICAgIENvbnRyb2xLZXkgPSAxNyxcclxuICAgICAgICBNZW51ID0gMTgsXHJcbiAgICAgICAgUGF1c2UgPSAxOSxcclxuICAgICAgICBDYXBpdGFsID0gMjAsXHJcbiAgICAgICAgQ2Fwc0xvY2sgPSAyMCxcclxuICAgICAgICBLYW5hTW9kZSA9IDIxLFxyXG4gICAgICAgIEhhbmd1ZWxNb2RlID0gMjEsXHJcbiAgICAgICAgSGFuZ3VsTW9kZSA9IDIxLFxyXG4gICAgICAgIEp1bmphTW9kZSA9IDIzLFxyXG4gICAgICAgIEZpbmFsTW9kZSA9IDI0LFxyXG4gICAgICAgIEhhbmphTW9kZSA9IDI1LFxyXG4gICAgICAgIEthbmppTW9kZSA9IDI1LFxyXG4gICAgICAgIEVzY2FwZSA9IDI3LFxyXG4gICAgICAgIElNRUNvbnZlcnQgPSAyOCxcclxuICAgICAgICBJTUVOb25jb252ZXJ0ID0gMjksXHJcbiAgICAgICAgSU1FQWNjZXB0ID0gMzAsXHJcbiAgICAgICAgSU1FQWNlZXB0ID0gMzAsXHJcbiAgICAgICAgSU1FTW9kZUNoYW5nZSA9IDMxLFxyXG4gICAgICAgIFNwYWNlID0gMzIsXHJcbiAgICAgICAgUHJpb3IgPSAzMyxcclxuICAgICAgICBQYWdlVXAgPSAzMyxcclxuICAgICAgICBOZXh0ID0gMzQsXHJcbiAgICAgICAgUGFnZURvd24gPSAzNCxcclxuICAgICAgICBFbmQgPSAzNSxcclxuICAgICAgICBIb21lID0gMzYsXHJcbiAgICAgICAgTGVmdCA9IDM3LFxyXG4gICAgICAgIFVwID0gMzgsXHJcbiAgICAgICAgUmlnaHQgPSAzOSxcclxuICAgICAgICBEb3duID0gNDAsXHJcbiAgICAgICAgU2VsZWN0ID0gNDEsXHJcbiAgICAgICAgUHJpbnQgPSA0MixcclxuICAgICAgICBFeGVjdXRlID0gNDMsXHJcbiAgICAgICAgU25hcHNob3QgPSA0NCxcclxuICAgICAgICBQcmludFNjcmVlbiA9IDQ0LFxyXG4gICAgICAgIEluc2VydCA9IDQ1LFxyXG4gICAgICAgIERlbGV0ZSA9IDQ2LFxyXG4gICAgICAgIEhlbHAgPSA0NyxcclxuICAgICAgICBEMCA9IDQ4LFxyXG4gICAgICAgIEQxID0gNDksXHJcbiAgICAgICAgRDIgPSA1MCxcclxuICAgICAgICBEMyA9IDUxLFxyXG4gICAgICAgIEQ0ID0gNTIsXHJcbiAgICAgICAgRDUgPSA1MyxcclxuICAgICAgICBENiA9IDU0LFxyXG4gICAgICAgIEQ3ID0gNTUsXHJcbiAgICAgICAgRDggPSA1NixcclxuICAgICAgICBEOSA9IDU3LFxyXG4gICAgICAgIEEgPSA2NSxcclxuICAgICAgICBCID0gNjYsXHJcbiAgICAgICAgQyA9IDY3LFxyXG4gICAgICAgIEQgPSA2OCxcclxuICAgICAgICBFID0gNjksXHJcbiAgICAgICAgRiA9IDcwLFxyXG4gICAgICAgIEcgPSA3MSxcclxuICAgICAgICBIID0gNzIsXHJcbiAgICAgICAgSSA9IDczLFxyXG4gICAgICAgIEogPSA3NCxcclxuICAgICAgICBLID0gNzUsXHJcbiAgICAgICAgTCA9IDc2LFxyXG4gICAgICAgIE0gPSA3NyxcclxuICAgICAgICBOID0gNzgsXHJcbiAgICAgICAgTyA9IDc5LFxyXG4gICAgICAgIFAgPSA4MCxcclxuICAgICAgICBRID0gODEsXHJcbiAgICAgICAgUiA9IDgyLFxyXG4gICAgICAgIFMgPSA4MyxcclxuICAgICAgICBUID0gODQsXHJcbiAgICAgICAgVSA9IDg1LFxyXG4gICAgICAgIFYgPSA4NixcclxuICAgICAgICBXID0gODcsXHJcbiAgICAgICAgWCA9IDg4LFxyXG4gICAgICAgIFkgPSA4OSxcclxuICAgICAgICBaID0gOTAsXHJcbiAgICAgICAgTFdpbiA9IDkxLFxyXG4gICAgICAgIFJXaW4gPSA5MixcclxuICAgICAgICBBcHBzID0gOTMsXHJcbiAgICAgICAgU2xlZXAgPSA5NSxcclxuICAgICAgICBOdW1QYWQwID0gOTYsXHJcbiAgICAgICAgTnVtUGFkMSA9IDk3LFxyXG4gICAgICAgIE51bVBhZDIgPSA5OCxcclxuICAgICAgICBOdW1QYWQzID0gOTksXHJcbiAgICAgICAgTnVtUGFkNCA9IDEwMCxcclxuICAgICAgICBOdW1QYWQ1ID0gMTAxLFxyXG4gICAgICAgIE51bVBhZDYgPSAxMDIsXHJcbiAgICAgICAgTnVtUGFkNyA9IDEwMyxcclxuICAgICAgICBOdW1QYWQ4ID0gMTA0LFxyXG4gICAgICAgIE51bVBhZDkgPSAxMDUsXHJcbiAgICAgICAgTXVsdGlwbHkgPSAxMDYsXHJcbiAgICAgICAgQWRkID0gMTA3LFxyXG4gICAgICAgIFNlcGFyYXRvciA9IDEwOCxcclxuICAgICAgICBTdWJ0cmFjdCA9IDEwOSxcclxuICAgICAgICBEZWNpbWFsID0gMTEwLFxyXG4gICAgICAgIERpdmlkZSA9IDExMSxcclxuICAgICAgICBGMSA9IDExMixcclxuICAgICAgICBGMiA9IDExMyxcclxuICAgICAgICBGMyA9IDExNCxcclxuICAgICAgICBGNCA9IDExNSxcclxuICAgICAgICBGNSA9IDExNixcclxuICAgICAgICBGNiA9IDExNyxcclxuICAgICAgICBGNyA9IDExOCxcclxuICAgICAgICBGOCA9IDExOSxcclxuICAgICAgICBGOSA9IDEyMCxcclxuICAgICAgICBGMTAgPSAxMjEsXHJcbiAgICAgICAgRjExID0gMTIyLFxyXG4gICAgICAgIEYxMiA9IDEyMyxcclxuICAgICAgICBGMTMgPSAxMjQsXHJcbiAgICAgICAgRjE0ID0gMTI1LFxyXG4gICAgICAgIEYxNSA9IDEyNixcclxuICAgICAgICBGMTYgPSAxMjcsXHJcbiAgICAgICAgRjE3ID0gMTI4LFxyXG4gICAgICAgIEYxOCA9IDEyOSxcclxuICAgICAgICBGMTkgPSAxMzAsXHJcbiAgICAgICAgRjIwID0gMTMxLFxyXG4gICAgICAgIEYyMSA9IDEzMixcclxuICAgICAgICBGMjIgPSAxMzMsXHJcbiAgICAgICAgRjIzID0gMTM0LFxyXG4gICAgICAgIEYyNCA9IDEzNSxcclxuICAgICAgICBOdW1Mb2NrID0gMTQ0LFxyXG4gICAgICAgIFNjcm9sbCA9IDE0NSxcclxuICAgICAgICBMU2hpZnRLZXkgPSAxNjAsXHJcbiAgICAgICAgUlNoaWZ0S2V5ID0gMTYxLFxyXG4gICAgICAgIExDb250cm9sS2V5ID0gMTYyLFxyXG4gICAgICAgIFJDb250cm9sS2V5ID0gMTYzLFxyXG4gICAgICAgIExNZW51ID0gMTY0LFxyXG4gICAgICAgIFJNZW51ID0gMTY1LFxyXG4gICAgICAgIEJyb3dzZXJCYWNrID0gMTY2LFxyXG4gICAgICAgIEJyb3dzZXJGb3J3YXJkID0gMTY3LFxyXG4gICAgICAgIEJyb3dzZXJSZWZyZXNoID0gMTY4LFxyXG4gICAgICAgIEJyb3dzZXJTdG9wID0gMTY5LFxyXG4gICAgICAgIEJyb3dzZXJTZWFyY2ggPSAxNzAsXHJcbiAgICAgICAgQnJvd3NlckZhdm9yaXRlcyA9IDE3MSxcclxuICAgICAgICBCcm93c2VySG9tZSA9IDE3MixcclxuICAgICAgICBWb2x1bWVNdXRlID0gMTczLFxyXG4gICAgICAgIFZvbHVtZURvd24gPSAxNzQsXHJcbiAgICAgICAgVm9sdW1lVXAgPSAxNzUsXHJcbiAgICAgICAgTWVkaWFOZXh0VHJhY2sgPSAxNzYsXHJcbiAgICAgICAgTWVkaWFQcmV2aW91c1RyYWNrID0gMTc3LFxyXG4gICAgICAgIE1lZGlhU3RvcCA9IDE3OCxcclxuICAgICAgICBNZWRpYVBsYXlQYXVzZSA9IDE3OSxcclxuICAgICAgICBMYXVuY2hNYWlsID0gMTgwLFxyXG4gICAgICAgIFNlbGVjdE1lZGlhID0gMTgxLFxyXG4gICAgICAgIExhdW5jaEFwcGxpY2F0aW9uMSA9IDE4MixcclxuICAgICAgICBMYXVuY2hBcHBsaWNhdGlvbjIgPSAxODMsXHJcbiAgICAgICAgT2VtU2VtaWNvbG9uID0gMTg2LFxyXG4gICAgICAgIE9lbTEgPSAxODYsXHJcbiAgICAgICAgT2VtcGx1cyA9IDE4NyxcclxuICAgICAgICBPZW1jb21tYSA9IDE4OCxcclxuICAgICAgICBPZW1NaW51cyA9IDE4OSxcclxuICAgICAgICBPZW1QZXJpb2QgPSAxOTAsXHJcbiAgICAgICAgT2VtUXVlc3Rpb24gPSAxOTEsXHJcbiAgICAgICAgT2VtMiA9IDE5MSxcclxuICAgICAgICBPZW10aWxkZSA9IDE5MixcclxuICAgICAgICBPZW0zID0gMTkyLFxyXG4gICAgICAgIE9lbU9wZW5CcmFja2V0cyA9IDIxOSxcclxuICAgICAgICBPZW00ID0gMjE5LFxyXG4gICAgICAgIE9lbVBpcGUgPSAyMjAsXHJcbiAgICAgICAgT2VtNSA9IDIyMCxcclxuICAgICAgICBPZW1DbG9zZUJyYWNrZXRzID0gMjIxLFxyXG4gICAgICAgIE9lbTYgPSAyMjEsXHJcbiAgICAgICAgT2VtUXVvdGVzID0gMjIyLFxyXG4gICAgICAgIE9lbTcgPSAyMjIsXHJcbiAgICAgICAgT2VtOCA9IDIyMyxcclxuICAgICAgICBPZW1CYWNrc2xhc2ggPSAyMjYsXHJcbiAgICAgICAgT2VtMTAyID0gMjI2LFxyXG4gICAgICAgIFByb2Nlc3NLZXkgPSAyMjksXHJcbiAgICAgICAgUGFja2V0ID0gMjMxLFxyXG4gICAgICAgIEF0dG4gPSAyNDYsXHJcbiAgICAgICAgQ3JzZWwgPSAyNDcsXHJcbiAgICAgICAgRXhzZWwgPSAyNDgsXHJcbiAgICAgICAgRXJhc2VFb2YgPSAyNDksXHJcbiAgICAgICAgUGxheSA9IDI1MCxcclxuICAgICAgICBab29tID0gMjUxLFxyXG4gICAgICAgIE5vTmFtZSA9IDI1MixcclxuICAgICAgICBQYTEgPSAyNTMsXHJcbiAgICAgICAgT2VtQ2xlYXIgPSAyNTQsXHJcbiAgICAgICAgS2V5Q29kZSA9IDY1NTM1LFxyXG4gICAgICAgIFNoaWZ0ID0gNjU1MzYsXHJcbiAgICAgICAgQ29udHJvbCA9IDEzMTA3MixcclxuICAgICAgICBBbHQgPSAyNjIxNDQ7XHJcbiAgICB9XHJcbn0iLCJ1c2luZyBCcmlkZ2U7XHJcbnVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5MaW5xO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIExheW91dENvbnRhaW5lclxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBMaXN0PExheW91dENvbHVtbj4gQ29sdW1ucyA9IG5ldyBMaXN0PExheW91dENvbHVtbj4oKTtcclxuICAgICAgICBwdWJsaWMgaW50IENvbHVtbldpZHRoO1xyXG4gICAgICAgIHB1YmxpYyBpbnQgQ29udHJvbE1hcmdpbjtcclxuICAgICAgICBwcml2YXRlIGJvb2wgYXBwbGllZExheW91dCA9IGZhbHNlO1xyXG4gICAgICAgIHB1YmxpYyBpbnQgQnV0dGluV2lkdGggPSA3MztcclxuICAgICAgICBwdWJsaWMgTGlzdDxMYXlvdXRDb250cm9sPiBDb250cm9scyA9IG5ldyBMaXN0PExheW91dENvbnRyb2w+KCk7XHJcbiAgICAgICAgcHVibGljIExpc3Q8TGF5b3V0Q29udHJvbD4gQ29udHJvbEVkaXRhYmxlID0gbmV3IExpc3Q8TGF5b3V0Q29udHJvbD4oKTtcclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQWRkSW5wdXQoc3RyaW5nIGxpbmtGaWVsZCwgVGV4dElucHV0IGlucHV0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGNsID0gbmV3IExheW91dENvbnRyb2wobGlua0ZpZWxkLCBpbnB1dCk7XHJcbiAgICAgICAgICAgIENvbnRyb2xzLkFkZChjbCk7XHJcbiAgICAgICAgICAgIGlmKCFpbnB1dC5SZWFkb25seSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQ29udHJvbEVkaXRhYmxlLkFkZChjbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IFRhYkluZGV4ID0gMjtcclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgQXBwbGllZExheW91dCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gYXBwbGllZExheW91dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBMYXlvdXRDb250cm9sIEdldENvbnRyb2woc3RyaW5nIG5hbWUsIGJvb2wgYWxsb3dSZWFkb25seSA9IGZhbHNlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZSA9IG5hbWUuVG9Mb3dlcigpO1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihhbGxvd1JlYWRvbmx5KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgQ29udHJvbHMuQ291bnQ7IGkrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihDb250cm9sc1tpXS5MaW5rRmllbGROYW1lLlRvTG93ZXIoKSA9PSBuYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENvbnRyb2xzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfWVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IENvbnRyb2xFZGl0YWJsZS5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKENvbnRyb2xFZGl0YWJsZVtpXS5MaW5rRmllbGROYW1lLlRvTG93ZXIoKSA9PSBuYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENvbnRyb2xFZGl0YWJsZVtpXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBHZXRUZXh0KHN0cmluZyBuYW1lLCBib29sIGFsbG93UmVhZHlPbmx5ID0gZmFsc2UpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsOjpCcmlkZ2UuU2NyaXB0LlRvVGVtcChcImtleTFcIixHZXRDb250cm9sKG5hbWUsIGFsbG93UmVhZHlPbmx5KSkhPW51bGwmJmdsb2JhbDo6QnJpZGdlLlNjcmlwdC5Ub1RlbXAoXCJrZXkyXCIsZ2xvYmFsOjpCcmlkZ2UuU2NyaXB0LkZyb21UZW1wPExheW91dENvbnRyb2w+KFwia2V5MVwiKS5JbnB1dCkhPW51bGw/Z2xvYmFsOjpCcmlkZ2UuU2NyaXB0LkZyb21UZW1wPFRleHRJbnB1dD4oXCJrZXkyXCIpLlRleHQ6KHN0cmluZyludWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG9iamVjdCBHZXRFZGl0VmFsdWUoc3RyaW5nIG5hbWUsIGJvb2wgYWxsb3dSZWFkeU9ubHkgPSBmYWxzZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWw6OkJyaWRnZS5TY3JpcHQuVG9UZW1wKFwia2V5M1wiLEdldENvbnRyb2wobmFtZSwgYWxsb3dSZWFkeU9ubHkpKSE9bnVsbCYmZ2xvYmFsOjpCcmlkZ2UuU2NyaXB0LlRvVGVtcChcImtleTRcIixnbG9iYWw6OkJyaWRnZS5TY3JpcHQuRnJvbVRlbXA8TGF5b3V0Q29udHJvbD4oXCJrZXkzXCIpLklucHV0KSE9bnVsbD9nbG9iYWw6OkJyaWRnZS5TY3JpcHQuRnJvbVRlbXA8VGV4dElucHV0PihcImtleTRcIikuR2V0RWRpdFZhbHVlKCk6KG9iamVjdCludWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgU2V0VGV4dChzdHJpbmcgbmFtZSwgc3RyaW5nIHZhbHVlLCBib29sIGFsbG93UmVhZHlPbmx5ID0gZmFsc2UpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgaW5wdXQgPSBnbG9iYWw6OkJyaWRnZS5TY3JpcHQuVG9UZW1wKFwia2V5NVwiLEdldENvbnRyb2wobmFtZSwgYWxsb3dSZWFkeU9ubHkpKSE9bnVsbD9nbG9iYWw6OkJyaWRnZS5TY3JpcHQuRnJvbVRlbXA8TGF5b3V0Q29udHJvbD4oXCJrZXk1XCIpLklucHV0OihUZXh0SW5wdXQpbnVsbDtcclxuICAgICAgICAgICAgaWYoaW5wdXQgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIGlucHV0LlRleHQgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEZvY3VzKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKEhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZihDb250cm9scyA9PSBudWxsIHx8IENvbnRyb2xzLkNvdW50ID09IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IFN5c3RlbS5MaW5xLkVudW1lcmFibGUuRmlyc3RPckRlZmF1bHQ8TGF5b3V0Q29udHJvbD4oQ29udHJvbHMpLklucHV0O1xyXG4gICAgICAgICAgICB2YXIgeCA9IGlucHV0LkdldElucHV0KCk7XHJcblxyXG4gICAgICAgICAgICBpZih4ICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHguRm9jdXNFbGVtZW50KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dC5Db250ZW50LkZvY3VzRWxlbWVudCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgTGF5b3V0Q29udGFpbmVyKGludCBjb2x1bW5XaWR0aCA9IDUwMCwgaW50IGNvbnRyb2xNYXJnaW4gPSA2LCBwYXJhbXMgTGF5b3V0Q29sdW1uW10gY29sdW1ucylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIENvbHVtbldpZHRoID0gY29sdW1uV2lkdGg7XHJcbiAgICAgICAgICAgIENvbnRyb2xNYXJnaW4gPSBjb250cm9sTWFyZ2luO1xyXG5cclxuICAgICAgICAgICAgaWYoY29sdW1ucyAhPSBudWxsICYmIGNvbHVtbnMuTGVuZ3RoID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yZWFjaCh2YXIgaXRlbSBpbiBjb2x1bW5zKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0gIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgQ29sdW1ucy5BZGQoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBMYXlvdXRDb250YWluZXIoaW50IGNvbHVtbldpZHRoID0gNTAwLCBpbnQgY29udHJvbE1hcmdpbiA9IDYsIGludCBidXR0b25XaWR0aCA9IDczLCBwYXJhbXMgTGF5b3V0Q29sdW1uW10gY29sdW1ucylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIENvbHVtbldpZHRoID0gY29sdW1uV2lkdGg7XHJcbiAgICAgICAgICAgIENvbnRyb2xNYXJnaW4gPSBjb250cm9sTWFyZ2luO1xyXG4gICAgICAgICAgICBCdXR0aW5XaWR0aCA9IGJ1dHRvbldpZHRoO1xyXG5cclxuICAgICAgICAgICAgaWYoY29sdW1ucyAhPSBudWxsICYmIGNvbHVtbnMuTGVuZ3RoID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yZWFjaCh2YXIgaXRlbSBpbiBjb2x1bW5zKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0gIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgQ29sdW1ucy5BZGQoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBMYXlvdXRDb250YWluZXIocGFyYW1zIExheW91dENvbHVtbltdIGNvbHVtbnMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDb2x1bW5XaWR0aCA9IDUwMDtcclxuICAgICAgICAgICAgQ29udHJvbE1hcmdpbiA9IDY7XHJcblxyXG4gICAgICAgICAgICBpZihjb2x1bW5zICE9IG51bGwgJiYgY29sdW1ucy5MZW5ndGggPiAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmb3JlYWNoKHZhciBpdGVtIGluIGNvbHVtbnMpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBDb2x1bW5zLkFkZChpdGVtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgQ3JlYXRlTG9hZFNRTCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgYnVpbGRlclNRTCA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7XHJcblxyXG4gICAgICAgICAgICBpbnQgbGVuZ3RoID0gQ29udHJvbHMuQ291bnQ7XHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoQ29udHJvbHNbaV0gPT0gbnVsbCB8fCBDb250cm9sc1tpXS5JbnB1dCA9PSBudWxsIHx8IHN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoQ29udHJvbHNbaV0uTGlua0ZpZWxkTmFtZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBidWlsZGVyU1FMLkFwcGVuZChcImBcIiArIENvbnRyb2xzW2ldLkxpbmtGaWVsZE5hbWUgKyBcImAsIFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgY29udHJvbCA9IENvbnRyb2xzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKGNvbnRyb2wuSW5wdXQgaXMgU2VhcmNoSW5wdXQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlYXJjaCA9IGNvbnRyb2wuSW5wdXQuQXM8U2VhcmNoSW5wdXQ+KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlZGl0VmFsdWUgPSAoc2VhcmNoLkVkaXRWYWx1ZSArIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHNlYXJjaC5EaXNwbGF5TWVtYmVyID09IHNlYXJjaC5WYWx1ZU1lbWJlciB8fCBzZWFyY2guVmFsdWVNZW1iZXIgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvY3VtZW50VHJhbnNhY3Rpb24uQWRkQ29tYm8oY29udHJvbC5MaW5rRmllbGROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3NlYXJjaC5UZXh0LCBzZWFyY2guVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvbmcgZWRpdHYgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsb25nLlRyeVBhcnNlKGVkaXRWYWx1ZSwgb3V0IGVkaXR2KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvY3VtZW50VHJhbnNhY3Rpb24uQWRkQ29tYm8oY29udHJvbC5MaW5rRmllbGROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2VkaXR2LCBzZWFyY2guVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYoY29udHJvbC5JbnB1dC5Db250cm9sbGVyICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY29udHJvbC5JbnB1dC5Db250cm9sbGVyIGlzIENoZWNrRWRpdClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZG9jdW1lbnRUcmFuc2FjdGlvbi5BZGRCb29sZWFuKGNvbnRyb2wuTGlua0ZpZWxkTmFtZSwgKGNvbnRyb2wuSW5wdXQuQ29udHJvbGxlci5BczxDaGVja0VkaXQ+KCkuQ2hlY2tlZCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKGNvbnRyb2wuSW5wdXQuSXNOdW1lcmljVHlwZSgpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdmFyIGRlYyA9IGNvbnRyb2wuSW5wdXQuR2V0TnVtYmVyVmFsdWUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9kb2N1bWVudFRyYW5zYWN0aW9uLkFkZE51bWVyKGNvbnRyb2wuTGlua0ZpZWxkTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAvL2RlYyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKGNvbnRyb2wuSW5wdXQuSXNEYXRlVHlwZSgpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdmFyIGRhdGUgPSBjb250cm9sLklucHV0LkdldERhdGVUaW1lKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZG9jdW1lbnRUcmFuc2FjdGlvbi5BZGREYXRlKGNvbnRyb2wuTGlua0ZpZWxkTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAvL2RhdGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZG9jdW1lbnRUcmFuc2FjdGlvbi5BZGRTdHJpbmcoY29udHJvbC5MaW5rRmllbGROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vY29udHJvbC5JbnB1dC5UZXh0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXJTUUwuVG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEFwcGx5UmVhZE9ubHkoYm9vbCBkb2N1bWVudHJlYWRvbmx5KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IGxlbmd0aCA9IENvbnRyb2xFZGl0YWJsZS5Db3VudDtcclxuICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBBcHBseVJlYWRPbmx5T25Db250cm9sKGRvY3VtZW50cmVhZG9ubHksIENvbnRyb2xFZGl0YWJsZVtpXS5JbnB1dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCB2b2lkIEFwcGx5UmVhZE9ubHlPbkNvbnRyb2woYm9vbCBkb2N1bWVudHJlYWRvbmx5LCBUZXh0SW5wdXQgaW5wdXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihpbnB1dC5Db250cm9sbGVyICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKGlucHV0LkNvbnRyb2xsZXIgaXMgQ2hlY2tFZGl0KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LkVuYWJsZWQgPSAhZG9jdW1lbnRyZWFkb25seTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKGlucHV0IGlzIFRleHRJbnB1dERyb3BEb3duKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LkFzPFRleHRJbnB1dERyb3BEb3duPigpLkdldElucHV0KCkucmVhZE9ubHkgPSBkb2N1bWVudHJlYWRvbmx5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaW5wdXQuUmVhZG9ubHkgPSBkb2N1bWVudHJlYWRvbmx5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCB2b2lkIE9uQ29udHJvbENyZWF0ZWQoTGF5b3V0Q29udHJvbCBDb250cm9sKVxyXG4gICAgICAgIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEFwcGx5KENvbnRyb2wgcGFyZW50LCBib29sIGRvY3VtZW50cmVhZG9ubHkgPSBmYWxzZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHBhcmVudCA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgaWYoYXBwbGllZExheW91dClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgYXBwbGllZExheW91dCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBpbnQgbGVmdE1hcmdpbiA9IDEwO1xyXG4gICAgICAgICAgICBpbnQgdG9wTWFyZ2luID0gNTtcclxuXHJcbiAgICAgICAgICAgIGludCBsZWZ0TGFiZWwgPSAxNTtcclxuXHJcbiAgICAgICAgICAgIGludCBjdXJyZW50TGVmdCA9IGxlZnRNYXJnaW47XHJcbiAgICAgICAgICAgIGludCBBcHBlbmRYID0gMDtcclxuICAgICAgICAgICAgaW50IEFwcGVuZFkgPSAwO1xyXG5cclxuICAgICAgICAgICAgaW50IEVkaXRTdGFydFggPSAxMjU7XHJcblxyXG4gICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgRWRpdFN0YXJ0WCA9IDE1O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpbnQgWEluY3JlbWVudCA9IGxlZnRNYXJnaW4gKyBDb2x1bW5XaWR0aDtcclxuXHJcbiAgICAgICAgICAgIGludCBpbnB1dEhlaWdodDtcclxuICAgICAgICAgICAgaWYoSGVscGVyLk5vdERlc2t0b3ApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIEJ1dHRpbldpZHRoID0gMDtcclxuICAgICAgICAgICAgICAgIGlucHV0SGVpZ2h0ID0gNDU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dEhlaWdodCA9IDIwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGludCBHcm91cExhYmVsSW5jcmVtZW50ID0gQ29udHJvbE1hcmdpbiArIChIZWxwZXIuTm90RGVza3RvcCA/IChpbnB1dEhlaWdodCAtIDMwKSA6IChpbnB1dEhlaWdodCAtIDQpKTtcclxuICAgICAgICAgICAgaW50IFJvd0luY3JlbWVudCA9IGlucHV0SGVpZ2h0ICsgQ29udHJvbE1hcmdpbjtcclxuXHJcbiAgICAgICAgICAgIGludCBUaW55TGFiZWxJbmNyZW1lbnQgPSBpbnB1dEhlaWdodCAtIDg7XHJcblxyXG4gICAgICAgICAgICBmb3JlYWNoKHZhciBjb2x1bW4gaW4gQ29sdW1ucylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIGF1dG9EaXYgPSBuZXcgQ29udHJvbCgpO1xyXG4gICAgICAgICAgICAgICAgZmxvYXQgeSA9IHRvcE1hcmdpbjtcclxuICAgICAgICAgICAgICAgIGlmKEhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9EaXYuV2lkdGggPSBcIigxMDAlIC0gMTJweClcIjtcclxuICAgICAgICAgICAgICAgICAgICBhdXRvRGl2LlRvcCA9IEFwcGVuZFk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXV0b0Rpdi5Ub3AgPSB5O1xyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9EaXYuV2lkdGggPSBDb2x1bW5XaWR0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGF1dG9EaXYuTGVmdCA9IEFwcGVuZFg7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGRvY0ZyYWdtZW50ID0gUmV0eXBlZC5kb20uZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBncm91cHMgPSBjb2x1bW4uR3JvdXBzO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcmVhY2godmFyIGdyb3VwIGluIGdyb3VwcylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZighc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShncm91cC5Hcm91cExhYmVsKSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYWJlbCA9IENvbnRyb2wuTGFiZWwoZ3JvdXAuR3JvdXBMYWJlbCwgY3VycmVudExlZnQsIHksIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwuc3R5bGUuZm9udFNpemUgPSBcIjE0cHhcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2NGcmFnbWVudC5hcHBlbmRDaGlsZDxIVE1MU3BhbkVsZW1lbnQ+KGxhYmVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeSArPSBHcm91cExhYmVsSW5jcmVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgcm93cyA9IGdyb3VwLlJvd3M7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvcmVhY2godmFyIHJvdyBpbiByb3dzKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYocm93IGlzIExheW91dFJvd0NvbnRyb2wpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0IGhlaWdodCA9IHJvdy5BczxMYXlvdXRSb3dDb250cm9sPigpLkhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udHJvbCA9IHJvdy5BczxMYXlvdXRSb3dDb250cm9sPigpLkNvbnRyb2w7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY29udHJvbCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wuSGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wuTGVmdCA9IGN1cnJlbnRMZWZ0ICsgbGVmdExhYmVsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbC5Ub3AgPSB5O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wuV2lkdGggPSBcIigxMDAlIC0gXCIgKyAoY3VycmVudExlZnQgKyAobGVmdExhYmVsICogMi4wZikpICsgXCJweClcIjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbC5XaWR0aCA9IENvbHVtbldpZHRoIC0gY3VycmVudExlZnQgLSAobGVmdExhYmVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY0ZyYWdtZW50LmFwcGVuZENoaWxkPFJldHlwZWQuZG9tLk5vZGU+KChSZXR5cGVkLmRvbS5Ob2RlKWNvbnRyb2wpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ICs9IENvbnRyb2xNYXJnaW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeSArPSBoZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShyb3cuTGFiZWwpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFiZWwgPSBDb250cm9sLkxhYmVsKHJvdy5MYWJlbCwgY3VycmVudExlZnQgKyBsZWZ0TGFiZWwgKyAoZmxvYXQpcm93Lk9mZnNldCwgeSwgcm93LkJvbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoSGVscGVyLk5vdERlc2t0b3ApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwuc3R5bGUuZm9udFNpemUgPSBcIjEycHhcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ICs9IEdyb3VwTGFiZWxJbmNyZW1lbnQgLSA1O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jRnJhZ21lbnQuYXBwZW5kQ2hpbGQ8SFRNTFNwYW5FbGVtZW50PihsYWJlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJvdyBpcyBMYXlvdXRSb3dHYXApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgKz0gcm93LkFzPExheW91dFJvd0dhcD4oKS5IZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYocm93LkJ1dHRvbiAhPSBudWxsICYmICFIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93LkJ1dHRvbi5Mb2NhdGlvbiA9IG5ldyBWZWN0b3IyKENvbHVtbldpZHRoIC0gQnV0dGluV2lkdGggKyA2LCB5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5CdXR0b24uV2lkdGggPSBCdXR0aW5XaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY0ZyYWdtZW50LmFwcGVuZENoaWxkPFJldHlwZWQuZG9tLk5vZGU+KChSZXR5cGVkLmRvbS5Ob2RlKXJvdy5CdXR0b24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udHJvbHMgPSByb3cuQ29udHJvbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvb2wgSGFzVGlueUxhYmVsID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihjb250cm9scy5Db3VudCA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2ltYWwgVG90YWxQZXJjZW50ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUb3RhbFBlcmNlbnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50IEFkZFdpZHRoID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2godmFyIGNvbnRyb2wgaW4gY29udHJvbHMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY29udHJvbC5QZXJjZW50ID4gMS4wbSB8fCBjb250cm9sLlBlcmNlbnQgPD0gMC4wbSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbC5QZXJjZW50ID0gMS4wbTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVG90YWxQZXJjZW50ICs9IGNvbnRyb2wuUGVyY2VudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoVG90YWxQZXJjZW50ID4gMS4wbSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNvbnRyb2wuSW5wdXQgaXMgTWVtb0lucHV0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ICs9IGNvbnRyb2wuSW5wdXQuSGVpZ2h0LlRvSW50KCkgKyBDb250cm9sTWFyZ2luO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSArPSBSb3dJbmNyZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJvdy5Ob0dhcClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgLT0gQ29udHJvbE1hcmdpbiArIDE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihIYXNUaW55TGFiZWwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgKz0gVGlueUxhYmVsSW5jcmVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSGFzVGlueUxhYmVsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRvdGFsUGVyY2VudCAtPSAxLjBtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBZGRXaWR0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0IEFkZCA9IChjdXJyZW50TGVmdCArIEFkZFdpZHRoICsgRWRpdFN0YXJ0WCArIEJ1dHRpbldpZHRoICsgKGZsb2F0KXJvdy5PZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyBvMTAwUGVyY2VudCA9IFwiKCgxMDAlIC0gXCIgKyBBZGQuVG9QeCgpICsgXCIpICogXCIgKyAoVG90YWxQZXJjZW50IC0gY29udHJvbC5QZXJjZW50KSArIFwiKVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyBvMTAwUGVyY2VudDIgPSBcIigxMDAlIC0gXCIgKyBBZGQuVG9QeCgpICsgXCIpXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVuaW9uPHN0cmluZywgaW50LCBmbG9hdD4gd2lkdGggPSBcIihcIiArIG8xMDBQZXJjZW50MiArIFwiICogXCIgKyBjb250cm9sLlBlcmNlbnQgKyBcIilcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWZWN0b3IyIGxvYyA9IG5ldyBWZWN0b3IyKFwiKFwiICsgbzEwMFBlcmNlbnQgKyBcIiArIFwiICsgKEFkZCAtIEJ1dHRpbldpZHRoKS5Ub1B4KCkgKyBcIilcIiwgeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXJvdy5Ob0dhcClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFkZFdpZHRoICs9IDY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjb250cm9sLklucHV0LkNvbnRyb2xsZXIgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wuSW5wdXQuQ29udHJvbGxlci5XaWR0aCA9IHdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sLklucHV0LkNvbnRyb2xsZXIuTG9jYXRpb24gPSBsb2M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wuSW5wdXQuQ29udGVudC50YWJJbmRleCA9IFRhYkluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sLklucHV0LkNsYXNzTGlzdC5yZW1vdmUoXCJjb250cm9sXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjb250cm9sLklucHV0LkNvbnRyb2xsZXIgaXMgQ2hlY2tFZGl0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3BhbiA9IGNvbnRyb2wuSW5wdXQuQ29udHJvbGxlci5BczxDaGVja0VkaXQ+KCkuc3BhbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4uc3R5bGUudG9wID0gXCIwXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFuLnN0eWxlLmxlZnQgPSAoaW5wdXRIZWlnaHQgLSAyKS5Ub1B4KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFuLnN0eWxlLndoaXRlU3BhY2UgPSBcInByZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zcGFuLlN0eWxlLlRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKDNweCwgNTAlKVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoSGVscGVyLk5vdERlc2t0b3ApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbi5zdHlsZS5mb250U2l6ZSA9IFwiMTRweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4uc3R5bGUud2hpdGVTcGFjZSA9IFwibm9ybWFsXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY29udHJvbC5JbnB1dC5Db250ZW50LkFzPFJldHlwZWQuZG9tLkhUTUxJbnB1dEVsZW1lbnQ+KCkudHlwZSA9PSBcImNoZWNrYm94XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbC5JbnB1dC5XaWR0aCA9IChpbnB1dEhlaWdodCAtIDQpLlRvUHgoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sLklucHV0LkhlaWdodCA9IChpbnB1dEhlaWdodCAtIDQpLlRvUHgoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jRnJhZ21lbnQuYXBwZW5kQ2hpbGQ8UmV0eXBlZC5kb20uTm9kZT4oKFJldHlwZWQuZG9tLk5vZGUpY29udHJvbC5JbnB1dC5Db250cm9sbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbC5JbnB1dC5XaWR0aCA9IHdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sLklucHV0LkxvY2F0aW9uID0gbG9jO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sLklucHV0LkdldElucHV0KCkudGFiSW5kZXggPSBUYWJJbmRleDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY0ZyYWdtZW50LmFwcGVuZENoaWxkPFJldHlwZWQuZG9tLk5vZGU+KChSZXR5cGVkLmRvbS5Ob2RlKWNvbnRyb2wuSW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wuSW5wdXQuSGVpZ2h0ID0gaW5wdXRIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wuSW5wdXQuU3R5bGUuZm9udFNpemUgPSBcIjE0cHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNvbnRyb2wuSW5wdXQuR2V0SW5wdXQoKSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sLklucHV0LkdldElucHV0KCkuc3R5bGUuZm9udFNpemUgPSBcIjE0cHhcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT25Db250cm9sQ3JlYXRlZChjb250cm9sKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXJvdy5Ob0dhcCAmJiAhcm93LkhpZGVUaW55TGFiZWwgJiYgIXN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoY29udHJvbC5UaW55TGFiZWwpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhYmVsID0gQ29udHJvbC5MYWJlbChjb250cm9sLlRpbnlMYWJlbCwgMCwgeSArIChpbnB1dEhlaWdodCArIDMpLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLnN0eWxlLmxlZnQgPSBcImNhbGMoXCIgKyBvMTAwUGVyY2VudCArIFwiICsgXCIgKyAoQWRkIC0gQnV0dGluV2lkdGgpLlRvUHgoKSArIFwiKVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2NGcmFnbWVudC5hcHBlbmRDaGlsZDxIVE1MU3BhbkVsZW1lbnQ+KGxhYmVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoSGVscGVyLk5vdERlc2t0b3ApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLnN0eWxlLmZvbnRTaXplID0gXCIxMnB4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSGFzVGlueUxhYmVsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJvdy5Vc2VQbGFjZWhvbGRlciAmJiAhc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShjb250cm9sLlRpbnlMYWJlbCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sLklucHV0LlNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsIGNvbnRyb2wuVGlueUxhYmVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY29udHJvbC5JbnB1dC5Ub29sVGlwID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHN0cmluZy5Jc051bGxPcldoaXRlU3BhY2Uocm93LkxhYmVsKSAmJiBzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKGdyb3VwLkdyb3VwTGFiZWwpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wuSW5wdXQuVG9vbFRpcCA9IG5ldyBUb29sVGlwKGNvbnRyb2wuVGlueUxhYmVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sLklucHV0LlRvb2xUaXAgPSBuZXcgVG9vbFRpcChzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKHJvdy5MYWJlbCkgPyBncm91cC5Hcm91cExhYmVsIDogcm93LkxhYmVsLCBjb250cm9sLlRpbnlMYWJlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhYkluZGV4Kys7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFjb250cm9sLklucHV0LlJlYWRvbmx5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwbHlSZWFkT25seU9uQ29udHJvbChkb2N1bWVudHJlYWRvbmx5LCBjb250cm9sLklucHV0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29udHJvbEVkaXRhYmxlLkFkZChjb250cm9sKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29udHJvbHMuQWRkKGNvbnRyb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKEhhc1RpbnlMYWJlbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ICs9IFRpbnlMYWJlbEluY3JlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXN0ID0gU3lzdGVtLkxpbnEuRW51bWVyYWJsZS5MYXN0T3JEZWZhdWx0PExheW91dENvbnRyb2w+KHJvdy5Db250cm9scyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihsYXN0ICE9IG51bGwgJiYgbGFzdC5JbnB1dCBpcyBNZW1vSW5wdXQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSArPSBsYXN0LklucHV0LkhlaWdodC5Ub0ludCgpICsgQ29udHJvbE1hcmdpbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ICs9IFJvd0luY3JlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgYXV0b0Rpdi5IZWlnaHQgPSB5O1xyXG4gICAgICAgICAgICAgICAgaWYoIUhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIEFwcGVuZFggKz0gWEluY3JlbWVudDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBBcHBlbmRZICs9IChpbnQpeTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGF1dG9EaXYuQ29udGVudC5BcHBlbmRDaGlsZChkb2NGcmFnbWVudCk7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnQuQ29udGVudC5BcHBlbmRDaGlsZChhdXRvRGl2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgTGFzdENvbnRyb2wgPSBTeXN0ZW0uTGlucS5FbnVtZXJhYmxlLkxhc3RPckRlZmF1bHQ8TGF5b3V0Q29udHJvbD4oQ29udHJvbHMpO1xyXG4gICAgICAgICAgICBpZihMYXN0Q29udHJvbCAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgRmlyc3RDb250cm9sID0gU3lzdGVtLkxpbnEuRW51bWVyYWJsZS5GaXJzdE9yRGVmYXVsdDxMYXlvdXRDb250cm9sPihDb250cm9scyk7XHJcblxyXG4gICAgICAgICAgICAgICAgQWN0aW9uPFJldHlwZWQuZG9tLktleWJvYXJkRXZlbnQ+IFByZXZlbnREZWZhdWx0TW92ZUZvcndhcmQgPSAoZXYpID0+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZXYua2V5Q29kZSA9PSA5ICYmICFldi5zaGlmdEtleSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0gRmlyc3RDb250cm9sLklucHV0LkdldElucHV0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHggIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHguRm9jdXNFbGVtZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTGFzdENvbnRyb2wuSW5wdXQuQ29udGVudC5Gb2N1c0VsZW1lbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgQWN0aW9uPFJldHlwZWQuZG9tLktleWJvYXJkRXZlbnQ+IFByZXZlbnREZWZhdWx0TW92ZUJhY2sgPSAoZXYpID0+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZXYua2V5Q29kZSA9PSA5ICYmIGV2LnNoaWZ0S2V5KVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBMYXN0Q29udHJvbC5JbnB1dC5HZXRJbnB1dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih4ICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LkZvY3VzRWxlbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExhc3RDb250cm9sLklucHV0LkNvbnRlbnQuRm9jdXNFbGVtZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIExhc3RDb250cm9sLklucHV0LkNvbnRlbnQub25rZXlkb3duID0gbmV3IFJldHlwZWQuZG9tLkhUTUxFbGVtZW50Lm9ua2V5ZG93bkZuKFByZXZlbnREZWZhdWx0TW92ZUZvcndhcmQpO1xyXG4gICAgICAgICAgICAgICAgRmlyc3RDb250cm9sLklucHV0LkNvbnRlbnQub25rZXlkb3duID0gbmV3IFJldHlwZWQuZG9tLkhUTUxFbGVtZW50Lm9ua2V5ZG93bkZuKFByZXZlbnREZWZhdWx0TW92ZUJhY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBMYXlvdXRDb250cm9sXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHN0cmluZyBMaW5rRmllbGROYW1lIHsgZ2V0OyBzZXQ7IH1cclxuICAgICAgICBwdWJsaWMgVGV4dElucHV0IElucHV0IHsgZ2V0OyBzZXQ7IH1cclxuICAgICAgICBwdWJsaWMgc3RyaW5nIFRpbnlMYWJlbCB7IGdldDsgc2V0OyB9XHJcbiAgICAgICAgcHVibGljIGRlY2ltYWwgUGVyY2VudCB7IGdldDsgc2V0OyB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gQ2FsY3VsYXRlZFxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgcHVibGljIHN0cmluZyBXaWR0aCB7IGdldDsgc2V0OyB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gQ2FsY3VsYXRlZFxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgcHVibGljIGRlY2ltYWwgTGluZU51bWJlciB7IGdldDsgc2V0OyB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBMYXlvdXRDb250cm9sKHN0cmluZyBsaW5rRmllbGROYW1lLCBUZXh0SW5wdXQgaW5wdXQsIHN0cmluZyB0aW55TGFiZWwgPSBcIlwiLCBkZWNpbWFsIHBlcmNlbnQgPSAxKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgTGlua0ZpZWxkTmFtZSA9IGxpbmtGaWVsZE5hbWU7XHJcbiAgICAgICAgICAgIElucHV0ID0gaW5wdXQ7XHJcbiAgICAgICAgICAgIFRpbnlMYWJlbCA9IHRpbnlMYWJlbDtcclxuICAgICAgICAgICAgUGVyY2VudCA9IHBlcmNlbnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgTGF5b3V0Q29udHJvbChzdHJpbmcgbGlua0ZpZWxkTmFtZSwgVGV4dElucHV0IGlucHV0LCBkZWNpbWFsIHBlcmNlbnQgPSAxKSA6IHRoaXMobGlua0ZpZWxkTmFtZSwgaW5wdXQsIFwiXCIsIHBlcmNlbnQpXHJcbiAgICAgICAge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIExheW91dENvbnRyb2woc3RyaW5nIGxpbmtGaWVsZE5hbWUsIFRleHRJbnB1dCBpbnB1dCkgOiB0aGlzKGxpbmtGaWVsZE5hbWUsIGlucHV0LCBcIlwiKVxyXG4gICAgICAgIHtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIExheW91dENvbHVtblxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBMaXN0PExheW91dEdyb3VwPiBHcm91cHMgPSBuZXcgTGlzdDxMYXlvdXRHcm91cD4oKTtcclxuXHJcbiAgICAgICAgcHVibGljIExheW91dENvbHVtbihwYXJhbXMgTGF5b3V0R3JvdXBbXSBncm91cHMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihncm91cHMgIT0gbnVsbCAmJiBncm91cHMuTGVuZ3RoID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yZWFjaCh2YXIgaXRlbSBpbiBncm91cHMpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBHcm91cHMuQWRkKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBMYXlvdXRHcm91cFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBMaXN0PExheW91dFJvdz4gUm93cyA9IG5ldyBMaXN0PExheW91dFJvdz4oKTtcclxuICAgICAgICBwdWJsaWMgc3RyaW5nIEdyb3VwTGFiZWwgeyBnZXQ7IHNldDsgfVxyXG5cclxuICAgICAgICBwdWJsaWMgTGF5b3V0R3JvdXAocGFyYW1zIExheW91dFJvd1tdIHJvd3MpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBHcm91cExhYmVsID0gc3RyaW5nLkVtcHR5O1xyXG4gICAgICAgICAgICBpZihyb3dzICE9IG51bGwgJiYgcm93cy5MZW5ndGggPiAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmb3JlYWNoKHZhciBpdGVtIGluIHJvd3MpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSb3dzLkFkZChpdGVtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIExheW91dEdyb3VwKHN0cmluZyBncm91cExhYmVsLCBwYXJhbXMgTGF5b3V0Um93W10gcm93cylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEdyb3VwTGFiZWwgPSBncm91cExhYmVsO1xyXG4gICAgICAgICAgICBpZihyb3dzICE9IG51bGwgJiYgcm93cy5MZW5ndGggPiAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmb3JlYWNoKHZhciBpdGVtIGluIHJvd3MpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSb3dzLkFkZChpdGVtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgTGF5b3V0Um93R2FwIDogTGF5b3V0Um93XHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIGZsb2F0IEhlaWdodDtcclxuXHJcbiAgICAgICAgcHVibGljIExheW91dFJvd0dhcChmbG9hdCBoZWlnaHQsIHN0cmluZyBsYWJlbCA9IFwiXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBIZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgICAgIExhYmVsID0gbGFiZWw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBMYXlvdXRSb3dDb250cm9sIDogTGF5b3V0Um93XHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIGZsb2F0IEhlaWdodDtcclxuICAgICAgICBwdWJsaWMgQ29udHJvbCBDb250cm9sO1xyXG5cclxuICAgICAgICBwdWJsaWMgTGF5b3V0Um93Q29udHJvbChmbG9hdCBoZWlnaHQsIENvbnRyb2wgY29udHJvbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICAgICAgTGFiZWwgPSBcIlwiO1xyXG4gICAgICAgICAgICBDb250cm9sID0gY29udHJvbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIExheW91dFJvd1xyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBMaXN0PExheW91dENvbnRyb2w+IENvbnRyb2xzID0gbmV3IExpc3Q8TGF5b3V0Q29udHJvbD4oKTtcclxuICAgICAgICBwdWJsaWMgc3RyaW5nIExhYmVsIHsgZ2V0OyBzZXQ7IH1cclxuICAgICAgICBwdWJsaWMgU2ltcGxlQnV0dG9uIEJ1dHRvbiB7IGdldDsgc2V0OyB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gSWYgdGhpcyBpcyB0cnVlIC0gdGlueSBsYWJlbHMgYXJlIGlnbm9yZWRcclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIHB1YmxpYyBib29sIE5vR2FwIHsgZ2V0OyBzZXQ7IH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgVXNlUGxhY2Vob2xkZXIgeyBnZXQ7IHNldDsgfVxyXG4gICAgICAgIHB1YmxpYyBib29sIEhpZGVUaW55TGFiZWwgeyBnZXQ7IHNldDsgfVxyXG4gICAgICAgIHB1YmxpYyBkZWNpbWFsIE9mZnNldCB7IGdldDsgc2V0OyB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIEJvbGQgeyBnZXQ7IHNldDsgfVxyXG5cclxuICAgICAgICBwdWJsaWMgTGF5b3V0Um93KHN0cmluZyBsYWJlbCwgcGFyYW1zIExheW91dENvbnRyb2xbXSBjb250cm9scylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIExhYmVsID0gbGFiZWw7XHJcbiAgICAgICAgICAgIGlmKGNvbnRyb2xzICE9IG51bGwgJiYgY29udHJvbHMuTGVuZ3RoID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yZWFjaCh2YXIgaXRlbSBpbiBjb250cm9scylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihpdGVtICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRyb2xzLkFkZChpdGVtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIExheW91dFJvdyhwYXJhbXMgTGF5b3V0Q29udHJvbFtdIGNvbnRyb2xzKSA6IHRoaXMoXCJcIiwgY29udHJvbHMpXHJcbiAgICAgICAge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIExheW91dFJvdyhkZWNpbWFsIG9mZnNldCwgcGFyYW1zIExheW91dENvbnRyb2xbXSBjb250cm9scykgOiB0aGlzKFwiXCIsIGNvbnRyb2xzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgT2Zmc2V0ID0gb2Zmc2V0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIExheW91dFJvdyhzdHJpbmcgbGFiZWwsIFNpbXBsZUJ1dHRvbiBidXR0b24sIHBhcmFtcyBMYXlvdXRDb250cm9sW10gY29udHJvbHMpIDogdGhpcyhsYWJlbCwgY29udHJvbHMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBCdXR0b24gPSBidXR0b247XHJcbiAgICAgICAgfVxyXG5cbiAgICBcbnByaXZhdGUgYm9vbCBfX1Byb3BlcnR5X19Jbml0aWFsaXplcl9fTm9HYXA9ZmFsc2U7cHJpdmF0ZSBib29sIF9fUHJvcGVydHlfX0luaXRpYWxpemVyX19Vc2VQbGFjZWhvbGRlcj1mYWxzZTtwcml2YXRlIGJvb2wgX19Qcm9wZXJ0eV9fSW5pdGlhbGl6ZXJfX0hpZGVUaW55TGFiZWw9ZmFsc2U7cHJpdmF0ZSBkZWNpbWFsIF9fUHJvcGVydHlfX0luaXRpYWxpemVyX19PZmZzZXQ9MDtwcml2YXRlIGJvb2wgX19Qcm9wZXJ0eV9fSW5pdGlhbGl6ZXJfX0JvbGQ9ZmFsc2U7fVxyXG59IiwidXNpbmcgU3lzdGVtO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIE5ldHdvcmtcclxuICAgIHtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBSZXR5cGVkLmpxdWVyeS5KUXVlcnlBamF4U2V0dGluZ3MgR2V0QWpheE9wdGlvbnMob2JqZWN0IEpzb25GaWxlLCBib29sIEFzeW5jID0gdHJ1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmV0eXBlZC5qcXVlcnkuSlF1ZXJ5QWpheFNldHRpbmdzKClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYXN5bmMgPSBBc3luYyxcclxuICAgICAgICAgICAgICAgIHVybCA9IFNldHRpbmdzLk5ldHdvcmtVUkwsXHJcbiAgICAgICAgICAgICAgICBjYWNoZSA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZGF0YSA9IEpzb25GaWxlID09IG51bGwgPyBzdHJpbmcuRW1wdHkgOiBSZXR5cGVkLmVzNS5KU09OLnN0cmluZ2lmeShKc29uRmlsZSksXHJcbiAgICAgICAgICAgICAgICBkYXRhVHlwZSA9IFwianNvblwiLFxyXG4gICAgICAgICAgICAgICAgY29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICAgICAgICAgIHR5cGUgPSBcIlBPU1RcIlxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGNsYXNzIE1ldGhvZFJlcXVlc3RcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgTWV0aG9kO1xyXG4gICAgICAgICAgICBwdWJsaWMgb2JqZWN0W10gQXJndW1lbnRzO1xyXG4gICAgICAgICAgICBwdWJsaWMgc3RyaW5nIEludGVyZmFjZTtcclxuXHJcbiAgICAgICAgICAgIHB1YmxpYyBNZXRob2RSZXF1ZXN0KHN0cmluZyBpbnRlcmZhY2VOYW1lLCBzdHJpbmcgbWV0aG9kLCBwYXJhbXMgb2JqZWN0W10gYXJndW1lbnRzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBNZXRob2QgPSBtZXRob2Q7XHJcbiAgICAgICAgICAgICAgICBBcmd1bWVudHMgPSBhcmd1bWVudHM7XHJcbiAgICAgICAgICAgICAgICBJbnRlcmZhY2UgPSBpbnRlcmZhY2VOYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBbT2Jzb2xldGUoXCJObyBMb25nZXIgVXNlZCFcIildXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIEludm9rZU1ldGhvZFVJKHN0cmluZyBpbnRlcmZhY2VOYW1lLCBzdHJpbmcgbWV0aG9kLCBBY3Rpb248b2JqZWN0LCBzdHJpbmcsIFJldHlwZWQuanF1ZXJ5LkpRdWVyeVhIUj4gU3VjY2VzcyA9IG51bGwsIEFjdGlvbjxSZXR5cGVkLmpxdWVyeS5KUXVlcnlYSFIsIHN0cmluZywgc3RyaW5nPiBFcnJvciA9IG51bGwsIHBhcmFtcyBvYmplY3RbXSBhcmd1bWVudHMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFtPYnNvbGV0ZShcIk5vIExvbmdlciBVc2VkIVwiKV1cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgSW52b2tlTWV0aG9kVUlDb250cm9sKHN0cmluZyBpbnRlcmZhY2VOYW1lLCBzdHJpbmcgbWV0aG9kLCBQcm9ncmVzc0NvbnRyb2wgcHJvZ3Jlc3NDb250cm9sLCBBY3Rpb248b2JqZWN0LCBzdHJpbmcsIFJldHlwZWQuanF1ZXJ5LkpRdWVyeVhIUj4gU3VjY2VzcyA9IG51bGwsIEFjdGlvbjxSZXR5cGVkLmpxdWVyeS5KUXVlcnlYSFIsIHN0cmluZywgc3RyaW5nPiBFcnJvciA9IG51bGwsIHBhcmFtcyBvYmplY3RbXSBhcmd1bWVudHMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFtPYnNvbGV0ZShcIk5vIExvbmdlciBVc2VkIVwiKV1cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgSW52b2tlTWV0aG9kKHN0cmluZyBpbnRlcmZhY2VOYW1lLCBzdHJpbmcgbWV0aG9kLCBBY3Rpb248b2JqZWN0LCBzdHJpbmcsIFJldHlwZWQuanF1ZXJ5LkpRdWVyeVhIUj4gU3VjY2VzcyA9IG51bGwsIEFjdGlvbjxSZXR5cGVkLmpxdWVyeS5KUXVlcnlYSFIsIHN0cmluZywgc3RyaW5nPiBFcnJvciA9IG51bGwsIHBhcmFtcyBvYmplY3RbXSBhcmd1bWVudHMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBQb3N0SnNvbihuZXcgTWV0aG9kUmVxdWVzdChpbnRlcmZhY2VOYW1lLCBtZXRob2QsIGFyZ3VtZW50cyksIChnbG9iYWw6OlN5c3RlbS5BY3Rpb248b2JqZWN0LCBzdHJpbmcsIGdsb2JhbDo6UmV0eXBlZC5qcXVlcnkuSlF1ZXJ5WEhSPilTdWNjZXNzLCAoZ2xvYmFsOjpTeXN0ZW0uQWN0aW9uPGdsb2JhbDo6UmV0eXBlZC5qcXVlcnkuSlF1ZXJ5WEhSLCBzdHJpbmcsIHN0cmluZz4pRXJyb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgW09ic29sZXRlKFwiTm8gTG9uZ2VyIFVzZWQhXCIpXVxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBQb3N0SnNvbihvYmplY3QgSnNvbkZpbGUsIEFjdGlvbjxvYmplY3QsIHN0cmluZywgUmV0eXBlZC5qcXVlcnkuSlF1ZXJ5WEhSPiBTdWNjZXNzID0gbnVsbCwgQWN0aW9uPFJldHlwZWQuanF1ZXJ5LkpRdWVyeVhIUiwgc3RyaW5nLCBzdHJpbmc+IEVycm9yID0gbnVsbCwgYm9vbCBBc3luYyA9IHRydWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFtPYnNvbGV0ZShcIk5vIExvbmdlciBVc2VkIVwiKV1cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgUG9zdEpzb25Qcm9ncmVzc0NvbnRyb2wob2JqZWN0IEpzb25GaWxlLCBQcm9ncmVzc0NvbnRyb2wgcHJvZ3Jlc3NDb250cm9sLCBBY3Rpb248b2JqZWN0LCBzdHJpbmcsIFJldHlwZWQuanF1ZXJ5LkpRdWVyeVhIUj4gU3VjY2VzcyA9IG51bGwsIEFjdGlvbjxSZXR5cGVkLmpxdWVyeS5KUXVlcnlYSFIsIHN0cmluZywgc3RyaW5nPiBFcnJvciA9IG51bGwsIGJvb2wgQXN5bmMgPSB0cnVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFtPYnNvbGV0ZShcIk5vIExvbmdlciBVc2VkIVwiKV1cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgUG9zdEpzb25Qcm9ncmVzc0Zvcm0ob2JqZWN0IEpzb25GaWxlLCBBY3Rpb248b2JqZWN0LCBzdHJpbmcsIFJldHlwZWQuanF1ZXJ5LkpRdWVyeVhIUj4gU3VjY2VzcyA9IG51bGwsIEFjdGlvbjxSZXR5cGVkLmpxdWVyeS5KUXVlcnlYSFIsIHN0cmluZywgc3RyaW5nPiBFcnJvciA9IG51bGwsIGJvb2wgQXN5bmMgPSB0cnVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBbT2Jzb2xldGUoXCJObyBMb25nZXIgVXNlZCFcIildXHJcbiAgICAgICAgcHVibGljIGNsYXNzIE5ldHdvcmtQcm9ncmVzc0Zvcm0gOiBGb3JtXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwdWJsaWMgUHJvZ3Jlc3NDb250cm9sIHByb2dyZXNzQ29udHJvbDtcclxuICAgICAgICAgICAgcHVibGljIFNpbXBsZURpYWxvZ0J1dHRvbiBidXR0b25DYW5jZWw7XHJcblxyXG4gICAgICAgICAgICBwdWJsaWMgTmV0d29ya1Byb2dyZXNzRm9ybShzdHJpbmcgX3RleHQgPSBcIkxvYWRpbmcuLi5cIilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uTGlucTtcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcbnVzaW5nIFN5c3RlbS5UaHJlYWRpbmcuVGFza3M7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgUGVuIDogSURpc3Bvc2FibGVcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgQnJ1c2ggQnJ1c2g7XHJcbiAgICAgICAgcHVibGljIGZsb2F0IFdpZHRoO1xyXG4gICAgICAgIHB1YmxpYyBEYXNoU3R5bGUgRGFzaFN0eWxlO1xyXG5cclxuICAgICAgICBwdWJsaWMgUGVuKENvbG9yIGNvbG9yKSA6IHRoaXMoY29sb3IsIDEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBQZW4oQ29sb3IgY29sb3IsIGZsb2F0IHdpZHRoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgV2lkdGggPSB3aWR0aDtcclxuICAgICAgICAgICAgQnJ1c2ggPSBuZXcgU29saWRCcnVzaChjb2xvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgUGVuKEJydXNoIGJydXNoLCBmbG9hdCB3aWR0aClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFdpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgICAgIEJydXNoID0gYnJ1c2g7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgUGVuKEJydXNoIGJydXNoKSA6IHRoaXMoYnJ1c2gsIDEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERpc3Bvc2UoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgZW51bSBEYXNoU3R5bGVcclxuICAgIHsgICAgICAgIFxyXG4gICAgICAgIFNvbGlkID0gMCwgICAgICAgIFxyXG4gICAgICAgIERhc2ggPSAxLCAgICAgICAgXHJcbiAgICAgICAgRG90ID0gMiwgICAgICAgIFxyXG4gICAgICAgIERhc2hEb3QgPSAzLCAgICAgICAgXHJcbiAgICAgICAgRGFzaERvdERvdCA9IDQsICAgICAgICBcclxuICAgICAgICBDdXN0b20gPSA1IC8vIE5vdCB5ZXQgaW1wbGVtZW50ZWRcclxuICAgIH1cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIHN0YXRpYyBjbGFzcyBSZXNvdXJjZU1hbmFnZXJcclxuICAgIHtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBjYWNoZVJlc291cmNlU3RyaW5nID0gbmV3IERpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+KCk7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEdldFJlc291cmNlU3RyaW5nKHN0cmluZyBuYW1lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoY2FjaGVSZXNvdXJjZVN0cmluZy5Db250YWluc0tleShuYW1lKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZVJlc291cmNlU3RyaW5nW25hbWVdO1xyXG4gICAgICAgICAgICByZXR1cm4gKGNhY2hlUmVzb3VyY2VTdHJpbmdbbmFtZV0gPSBTZXR0aW5ncy5HZXRTdHlsZVJ1bGVWYWx1ZShTZXR0aW5ncy5yZXNvdXJjZU1hbmFuZ2VyU2hlZXRzLCBcImNvbnRlbnRcIiwgXCIuXCIgKyBuYW1lKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwidXNpbmcgQnJpZGdlO1xyXG51c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIFNldHRpbmdzXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgTmV0d29ya1VSTCA9IFwiSG9zdC5hc2h4XCI7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgUmVzb3VyY2VVUkwgPSBcIi4vaW1hZ2VzL1wiO1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBBdXRvUmVuZGVyID0gdHJ1ZTtcclxuICAgICAgICBwdWJsaWMgY29uc3Qgc3RyaW5nIEZvbnQgPSBcIjguMjVwdCBcXFwiVGFob21hXFxcIlwiO1xyXG4gICAgICAgIC8vcHVibGljIGNvbnN0IHN0cmluZyBGb250ID0gXCI4LjI1cHQgVGFob21hXCI7Ly9Db25zb2xhc1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZGVjaW1hbCBUYXhQZXJjZW50IHsgZ2V0OyBzZXQ7IH1cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgQWxpZ25Gb3JtVG9HcmlkID0gZmFsc2U7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBpbnQgQWxpZ25tZW50Rm9yRm9ybSA9IDA7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgRGVmYXVsdEZvbnQgPSBcIjguMjVwdCBcXFwiVGFob21hXFxcIlwiO1xyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIE9ubHkgZm9yIGZpcmVmb3ggLSBhcyBubyBlcnJvciB3aXRoIG51bWJlciBpbnB1dFxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIE9uRm9jdXNTZWxlY3RBbGwgPSB0cnVlO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFJldHlwZWQuZG9tLlN0eWxlU2hlZXQgRGVmYXVsdFN0eWxlU2hlZXQ7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBSZXR5cGVkLmRvbS5TdHlsZVNoZWV0IFBsdWdpblN0eWxlU2hlZXQ7XHJcbiAgICAgICAgaW50ZXJuYWwgc3RhdGljIExpc3Q8UmV0eXBlZC5kb20uU3R5bGVTaGVldD4gcmVzb3VyY2VNYW5hbmdlclNoZWV0cyA9IG5ldyBMaXN0PFJldHlwZWQuZG9tLlN0eWxlU2hlZXQ+KCk7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBHcmlkVmlld0F1dG9Db2x1bW5HZW5lcmF0ZUZvcm1hdEFzRGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBHcmlkVmlld0F1dG9Db2x1bW5Gb3JtYXREYXRlcyA9IHRydWU7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIEdyaWRWaWV3Qmx1ck9uU2Nyb2xsID0gZmFsc2U7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBpbnQgR3JpZFZpZXdSb3dTY3JvbGxQYWRkaW5nID0gMDtcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIEdyaWRWaWV3U2Nyb2xsRGVsYXllZCA9IGZhbHNlO1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IEdyaWRWaWV3U2Nyb2xsRGVsYXlNUyA9IDI1O1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGludCBDb250ZXh0TWVudVN0YXJ0aW5nWkluZGV4ID0gNTAwO1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IENvbnRleHRNZW51TWluV2lkdGggPSAyMDA7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IE1lc3NhZ2VGb3JtVGV4dE1heGltdW1IZWlnaHRJblB4ID0gNTAwO1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IE1lc3NhZ2VGb3JtVGV4dE1pbmltdW1IZWlnaHRJblB4ID0gMzI7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBpbnQgTWVzc2FnZUZvcm1NaW5pbXVtV2lkdGhJblB4ID0gMTk1O1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIERhdGVQb3NpdGlvbiBEYXlQb3NpdGlvbiA9IERhdGVQb3NpdGlvbi5GaXJzdDtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIERhdGVQb3NpdGlvbiBNb250aFBvc2l0aW9uID0gRGF0ZVBvc2l0aW9uLlNlY29uZDtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIERhdGVQb3NpdGlvbiBZZWFyUG9zaXRpb24gPSBEYXRlUG9zaXRpb24uVGhpcmQ7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBEaXNhYmxlVGV4dFBvcHVwRWRpdG9yID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEV4cHJlc3NDcmFmdENzc0Jhc2U2NCA9IFwiTG1OdmJuUnliMndnZXcwS0xXMXZlaTExYzJWeUxYTmxiR1ZqZERwdWIyNWxPdzBLTFcxekxYVnpaWEl0YzJWc1pXTjBPbTV2Ym1VN0RRb3RkMlZpYTJsMExYVnpaWEl0YzJWc1pXTjBPbTV2Ym1VN0RRcGpiMnh2Y2pvak5EQTBNRFF3T3cwS2NHOXphWFJwYjI0NllXSnpiMngxZEdVN0RRcDFjMlZ5TFhObGJHVmpkRHB1YjI1bE93MEtabTl1ZERvNExqSTFjSFFnVkdGb2IyMWhEUXA5RFFvTkNpNXpaV3hsWTNScGIyNGdldzBLTFcxdmVpMTFjMlZ5TFhObGJHVmpkRHAwWlhoME93MEtMVzF6TFhWelpYSXRjMlZzWldOME9uUmxlSFE3RFFvdGQyVmlhMmwwTFhWelpYSXRjMlZzWldOME9uUmxlSFE3RFFwMWMyVnlMWE5sYkdWamREcDBaWGgwRFFwOURRb05DaTVqYjI1MGNtOXNPbVp2WTNWek9tNXZkQ2d1WjNKcFpDa2dldzBLWW05eVpHVnlPbk52Ykdsa0lERndlQ0FqTURBM1lXTmpPdzBLWW05NExYTm9ZV1J2ZHpvd0lEQWdNVEJ3ZUNBdE1uQjRJSEpuWW1Fb01Dd3dMREFzTUM0eU5Ta05DbjBOQ2cwS0xtUnBjMkZpYkdWa09tNXZkQ2d1Y21saVltOXVZblYwZEc5dUtTQjdEUW90Ylc5NkxYVnpaWEl0YzJWc1pXTjBPbTV2Ym1VN0RRb3RiWE10ZFhObGNpMXpaV3hsWTNRNmJtOXVaVHNOQ2kxM1pXSnJhWFF0ZFhObGNpMXpaV3hsWTNRNmJtOXVaVHNOQ21OMWNuTnZjanB1YjNRdFlXeHNiM2RsWkRzTkNtWnBiSFJsY2pwaWNtbG5hSFJ1WlhOektEa3dKU2tnWjNKaGVYTmpZV3hsS0RFd01DVXBJR052Ym5SeVlYTjBLRFl3SlNrZ1luSnBaMmgwYm1WemN5Z3hOREFsS1NCamIyNTBjbUZ6ZENnMk1DVXBPdzBLZFhObGNpMXpaV3hsWTNRNmJtOXVaUTBLZlEwS0RRb3VZMjl1ZEhKdmJEcGthWE5oWW14bFpDQjdEUW90Ylc5NkxYVnpaWEl0YzJWc1pXTjBPbTV2Ym1VN0RRb3RiWE10ZFhObGNpMXpaV3hsWTNRNmJtOXVaVHNOQ2kxM1pXSnJhWFF0ZFhObGNpMXpaV3hsWTNRNmJtOXVaVHNOQ21KaFkydG5jbTkxYm1RdFkyOXNiM0k2STBORFF6c05DbU4xY25OdmNqcHViM1F0WVd4c2IzZGxaRHNOQ25WelpYSXRjMlZzWldOME9tNXZibVVOQ24wTkNnMEtMbWx1Y0hWMFkyOXVkSEp2YkRweVpXRmtMVzl1YkhrZ2V3MEtMVzF2ZWkxMWMyVnlMWE5sYkdWamREcDBaWGgwT3cwS0xXMXpMWFZ6WlhJdGMyVnNaV04wT25SbGVIUTdEUW90ZDJWaWEybDBMWFZ6WlhJdGMyVnNaV04wT25SbGVIUTdEUXBpWVdOclozSnZkVzVrTFdOdmJHOXlPaU5HTUVZd1JqQTdEUXAxYzJWeUxYTmxiR1ZqZERwMFpYaDBEUXA5RFFvTkNpNXplWE4wWlcwdFptOXliUzFqYjJ4c1pXTjBhVzl1TFc5MlpYSnNZWGtnZXcwS2FHVnBaMmgwT2pFd01DVTdEUXB2Y0dGamFYUjVPaTQxT3cwS2QybGtkR2c2TVRBd0pRMEtmUTBLRFFvdVlteDFjaUI3RFFwbWFXeDBaWEk2WW14MWNpZzJjSGdwRFFwOURRb05DaTVoY0hCc2FXTmhkR2x2YmkxcFkyOXVJSHNOQ21KaFkydG5jbTkxYm1RdFkyOXNiM0k2STBZd1JqQkdNRHNOQ21KdmNtUmxjaTF5WVdScGRYTTZOVEFsT3cwS2FHVnBaMmgwT2pRNGNIZzdEUXBzWldaME9qUndlRHNOQ25SdmNEbzBjSGc3RFFwM2FXUjBhRG8wT0hCNE93MEtlaTFwYm1SbGVEb3hNREF3TUEwS2ZRMEtEUW91WVhCd2JHbGpZWFJwYjI0dGFXTnZianBvYjNabGNpQjdEUXBpWVdOclozSnZkVzVrTFdOdmJHOXlPaU5tWm1ZTkNuME5DZzBLTG1Gd2NHeHBZMkYwYVc5dUxXbGpiMjQ2WVdOMGFYWmxJSHNOQ21KaFkydG5jbTkxYm1RdFkyOXNiM0k2STBORFJUTkdOQTBLZlEwS0RRb3VabUYyTFdsamIyNGdldzBLYUdWcFoyaDBPak15Y0hnN0RRcHNaV1owT2pod2VEc05DblJ2Y0RvNGNIZzdEUXAzYVdSMGFEb3pNbkI0T3cwS2VpMXBibVJsZURveE1EQXdNQTBLZlEwS0RRb3VjbWxpWW05dVkyOXVkSEp2YkNCN0RRcGlZV05yWjNKdmRXNWtMV052Ykc5eU9pTXdNRGRoWTJNN0RRcGliM0prWlhJdFltOTBkRzl0TFdOdmJHOXlPaU5ETlVNMVF6VTdEUXBpYjNKa1pYSXRZbTkwZEc5dExYTjBlV3hsT25OdmJHbGtPdzBLWW05eVpHVnlMV0p2ZEhSdmJTMTNhV1IwYURwMGFHbHVPdzBLWW05eVpHVnlMV3hsWm5RdFkyOXNiM0k2SXpBd04yRmpZenNOQ21KdmNtUmxjaTFzWldaMExYTjBlV3hsT25OdmJHbGtPdzBLWW05eVpHVnlMV3hsWm5RdGQybGtkR2c2ZEdocGJqc05DbUp2Y21SbGNpMXlhV2RvZEMxamIyeHZjam9qTURBM1lXTmpPdzBLWW05eVpHVnlMWEpwWjJoMExYTjBlV3hsT25OdmJHbGtPdzBLWW05eVpHVnlMWEpwWjJoMExYZHBaSFJvT25Sb2FXNDdEUXBvWldsbmFIUTZNVFUwY0hnN0RRcHNaV1owT2pBN0RRcDBiM0E2TURzTkNuZHBaSFJvT21OaGJHTW9NVEF3SlNBdElESndlQ2tOQ24wTkNnMEtMbkpwWW1KdmJtTnZiblJ5YjJ3dFkyOXRjR0ZqZENCN0RRcG9aV2xuYUhRNk1USTRjSGdoYVcxd2IzSjBZVzUwRFFwOURRb05DaTV5YVdKaWIyNXdZV2RsSUhzTkNtSmhZMnRuY205MWJtUXRZMjlzYjNJNkkwWXdSakJHTURzTkNtaGxhV2RvZERveE1EQndlRHNOQ214bFpuUTZNRHNOQ205MlpYSm1iRzkzTFhnNllYVjBienNOQ205MlpYSm1iRzkzTFhrNmFHbGtaR1Z1T3cwS2RHOXdPalUwY0hnN0RRcDNhV1IwYURveE1EQWxEUXA5RFFvTkNpNXlhV0ppYjI1d1lXZGxMV052YlhCaFkzUWdldzBLZEc5d09qSTRjSGdoYVcxd2IzSjBZVzUwRFFwOURRb05DaTV5YVdKaWIyNW5jbTkxY0NCN0RRcGlZV05yWjNKdmRXNWtMV052Ykc5eU9pTkdNRVl3UmpBN0RRcG9aV2xuYUhRNk1UQXdKVHNOQ214bFpuUTZNQTBLZlEwS0RRb3VjbWxpWW05dVluVjBkRzl1SUhzTkNtSmhZMnRuY205MWJtUXRZMjlzYjNJNkkwWXdSakJHTURzTkNtTjFjbk52Y2pwd2IybHVkR1Z5T3cwS2FHVnBaMmgwT2pZNGNIZzdEUXAwYjNBNk0zQjREUXA5RFFvTkNpNXlhV0ppYjI1aWRYUjBiMjVqWVhCMGFXOXVJSHNOQ21KdmRIUnZiVG93T3cwS2JHVm1kRG93T3cwS2RHVjRkQzFoYkdsbmJqcGpaVzUwWlhJN0RRcDBiM0E2TkRGd2VEc05DbmRwWkhSb09qRXdNQ1VOQ24wTkNnMEtMbkpwWW1KdmJtSjFkSFJ2Ym1samIyNGdldzBLYUdWcFoyaDBPak15Y0hnN0RRcHNaV1owT21OaGJHTW9OVEFsSUMwZ01UWndlQ2s3RFFwMGIzQTZNM0I0T3cwS2QybGtkR2c2TXpKd2VBMEtmUTBLRFFvdWNtbGlZbTl1WW5WMGRHOXVjMjFoYkd3Z2V3MEtZbUZqYTJkeWIzVnVaQzFqYjJ4dmNqb2pSakJHTUVZd093MEtZM1Z5YzI5eU9uQnZhVzUwWlhJN0RRcG9aV2xuYUhRNk1qSndlQTBLZlEwS0RRb3VjbWxpWW05dVluVjBkRzl1YzIxaGJHeGpZWEIwYVc5dUlIc05DbUp2ZEhSdmJUb3dPdzBLYUdWcFoyaDBPbU5oYkdNb01UQXdKU0F0SURad2VDazdEUXBzYVc1bExXaGxhV2RvZERveE9YQjRPdzBLZEdWNGRDMWhiR2xuYmpwc1pXWjBPdzBLZEc5d09qQU5DbjBOQ2cwS0xuSnBZbUp2Ym1KMWRIUnZibk50WVd4c2FXTnZiaUI3RFFwb1pXbG5hSFE2TVRad2VEc05DbXhsWm5RNk5uQjRPdzBLZEc5d09qTndlRHNOQ25kcFpIUm9PakUyY0hnTkNuME5DZzBLTG5KcFltSnZibk5sY0dWeVlYUnZjaUI3RFFwaVlXTnJaM0p2ZFc1a0xXTnZiRzl5T2lORE5VTTFRelU3RFFwb1pXbG5hSFE2TlRod2VEc05DblJ2Y0RvNGNIZzdEUXAzYVdSMGFEb3hjSGdOQ24wTkNnMEtMbkpwWW1KdmJtZHliM1Z3WTJGd2RHbHZiaUI3RFFwaWIzUjBiMjA2TURzTkNteGxablE2TURzTkNuUmxlSFF0WVd4cFoyNDZZMlZ1ZEdWeU93MEtkRzl3T2pjM2NIZzdEUXAzYVdSMGFEb3hNREFsRFFwOURRb05DaTV5YVdKaWIyNXdZV2RsYUdWaFpHVnlJSHNOQ21obGFXZG9kRG95TTNCNE93MEtiR2x1WlMxb1pXbG5hSFE2TWpKd2VEc05DblJsZUhRdFlXeHBaMjQ2WTJWdWRHVnlPdzBLZEc5d09qSTVjSGc3RFFwOURRb05DaTV5YVdKaWIyNXdZV2RsYUdWaFpHVnlMV052YlhCaFkzUWdldzBLZEc5d09qVndlQ0ZwYlhCdmNuUmhiblFOQ24wTkNnMEtMblJoWW1OdmJuUnliMnh3WVdkbElIc05DbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJMFl3UmpCR01Ec05DbUp2Y21SbGNpMWliM1IwYjIwdFkyOXNiM0k2STBNMVF6VkROVHNOQ21KdmNtUmxjaTFpYjNSMGIyMHRjM1I1YkdVNmMyOXNhV1E3RFFwaWIzSmtaWEl0WW05MGRHOXRMWGRwWkhSb09uUm9hVzQ3RFFwaWIzSmtaWEl0YkdWbWRDMWpiMnh2Y2pvalF6VkROVU0xT3cwS1ltOXlaR1Z5TFd4bFpuUXRjM1I1YkdVNmMyOXNhV1E3RFFwaWIzSmtaWEl0YkdWbWRDMTNhV1IwYURwMGFHbHVPdzBLWW05eVpHVnlMWEpwWjJoMExXTnZiRzl5T2lORE5VTTFRelU3RFFwaWIzSmtaWEl0Y21sbmFIUXRjM1I1YkdVNmMyOXNhV1E3RFFwaWIzSmtaWEl0Y21sbmFIUXRkMmxrZEdnNmRHaHBianNOQ21obGFXZG9kRHBqWVd4aktERXdNQ1VnTFNBeU5uQjRLVHNOQ214bFpuUTZNRHNOQ205MlpYSm1iRzkzT21GMWRHODdEUXAwYjNBNk1qVndlRHNOQ25kcFpIUm9PbU5oYkdNb01UQXdKU0F0SURKd2VDa05DbjBOQ2cwS0xuUmhZbU52Ym5SeWIyeHdZV2RsYUdWaFpHVnlJSHNOQ21KaFkydG5jbTkxYm1RdFkyOXNiM0k2STBZd1JqQkdNRHNOQ21obGFXZG9kRG95TVhCNE93MEtiR2x1WlMxb1pXbG5hSFE2TWpKd2VEc05DblJsZUhRdFlXeHBaMjQ2WTJWdWRHVnlPdzBLZEc5d09qQTdEUXA5RFFvTkNpNTBZV0pqYjI1MGNtOXNjR0ZuWldobFlXUmxjaTFvYVdSa1pXNGdldzBLWW05eVpHVnlMV052Ykc5eU9pTkdNRVl3UmpBZ0kwWXdSakJHTUNCMGNtRnVjM0JoY21WdWREc05DbUp2Y21SbGNpMXpkSGxzWlRwemIyeHBaRHNOQ21KdmNtUmxjaTEzYVdSMGFEcDBhR2x1T3cwS1kzVnljMjl5T25CdmFXNTBaWEk3RFFwOURRb05DaTUwWVdKamIyNTBjbTlzY0dGblpXaGxZV1JsY2kxaFkzUnBkbVVnZXcwS1ltOXlaR1Z5TFdOdmJHOXlPaU13TURkaFkyTWdJME0xUXpWRE5TQWpSakJHTUVZd093MEtZbTl5WkdWeUxYTjBlV3hsT25OdmJHbGtPdzBLWW05eVpHVnlMWFJ2Y0MxM2FXUjBhRG95Y0hnN0RRcGliM0prWlhJdGQybGtkR2c2ZEdocGJqc05DbXhwYm1VdGFHVnBaMmgwT2pJeGNIZzdEUXBvWldsbmFIUTZNak53ZURzTkNuME5DZzBLTG5SaFltTnZiblJ5YjJ4d1lXZGxhR1ZoWkdWeUxXTnNiM05sWW5WMGRHOXVJSHNOQ21KdmNtUmxjam94Y0hnZ2MyOXNhV1FnZEhKaGJuTndZWEpsYm5RN0RRcGpiMnh2Y2pvalF6VkROVU0xT3cwS2FHVnBaMmgwT2pFeWNIZzdEUXBzYVc1bExXaGxhV2RvZERveE1uQjRPdzBLY21sbmFIUTZNM0I0T3cwS2RHOXdPalJ3ZURzTkNuZHBaSFJvT2pFeWNIZ05DbjBOQ2cwS0xuUmhZbU52Ym5SeWIyeHdZV2RsYUdWaFpHVnlMV05zYjNObFluVjBkRzl1T21GbWRHVnlJSHNOQ21OdmJuUmxiblE2SjFnbkRRcDlEUW9OQ2k1cGJuQjFkR052Ym5SeWIyd2dldzBLTFcxdmVpMTFjMlZ5TFhObGJHVmpkRHAwWlhoME93MEtMVzF6TFhWelpYSXRjMlZzWldOME9tNXZibVU3RFFvdGQyVmlhMmwwTFhWelpYSXRjMlZzWldOME9uUmxlSFE3RFFwaVlXTnJaM0p2ZFc1a0xXTnZiRzl5T2lObVptWTdEUXBpYjNKa1pYSTZNWEI0SUhOdmJHbGtJQ05ETlVNMVF6VTdEUXBpYjNndGMybDZhVzVuT21KdmNtUmxjaTFpYjNnN0RRcG9aV2xuYUhRNk1qQndlRHNOQ214cGJtVXRhR1ZwWjJoME9qRTRjSGc3RFFwdFlYSm5hVzQ2TURzTkNuQmhaR1JwYm1jNk1Ec05DblJsZUhRdGFXNWtaVzUwT2pOd2VEc05DblZ6WlhJdGMyVnNaV04wT25SbGVIUTdEUXBpYjNKa1pYSXRjbUZrYVhWek9qSndlRHNOQ24wTkNnMEtMbVJ5YjNCa2IzZHVJSHNOQ21KaFkydG5jbTkxYm1RNmRYSnNLR1JoZEdFNmFXMWhaMlV2Y0c1bk8ySmhjMlUyTkN4cFZrSlBVbmN3UzBkbmIwRkJRVUZPVTFWb1JWVm5RVUZCUVd0QlFVRkJSa05CV1VGQlFVTllWVGhhY2tGQlFVRkRXRUpKVjFoTlFVRkJOMFJCUVVGUGQzZElTR0kyYUd0QlFVRkxWREpzUkZFeFFsRmhSemt3WWpOT2IySXpRV2RUVlU1RVNVaENlV0l5V25CaVIxVkJRVWhxWVc1V1RtNVdSbEJ3Um1vek16TjJVa05UTkdsQmJFVjBkbFZvVlVsSlJrcERhVFJCVld0VFdYRkpVV3RSVTI5bmFHOWthMVpWWTBWU1VsVlZSVWM0YVdkcFFVOVBhbTlEVFVaV1JYTkVTVzlMTWtGbWEwbGhTMDluTms5SmFYTnlOelJZZFdwaE9XRTRPU3RpVGk5eVdGaFFkV1Z6T0RVeWVucDNaa0ZEUVhsWFUwUk9VazVaUVUxeFZVbGxSV1ZEUkhnNFZFYzBaVkYxVVVsRlMwcElRVUZGUVdsNldrTkdlaTlUVFVKQlVHZ3JVRVIzY2tselFVaDJaMEZDWlU1TlRFTkJSRUZVV25aQlRVSjVTQzkzTDNGUmNHeGpRVmxEUlVGalFqQnJWR2hNUTBsQlZVRkZRalpxYTB0dFFVVkNSMEZaUTJSdFExcFVRVXRCUlVGSFJFeFpNa3hxUVVaQmRFRkhRVzVtSzJKVVFVbERaQ3RLYkRkQlVVSmliRU5GVmtGaFExSkJRMEZVV2xsb1JVRkhaemRCUzNwUVZtOXdSa0ZHWjNkQlFsSnRVemhSTlVGT1ozUkJSRUpLVmpKYVNVRk1Rek5CVFVSUFJVRjFlVUZCWjAxQlJFSlNhVWxWY0VGQlVqZEJSMFJKU1hsT05FRkpVMXBCUWxKSE9HeGpPRGhUZFhWRlQyTnhRVUZDTkcxaVNUaDFVMUUxVWxsR1lrTkRNWGhDTVdSWVRHZzBiM3ByYTFoTGVGRXlXVkZLYUcxclFYVjNibTFhUjFSTFFrNUJMMmM0T0hkQlFVdERVa1pTU0dkbkwxQTVaVTAwVDNKek4wOU9iell5Ukd3NGREWnlPRWN2ZVVwcFdYVlFLelZqSzNKalJVRkJRVTlHTUdaMFNDdE1ReXQ2UjI5Qk4wSnZRblF2Y1Vsc04yZFNiMWhuZFdka1ptVk1XbkpKVUZGTVZVRnZUMjVoVmk5T2R5dElORGhRUlZkb2EweHVXakpsV0dzMVRtaExlRVZLWWxsamNGaG1aalZ1ZDJ3dlFWWXZNWE1yV0RRNEwxQm1NVFJNTjJsS1NVVjVXRmxHU0VKUWFtZDNjM293VkV0VlkzbzFTVXBvUjB4ak5XODVTQzlNWTB3dkwzZGtNSGxNUlZOWFN6VlhRMjlWTkRGRlUyTlpOVVZ0YjNwNlRYRlZhV2xWUzFOTFkxVnNNSFk1YXpSME9ITXJkMDByTTNwVlFYTkhieXRCV0hWU1RHRm9aRmwzVURKVGVXTlJWMGhVUVRSMlkwRkJVRXMzWWpoSVZVdEJaMFJuUjJsRU5HTTVNeThyT0M4dlZXVm5TbEZEUVZwcmJWTmpVVUZCV0d0UmEweHNWRXR6ZWk5SVEwRkJRVkpMUTBKTGNrSkNSeTlVUWtkRGVrRkNhSHBDUW1SNlFrTXZlR2RPYjFKRFNrMVVRMUZvUWtORGJWTkJTRWhLWjB0aGVVTlJhV2xIZW1KQlpFdHRRWFl4UlVGa1RrMUNVbUZKWVZSalFUUjFkMnhYTkVScU1YZEVMM0JvUTBvM1FrdE1lVUpEVVZKQ2VVRm5WRmxUU0dGcFFVWnBhV3huYW1wbloxaHRXVmcwU1dOR1NVSkNTMHhLUTBSS2FVSlNVa2xyZFZKT1ZXZDRWVzl3VlVsR1ZrbElaa2s1WTJkSk5XZ3hlRWQxY0VVM2VVRkJlV2QyZVVkMlJXTjRiRWxIZVZWVU0xVkVURlpFZFdGbk0wZHZVa2R2WjNaUldraFJlRzF2T0ZkdlNuWlJZM0pSWVZCWmR6SnZaV1pSY1RKblVESnZPQ3RST0dOM2QwOW5XVUo2VUVWaVJFRjFlSE5PUTNOVVozTkRXazVxZVRkRmFYSkJlWEo0YUhGM1ZuRjNSSFUwYmpGWk9DdDRaSGRSVTJkVldFRkRWRmxGWkRCSloxbFNOVUpUUm1oTlYwVTNXVk5MWjJkSVExRXdSV1J2U2s1M2EwUm9Sa2hEU25sTFZIRkZkVEJLY205U0syTlJXVmxxU1hob01XaEpURU5RVjBWdk9GUk1lRUkzYVVWUVJVNTVVVk5wVlUxNVNqZHRVVUZyYlhod1JsUlRSWFJLUnpCdE5WTkpLMnR6Y1Zwek1GTkNiMnByT0c1aFdrZDFlVUo2YlZWTVEwRnllVWxZYTI1bFZFUTFSRkJyUnl0UmFEaHNjMHR1VjBwQlkyRlVORlVyU1c5VmMzQnhVMmh1YkVWUFZUQTFVVnBzYlVSS1FsWmhUMkZWZERKdmIxWlJVazVaT1dGUmNUSm9kR3hMZGxWWlpXOUZlbEl4YldwdVRtZDRXa3BUTmxkMGIzQllWRWR0WjFoaFVHUndjaXRvTUhWb1NHUnNValZQYkRsQ1dEQnpkbkJTSzJsWU5rRlFNR1IzZDA1b2FGZEVlRFJvYmt0Q2JXSkhRV05aV25oc00wZExLMWxVUzFsYU1EUnpXbmd4VVhkT2VraHliVTlsV2tRMWJIWldWbWR4ZEdsd09FWmFTRXREY0ZaTGJGTmhWa2Q1YjNaV1MyMXhjSEZ5WlhGbmRGWTRNVmhNVmtrcmNGaHNUamx5YTFwV1RURlFhbkZSYmxWc2NYUldjWEF4VVRZeFRXSlZNbVZ3VHpacFNIRnRaVzlpTVZFdmNFZzFXaTlaYTBkWFkwNU5kekE1UkhCR1IyZHpWaTlxZGsxWlowTXlUVnB6TTJkelNWZHpUbkUwV2pGblZGaEZTbkpJVGpKWWVESkxjblZaTDFJeU4ybDZNbkZ4WVVVMVVYcE9TMDB4WlhwVmRrOVZXbW80U0RRMWFIZ3JTbmd3VkdkdWJrdExaVmc0TXpaTE0yaFVka3RsU1hCSE5sa3dWRXhyZUZwV2VISnhjR0ZZYkd4cGNsTkxkRkp4TUdaeWRsUmhkVGRoWldSd2NqRkdkVEZ1TjJkUk5VSjRNRzl1V0VOa1NGbzBMMDlDV2pOdVZUbHNWRE5oWTB0d2VGcE9VRlJ5TVhKcE5uRmhObFZpYjJKMFJXUTNPWFZ3S3paWmJuSTFaV2RLTlUxaU5tWmxaV0l6Yml0b2VEbE1MekZWTDFjek5uQXZWa2hFUm1kSGMzZDNhMEowYzAxNmFHYzRlRlJXZUdKNmQyUk1PR1ppT0ZaR1JGaGpUa0ZSTmxab2JGZEhXRFJaVTFKMVpFVTRiemxXUjJwVldWQnFSMjVIV0U5TmF6UXlNMGRpWTJGcVNtZFpiVWxUV2t4VVpYQk9OM0J3VTFSaWJXMUxZVmszVkVSMFRYZzRNMDE2WVV4T01YQnJNVzE2TUhneGVreHViU3RsWWpFMWRtWjBNa0poWlVadmMzUnhhVEoxUjFaS2MzVlNZWEJzYm5WMGNuaDFhRlp2TlZkaFZsbFdWbkJrY3pCaGRHNWhNR3d4Y25WMGRUWmpVbkEzYkU5ck1EWnliblJhYm5jM1JIaDBjMjB5Y1dKalduTlBXRmxDZEhWMWRHMHlNbVpYUm01WmFHUnVkRGhYZFhjck5sUjJXazQ1ZFc0eVRpOVVNRWhFV1daYVJIRnpaRmRvTVN0ak4xSjVSa1J3VjA5ME5tRjZjSHAxVURNelJqbEtZbkJNTW1SWmVuaEVVREpFVUdwMGFGQk1TMk5TY0c1V1QySXdNR1J1UmpKbE5XTTBVSHBwU1hWS1V6Uk1URXh3WXl0TWNITmllSFF6U1habFVrdGtVRlo0V0dWR05qQjJWMlJ0TjA5aWQzVXliekkyTDNWT2RUVndOMjltWTI0NGR6QnVlVzFsVjFST2VqQk5VRWxSSzBKU05XUkZMME0xSzFaTlIzWm1ja2cxVUZFd0swSmFOMWh1U1hrNWFrdzFSbGh5WkdWM2REWldNM0YyWkdnM2VHTXJPV28xZVc0clRTczBlbmN6TTJwTVpWZFdMMDFPT0VNemVVeG1URlE0VG5adWJDdEdNekJPTDBrdk9Xc3ZNM0l2TUZGRGJtZERWVUphZDA5S1oxVkhRbGQzVERjclNIQTRTV0lyVDFCNmNtSmFabUY1TW1VeFFtcExRelZSVWxaQ2FqUkxkR2QxV0VKeVUwWnZlVTk1VVhKVFNETTFOV3BQYTJNMWNFUnZWbEZtZFdwWE1FRmthRFZ0UjB4M016Uk5TalJYU0doV1pVZFFORFYzYVVabllUQlVSMWhPV0daU00wVk9lak13VkRaU1NscEZNM0IwYmsxVk9EVnllVEZMVGxOdkszRnBOWEZRVG04emRXcFRObEE0V1hWYWJHNU5NVlpwWkZkRmJITlRlSGMxVEdseGRVNXROWE4yZEM4NE4yWlBTRFJ3TTJsREswNDNSalZuZG5sR01YZGxZVWhQZDNaVFJuQjRZWEJNYUVselQzQmFRVlJKYUU5UFNsUjNVVkpCY1hGQ1lVMUtaa2xVWkhsWFQwTnVia05JWTBwdVNXa3ZVazUwUjBreVJVNWpTMmcxVHpoclozRlVXSEZUTjBwSE9FNVlhMnQ0VkU5c1RFOVhOV2hEWlhCclRIaE5SRlY2WkcxNmNXVkdjSEF5U1Vjd2VWQlVjVGxOV1U5VGExcENlRkZ4YjJoVVdrOHlXaXR3YmpWdFdqSjVObmhzYUdKTUszaFhOa3gwZVRobGJGRm1TbUUzVDFGeVFWWmFURkZ4TWxGeFltOVdSbTl2TVhsdlNITnRaR3hXTW1FdmVsbHVTMDlhWVhKdWFYWk9OMk41ZW5sMGRWRk9OWHAyYmk4dmRFVnpTVk0wV2tzeWNGbGFURlo1TUdSWFQyRTVja2R2TlhOcWVIaGxaSE5MTkhoVlJrczBXbGRDY1hjNGRVbHhNa3R0TTFaVU5uWjBWalZsZFdaeU1HMWxhekZ5WjFZM1FubHZURUowVVVaeU5uZDBWa04xVjBabVpYWmpNU3N4WkZReFozWlhaQ3N4V1daeFIyNVNjeXRHV1cxTGNtaFVZa1kxWTFabU9XZHZNMGhxYkVjMFpIWjVjaXRhTTBwVE1IRmhka1YxVjFSUVduUktiVFpsWW1WTVdqVmlSSEJoY1d3cllWaEViVFJPTW1SeE1FUmtPVmQwVHpNeE9XdFlZa3cxWms1TFRuVTNaemRhUkhWaFR5OVFUR2s0V21GbVNucHpNRGRRTVZOclZsQlNWU3RzVVRJM2RFeGtkRmRJV0N0SE4xSTNhSFEzZGxCWk1EZE9XR0pYTjNvekwxUTNTblowZEZaQlZsWk9NVmRpVmxwbWRFb3JOMUF6VURZMlNuRjFialJzZG5SMFdHRXhUMkpZU0hSNGQxQlRRUzh3U0VsM05qSXhOMjVWTVZJelUxQldVbE5xT1ZseU5qQmpUM2g0S3lzdmNETjJaSGt3VGs1bk1WWnFXbnBITkdsT2QxSklibXMyWm1OS015OWpaVVJVY21Ga2IzZzNjazlGU0RCNE9USklWMk5rVERKd1EyMTJTMkZTY0hSVWJYWjBZbGxzZFRaVU9IY3JNR1JpY1ROdWNqaFNPWE5tUkRWM01GQkdiRFZUZGs1VmVWZHVZVFpaVEZSck1tWjVlalI1Wkd4YU1UbG1hVGMxTTBkRVltOXlXamMxTWxCUE16SnZVR0lyS3paRlNGUm9NR3RZTDJrcll6ZDJSSFpQV0ZCTE5HUlFTM2t5SzFWVVZqZG9XRzF4T0RaWU1qTnhaRTl2T0M5d1VGUlVPR1UzYmt4MVlYSnliR05oTjI1MVpYSXlNV1V5WWpNMlVuVmxUamczWkRsTU1UVTRVbUl2TVhSWFpVOVVNMlIyWms0MllpOW1Samt2V0daR2RERXJZMmxtT1hwemRUY3lXR051TjNFeU9GUTNlR1k1UlVSMFVXUnNSRE5aWmxaUU1YWXJNMDVxZGpOSU9YRjNTR1ZuT0RsSVkxSXZZMGRvV1ZCUUwzQklNV3AzT1VSQ1dTdGFhamgxUjBSWlluSnVhbWNyVDFSdWFWQXpURGsyWm5sdVVUZzVhM3A1WVdWR0x6WnBMM04xZFVaNFdYWm1kbXBXTmpsbVR6QmFhbEp2V21aNWJEVlBMMkpZZVd3dlpYSkJObmh0ZGpJNFlrTjRhRFlyZVZobmVrMVdOekJXZG5aMGQxaG1ZMlI0TTNadk9UaFFWQ3RTT0VsSU9HOHZNbW8xYzJaV1ZEQkxaamRyZUcxVWF5ODRSVUUxYW5vdlIwMTZUR1J6UVVGQlFXZFpNR2hUVkZGQlFXVnBWVUZCU1VORVFVRkVOUzkzUVVGblQydEJRVWhWZDBGQlJIRlpRVUZCVDNCblFVRkNaSFpyYkM5R1VtZEJRVUZGVmtwU1JVWlZaVTV3TUhselJVNTNSRUZOVVd4SFl6TmthVUZIWW5kalNUTm5OR1ZyY2xaV1p6QlRiRFk1V0hScVRYcFBTVEJyYkhGUmFXVlJVMU5oWjBoQlNEbDNRVUZLUkd0MmRURXdaREo2YmpKV09XOTNNaXMzUW1kRU5VVkZTVGswV0hBd00xRkJRVUZCUWtwU1ZUVkZjbXRLWjJkblBUMHBJRzV2TFhKbGNHVmhkQ0J5YVdkb2RDQXpjSGdnWTJWdWRHVnlEUXA5RFFvTkNpNXphVzF3YkdWaWRYUjBiMjRnZXcwS1ltRmphMmR5YjNWdVpDMWpiMnh2Y2pvalptSm1ZbVppT3cwS1ltOXlaR1Z5T2pGd2VDQnpiMnhwWkNBalFUWkJOa0UyT3cwS1ltOXlaR1Z5TFhKaFpHbDFjem95Y0hnN0RRcGliM2d0YzJsNmFXNW5PbUp2Y21SbGNpMWliM2c3RFFwamRYSnpiM0k2Y0c5cGJuUmxjanNOQ205MlpYSm1iRzkzT21ocFpHUmxianNOQ25CaFpHUnBibWM2TURzTkNuUmxlSFF0YjNabGNtWnNiM2M2Wld4c2FYQnphWE03RFFwM2FHbDBaUzF6Y0dGalpUcHViM2R5WVhBTkNuME5DZzBLTG1admNtMHRiV0Z1WVdkbGNpMXpkR0Z5ZENCN0RRcGlZV05yWjNKdmRXNWtPblZ5YkNoa1lYUmhPbWx0WVdkbEwzQnVaenRpWVhObE5qUXNhVlpDVDFKM01FdEhaMjlCUVVGQlRsTlZhRVZWWjBGQlFVUkJRVUZCUVc5RFFVbEJRVUZCTXpWbE5HMUJRVUZCUVZoT1UxSXdTVUZ5Y3pSak5sRkJRVUZCVW01UlZURkNRVUZEZUdwM2RqaFpVVlZCUVVGQlNtTkZhRnBqZDBGQlJITk5RVUZCTjBSQlkyUjJjVWRSUVVGQlExTlRWVkpDVmtab1NEZGtZbEpEV1VGblJrbFlhRkp1UVZOT00wRkVTak5IVTNVMFoySjFTVWRFTVZOVmJHVnFRMDlDY0V4RksxSTBUazlVTHpCVlNuUmFSRWxOVVVKcFJVMVJhR2xGVFVGcU5XSTFRekV4Ym5ObVVXaERVbXhHVEU5bFZDOVdlRGt6WlVKRWJtNWtSblZJV1RSM05uSkRaR3gxTm14ak5sUmpZMVpJWkhWdGIyVllZM0Z6Wm1kNFFVZEpZMDVDY3k5SFZrbFJlRU5IU1ZGTlFqWnRNVkJ4TlZCMmRubzViVWx3UWtOSlRWRkNhVVZOVVdocFJVeENXbXQ2UVVkdlVsa3ZNV0U0V1U5MlVVRkJRVUZDU2xKVk5VVnlhMHBuWjJjOVBTa2dibTh0Y21Wd1pXRjBPdzBLWm05dWRDMXphWHBsT2pFeWNIUTdEUXBvWldsbmFIUTZOREJ3ZURzTkNteGxablE2TURzTkNuUnZjRG93T3cwS2QybGtkR2c2TkRod2VBMEtmUTBLRFFvdVptOXliUzF0WVc1aFoyVnlMWE4wWVhKME9taHZkbVZ5SUhzTkNtSmhZMnRuY205MWJtUTZkWEpzS0dSaGRHRTZhVzFoWjJVdmNHNW5PMkpoYzJVMk5DeHBWa0pQVW5jd1MwZG5iMEZCUVVGT1UxVm9SVlZuUVVGQlJFRkJRVUZCYjBOQlNVRkJRVUV6TldVMGJVRkJRVUZCV0U1VFVqQkpRWEp6TkdNMlVVRkJRVUZTYmxGVk1VSkJRVU40YW5kMk9GbFJWVUZCUVVGS1kwVm9XbU4zUVVGRWMwMUJRVUUzUkVGalpIWnhSMUZCUVVGRGJWTlZVa0pXUm1oSU4yUlplRU52VVhkRlNWWm9ZalZPWVhOT1FrZGFRM04wUWxWR2EwdzNSR2M1ZEhSeE5sRkhPR2RLTWtaQ0wwa3lSR3RUTWtWUFZXeG5hR3ByWmxWM1ZrTm1UMFJvV0hKTFRWRjRRMGRKVVhkRFIwVlJkMmxFYTNWVlJpdEhSV1J3T0dGeWNUZE9UMVUzWmtSMWNIVTROSGsyZVZCcVdqQktRM0JLVFdSemRta3ZUbVpNV1dwdVVuVXpaRWhZZWtadVNHSlVXa28zVGpjclFqazVlWGg1UkVWQldXZ3hhMFpZTkhsMFJFZEpVWGREVEVWUFJXMDFPVmhKTDJNclpuUjRTMUZaYUVSRlNWbG9SRUZKV1ZKRWFWZEtRbE5ETTJWa2FpOUVSMGwyT0M5QlFVRkJRVVZzUmxSclUzVlJiVU5ES1NCdWJ5MXlaWEJsWVhRTkNuME5DZzBLTG1admNtMHRiV0Z1WVdkbGNpMXpkR0Z5ZERwaFkzUnBkbVVnZXcwS1ltRmphMmR5YjNWdVpEcDFjbXdvWkdGMFlUcHBiV0ZuWlM5d2JtYzdZbUZ6WlRZMExHbFdRazlTZHpCTFIyZHZRVUZCUVU1VFZXaEZWV2RCUVVGRVFVRkJRVUZ2UTBGSlFVRkJRVE0xWlRSdFFVRkJRVUZZVGxOU01FbEJjbk0wWXpaUlFVRkJRVkp1VVZVeFFrRkJRM2hxZDNZNFdWRlZRVUZCUVVwalJXaGFZM2RCUVVSelRVRkJRVGRFUVdOa2RuRkhVVUZCUVVOdVUxVlNRbFpHYUVoWk5VRmFXa2RFVlZGWlZFRnhTVTFKWjFaRlNFVlJTMnBFYVVsRlVtZ3hSVU5CZUdaQ2VXNXlSMGQyWW1Wb2RqWktSbTVIVm5KdFZYcHVWM1pZVWtVeU4zcHZVVkZoVjBwQ2RWRTBVMDR6VlVodFp6TXdSMHhJZGtsc1FXazBSV2xGVEhWNFNXOW5WelJuU0VwRWEwdDZSRFJwZDBOelNWSlNRbVo0V1U1U1FtaE5RMjluZDJkQ2EyZ3hSV0Y2UVdGYVdWUkJjVWxOU1dkV1JVaEZVVWxyVDNkblNVSnNabXhwWjNOTldsQlBSSEJ0UkZWUldWUkJjVWxOU1dkV1JVaEZVVXRxUkdsSlJWSm9NVVZEUVhkNVFqaHVTVUZCUkVoRlNtSkVUVmswTjNKUlFVRkJRVUpLVWxVMVJYSnJTbWRuWnowOUtTQnVieTF5WlhCbFlYUU5DbjBOQ2cwS0xtWnZjbTB0YldGdVlXZGxjaTF6WldGeVkyZ2dldzBLWW1GamEyZHliM1Z1WkMxamIyeHZjam9qTTBZelJqTkdPdzBLWW05eVpHVnlPbTV2Ym1VN0RRcGpiMnh2Y2pvak1EQXdPdzBLWm05dWREb3hNWEIwSUZObFoyOWxJRlZKT3cwS2FHVnBaMmgwT2pRd2NIZzdEUXBzWldaME9qUTRjSGc3RFFwdFlYSm5hVzQ2TURzTkNuQmhaR1JwYm1jNk1Ec05DblJsZUhRdGFXNWtaVzUwT2pFemNIZzdEUXAwYjNBNk1Ec05DbmRwWkhSb09qTTBOSEI0RFFwOURRb05DaTVtYjNKdExXMWhibUZuWlhJdGMyVmhjbU5vT21adlkzVnpJSHNOQ21KaFkydG5jbTkxYm1RdFkyOXNiM0k2STBZelJqTkdNenNOQ205MWRHeHBibVU2Ym05dVpTRnBiWEJ2Y25SaGJuUU5DbjBOQ2cwS0xtWnZjbTB0YldGdVlXZGxjaTF6WldGeVkyZzZhRzkyWlhJNmJtOTBLRHBtYjJOMWN5a2dldzBLWW1GamEyZHliM1Z1WkMxamIyeHZjam9qTlRjMU56VTNEUXA5RFFvTkNpNW1iM0p0TFcxaGJtRm5aWEl0YzJWaGNtTm9PbWh2ZG1WeU9tWnZZM1Z6SUhzTkNtSmhZMnRuY205MWJtUXRZMjlzYjNJNkkwWXpSak5HTXcwS2ZRMEtEUW91Wm05eWJTMXRZVzVoWjJWeUlIc05DbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJekV3TVRBeE1Ec05DbWhsYVdkb2REbzBNSEI0T3cwS2JHVm1kRG93T3cwS2RHOXdPbU5oYkdNb01UQXdKU0F0SURRd2NIZ3BPdzBLZDJsa2RHZzZNVEF3SlEwS2ZRMEtEUW91Wm05eWJTMWpiMjUwWVdsdVpYSWdldzBLYUdWcFoyaDBPakV3TUNVN0RRcHNaV1owT2pBN0RRcHZkbVZ5Wm14dmR6cGhkWFJ2T3cwS2RHOXdPakE3RFFwM2FXUjBhRG94TURBbE93MEtlaTFwYm1SbGVEb3dEUXA5RFFvTkNpNW1iM0p0TFdKaGMyVWdldzBLWW05eVpHVnlMWE4wZVd4bE9uTnZiR2xrT3cwS1ltOXlaR1Z5TFhkcFpIUm9PakZ3ZURzTkNtSnZlQzF6YUdGa2IzYzZNQ0ExY0hnZ01qVndlQ0F0TkhCNElISm5ZbUVvTUN3d0xEQXNNQzQzTlNrTkNuME5DZzBLTG1admNtMHRhR1ZoWkdsdVp5MW1iR0Z6YUNCN0RRcGhibWx0WVhScGIyNHRaR2x5WldOMGFXOXVPbUZzZEdWeWJtRjBaUzF5WlhabGNuTmxPdzBLWVc1cGJXRjBhVzl1TFdSMWNtRjBhVzl1T2k0d04zTTdEUXBoYm1sdFlYUnBiMjR0YVhSbGNtRjBhVzl1TFdOdmRXNTBPamc3RFFwaGJtbHRZWFJwYjI0dGJtRnRaVHBEYjJ4dmNrWnNZWE5vRFFwOURRb05DaTVtYjNKdExXaGxZV1JwYm1jZ2V3MEthR1ZwWjJoME9qTXdjSGc3RFFwdFlYSm5hVzQ2TURzTkNuUnlZVzV6YVhScGIyNDZZbUZqYTJkeWIzVnVaQzFqYjJ4dmNpQXVNalZ6SUdWaGMyVTdEUXAyWlhKMGFXTmhiQzFoYkdsbmJqcDBiM0E3RFFwM2FXUjBhRG94TURBbERRcDlEUW9OQ2k1bWIzSnRMV2hsWVdScGJtY3RiV2x1SUhzTkNuUnlZVzV6YVhScGIyNDZZbUZqYTJkeWIzVnVaQzFqYjJ4dmNpQXVNalZ6SUdWaGMyVU5DbjBOQ2cwS0xtWnZjbTB0YUdWaFpHbHVaeTEwYVhSc1pTQjdEUXBtYjI1MExYTnBlbVU2TVRCd2REc05DbXhsWm5RNk5UQWxPdzBLYldGeVoybHVMWEpwWjJoME9pMDFNQ1U3RFFwMGIzQTZOVEFsT3cwS2RISmhibk5tYjNKdE9uUnlZVzV6YkdGMFpTZ3ROVEFsTEMwMU1DVXBEUXA5RFFvTkNpNW1iM0p0TFdobFlXUnBibWN0WW5WMGRHOXVJSHNOQ21KdmNtUmxjaTEzYVdSMGFEb3dPdzBLWTNWeWMyOXlPbWhoYm1RN0RRcG1iMjUwTFdaaGJXbHNlVHBNZFdOcFpHRWdVMkZ1Y3lCVmJtbGpiMlJsT3cwS1ptOXVkQzF6YVhwbE9qRXljSFE3RFFwb1pXbG5hSFE2TWpsd2VEc05DbTFoY21kcGJqb3dPdzBLY0dGa1pHbHVaem93T3cwS2RHVjRkQzFoYkdsbmJqcGpaVzUwWlhJN0RRcDBiM0E2TURzTkNuUnlZVzV6YVhScGIyNDZZbUZqYTJkeWIzVnVaQzFqYjJ4dmNpQXVNalZ6SUdWaGMyVTdEUXAzYVdSMGFEbzBOWEI0RFFwOURRb05DaTVtYjNKdExXSnZaSGtnZXcwS2FHVnBaMmgwT21OaGJHTW9NVEF3SlNBdElETXdjSGdwT3cwS2IzWmxjbVpzYjNjNmFHbGtaR1Z1T3cwS2RHOXdPak13Y0hnN0RRcDNhV1IwYURveE1EQWxEUXA5RFFvTkNpNW1iM0p0TFdKdlpIa3RiM1psY214aGVTQjdEUXBvWldsbmFIUTZZMkZzWXlneE1EQWxJQzBnTXpCd2VDazdEUXAwYjNBNk16QndlRHNOQ25kcFpIUm9PakV3TUNVN0RRcDZMV2x1WkdWNE9qWTFOVFV6RFFwOURRb05DaTVtYjNKdExXaGxZV1JwYm1jdFluVjBkRzl1TFdOc2IzTmxJSHNOQ214bFpuUTZZMkZzWXlneE1EQWxJQzBnTkRWd2VDazdEUXAwY21GdWMybDBhVzl1T21KaFkydG5jbTkxYm1RdFkyOXNiM0lnTGpJMWN5QmxZWE5sRFFwOURRb05DaTVqWld4c0lIc05DbWhsYVdkb2REb3hPWEI0SVdsdGNHOXlkR0Z1ZERzTkNteHBibVV0YUdWcFoyaDBPakU1Y0hnN0RRcHRZWEpuYVc0Nk1DRnBiWEJ2Y25SaGJuUTdEUXB2ZG1WeVpteHZkenBvYVdSa1pXNDdEUXAwWlhoMExXbHVaR1Z1ZERvMGNIZzdEUXAwWlhoMExXOTJaWEptYkc5M09tVnNiR2x3YzJsek93MEtkMmhwZEdVdGMzQmhZMlU2Ym05M2NtRndEUXA5RFFvTkNpNWpaV3hzTFhKbGMzQnZibk5wZG1VZ2V3MEtabTl1ZEMxemFYcGxPakUwY0hnN0RRcG9aV2xuYUhRNk5UTndlQ0ZwYlhCdmNuUmhiblE3RFFwc2FXNWxMV2hsYVdkb2REbzFNM0I0RFFwOURRb05DaTVtYjJOMWMyVmtjbTkzSUhzTkNtOTFkR3hwYm1VNlpHOTBkR1ZrSURGd2VDQWpNREF3SVdsdGNHOXlkR0Z1ZERzTkNtOTFkR3hwYm1VdGIyWm1jMlYwT2kweGNIZzdEUXA5RFFvTkNpNW9aV0ZrYVc1bklIc05DbUp2Y21SbGNpMWliM1IwYjIwNmJtOXVaU0ZwYlhCdmNuUmhiblE3RFFwaWIzSmtaWEl0YkdWbWREcHViMjVsSVdsdGNHOXlkR0Z1ZERzTkNtSnZjbVJsY2kxMGIzQTZibTl1WlNGcGJYQnZjblJoYm5RN0RRcG9aV2xuYUhRNk1qRndlQ0ZwYlhCdmNuUmhiblE3RFFwc2FXNWxMV2hsYVdkb2REb3lNWEI0T3cwS2IzWmxjbVpzYjNjNmFHbGtaR1Z1T3cwS2RHVjRkQzFwYm1SbGJuUTZOSEI0T3cwS2RHVjRkQzF2ZG1WeVpteHZkenBsYkd4cGNITnBjenNOQ25kb2FYUmxMWE53WVdObE9tNXZkM0poY0RzTkNtTjFjbk52Y2pwd2IybHVkR1Z5T3cwS2ZRMEtEUW91YUdWaFpHbHVaeTF5WlhOd2IyNXphWFpsSUhzTkNtWnZiblF0YzJsNlpUb3hOSEI0T3cwS2FHVnBaMmgwT2pVemNIZ2hhVzF3YjNKMFlXNTBPdzBLYkdsdVpTMW9aV2xuYUhRNk5UTndlQTBLZlEwS0RRb3VaM0pwWkNCN0RRcGlZV05yWjNKdmRXNWtMV052Ykc5eU9pTm1abVk3RFFwaWIzSmtaWEl0ZEc5d09tNXZibVVOQ24wTkNnMEtMbWR5YVdRNlptOWpkWE1nZXcwS2IzVjBiR2x1WlRvd0lXbHRjRzl5ZEdGdWRBMEtmUTBLRFFvdVozSnBaQzF6YjNKMExYVndJSHNOQ21KaFkydG5jbTkxYm1RNmRYSnNLR1JoZEdFNmFXMWhaMlV2Y0c1bk8ySmhjMlUyTkN4cFZrSlBVbmN3UzBkbmIwRkJRVUZPVTFWb1JWVm5RVUZCUVd0QlFVRkJSa05CV1VGQlFVTllWVGhhY2tGQlFVRkRXRUpKVjFoTlFVRkJOMFJCUVVGUGQzZElTR0kyYUd0QlFVRkxWREpzUkZFeFFsRmhSemt3WWpOT2IySXpRV2RUVlU1RVNVaENlV0l5V25CaVIxVkJRVWhxWVc1V1RtNVdSbEJ3Um1vek16TjJVa05UTkdsQmJFVjBkbFZvVlVsSlJrcERhVFJCVld0VFdYRkpVV3RSVTI5bmFHOWthMVpWWTBWU1VsVlZSVWM0YVdkcFFVOVBhbTlEVFVaV1JYTkVTVzlMTWtGbWEwbGhTMDluTms5SmFYTnlOelJZZFdwaE9XRTRPU3RpVGk5eVdGaFFkV1Z6T0RVeWVucDNaa0ZEUVhsWFUwUk9VazVaUVUxeFZVbGxSV1ZEUkhnNFZFYzBaVkYxVVVsRlMwcElRVUZGUVdsNldrTkdlaTlUVFVKQlVHZ3JVRVIzY2tselFVaDJaMEZDWlU1TlRFTkJSRUZVV25aQlRVSjVTQzkzTDNGUmNHeGpRVmxEUlVGalFqQnJWR2hNUTBsQlZVRkZRalpxYTB0dFFVVkNSMEZaUTJSdFExcFVRVXRCUlVGSFJFeFpNa3hxUVVaQmRFRkhRVzVtSzJKVVFVbERaQ3RLYkRkQlVVSmliRU5GVmtGaFExSkJRMEZVV2xsb1JVRkhaemRCUzNwUVZtOXdSa0ZHWjNkQlFsSnRVemhSTlVGT1ozUkJSRUpLVmpKYVNVRk1Rek5CVFVSUFJVRjFlVUZCWjAxQlJFSlNhVWxWY0VGQlVqZEJSMFJKU1hsT05FRkpVMXBCUWxKSE9HeGpPRGhUZFhWRlQyTnhRVUZDTkcxaVNUaDFVMUUxVWxsR1lrTkRNWGhDTVdSWVRHZzBiM3ByYTFoTGVGRXlXVkZLYUcxclFYVjNibTFhUjFSTFFrNUJMMmM0T0hkQlFVdERVa1pTU0dkbkwxQTVaVTAwVDNKek4wOU9iell5Ukd3NGREWnlPRWN2ZVVwcFdYVlFLelZqSzNKalJVRkJRVTlHTUdaMFNDdE1ReXQ2UjI5Qk4wSnZRblF2Y1Vsc04yZFNiMWhuZFdka1ptVk1XbkpKVUZGTVZVRnZUMjVoVmk5T2R5dElORGhRUlZkb2EweHVXakpsV0dzMVRtaExlRVZLWWxsamNGaG1aalZ1ZDJ3dlFWWXZNWE1yV0RRNEwxQm1NVFJNTjJsS1NVVjVXRmxHU0VKUWFtZDNjM293VkV0VlkzbzFTVXBvUjB4ak5XODVTQzlNWTB3dkwzZGtNSGxNUlZOWFN6VlhRMjlWTkRGRlUyTlpOVVZ0YjNwNlRYRlZhV2xWUzFOTFkxVnNNSFk1YXpSME9ITXJkMDByTTNwVlFYTkhieXRCV0hWU1RHRm9aRmwzVURKVGVXTlJWMGhVUVRSMlkwRkJVRXMzWWpoSVZVdEJaMFJuUjJsRU5HTTVNeThyT0M4dlZXVm5TbEZEUVZwcmJWTmpVVUZCV0d0UmEweHNWRXR6ZWk5SVEwRkJRVkpMUTBKTGNrSkNSeTlVUWtkRGVrRkNhSHBDUW1SNlFrTXZlR2RPYjFKRFNrMVVRMUZvUWtORGJWTkJTRWhLWjB0aGVVTlJhV2xIZW1KQlpFdHRRWFl4UlVGa1RrMUNVbUZKWVZSalFUUjFkMnhYTkVScU1YZEVMM0JvUTBvM1FrdE1lVUpEVVZKQ2VVRm5WRmxUU0dGcFFVWnBhV3huYW1wbloxaHRXVmcwU1dOR1NVSkNTMHhLUTBSS2FVSlNVa2xyZFZKT1ZXZDRWVzl3VlVsR1ZrbElaa2s1WTJkSk5XZ3hlRWQxY0VVM2VVRkJlV2QyZVVkMlJXTjRiRWxIZVZWVU0xVkVURlpFZFdGbk0wZHZVa2R2WjNaUldraFJlRzF2T0ZkdlNuWlJZM0pSWVZCWmR6SnZaV1pSY1RKblVESnZPQ3RST0dOM2QwOW5XVUo2VUVWaVJFRjFlSE5PUTNOVVozTkRXazVxZVRkRmFYSkJlWEo0YUhGM1ZuRjNSSFUwYmpGWk9DdDRaSGRSVTJkVldFRkRWRmxGWkRCSloxbFNOVUpUUm1oTlYwVTNXVk5MWjJkSVExRXdSV1J2U2s1M2EwUm9Sa2hEU25sTFZIRkZkVEJLY205U0syTlJXVmxxU1hob01XaEpURU5RVjBWdk9GUk1lRUkzYVVWUVJVNTVVVk5wVlUxNVNqZHRVVUZyYlhod1JsUlRSWFJLUnpCdE5WTkpLMnR6Y1Zwek1GTkNiMnByT0c1aFdrZDFlVUo2YlZWTVEwRnllVWxZYTI1bFZFUTFSRkJyUnl0UmFEaHNjMHR1VjBwQlkyRlVORlVyU1c5VmMzQnhVMmh1YkVWUFZUQTFVVnBzYlVSS1FsWmhUMkZWZERKdmIxWlJVazVaT1dGUmNUSm9kR3hMZGxWWlpXOUZlbEl4YldwdVRtZDRXa3BUTmxkMGIzQllWRWR0WjFoaFVHUndjaXRvTUhWb1NHUnNValZQYkRsQ1dEQnpkbkJTSzJsWU5rRlFNR1IzZDA1b2FGZEVlRFJvYmt0Q2JXSkhRV05aV25oc00wZExLMWxVUzFsYU1EUnpXbmd4VVhkT2VraHliVTlsV2tRMWJIWldWbWR4ZEdsd09FWmFTRXREY0ZaTGJGTmhWa2Q1YjNaV1MyMXhjSEZ5WlhGbmRGWTRNVmhNVmtrcmNGaHNUamx5YTFwV1RURlFhbkZSYmxWc2NYUldjWEF4VVRZeFRXSlZNbVZ3VHpacFNIRnRaVzlpTVZFdmNFZzFXaTlaYTBkWFkwNU5kekE1UkhCR1IyZHpWaTlxZGsxWlowTXlUVnB6TTJkelNWZHpUbkUwV2pGblZGaEZTbkpJVGpKWWVESkxjblZaTDFJeU4ybDZNbkZ4WVVVMVVYcE9TMDB4WlhwVmRrOVZXbW80U0RRMWFIZ3JTbmd3VkdkdWJrdExaVmc0TXpaTE0yaFVka3RsU1hCSE5sa3dWRXhyZUZwV2VISnhjR0ZZYkd4cGNsTkxkRkp4TUdaeWRsUmhkVGRoWldSd2NqRkdkVEZ1TjJkUk5VSjRNRzl1V0VOa1NGbzBMMDlDV2pOdVZUbHNWRE5oWTB0d2VGcE9VRlJ5TVhKcE5uRmhObFZpYjJKMFJXUTNPWFZ3S3paWmJuSTFaV2RLTlUxaU5tWmxaV0l6Yml0b2VEbE1MekZWTDFjek5uQXZWa2hFUm1kSGMzZDNhMEowYzAxNmFHYzRlRlJXZUdKNmQyUk1PR1ppT0ZaR1JGaGpUa0ZSTmxab2JGZEhXRFJaVTFKMVpFVTRiemxXUjJwVldWQnFSMjVIV0U5TmF6UXlNMGRpWTJGcVNtZFpiVWxUV2t4VVpYQk9OM0J3VTFSaWJXMUxZVmszVkVSMFRYZzRNMDE2WVV4T01YQnJNVzE2TUhneGVreHViU3RsWWpFMWRtWjBNa0poWlVadmMzUnhhVEoxUjFaS2MzVlNZWEJzYm5WMGNuaDFhRlp2TlZkaFZsbFdWbkJrY3pCaGRHNWhNR3d4Y25WMGRUWmpVbkEzYkU5ck1EWnliblJhYm5jM1JIaDBjMjB5Y1dKalduTlBXRmxDZEhWMWRHMHlNbVpYUm01WmFHUnVkRGhYZFhjck5sUjJXazQ1ZFc0eVRpOVVNRWhFV1daYVJIRnpaRmRvTVN0ak4xSjVSa1J3VjA5ME5tRjZjSHAxVURNelJqbEtZbkJNTW1SWmVuaEVVREpFVUdwMGFGQk1TMk5TY0c1V1QySXdNR1J1UmpKbE5XTTBVSHBwU1hWS1V6Uk1URXh3WXl0TWNITmllSFF6U1habFVrdGtVRlo0V0dWR05qQjJWMlJ0TjA5aWQzVXliekkyTDNWT2RUVndOMjltWTI0NGR6QnVlVzFsVjFST2VqQk5VRWxSSzBKU05XUkZMME0xSzFaTlIzWm1ja2cxVUZFd0swSmFOMWh1U1hrNWFrdzFSbGh5WkdWM2REWldNM0YyWkdnM2VHTXJPV28xZVc0clRTczBlbmN6TTJwTVpWZFdMMDFPT0VNemVVeG1URlE0VG5adWJDdEdNekJPTDBrdk9Xc3ZNM0l2TUZGRGJtZERWVUphZDA5S1oxVkhRbGQzVERjclNIQTRTV0lyVDFCNmNtSmFabUY1TW1VeFFtcExRelZSVWxaQ2FqUkxkR2QxV0VKeVUwWnZlVTk1VVhKVFNETTFOV3BQYTJNMWNFUnZWbEZtZFdwWE1FRmthRFZ0UjB4M016Uk5TalJYU0doV1pVZFFORFYzYVVabllUQlVSMWhPV0daU00wVk9lak13VkRaU1NscEZNM0IwYmsxVk9EVnllVEZMVGxOdkszRnBOWEZRVG04emRXcFRObEE0V1hWYWJHNU5NVlpwWkZkRmJITlRlSGMxVEdseGRVNXROWE4yZEM4NE4yWlBTRFJ3TTJsREswNDNSalZuZG5sR01YZGxZVWhQZDNaVFJuQjRZWEJNYUVselQzQmFRVlJKYUU5UFNsUjNVVkpCY1hGQ1lVMUtaa2xVWkhsWFQwTnVia05JWTBwdVNXa3ZVazUwUjBreVJVNWpTMmcxVHpoclozRlVXSEZUTjBwSE9FNVlhMnQ0VkU5c1RFOVhOV2hEWlhCclRIaE5SRlY2WkcxNmNXVkdjSEF5U1Vjd2VWQlVjVGxOV1U5VGExcENlRkZ4YjJoVVdrOHlXaXR3YmpWdFdqSjVObmhzYUdKTUszaFhOa3gwZVRobGJGRm1TbUUzVDFGeVFWWmFURkZ4TWxGeFltOVdSbTl2TVhsdlNITnRaR3hXTW1FdmVsbHVTMDlhWVhKdWFYWk9OMk41ZW5sMGRWRk9OWHAyYmk4dmRFVnpTVk0wV2tzeWNGbGFURlo1TUdSWFQyRTVja2R2TlhOcWVIaGxaSE5MTkhoVlJrczBXbGRDY1hjNGRVbHhNa3R0TTFaVU5uWjBWalZsZFdaeU1HMWxhekZ5WjFZM1FubHZURUowVVVaeU5uZDBWa04xVjBabVpYWmpNU3N4WkZReFozWlhaQ3N4V1daeFIyNVNjeXRHV1cxTGNtaFVZa1kxWTFabU9XZHZNMGhxYkVjMFpIWjVjaXRhTTBwVE1IRmhka1YxVjFSUVduUktiVFpsWW1WTVdqVmlSSEJoY1d3cllWaEViVFJPTW1SeE1FUmtPVmQwVHpNeE9XdFlZa3cxWms1TFRuVTNaemRhUkhWaFR5OVFUR2s0V21GbVNucHpNRGRRTVZOclZsQlNWU3RzVVRJM2RFeGtkRmRJV0N0SE4xSTNhSFEzZGxCWk1EZE9XR0pYTjNvekwxUTNTblowZEZaQlZsWk9NVmRpVmxwbWRFb3JOMUF6VURZMlNuRjFialJzZG5SMFdHRXhUMkpZU0hSNGQxQlRRUzh3U0VsM05qSXhOMjVWTVZJelUxQldVbE5xT1ZseU5qQmpUM2g0S3lzdmNETjJaSGt3VGs1bk1WWnFXbnBITkdsT2QxSklibXMyWm1OS015OWpaVVJVY21Ga2IzZzNjazlGU0RCNE9USklWMk5rVERKd1EyMTJTMkZTY0hSVWJYWjBZbGxzZFRaVU9IY3JNR1JpY1ROdWNqaFNPWE5tUkRWM01GQkdiRFZUZGs1VmVWZHVZVFpaVEZSck1tWjVlalI1Wkd4YU1UbG1hVGMxTTBkRVltOXlXamMxTWxCUE16SnZVR0lyS3paRlNGUm9NR3RZTDJrcll6ZDJSSFpQV0ZCTE5HUlFTM2t5SzFWVVZqZG9XRzF4T0RaWU1qTnhaRTl2T0M5d1VGUlVPR1UzYmt4MVlYSnliR05oTjI1MVpYSXlNV1V5WWpNMlVuVmxUamczWkRsTU1UVTRVbUl2TVhSWFpVOVVNMlIyWms0MllpOW1Samt2V0daR2RERXJZMmxtT1hwemRUY3lXR051TjNFeU9GUTNlR1k1UlVSMFVXUnNSRE5aWmxaUU1YWXJNMDVxZGpOSU9YRjNTR1ZuT0RsSVkxSXZZMGRvV1ZCUUwzQklNV3AzT1VSQ1dTdGFhamgxUjBSWlluSnVhbWNyVDFSdWFWQXpURGsyWm5sdVVUZzVhM3A1WVdWR0x6WnBMM04xZFVaNFdYWm1kbXBXTmpsbVR6QmFhbEp2V21aNWJEVlBMMkpZZVd3dlpYSkJObmh0ZGpJNFlrTjRhRFlyZVZobmVrMVdOekJXZG5aMGQxaG1ZMlI0TTNadk9UaFFWQ3RTT0VsSU9HOHZNbW8xYzJaV1ZEQkxaamRyZUcxVWF5ODRSVUUxYW5vdlIwMTZUR1J6UVVGQlFXZFpNR2hUVkZGQlFXVnBWVUZCU1VORVFVRkVOUzkzUVVGblQydEJRVWhWZDBGQlJIRlpRVUZCVDNCblFVRkNaSFpyYkM5R1VtZEJRVUZFU2twU1JVWlZaVTV3YVN0UUx5OVFkMDE1V0hJeE5qbFlPVEJOVVhkR1lWZHNjQzg1UlZaWmFXbEJXVmRUUmxkQ1YyZExPRk53UVVacmFFRkJRVUV2THpoRVFVTldOMlZrVmpsbmJWVmFRVUZCUVVGRmJFWlVhMU4xVVcxRFF5a2dibTh0Y21Wd1pXRjBEUXA5RFFvTkNpNW5jbWxrTFhOdmNuUXRaRzkzYmlCN0RRcGlZV05yWjNKdmRXNWtPblZ5YkNoa1lYUmhPbWx0WVdkbEwzQnVaenRpWVhObE5qUXNhVlpDVDFKM01FdEhaMjlCUVVGQlRsTlZhRVZWWjBGQlFVRnJRVUZCUVVaRFFWbEJRVUZEV0ZVNFduSkJRVUZCUTFoQ1NWZFlUVUZCUVRkRVFVRkJUM2QzU0VoaU5taHJRVUZCUzFReWJFUlJNVUpSWVVjNU1HSXpUbTlpTTBGblUxVk9SRWxJUW5saU1scHdZa2RWUVVGSWFtRnVWazV1VmtaUWNFWnFNek16ZGxKRFV6UnBRV3hGZEhaVmFGVkpTVVpLUTJrMFFWVnJVMWx4U1ZGclVWTnZaMmh2Wkd0V1ZXTkZVbEpWVlVWSE9HbG5hVUZQVDJwdlEwMUdWa1Z6UkVsdlN6SkJabXRKWVV0UFp6WlBTV2x6Y2pjMFdIVnFZVGxoT0RrcllrNHZjbGhZVUhWbGN6ZzFNbnA2ZDJaQlEwRjVWMU5FVGxKT1dVRk5jVlZKWlVWbFEwUjRPRlJITkdWUmRWRkpSVXRLU0VGQlJVRnBlbHBEUm5vdlUwMUNRVkJvSzFCRWQzSkpjMEZJZG1kQlFtVk9UVXhEUVVSQlZGcDJRVTFDZVVndmR5OXhVWEJzWTBGWlEwVkJZMEl3YTFSb1RFTkpRVlZCUlVJMmFtdExiVUZGUWtkQldVTmtiVU5hVkVGTFFVVkJSMFJNV1RKTWFrRkdRWFJCUjBGdVppdGlWRUZKUTJRclNtdzNRVkZDWW14RFJWWkJZVU5TUVVOQlZGcFphRVZCUjJjM1FVdDZVRlp2Y0VaQlJtZDNRVUpTYlZNNFVUVkJUbWQwUVVSQ1NsWXlXa2xCVEVNelFVMUVUMFZCZFhsQlFXZE5RVVJDVW1sSlZYQkJRVkkzUVVkRVNVbDVUalJCU1ZOYVFVSlNSemhzWXpnNFUzVjFSVTlqY1VGQlFqUnRZa2s0ZFZOUk5WSlpSbUpEUXpGNFFqRmtXRXhvTkc5NmEydFlTM2hSTWxsUlNtaHRhMEYxZDI1dFdrZFVTMEpPUVM5bk9EaDNRVUZMUTFKR1VraG5aeTlRT1dWTk5FOXljemRQVG04Mk1rUnNPSFEyY2poSEwzbEthVmwxVUNzMVl5dHlZMFZCUVVGUFJqQm1kRWdyVEVNcmVrZHZRVGRDYjBKMEwzRkpiRGRuVW05WVozVm5aR1psVEZweVNWQlJURlZCYjA5dVlWWXZUbmNyU0RRNFVFVlhhR3RNYmxveVpWaHJOVTVvUzNoRlNtSlpZM0JZWm1ZMWJuZHNMMEZXTHpGeksxZzBPQzlRWmpFMFREZHBTa2xGZVZoWlJraENVR3BuZDNONk1GUkxWV042TlVsS2FFZE1ZelZ2T1VndlRHTk1MeTkzWkRCNVRFVlRWMHMxVjBOdlZUUXhSVk5qV1RWRmJXOTZlazF4VldscFZVdFRTMk5WYkRCMk9XczBkRGh6SzNkTkt6TjZWVUZ6UjI4clFWaDFVa3hoYUdSWmQxQXlVM2xqVVZkSVZFRTBkbU5CUVZCTE4ySTRTRlZMUVdkRVowZHBSRFJqT1RNdkt6Z3ZMMVZsWjBwUlEwRmFhMjFUWTFGQlFWaHJVV3RNYkZSTGMzb3ZTRU5CUVVGU1MwTkNTM0pDUWtjdlZFSkhRM3BCUW1oNlFrSmtla0pETDNoblRtOVNRMHBOVkVOUmFFSkRRMjFUUVVoSVNtZExZWGxEVVdscFIzcGlRV1JMYlVGMk1VVkJaRTVOUWxKaFNXRlVZMEUwZFhkc1Z6UkVhakYzUkM5d2FFTktOMEpMVEhsQ1ExRlNRbmxCWjFSWlUwaGhhVUZHYVdsc1oycHFaMmRZYlZsWU5FbGpSa2xDUWt0TVNrTkVTbWxDVWxKSmEzVlNUbFZuZUZWdmNGVkpSbFpKU0daSk9XTm5TVFZvTVhoSGRYQkZOM2xCUVhsbmRubEhka1ZqZUd4SlIzbFZWRE5WUkV4V1JIVmhaek5IYjFKSGIyZDJVVnBJVVhodGJ6aFhiMHAyVVdOeVVXRlFXWGN5YjJWbVVYRXlaMUF5YnpnclVUaGpkM2RQWjFsQ2VsQkZZa1JCZFhoelRrTnpWR2R6UTFwT2FuazNSV2x5UVhseWVHaHhkMVp4ZDBSMU5HNHhXVGdyZUdSM1VWTm5WVmhCUTFSWlJXUXdTV2RaVWpWQ1UwWm9UVmRGTjFsVFMyZG5TRU5STUVWa2IwcE9kMnRFYUVaSVEwcDVTMVJ4UlhVd1NuSnZVaXRqVVZsWmFrbDRhREZvU1V4RFVGZEZiemhVVEhoQ04ybEZVRVZPZVZGVGFWVk5lVW8zYlZGQmEyMTRjRVpVVTBWMFNrY3diVFZUU1N0cmMzRmFjekJUUW05cWF6aHVZVnBIZFhsQ2VtMVZURU5CY25sSldHdHVaVlJFTlVSUWEwY3JVV2c0YkhOTGJsZEtRV05oVkRSVkswbHZWWE53Y1ZOb2JteEZUMVV3TlZGYWJHMUVTa0pXWVU5aFZYUXliMjlXVVZKT1dUbGhVWEV5YUhSc1MzWlZXV1Z2UlhwU01XMXFiazVuZUZwS1V6WlhkRzl3V0ZSSGJXZFlZVkJrY0hJcmFEQjFhRWhrYkZJMVQydzVRbGd3YzNad1VpdHBXRFpCVURCa2QzZE9hR2hYUkhnMGFHNUxRbTFpUjBGaldWcDRiRE5IU3l0WlZFdFpXakEwYzFwNE1WRjNUbnBJY20xUFpWcEVOV3gyVmxabmNYUnBjRGhHV2toTFEzQldTMnhUWVZaSGVXOTJWa3R0Y1hCeGNtVnhaM1JXT0RGWVRGWkpLM0JZYkU0NWNtdGFWazB4VUdweFVXNVZiSEYwVm5Gd01WRTJNVTFpVlRKbGNFODJhVWh4YldWdllqRlJMM0JJTlZvdldXdEhWMk5PVFhjd09VUndSa2RuYzFZdmFuWk5XV2RETWsxYWN6Tm5jMGxYYzA1eE5Gb3haMVJZUlVweVNFNHlXSGd5UzNKMVdTOVNNamRwZWpKeGNXRkZOVkY2VGt0Tk1XVjZWWFpQVlZwcU9FZzBOV2g0SzBwNE1GUm5ibTVMUzJWWU9ETTJTek5vVkhaTFpVbHdSelpaTUZSTWEzaGFWbmh5Y1hCaFdHeHNhWEpUUzNSU2NUQm1jblpVWVhVM1lXVmtjSEl4Um5VeGJqZG5VVFZDZURCdmJsaERaRWhhTkM5UFFsb3pibFU1YkZRellXTkxjSGhhVGxCVWNqRnlhVFp4WVRaVlltOWlkRVZrTnpsMWNDczJXVzV5TldWblNqVk5ZalptWldWaU0yNHJhSGc1VEM4eFZTOVhNelp3TDFaSVJFWm5SM04zZDJ0Q2RITk5lbWhuT0hoVVZuaGllbmRrVERobVlqaFdSa1JZWTA1QlVUWldhR3hYUjFnMFdWTlNkV1JGT0c4NVZrZHFWVmxRYWtkdVIxaFBUV3MwTWpOSFltTmhha3BuV1cxSlUxcE1WR1Z3VGpkd2NGTlVZbTF0UzJGWk4xUkVkRTE0T0ROTmVtRk1UakZ3YXpGdGVqQjRNWHBNYm0wclpXSXhOWFptZERKQ1lXVkdiM04wY1dreWRVZFdTbk4xVW1Gd2JHNTFkSEo0ZFdoV2J6VlhZVlpaVmxad1pITXdZWFJ1WVRCc01YSjFkSFUyWTFKd04yeFBhekEyY201MFdtNTNOMFI0ZEhOdE1uRmlZMXB6VDFoWlFuUjFkWFJ0TWpKbVYwWnVXV2hrYm5RNFYzVjNLelpVZGxwT09YVnVNazR2VkRCSVJGbG1Xa1J4YzJSWGFERXJZemRTZVVaRWNGZFBkRFpoZW5CNmRWQXpNMFk1U21Kd1RESmtXWHA0UkZBeVJGQnFkR2hRVEV0alVuQnVWazlpTURCa2JrWXlaVFZqTkZCNmFVbDFTbE0wVEV4TWNHTXJUSEJ6WW5oME0wbDJaVkpMWkZCV2VGaGxSall3ZGxka2JUZFBZbmQxTW04eU5pOTFUblUxY0RkdlptTnVPSGN3Ym5sdFpWZFVUbm93VFZCSlVTdENValZrUlM5RE5TdFdUVWQyWm5KSU5WQlJNQ3RDV2pkWWJrbDVPV3BNTlVaWWNtUmxkM1EyVmpOeGRtUm9OM2hqS3pscU5YbHVLMDByTkhwM016TnFUR1ZYVmk5TlRqaERNM2xNWmt4VU9FNTJibXdyUmpNd1RpOUpMemxyTHpOeUx6QlJRMjVuUTFWQ1duZFBTbWRWUjBKWGQwdzNLMGh3T0VsaUswOVFlbkppV21aaGVUSmxNVUpxUzBNMVVWSldRbW8wUzNSbmRWaENjbE5HYjNsUGVWRnlVMGd6TlRWcVQydGpOWEJFYjFaUlpuVnFWekJCWkdnMWJVZE1kek0wVFVvMFYwaG9WbVZIVURRMWQybEdaMkV3VkVkWVRsaG1Vak5GVG5vek1GUTJVa3BhUlROd2RHNU5WVGcxY25reFMwNVRieXR4YVRWeFVFNXZNM1ZxVXpaUU9GbDFXbXh1VFRGV2FXUlhSV3h6VTNoM05VeHBjWFZPYlRWemRuUXZPRGRtVDBnMGNETnBReXRPTjBZMVozWjVSakYzWldGSVQzZDJVMFp3ZUdGd1RHaEpjMDl3V2tGVVNXaFBUMHBVZDFGU1FYRnhRbUZOU21aSlZHUjVWMDlEYm01RFNHTktia2xwTDFKT2RFZEpNa1ZPWTB0b05VODRhMmR4VkZoeFV6ZEtSemhPV0d0cmVGUlBiRXhQVnpWb1EyVndhMHg0VFVSVmVtUnRlbkZsUm5Cd01rbEhNSGxRVkhFNVRWbFBVMnRhUW5oUmNXOW9WRnBQTWxvcmNHNDFiVm95ZVRaNGJHaGlUQ3Q0VnpaTWRIazRaV3hSWmtwaE4wOVJja0ZXV2t4UmNUSlJjV0p2VmtadmJ6RjViMGh6YldSc1ZqSmhMM3BaYmt0UFdtRnlibWwyVGpkamVYcDVkSFZSVGpWNmRtNHZMM1JGYzBsVE5GcExNbkJaV2t4V2VUQmtWMDloT1hKSGJ6Vnphbmg0WldSelN6UjRWVVpMTkZwWFFuRjNPSFZKY1RKTGJUTldWRFoyZEZZMVpYVm1jakJ0WldzeGNtZFdOMEo1YjB4Q2RGRkdjalozZEZaRGRWZEdabVYyWXpFck1XUlVNV2QyVjJRck1WbG1jVWR1VW5NclJsbHRTM0pvVkdKR05XTldaamxuYnpOSWFteEhOR1IyZVhJcldqTktVekJ4WVhaRmRWZFVVRnAwU20wMlpXSmxURm8xWWtSd1lYRnNLMkZZUkcwMFRqSmtjVEJFWkRsWGRFOHpNVGxyV0dKTU5XWk9TMDUxTjJjM1drUjFZVTh2VUV4cE9GcGhaa3A2Y3pBM1VERlRhMVpRVWxVcmJGRXlOM1JNWkhSWFNGZ3JSemRTTjJoME4zWlFXVEEzVGxoaVZ6ZDZNeTlVTjBwMmRIUldRVlpXVGpGWFlsWmFablJLS3pkUU0xQTJOa3B4ZFc0MGJIWjBkRmhoTVU5aVdFaDBlSGRRVTBFdk1FaEpkell5TVRkdVZURlNNMU5RVmxKVGFqbFpjall3WTA5NGVDc3JMM0F6ZG1SNU1FNU9aekZXYWxwNlJ6UnBUbmRTU0c1ck5tWmpTak12WTJWRVZISmhaRzk0TjNKUFJVZ3dlRGt5U0ZkalpFd3ljRU50ZGt0aFVuQjBWRzEyZEdKWmJIVTJWRGgzS3pCa1luRXpibkk0VWpselprUTFkekJRUm13MVUzWk9WWGxYYm1FMldVeFVhekptZVhvMGVXUnNXakU1Wm1rM05UTkhSR0p2Y2xvM05USlFUek15YjFCaUt5czJSVWhVYURCcldDOXBLMk0zZGtSMlQxaFFTelJrVUV0NU1pdFZWRlkzYUZodGNUZzJXREl6Y1dSUGJ6Z3ZjRkJVVkRobE4yNU1kV0Z5Y214allUZHVkV1Z5TWpGbE1tSXpObEoxWlU0NE4yUTVUREUxT0ZKaUx6RjBWMlZQVkROa2RtWk9ObUl2WmtZNUwxaG1SblF4SzJOcFpqbDZjM1UzTWxoamJqZHhNamhVTjNobU9VVkVkRkZrYkVReldXWldVREYyS3pOT2FuWXpTRGx4ZDBobFp6ZzVTR05TTDJOSGFGbFFVQzl3U0RGcWR6bEVRbGtyV21vNGRVZEVXV0p5Ym1wbkswOVVibWxRTTB3NU5tWjVibEU0T1d0NmVXRmxSaTgyYVM5emRYVkdlRmwyWm5acVZqWTVaazh3V21wU2IxcG1lV3cxVHk5aVdIbHNMMlZ5UVRaNGJYWXlPR0pEZUdnMkszbFlaM3BOVmpjd1ZuWjJkSGRZWm1Oa2VETjJiems0VUZRclVqaEpTRGh2THpKcU5YTm1WbFF3UzJZM2EzaHRWR3N2T0VWQk5XcDZMMGROZWt4a2MwRkJRVUZuV1RCb1UxUlJRVUZsYVZWQlFVbERSRUZCUkRVdmQwRkJaMDlyUVVGSVZYZEJRVVJ4V1VGQlFVOXdaMEZCUW1SMmEyd3ZSbEpuUVVGQlJWWktVa1ZHVldWT2NEQjVjMFZPZDBSQlRWRnNSMk16WkdsQlIySjNZMGt6WnpSbGEzSldWbWN3VTJ3Mk9WaDBhazE2VDBrd2EyeHhVV2xsVVZOVFlXZElRVWc1ZDBGQlNrUnJkblV4TUdReWVtNHlWamx2ZHpJck4wSm5SRFZGUlVrNU5GaHdNRE5SUVVGQlFVSktVbFUxUlhKclNtZG5aejA5S1NCdWJ5MXlaWEJsWVhRTkNuME5DZzBLTG5CeWIyZHlaWE56WW1GeUlIc05DbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJMlptWmcwS2ZRMEtEUW91Y0hKdlozSmxjM05pWVhKaWIyUjVJSHNOQ21OdmJHOXlPaU5tWm1ZN0RRcG9aV2xuYUhRNlkyRnNZeWd4TURBbElDMGdNbkI0S1RzTkNteGxablE2TVhCNE93MEtkR1Y0ZEMxaGJHbG5ianBqWlc1MFpYSTdEUXAwYjNBNk1YQjREUXA5RFFvTkNpNWpiMjUwWlhoMGJXVnVkU0I3RFFwaVlXTnJaM0p2ZFc1a0xXTnZiRzl5T2lObVptWTdEUXBpYjNndGMyaGhaRzkzT2pBZ01DQTJNM0I0SUMweE4zQjRJSEpuWW1Fb01Dd3dMREFzTUM0M05Ta05DbjBOQ2cwS0xtTnZiblJsZUhScGRHVnRJSHNOQ21obGFXZG9kRG95TkhCNE93MEtiR2x1WlMxb1pXbG5hSFE2TWpSd2VEc05DbTkyWlhKbWJHOTNPbWhwWkdSbGJqc05DblJsZUhRdGFXNWtaVzUwT2pNMGNIZzdEUXAwWlhoMExXOTJaWEptYkc5M09tVnNiR2x3YzJsek93MEtkMmhwZEdVdGMzQmhZMlU2Ym05M2NtRndEUXA5RFFvTkNpNWpiMjUwWlhoMGFYUmxiWE5sY0dWeVlYUnZjaUI3RFFwb1pXbG5hSFE2TVhCNE93MEtiR1ZtZERvek1YQjRPdzBLY21sbmFIUTZPSEI0RFFwOURRb05DaTVrYVdGc2IyZGlkWFIwYjI1elpXTjBhVzl1SUhzTkNtaGxhV2RvZERvME9IQjRPdzBLYkdWbWREb3dPdzBLZEc5d09tTmhiR01vTVRBd0pTQXRJRFE0Y0hncE93MEtkMmxrZEdnNk1UQXdKUTBLZlEwS0RRb3VhVzFoWjJVek1pQjdEUXBpWVdOclozSnZkVzVrTFhOcGVtVTZNVEF3SlNBeE1EQWxPdzBLYUdWcFoyaDBPak15Y0hnN0RRcHNaV1owT2pJMWNIZzdEUXAwYjNBNk16SndlRHNOQ25kcFpIUm9Pak15Y0hnTkNuME5DZzBLTG1sdFlXZGxaWEp5YjNJZ2V3MEtZbUZqYTJkeWIzVnVaRHAxY213b1pHRjBZVHBwYldGblpTOXdibWM3WW1GelpUWTBMR2xXUWs5U2R6QkxSMmR2UVVGQlFVNVRWV2hGVldkQlFVRkRRVUZCUVVGblEwRlpRVUZCUW5wbGJuSXdRVUZCUVVkWVVrWlhTRkpVWWpKYU1HUXlSbmxhVVVKQ1drYzVhVnBUUWtwaVYwWnVXbFpLYkZsWFVqVmpZMnhzVUVGQlFVRkNSakJTVm1nd1ZrZHNNR0pIVlVGU1dFcDVZak5KTjFKdFJuQmlSSFp2WnpFd1JFRkJRVWxVTUd4RlVWWlNORmh4TWxobE5IaGpWbEl6U0ZBclprOVpNMlJ0WkcxYU0xb3pZVE15TWpJM2RFNUNaR1ZTVlVwTVZsRkpZVlZDY1VWbU5WRnhiVUpwVVVGdFN6QlNWMHRKYUZNd1VraHNTV2RPYVV0bWVXaEZhWEZ0VUhoRlFYQkxVVmRWT1RGTFRIQmthbE4wUlVSd01uazNZakUzTkRkemVuWlFLM3BxTTBoRFkyNWxLMDVyUVRGclNqTnpiSFoyY213elRYWm1lbEJpTDJZcldqRTNhaXRFVkVnNVVEbFNNeXRIYlRBd1RFWmlXSGhEVjBKa1J6VXZWbEZCUTNoQlVFaDFlV2dyWmpGNFEwNVlVazk1ZUVKWFYwbERXVVUxTW0xc1ZXTnlabTk0VlZaU04zQjJibWx4V0U0eE15c3lUbTlRUVVkV2FVZHBUbWxIY21kQlVYSjJkblZ0VGpWUk16TXdkMWRuY1RGYVdHOVFiMUEyTUhweGQwbHNSMmxpVW14Qk5IZDVVRzlTZVVoVGRqaEthWFp6VUZreVkyNUViemxZZVhaa1pqaDJaMVI2ZDBvcldVOWlWRWRDUTBFeFluWnBaVE5PYmtwa1RpOWlXbXBrYzJKcWNHdHZXRlY2WTJkbmVEaG1lRXA1WWxFd2MwMTJSbXRCY25KR1owTk1TWFIzV1hsUWFHUkNjRGNyUWxKcVlqSXliakJJWmpnelZqQkVaemtySzJGbFVFZFFhMEZITWxwcVQyZENiakZQTjJaa1kyNXJOakZpUXl0a1kyNUdlbGx1ZFhWaVowUktOblpuWTFGQlJERmtiMjlMUmxWV1VHRnRLM1ZTV2t0T1Zrb3pNbXA2ZVVJME9IazVUVmt2WXpNeGFqSlNkVmRRTDFaVlRDdENUazVUUlN0RWNqWXhjQ3RsVEdKVE0wNU1OMW92TlZWMlVtdFFRbmhvTURSSGRuUkdiMmhFU2pCQmVsbHRkRVZaU0VKdWVXbzJTM0pYZWl0dVJXbzRWSEJtSzJKMk0zQkhWR2M1WkdOMU0wWnFXVVZKVWtGTFpXMHZXVlZpWWl0M05tWlZZa3d4Y3pWeWNqZzNiMWxuTkRWTldVZHZjMUozUVRCU2FrWmFSVTFJUjFSQ1J6aElNMDFsVmxoRWVsZHNSWGt3ZDA4dk1sWlVaSE5tVW04MVpYUTJUekE1UTAxcVFWSklhbkUyUkhSVWVWaFhkR3d4TmxsVlltNVNTMnAzU0VOSVVuUndLMnhCVkdaM1dISndWVnAyVkVacmMybEVUblZVVFRCU1RWSjRObUpxYVd0MlUwTTFlWFJRUVd0MGNuVTRUM0ZJWmpKWGJUYzVlbGhoZHpGbVdFZHpjMUkxTTJKQlZIUjVWM0EwU25WNmVGQkVkV1ZsV1ZkWVZuRTVhamswZGk5UlJtSnpORVJsYTJKaVVEZGlNaTk0ZDNCdkwzTXlNMFJoT1dvMVFYUnllbFZhTkRCck9WVmtSMmxEWlhORmFUQmFlRmt2ZG1WNWNUWTBSSGRLU2s1aFFUWkhORU5PTW1KWWJtY3liRmRRT1dGT1pFUmxVMXAzU21keWMyWlBORTVMZGswclZDdDJVRWd5VlRoUWIwOWtiVE55ZUV0eVdYaHpiVkJVYlRSM2JrOHJhRFE0U0dVMFdGbDBORm9yVDJKV1VFbEdRWHBtTTNGSGNqVXdRVVUyUm1rclozVmhOeXRJYVVFMmVWSlphV2RMT1daa2RsaFRUVGd2ZEdWdWJqSnJkazU0YUdkalVqVnBaVTAzYmpWc1J6QTNNMUZzY1N0a2FqTjBURk5yT0RaaVVIWXhORGhSVUZoclNYUkxZbU5RY0RoYU16Y3lWa2RoTWs1WFMwVjNLM2d2TDB4aWVUTnNVWFZYVEdkVWJHY3hVbFpyWkZSUWJYTXlMM1FyTlc0NU9UUkVXREV5ZUdNdmRYSm5RbVpOUVdGMFFtTkhWV3RGWVVjME5Yb3hRMnBqTWtsclFsZHJhSFo2VVVkRmRDczRNekJ4U1d0S2VsbDNUVWxxWWxoNVdqTjVOQ3R0UjJ0eU1tazNObEppWVRJNVR6QmFSa3hITUVwSk4yWTRVMjF3WXl0RU5UWktPR3BsYTB0TFUydGtVR3Q1YVVwVmJGUkxURWxOTmtGWGEwWmtVUzlxVERSdmFrbG1aQzk0U0VaMlpUaHFZekZ0TURZMWIxVjBjekptVXprdllYZzFhbHB0WjFFd1UydEhiWFJaYkhwV2NUZHBkRW8zWW0xV2JVWmFOWEZVY0drd1ZHUlRSU3RYVUUxeU1uVmtNelJ1YzFNMVltNUpXV2hHTjJOT1JFMXhNbWhaUldSR2FVVlNRM0UzVVVwTUt5OXdlazlIVjJzMU5FdHFTMUkwT0ZGRWFsSlJSR3BVVVhabWFYTTViVGRsVW1aMlVHWkpVVFV2T1RCR1ZWaGlRbmxEVkZOYVIzVkNiMEZIYTJ4WU5IcG5ablZKTHk5b1RITTJOemRCU3poM1VVZzRVV2RJWm5SVk1UZG5hVVJ6VDJWRWNuSnJhMFJKY0dsT1VXbHhWbTlzU2tkUFZEVlpjSFphTkdoVWVHVnpXVUk1Tkdob2JtUklWbms0VGpGME4weHFMMUJ6TmpnMmVEZEJRWEV3U2tSMVZYSXZkbGgzUVN0U00ySjFUMk5ETjNOd04yUXhhakZ2UjJkV1lsWndWbEZuTjFKaGNsaHJkMFV6ZVVsQ1VXNXNLMFpzWTNoclVWRnpSVUZ2VVhoWmRuRTJNVTRyU0hSdE1ua3lVVXRxYnpCV1lXRXdZWFZOUW5oTGFGbHhjR1VyYkc5UWVGbEhSRXB5UVdkRVNHcHNWWEJKY1ZGNWVuUm5WRFIyY0dRelMyczNSME4wV2pGSlVrRkRiM2xCTkZCc2NrSTNWalZGTm5adlptOW5XRFJYYUhVMGQxZHpRV2w2YlRNell6Sm9NV0l2YTNsTU4zUjZTblZXVGtGVFZWSnhUMDVuYzBGMVQydHFjRVpSUzNWR1lYaEpkSEZOVDA5U1ZWQndXSGc0Tm1GT09XbGhjWEZyY0V4Q2NrbE9NelZ2Vld0aUsybG9jbFF4VG5WcGJVSXhiM0Z0WlVscVIyVkJVblEzY1RsSmNEVk9NRE5ZUlZBcmNIcEdTRUp6YzI5eFZFTTVNekpWTlRKT1ZVdFZjRVpzTkhGVlVqUk1SVUpTYkZGU1pHWmtWMU41Umt3ME4wVkNWV2RRWVZGV2JFVkdVVGhYVUVOVWJGcFNNRWRCVDBoTGFuaFRZbU5QU0VSUWVtTmhhbVJyYVhnMFFYcGxhMVZZTDJwR2RsZDRXbVp3VlhoeU5FMXVjRGxMYlRSUWJUaFNPRVl4WkhkRkszUlJXa2N6WTI5aWVtWnVkMmxzVVZWclREWkNTM2R6YzBKUVJrVkJNMkoyUXpoNk9URnpNbFZpUld0eFJtMWFMMlJUU0V0MmNqTkdNVWhsZG1kTVVIWllSVmNyTjA1RlVXa3ZURkoxYmxWclZUTkdPRFpUUzFWU2RYTm5TVXBsZWtkWVluTjZZbFZIVGs5RGRrOXlhRzU1TjNGNlRIVnFURko2WnpsSFVsQnRSSGxvVVZkTVV6RXhXRkJ6ZFZFd1FXNU1OemcySzNoa09ETjBUMkprZGtNM1VGbHJRMFJwZUdSVVVEZDBUMkpqU0M5U2R5dEpPR0kyU0RreVVGb3lla2R1Umtkb01FWndSRTV0ZVhsSFZrdzFVRW9yTHpaUVJDOWFjMEpYVjNSQlFXUTNTbWwyTVVreldHcGtNbXhvUlVsaVUyVllTMmRXT1hOblVVMDVkbUZIV0hoNFNUTXpVRkJGTUdsVlZXUTNTbXRhY0ZsQlFVSmtURk14VFdKNE9VdDVLeTh2YW5KNFYwbFJOVWhXV0RSNVNXbGFVWGRoZFhka1pVdEZNazByZUN0NlUwZHpRVWMxVGxNek0xUkRVV1ZIZW1WbmRHTTNhMjF3VWtwcGJFMHJja1ZGYjBKSGFFMVFSekpHYTB3eFkxZFROV2hFVFRab2RFazJaVVkxVVRNNVNrTktRalI2VkRoaWVYbExhSEJhTmtkR2JWRk9TMkZSWVhwSWEyWklNV1owTTJwNGVGcENhM2RCWW5CQlFtZHFTVUY2ZFRaS04wRndNRFF3YzJnMFZGZHViMmxHUlZOSFFTc3djVVozWmtGRFJWSnJlRGxMTUdSVVIyaG5SV2RSUjJscVYyeE5jUzl4UzFoR1JubGpiSGxOWW5rNVVETkJZVlZCWm14S0t6UkpkMVZJT1RkaEsyVldPQ3QyYVZRM1ZXNTJWV2hxZWtOSlZYTnlRVUZLV1ZKU1JGVmlWakZITVVJNFN6SXhWV1ZzU21OcFYyWkZlbTVNTWlzclYySjJlRVJtZFZKc2IwSlVWV1kyY1VJeWJFeEZZbXN4V0ZSVlZISnVNbmxPZFRReFRrMVphRWRNVTNob01YVm5jSHB1VlhjMGEydFNXbWd4ZUhCRFVtSm9UVVZESzFGUGRUTm1UMjR3YzJkeVVVSklkM0J1YzNCS1kycEZUbUZ1TUZkWmRrUlVWVGd3TVhWdWVqQXZWMU5sUmxKcWFGTjVhVEZSUWtKNVRFbDNkRlpOSzJGTGNYRmpTMVpRZVZsR1ZIQlNRVFZTTXk5M2RHeG1jMlZqTTA4M1VWQkxhek5CSzNsalJGVmhlVWRuUkc5cGRsTklWamh2T1RKTE0wSlZVREExYlVrclRWRnFRMmxIWjB4eGQwMHlTa1ZEY0ZGV2JGUXhRakJNUTNGVE5EaGxWWFV6Y0hSaFdHZEVWVXR4WkRsU0szcE1OV2d5VTNoaFpVNUNURGRhYVhoNk1GcDRkemxOZEhoM2NHUmhWM1JTU0V4TWNsSTBRM0F4ZVU1bVdVcG1lVE5VTUdvek1XWllkWEZTTVVGd1VXSnpRaTlFVUhOcVkwMUJXa2RoUTA1WE9GVTJja280UjNKRGNuZFlMMUF6WmtneGMyWnphMGhXVGt0TFVDODBNV0k1VURkR1pYUmhNazVsZWtoNFFVRkJRVUZGYkVaVWExTjFVVzFEUXlrZ2JtOHRjbVZ3WldGME93MEtZbUZqYTJkeWIzVnVaQzF6YVhwbE9qRXdNQ1VnTVRBd0pRMEtmUTBLRFFvdWFXMWhaMlZwYm1SbGVDQjdEUXBpWVdOclozSnZkVzVrT25WeWJDaGtZWFJoT21sdFlXZGxMM0J1Wnp0aVlYTmxOalFzYVZaQ1QxSjNNRXRIWjI5QlFVRkJUbE5WYUVWVlowRkJRVU5CUVVGQlFXZERRVmxCUVVGQ2VtVnVjakJCUVVGQlNWaFNSbGRJVWxWaFdGSnpXbEZDUldJeVRqRmlWMVoxWkVkR01HRlhPWFZQTUdoc1lraEJOMVZZVm14ak0xSndZakkzWjJzNGVWbEJRVUZLWjJ0c1JWRldValJZY0RGWVF6TkNWVFZTV0NzNWRUZGtlbVZoTlV4QmRFcHBSbkZWVW5sQmVrbEJNREV5Y0hKWFFWaDRVVEpxWjBNNVZFY3daRXRUYW04eFYzSnVZVzUwWVVWbVlsZHNjVXhXVVdRNFJqRnpWa3R2VTBkSGEwNUJWVEJCVkdWUmRVSkhVRXBUZWtOWmJVbFRSVXB0T1dSMVRuSjJXbmc1TVRjdk5UZDZZakkzWTFwd2FYZzBPRzFqTTB4Mkx5OW1MM3BtWldRMVpIa3pOQ3R1UzNCekswcHlSMlJzVWpKUlFtb3djVXRCVFU4NFRrMWlSbWwzWkRGeVF6QXhRWGt4WTFKTlN6bDJkbTVPUjFGRmFEZG1Ta1puVVc0MVQweE9lVE0zZEhSUlVXRkpZa0oxTldWVk0yaHdhR2xSUVhCTU4zbDZNRTlNWW1aaVZVNVpjRloxWTJ0cFRFRTFOblJGVWxsRFRVRjNiV2RuWjNKUGRHRlVWMmh6ZEZCTVdGQXZPV2hGTUZCall6QmxVa2xpUmtsTlJWY3lOMnB4U2xOWWJuSnVWSEpLVEVac1NsUkhSSEpoZW5WUU15ODNNek5oWkdKNU9UVjJSa2RqWVdVd1UzWk9lVUZIVWpSTFJXRTNSRXNyT1RaTWJ6WkxNbTlXZFZVM2FuTnlMMnhhTm5kMlVFTkhlbGh5UVU1cU5GQk9kVnBoZGl0V2REUTVhbFYwTjFsbVpuQlRORTF2ZW5JcmVXSnpOMWd3TlV0c09URmFLMHBRWjBreGFGVklhblZwUnpCMVF6VnBiV3MxV0ZaclVHOTBSVnBEWlRCa1JqVlJaazQwY1ZaMFVqSnpaaTh2VHpJcldVTk5kRXBMVFRobFN6SkpPRzVvVDBSVlZqTlFjamd4WjAwelZWcG9SMjFxTDNadWQwRldTV2h4VEVNNEswWm5UbWhtTTNrdlMycDJaVWxhTDJRMmVFdGlTMVoyU0RJMFprOXBOSFZSUmpCbWFrWnBRV2RGV1hsS1J5czFhR3QzTW1RNU5IVllkRkl3WVdWbGNqVTRTbFZqYW0xalZHMW1lSGREYVRCSlN6SndlV05pSzFoYU1TODJlbVpLY2t4V1dGaHlhV2RNV0c5blZ6VkpSeTlTWTNRMlVERXlkazl2Tm5Cd1IwbzNRa2RCWWtkQ1VubHdTMWhCTkZWMVFXUk5PVUkyVFZsM09XUlJUalE0WmpBeU1VaHhSMFZTY2xoVlJFRjJSelowZG5Wa2J6RmpNbUoxZG1sak1qZGljVkpJVTAxSmVIQlJNa3AzYmtVMEwzQnJjMll6SzNWaVN6VTJVbXhhV2xOWVRFTXJlRFZQVlRaRmJ6TklPQ3M0VVVaSVIyZGFhSEpEY1hOTGNGZFNTMDFoWmt0T1FtVkJaa2hOUkVGWlVVTkJkMFJ2TUUxeGRsSk5kREZxZUVob1JqVnhOMjlVYnpoRmJ6TkxOVEJ5UmpZMU1rUTNaRzVXVURaM1MwMTJOVVZ6VTBwTWIyVlVlVXRuTmpWUGFHUjZjRzVpZGpsbE1GSjRNM3B6ZUUxb1RVbGhNMmxUZGt3MGVIRlZUekp4UWtKclkwUnBRVzU0WTBSaGNHUnNOR0pGTUN0dWNtazVRVWQxVEZwelNteHFZMUJ1UkRSR1MwRmhjazVwY0Rkb1IwWTNaVEYzTkM5cldFSnRUMkpFYVN0MmVuQmxWbVpOWlRoT1RYaFhPR1pYYlcxYU1uUlFWMnBXZGpJemJtNXNUakpoVmk5dVVuUkZZV2swYzFCUVNXVm1VbFJsVHpCRlJHdFlRVTU0ZWtVMmJYUjVjMGhwVDJVNGNrVkZSa0Z2WjAwemRIY3pVMjFITW01d1JHMW9lSGxGYW14UFZsaGpkakp2WlhCVmNrWnliMjk2VDA1bVlYUnRTSHA0WnpGc1FVUlNVMUV3YTIxWlRFOXNVRzVZUkdSWVRrSTVXVTgyZEdoR01FUnJZVFJuWVZKWVdUSk5Va1pQVTJ0WmRFZGpObFJEUldwRFRYRnhkSFJCYkZFNGFFeE1VVzF6UjJsbFJ6aFlOVEI0UVV0aGNVSkdSMlEwVDJKNGFraFhjbmRKVW5wUmMzVXpOQ3RWYkU5a2RucFBhbmRNYVVzeVdFc3ZNbUpvYWpKUmVETXJkbnBhYkRBeFNHbEVXV1pQVDNWR1NVSkVUMnB4V1ZwSFFTOUdWVXgzYjIwck1VTlZXVU1yYjFORGNUWnVjSGcwWlV0WlFrOU5ObkJwTjBVNGNWZFlSVlpwVlVsclJFVmhXakZzTHl0c0sxZDBUWGhaTTI5dFkyNVBlVFYwTnpkNWVUTk1lbVpTVUZKdlFXMHpUVzlHWXpkTGJEa3lNamx2ZUdsTU5uUkJSazlQSzJ0UGNFaFJhMXBXYlVJMGRYRlhUa1JUVDFGTFlucFpXbkJzVGpoMlFqZFpSbkZUYTNGblVuUkZXRU5rVG5SR2VWRjNSRGx3UnpCTFJVTnVjbWd6Um5scmNHcHNkalZ2WjI1U09FTnhWMHQ2V0Zod05EZEVaRlJ5ZEU1cmJrUXJiMkZuWTJOVE5FSmlWbWx2Y0dwdVprRkliMnBxVm1Ob1JsWTFUbGhXVm5wdFVsUnhVVTFyV1VNemNUQlVjMmt5Um5kUU9GZEtVa1o1VEdNeFUydHlXbGxQZGpCNVdESTFNRVpTVmtkTU1rRXZSMVp6TUVsclQyTk1NMkUwVFRKaU9EbEJLMDFqVlhWdFNsbHlWVUYxWjFWTFkxY3pjV3BsUTFReldqbExlbkpITkdwMGRTdGxlVmhRVjBseFJVRjBWM0Z2U0RodmFFSXpWa2hZVkVkTGNVNXROa1ZMUTBOblRtODNlREZFYWs1WmVUQnNTMWxpVERWYVFUWndXa0V6Y0dONk1rcDJRWEJTWWxRMVkxQnlkWGR6YlZjdmIwTnViVlZEU3l0R1VVWkpWV2d2VW5NMFYxVmFlVW8yWlZSMVFsZHhRWEJSV0hVelFpOTJjVXhhUkVaR04yaGxSMnRES3pWMVRUWnhkeXM0VEhjMVFVOUxWSG8wVFhCUFRHdE5XRU50ZUVwRVMxazFiMWRKVHpOTU5FSlpUazAyWm5WUmFUVk1WMVpaWVdVMGJqSnpkVlpvYUZReVdFeEhaemxIUVhKTGJYVTVSV2gzUTBKRGFtdGpUazAxUkZwVVF6aFZRMVZKZVZoVWIyWkhOazlZWlZOcGNFRlFRa2xMYUhGQmVEbFNjWEZMVTBSbmJWTlpkMGhaTUZOQmFVeEVSelJ0ZUVFM2JXNXpPVWRRU1U1M05WQjBkemhtTVc1MGFITTVjMWxuVFVGYVQwTTBTbmhEU1hob1FVbFNObFZTYlhWcGIweFFSVkZaV2tjNFRVTlNSWEV2TWs5T1VsZE5aVGM1Ukc5a01ua3lSazE2U1hOdFVGRlVlSE5LWTAxblltOUtiSFpTTVhGdFNGWmlTMHhaYzBKQmVHUklSRlI1Tm5SYU5FeFVTMXBDUlVSRVpHdG9jWGxoUzAxU1NXaDJWbVZKTVVScWRYbHpSa1Z1VVRWNGRXbzVWMmMzYlRCdFQyZENSMHBvVDI4MmRXZGhhRlYwUmpsak5UWk1hVFJqVUhsc2VVZHBabGQzVGpSblVtMTJNMEl3VVdkcE5ETkdSVWx3Y2pCVmRGQnFRMFpRUzI5d1UzVlZSRU5EWjBRclEwVlBNMUkyUkcxVVRTOVNSVk40WWsxa2EzQTNMMVkwWmpkUkwxZEJPVVJPUTB4QldXWjBPVUZVVmpGRWVEaE9UR3c0ZVdoaFpXVkRXR1V5VTBGTVJFdEViVUpxZUVaM2JtcGFUbEpJVm1ac2NGZElPVVIzY2pSTldHSjFZakJXTjFSNFFWZFNWRVp1UVdoUFdEQjRSelpuVGpKdGIwaERRbGMyWW1jd00wMDVPRWs1TkVRMWMwVnNTV3RWUjBoME1tSnFlbU13Wkc1bU5GSXpkM2xsU21GelZGUjRSMnBhV1VSU01rTXhTa0pIUkZaclZIWXhjR1pwUVZaWWRXNUNNUzlyZHpobFVTc3ZUM3BSU2t0UFUxcHBZak5qUVZoU2RWSmxSWE5oWWs4M1duZENaRE5ZTVdSSUszZzVORk5OUVRoWFVVTjZSV0o2SzJaeFpuRllhaTlPUmtsa1RtbDNjbnBOVlhOMGVqRkNTVU0xVkVsVmEwa3laR05ITUd4T1ZVOUxiSFJpWkhoWE9HaHJVelJGVEZkQmNFOVJLeTlNWTBSMGVFRjBkV2RYYURRNE1YZHFabFVyZUhsQlEwZE5iVEUwUW1kQmNGZHNSemgwWWpJM2RuSXlhblkyTlVSVE4zQjVVV1kyVVRSc1ZXUnRTbmRUVEhwaFJrVnpaVWhhTjBoWllqbFpWbUVyTlhwWFQycHBVMnBqT1RaYWNFMVBTMjQxVlhOblJVeFFSM0J5WWpCa1dGWXlMMnBDTTNNemJFRkhTMnRvYUd0Q0wxQnFLMnc0ZDI5U1RISmhObWc0Y0hGNmFuRkROR1pEZVVWNWVqUmxTR0pET1dkTU1tUlBSMHhzVjNsaVYyOW1lR3d5VURjMVptRXlSRmxOUVhkNGN6ZDBSbmgxVkhOV2RqWkRlbGRYYTNFcmRuVkhWVkJPVW5aaUsybzNZM2RxUVUxWmJuZG5PSHBCZGt0UlIxbFhWR2d6WVRCdVR6ZzRaRGtyTWxoa1dHRjNTMEZRZW01Uk4waHNlRlJuUm5WTFkzRkhjVVJOVERWYVZHZE1aV0ZhU1dobFJIZERkMjF6VjI5SFlta3ZTbmN2T1hGR1kwZGlXVnBrTjB3NWVIcFNkV3B4WWtneWVXOHpaRTFGU1UxeFVYUXZNV3RyZWtGS1NrRjVVMjFHUlRSV1VGaHhhREl5Wms0MmVtWTRZU3RoVlZVNU4yb3pkMlpNVURsWFNHZzFZblozVXpOR2JDdENLMWhyTUdod01IQlNRMWxQUjNWSVNXUnFiVkZVTms5YWJpOUZaVE56YzFSemNrYzFRVGQyVEdGM1RIUnVjazFpVkc0Mk1EZGhSSEIyVjBGNFpFeERiM0JPUzNKS1NXNTZlSEZOU0ZoNkszY3JTbkZUYkdWR2R6WlFXRGgxWWs5WVdFaGtkRUZZU25velltZ3JZMkphVlRobFYxaHZaVlJtVlc1TGFIUXpZMUY0TURRd2IzSlBlbkEyYmtRNEwwVkVOWGh2TDFCQlkyZFNTM0ZhU1VaM2NtczNTbTB2VmpoMk9WbFBSWGxoVjFSYWFTODNMMnROVUROaWNuVTJaVFUzU0ROc1RtSkljSGh5T1dreGNERmhPRmN4VlhacWNEZDFhMFp3VHprMlZWWndPRkptZEd4VFMwUlJLeXRNUlhKMUwwZE9NemhaTXpOallqVnVhMWRoVXpKcmVUZEtjelp4VHpVMFEya3ljVzEzUWxKQ1dXbEZlREF3UldGUU0zcG5NVkl3UVROeU1tMWxSakZTVmpKbVpVdHljMnB2ZUdsQlVURllkQ3RsUVVKR1dTc3hRVk5KWTBSUll5ODVaek16U0VSNE4zRjJkekJTT1VVNGVqZGhiUzlyVVZScVIyNUhjbVZUZFhBclZYSmtTM0U0Vmk5aGEwZFdaR3huY1hkMFUyRXpTbTgxZUVKS2MwSnBSVFpJVjFSbFFsWlFMM0JFUVhCcE9YUXdlR05DV0VKM2VqVTVaM2RtT0c1c2NWTnlhMjVTVGtaelQyTnhjV0ZVVlhJNVF5OW5kRmRMYW0xdkszSllhWE5uUVVGQlFVSktVbFUxUlhKclNtZG5aejA5S1NCdWJ5MXlaWEJsWVhRTkNuME5DZzBLTG1sdFlXZGxhVzVtYnlCN0RRcGlZV05yWjNKdmRXNWtPblZ5YkNoa1lYUmhPbWx0WVdkbEwzQnVaenRpWVhObE5qUXNhVlpDVDFKM01FdEhaMjlCUVVGQlRsTlZhRVZWWjBGQlFVTkJRVUZCUVdkRFFWbEJRVUZDZW1WdWNqQkJRVUZCUXpOU1JsZElVbFZoV0ZKeldsRkNTbUp0V25aUE1qQlRURmxaUVVGQmJHRlRWVkpDVmtob1pXcFdZMHByUmxSV1JsUXlMeThyT1d4dFMxWjBRbTlhZUVsS2IyRTVaMHREVWtWalUzRlNRa0ZvVWtONFJrOU9SMEZuVmxaSGRIaFRiWEZ4V1hsdE5FMXBZMGQwVWs1M1EzaHZhVkpTVmtKck1ERkdWekppWkhoQlozbE5RV293TkVzNFVGRk5PSG93T1VSaVpDOWlaVmhsT1M5MlluSjFWVXR5TVdSa09UZDJNU3N2WkdNck5qVTVOek4xVlZsUlVYbEVaRVpWWmtGME4xaEpURUppTjBKMmIySklSVFp6TWpFNFNFOVNVbEZSTWxka1lscEhXVlY2VERscVozQkpSQzl0V1VOamRucFFaVFU0UzBOQ2JWQkNlV2RhUVdkTVQzaERMM1p1VVdkT1drcGFkRmt2TjNORFdtUlFNRFZHUlN0cGRpOHpWRE5QTjFOdFdUZFdTbVJPZVd4RE9HUkdTRFEwVmtOQlRGbzVhMmREVTJ4dFdITlRjMUZwYlhnMUx6aEtZVlJFU0VobVdGWldNa3AxZFhaTFlrNXplbVZIWTBwSWFucDJWbTgxTldwMFdrWnNhRGxpWkZkQ1R6RTVabFl6VGpJM1dXUXhOSFJQTms1MFJXVnBiM0YxYm1wcWFESjFlbmwxWmpGcFVrSjNPVEJUY0ZkaWVtdDFMM0pZTmxsUVJFWk9NMkpPUVdWRWJTOVdiV3c0THpKV2RIYzRaM2dyZFU1a1ZGZFlRVE5qT1M5amNWZDViVmR5UkhndlduTjJUbnBqV1VaQmN6aGhaM0J0VlV4M04xTkZZbXhuTUhOMGRrTnZhbXQ1VjJoelVtMDNZV1pGYVN0ME1raG1NRGt2T1ZsTlVubFJVM0oyZVUxYVlYVXlTbk4yZURWSGRtZHhkbEJNT1hRMlJUaHVWV01yY0UxU2QxcFZhVXhTZFdsMVJEVnhVR28wVjBsa1dXVTJRazVRVEhNMVMwSmFkazlwZG1VemRFMXBUbWgzSzB3cmNTczJRa2hTZFVNMU1ETmFVV3RVTTNnclVXSjZPREYwTm1WS05UbG1VRFJRVm5sRFpuaDNjamt6WnpneFJrUnNjV05ZTWk5WWN6WTVPVTVRVjB0UlMwUTJNVzF0YWtFeVRraHNiMDk1VWxneFRFdzFZblpoYTBneGVWYzBSWFV6VWpBNVoyNDBRM0o2ZHl0aWQwbDRWM2xqZGxwcVJYaDBjRTlNVURKM1FWVmxSRE5WYWpCSFVtYzVja0Y1TTFRdk9XVlpUMFJCT0dreEwxZHllbTFTYXpaTlNVSm9WSGh6ZDFKTlJUQnlNVEo0VUZCTVpESmhSMFpTZVdSd1dsVXdaRGRMWjJJMWExVjVZbVZRWm1kbFYzbDBOelJhVVU1aVp6bEhiRlJPUWxWV1ZrbEVaMWRpV0U5d05VcHllbTFoVjI4clNVTkpka3h0ZWtOYVJqUkhjVmRDVVhSM0sxazFlVzVtSzIxbk1WRXZPVFZ6VlZKSFVrdExXbHBzWnpCNGR6SldhelUyZGpNdloxZDZLM0Z4YVhka1RreEJXV2xoVTBKR1luUmlNRmRqUW1KeE9FZFJWME50UlV4QlRtZFVSMFJtVW1jM2NFSm5SbUpvVjI1WGNWQlpTRFI2U1RSM2IybHdaRVpqVnpkbFQydzNaV04zTUU4elZrMUtaalJ6VHpCSE1HSXdOeXQwVEhablIwRnNZa1F2T0UxblRXeHJSR3R1TW13eE1GcE1UbVF6THpOeGFYUlllamQxYWtOMFVtTlhURmN6UWxJd2EzSTBZM2xqTW10TFNVRkNjVTlPZHpBMlozRk5kV052VUVGUlNGWTFXVXQzUWxKaE9XVjNXV1Z1ZDJVeVlXTlBhV2hPU3pacVdGUmhVVWxXWm5kM1RYcG9NVWR3VGt0NldqaERiRTl1TWpGWk9FMUxhVUpYYzBKSFJYcEZiRlV2UVRkVE5UUmpka3hGYjJGRUsxRlhNVVJFTlhFMlZXOUJhVkZCTUhWRFZraEVTWGcxVEZsdVJFRkNORlpsWW1kTU0xVnFiazkwZGxSSlZYQnJSWHB5VlRGRVFVVkpTV1YyWWtkRmNHbG1NekJKZVZwVFFrdFVZMDFTTUVkQ0wza3ZXbWhuVkhKc1ZERjVkakV5TUdOemNVRXdjMHhvVm5jdmRXcDNVWFF6Ym04NFNrTllialpvWjBkQ1ZGbEdSRVZyUXpKR1NHSktjM05YU2s5Q00zUndMMEl3YXpKbWEzaEpTMVJKVUVGWFVVZGlVbmxJVEhobVduaFVVV05TYzBSRFoyWjZTRXRDTlZWTmRtWXJlRXBXVFhwQ1MwSnNSbUZCWW1KellrbDVha3RhWmxWT04wSk1SekJTVmpKMVJYRkJkRlpXUVhOQ1YwUktWbEprY1ZkNFRGazRaRXBDUjBOclZFeHNTMmgyUzNoWlduTTRkbGxVVFVKQlduTkpWM0JhZWpWUFNVVXZjaXRIVXpWbk5HRnBRa2RFVXpGSWMwdEliRnBuUVRkNVl6Sk5RWEI1UVdWMk1sRTRhWFJCV2pVd1YyZ3JWa2RwZWxCVFRGcHROV0p3Y2s5VFJ6ZFNPQzlZUkZOMlNISlBPR1JuTW1WUFZEaGplRGt4ZVVwTFNGYzVZWEIxZDFJd05VUnNORXBJU25sR2FqRnFZakZGZVVWYWNHRlJiVkl4Y1c5NWVWTnpOVUpUYW5wVllWZENTVzVzS3pKNmNqZFRRVzEzYmxCTFNYZGpiR1U1YlhkcGEyTlRSREI1ZEZKUFkxTm1kbU4yYURGc2VsRlZNRk5CYlhwRFluWlNlVVpDUWxVeVkwczBPVUp3TTIxcEwzQTFTV0ZEVFN0R2IxQlhTMXBXVlhScVVHZDRVM2hFYW1GSVQxWjBOVkFyWnpaT05WaEtPVmRWVm5CTGQwNDFNM1JvVHpNd1IwYzBOVnB1VEVoTmJuQjZOM2ROWnpCd1NGRk1iMVZ6U2pKRVNXaEdNVGs0ZUdaclJUSktWRTFZVlVOblNuUktTa0UyUlV4VlpXcGpNbE4zT1djelRtZEhWVVJHVDJweFpUTk9WVEpOZUVKbldUZEJZM1ZQUjFGalZXcHdSblp4YVdGVGFFTlRSbFZOYm5NdlpFOHdRMWRCUnl0SmVHaE9jRXRZTVZKbldWcFZWWEJqYXl0MVN6WnZkME0zTjNSU1ZXUmhibTlxWVZWQlQxQldiSE16VEVGMFNWcGpjWEJtVTJ0WmFXMDFSbmg0YjFOaVRHdDVRVTFwYUdWRVdUUkpTa05JV1RseVVXUkViSGxNZVdaQk9HOXZWbkY1WkVGU05FdFNVa1oxUTNWQ1JrZFdjMGRGTlVkd2JUQjRjMHQ1ZERkaVUwSnJla1ZVY0VwSFZsTXhRbFI0YjJ0cldtTjFVMjgyZWtWTE9HMUlkM3BGV1RabVVUVkJTR0VyUVc1WmNXeGhhSFJpVHpaRGNHbHhORnBzYVVGdE5HTXplV3h6ZFZOaGVUZFJNMGd3WkUxVlVUWXdNR2t4WVdaVVQzUlhTa2xLZUdGMU5GSkJURW8xUTNSRVpVWlNRMUZHWjNkbmVsTlZOa1ZUV1hrck1ta3ZhbVJaVkVOVFEySnFlREZuTUdOd1JXb3dRbloxTTBaV04yOW9SbVZ5ZUhScVMzZFFkMkZKUkU1WFZHNWFPRzFhYVdKcFFXVTNWVTlTUzJoRWR5dDZhSG8yWWtkcloyRjBTM1pWYUZONGJIZHhWekJxZVhwbmEyYzVOMmhrYlVSRGVWWktZbWR6T1U1ME5rOHdTamRqYTI1SlNtcEJlR3hYVERscVVUSmtWRk5IVDNOUWR6QnZXbkF6TTJVcmFHMHhNa3ByU0U5QlVYcEVkMHN2ZFVoYU9FSkdNVUpqUTI1M1pVWlZPSE12U1VjNFNGbFlZMGs1Wm5sWWJHMTFZVkpQZFd4RVJtSXllbkpTTTBoeGFHVm1kbTFHZWpoQ1dVUkxNbmh1T0hsaVNYaDNkVTlRY0VSU0wxZDJSRGN6TjJnNWFubHZVbmxJUVRsbFVXdGtNMGR5UVZaRFVWUlpWVUZTVVZRdlQxWTFVMVZaVUV0bldXSk5NRmhKY1dwbE0zbFJOek5TV1dOVGJVVlRhMjFDUm5GUksxUkxVbGt6T1RVM09XUlJhR1poYmpoUFVVbHZlSFl2YjB4c09HdFZlbFp0TkZwUWRqaGxNaXM0WW0xQ1dtWXdWR2xQY0dGekszZDVlRkJ5TlhsR1prSk1TMDAzYkZsd2EwOUJUV2RXVmxsSWNUQndlRXg1TlcxVFNsTm5kVEJRUkZsUVYxQm9UQzlNWjFaUU1GZ3JUMnBxVVROVllsWjJNWGhQYjBGSmRWbzNOMDkyTnpWQmVUbG9lbVpLU0hWU2VtVklNRFprWkRnelNVMVNUM0kzTlRnelNTdEJkRGhEUldOVEswOTBObWRoTUdSNVdHaFZhRk5JY1doNGVTOUtNR1ZyWTJwNWFsaDNMMXBGUVM5NlVIWndUVUZUUzNaaWFEUnpVV1p5TVhVdmRWQldNaTh2TjFsVVVucGtlVUY1WWtvM1ZuZFVZM0V3ZVhCVVFVODNNVFZhTXpsS01HVjFSMHRPVkhWT2VuRTBkeTlKVldWUVJIZzNUa3RhV0d4VlVGUlBTSFIxVkVwMVpHNDJXR0l3YjFWalRsSlhOSFZoYjBORU9YZDRhV3BQV0dSV0t5OWpZUzlTTTBoVWNWbFJTUzlEVTBST2EweG1PVmx5U0Vrdk1ETkpja3hQT1d0T2NHUXZaWEZQYUdwTmJqVnhOVGhhTVdOclpVczFUbE5xZGpFeVozSTRZblUxTkRORWNuQlBlR2hsVlZsUmVYWTFaa0Z1V0U1bVJuWkNhSGhQUVdrdmIzcFllVXhWWVd4aGVuVldRMDVzZG1sME5reHVhRGgzWlVaUVZtMTNSREJGWkhWRGFtRmliMXA1Tm5sNWVubDZUMU5HS3pkWmRETjZjblYxYkd0NmEzTnVSVGhvUmtSeWVEUXZPR1p5VWt0RE9IWjRVVE5xZVhGU1RIVjBiblpMUjFSbWMwRnRNSFF6Wkdndk9FVTJUa1JYTVc1WGQwMUlibkp2WkU0eVR6QjNRVk0xUVZsamF6WmphMW8zVUc1UWJrODFaakJwV1ZoRFJqVXlXbE5tVUZCTVNYSllUMlZoY2pNdk1HUm1SVFJ4VjJKNFduRk9VamhZTnpGalprVjJjSEJITm1WMmNHVm1WMGRKSzB0bVUzcGhTa0pSS3k5TVIySmtMMkptVjFOVVkzVm1RbFJCYkdWVVJqVlBOWE16UTNwUGVreDFaWHBEYTJkVE5VRXhVV0ZoVVZwamRFSmlkVGRhSzNWd1MwRlBPV1pPTW14UFZsaE9WSGhWZVZCeU1tZFRRVW9yYldWVllYZEdTV0Z3VG5kQmFXMVZOMGRFTkZjM01qZFpaRkEzU3l0b2JGaE5OM1ZrV1RKa1p6VklUV0pOTm1waWNtNXhaV2RMUVVwbWRGRXZWeTlxYlhKeGVYUkVNWEF6Ym1GMk5WWjZhVUZhVFVRd2FuUmFWbmg2VUhwYVdIZ3haM3BzTjBwcVFVeFpkSFpJZGxWUVJIUlVUV3RpV0Zoc2FuWnFSVXBKVldaSWFGQlNkbk5RT0VSWmJGSjJMMlpaTlRkeGEwRkJRVUZCVTFWV1QxSkxOVU5aU1VrOUtTQnVieTF5WlhCbFlYUU5DbjBOQ2cwS0xtbHRZV2RsZDJGeWJtbHVaeUI3RFFwaVlXTnJaM0p2ZFc1a09uVnliQ2hrWVhSaE9tbHRZV2RsTDNCdVp6dGlZWE5sTmpRc2FWWkNUMUozTUV0SFoyOUJRVUZCVGxOVmFFVlZaMEZCUVVOQlFVRkJRV2REUVZsQlFVRkNlbVZ1Y2pCQlFVRkZiakJzUlZGV1VqUXlkVEpWWlZWNFZWWjRWRWN5TmxwVGVFYzFTaTh5Ym1GMFVFZFFhV3hETWsxdFZWaERZVll5YzFkcllVZG9ZM05HWVhWNWJGSlpTbGxEYjFOVlFrRlpWWGRpUTFWcldrRnVRVXBUYkhKRVJITkNVbXRIVW1kWloxazJRVVJNUzBSVloycEVUM05QSzFVM04yVXJPVXBoVms1Q1lVZFZNRlJpTDBwTWRtNTZiak5JWms5UE1tWmxVRUZRWjJsbVREQXZTQ3RRUzAxTU9IUm1jVXhHYldOS2NEQnhSRlJXVldWa0x6TnVlRXBGVjJ3emNYVXJTMGczTVhwTloyMXJkVGw0TVZnNE1sSkxUelpoTnpaTFNYVldOV1ZyZFV4Rk9UTm5iWEp4TUZwcVEzRTBZelpoWVhaVlVscHBNemxaYzJselExRlVUUzlTVm1obFJUTnlibXMzTVRGc2JtMDRUR1oyYW5CclpESkNjbWhuZFZkS2VWSlpTRXMyYTAxRk1qQmFhbWxFZUVWSlZVOXZXR2xCUjFCRU1teERlalZtYm1obGFYZFBRM0pCTUVseFNWRllXVVUxY1ZGbmEzUnNUR3RpTW5sdGEwTmhRMnB0ZFc5V1NFWk5Wek52UmxsV1oyTnhZMWhEWlVGalJVcFlkMHR2ZUdSSlJUZG1TMDlMWjA4eWRETktaR1JLSzJOa1RraE1Na05pUWtWeFUyNWlRVGd6YnpaR1NWSklhV1ZPUlhkTmFqbEZiMXB5ZUVaeFYxWnJRMUUxWjJWVFIySXJiMVU0Y2pCT1JFbFlibFJhWW01b2NITjNNVEZsU1dWWGEwWnZjbWhvVFVSQk4zbENRamxKV25wNE5XNXlOVzFQYTFSblQxTjFOVWh1Y0dZM1FYQlVabWhoY1ZjMGREaDZWbkUyWWpkRGQyVktiMGt5WVRkVmVrZ3ZaWGhHZVRCNU9VUjZNMUV2YUZkeWNUQlNhSEJKYURsa2FGRkZiMUF5Wm1ONllsaFVaazl0VWxJeEwydHdZemwxYVV4VmJETXpjeTlhYW5CVFEwVnRXVGRqYlVkWFNtZE1iSE50V0VaTGNYQlNNazVOZW1oNGNIQnBTRTlFYzFobEsyOHZNa0kxV0doNGRFbHlPRlJLV1cxb01XOUtSemxYYVU5dFYyVkpZVnAwYVZGTmRFRjFhRmt2WjBab1YzSnhMMUpRZGxOTllrMXlWMHRSZFRNNWEzVnlUU3N2UlN0eVQxQnVXbVIxV0VOSU9UWllkRTltTmxsV1NGZG9jMjV0VXpWcFZYaE9lRzFaVldkTmJIUklia1pMY2xoNGNHcGpObGsxVlhSSFpXWlNaRVZ3ZGxwMmFFNTFiM1pRTDFSdll6RXhNVEppVlZoRWFrOXFiamR2VW1vNGJrZERNMk4zTXpFclNtcDZMMlJTTmtkaFpXNW1VMlJDUlhwdVZtMXZhVGRSUWpNME1GWTVWa055VTBoSVZUQnBkSGN4VmpKaE5rTjNiVFE0ZVVGMlNXRk9hVmR6YUcxTFoxQjJPREZOVm5jMU9IWlVkMjlXU3l0T01GWjRObWdyUVZCbFUwMVFOVVp0Y21GVk4yRmxMemRXUzJ4Nk0zWkxNbU00TnpKUE5VaHhRME1yV1VoaGFrWmhOMjgzVWxWc1pVTkhPRmxGU0hCQlNub3dRWFU0YzJaclpGSTNOVFJTVlZGRGMyNWlPSEZvU0ZsNlUwaDVWMWgxYkV4c1JHWndWMDV3YzNSUE5FUjFMekY0ZEhGd1puSkxRVEJsWmpaeFJIQk1LMUpaYTNWSk1UVkxSVUpIUTI0ck4yZzFhMnhrTlc5eWEybEJPV1JtTW5OTVlUSndOWEEyTml0aVUxSnpZa1paVWtGSFYxTk1aRlZUZG0xMmNYVkpVRFpMZFcwcmJXZDBWRkpoYmpSVGNIQnVaMDFHT1dsMlFuaHNla1pLZDJSSVprRjFZWGtyUm1GMWNIUnNSU3RoWTAxa1dWaFJVM2xJVEZKWFJUUTVjV1pNVEhWTGF6Vmhka3RYVldWcmVXcFZVbnBxVVVoaFlXbzJTRU5pZWtoSkx6SmFaRnBHWTBRMFpUazFRWFIwTTBkcVVEUnVWRFZDVUZKd1ltNDNlR3BIUWxZMGIyOUdibW92VkdwdGJqTkNiSFVyT0dWekwyOUZkeXR5SzFwaFpqSXdkVXRHTWtOek1HZG1VMkpQZFU1SlFTc3dhR0ozTlVSa1JXTkVkM0ZxUWk5T2REY3pLMGhtZUZONU5uWk5iemczUmtGemJ6QTJOeXMxVmxCS09XbHZPVGRVVmk4MFZIQndiMVJOVm1KR2FHcFVja1ZCV1hsRWJYaE5jR2hXUjNsck5WUnhTMkpsUVhodVMzTTRaRTUyYVdSdlRGWktlbms1YjBkc1QwdHpWa1YwY1ZGbk5XZFlRbmRLWlZZd05GcEVXRUpyU1d3cldrcEVXR2hxUkN0U1IwMXpTbWxYTDFsTGIyeEVaRkIwTWxwb2RYazRTbFZoZDFsdFlqWlRVVXg1UlVJME9XVnBkMDUzVm1OVVFtRTBXVTlTVldjNFRVWTNkR2xMVGpoU01IQjNhbXRIV21GUmVHcDNSVmRKVUhGb1lWSnRhU3R6WWxkRFRIazJORE42U0RkbGRqWk5kQ3RoZFdSeGQxRnZhVVpZWlhab00wNWtaMkYyTmprNE9VRmljVkJpV1ZFelExZHZSVVJSVjJnNWJHTk9iR1pWSzFJeWIyOUZZbGx4UlVkV1lXYzJiakU1VUhnNVFVUjRVaTluVW5GaGFsWXpTV1ZXWlZwQlFVRkJRVUpLVWxVMVJYSnJTbWRuWnowOUtTQnVieTF5WlhCbFlYUU5DbjBOQ2cwS0xtMWxjM05oWnkxaWIzZ3RZMjl1ZEdWdWRDQjdEUXBvWldsbmFIUTZZWFYwYnpzTkNteGxablE2TmpWd2VEc05DbkpwWjJoME9qQTdEUXAzYjNKa0xYZHlZWEE2WW5KbFlXc3RkMjl5WkEwS2ZRMEtEUW91YzNCc2FYUjJaWEowYVdOaGJDQjdEUXBvWldsbmFIUTZNVEF3SlEwS2ZRMEtEUW91YzNCc2FYUm9iM0pwZW05dWRHRnNJSHNOQ25kcFpIUm9PakV3TUNVTkNuME5DZzBLTG5Od2JHbDBkR1Z5ZG1WeWRHbGpZV3dnZXcwS2FHVnBaMmgwT2pFd01DVTdEUXAzYVdSMGFEb3hNSEI0RFFwOURRb05DaTV6Y0d4cGRIUmxjbWh2Y21sNmIyNTBZV3dnZXcwS2FHVnBaMmgwT2pFeWNIZzdEUXAzYVdSMGFEb3hNREFsRFFwOURRb05DaTV6Y0d4cGRIUmxjbWh2Y21sNmIyNTBZV3c2YUc5MlpYSWdldzBLWTNWeWMyOXlPbTV6TFhKbGMybDZaUTBLZlEwS0RRb3VjM0JzYVhSMFpYSjJaWEowYVdOaGJEcG9iM1psY2lCN0RRcGpkWEp6YjNJNlpYY3RjbVZ6YVhwbERRcDlEUW9OQ2k1amIyNXpiMnhsTFdKdlpIa2dldzBLWTI5c2IzSTZJMlptWmlGcGJYQnZjblJoYm5RN0RRcG9aV2xuYUhRNllYVjBienNOQ25kcFpIUm9PakV3TUNVN0RRcDNiM0prTFhkeVlYQTZZbkpsWVdzdGQyOXlaQTBLZlEwS0RRb3VZMjl1YzI5c1pTMXdZWEpoSUhzTkNpMXRiM290ZFhObGNpMXpaV3hsWTNRNmRHVjRkRHNOQ2kxdGN5MTFjMlZ5TFhObGJHVmpkRHAwWlhoME93MEtMWGRsWW10cGRDMTFjMlZ5TFhObGJHVmpkRHAwWlhoME93MEtiV0Z5WjJsdU9qUndlQ0ExY0hnZ00zQjRPdzBLZFhObGNpMXpaV3hsWTNRNmRHVjRkQTBLZlEwS0RRb3VZMjl1YzI5c1pTMXdZWEpoT2pwelpXeGxZM1JwYjI0Z2V3MEtZbUZqYTJkeWIzVnVaQzFqYjJ4dmNqcHlaMkpoS0RJMU5Td3lOVFVzTWpVMUxEQXVPVGsyS1NGcGJYQnZjblJoYm5RN0RRcGpiMnh2Y2pvak1EQXdJV2x0Y0c5eWRHRnVkQTBLZlEwS0RRb3VZMjl1YzI5c1pTMXdZWEpoT2pvdGJXOTZMWE5sYkdWamRHbHZiaUI3RFFwaVlXTnJaM0p2ZFc1a0xXTnZiRzl5T25KblltRW9NalUxTERJMU5Td3lOVFVzTUM0NU9UWXBJV2x0Y0c5eWRHRnVkRHNOQ21OdmJHOXlPaU13TURBaGFXMXdiM0owWVc1MERRcDlEUW9OQ2k1MGIyOXNMWFJwY0NCN0RRcG9aV2xuYUhRNllYVjBienNOQ25kcFpIUm9PbUYxZEc4TkNuME5DZzBLTG5SdmIyd3RkR2x3TFdobFlXUnBibWNnZXcwS1ptOXVkQzEzWldsbmFIUTZOekF3T3cwS2JXRnlaMmx1T2pSd2VBMEtmUTBLRFFvdWRHOXZiQzEwYVhBdFltOWtlU0I3RFFwdFlYSm5hVzQ2TkhCNERRcDlEUW9OQ2k1aGFtRjRMV3h2WVdScGJtY3RjMk55WldWdUlIc05DbUpoWTJ0bmNtOTFibVE2ZFhKc0tHUmhkR0U2YVcxaFoyVXZjM1puSzNodGJEdGlZWE5sTmpRc1VFaE9NbHA1UW1waVIwWjZZM293YVdKSFVucE1XRTUzWVZjMWRWcFlTV2xKU0dSd1draFNiMUJUU1hsTlJFSjNaVU5KWjBsSGFHeGhWMlJ2WkVRd2FVMXFRWGRqU0dkcFNVTkNOR0pYZUhWamVqQnBZVWhTTUdORWIzWk1NMlF6WkhrMU0wMTVOWFpqYldOMlRXcEJkMDFET1hwa2JXTnBTVWhvZEdKSE5YcFBibWh6WVZjMWNsQlRTbTlrU0ZKM1QyazRkbVF6WkROTWJtTjZURzA1ZVZwNU9IaFBWR3MxVEROb2MyRlhOWEpKYVVJeVlWZFdNMUZ0T1RSUVUwbDNTVVJCWjAxVVFYZEpSRVYzVFVOSloyTklTbXhqTWxaNVpHMVdRbU16UW14Wk0xSlRXVmhTY0dKNk1HbGxSVEZ3V2tac1RtRlhVV2xKU0U0d1pWZDRiRkJUU21sWlYwNXlXak5LZG1SWE5XdFBhVUoxWWpJMWJFOTVTU3RRUjJOblpFaEthR0p1VG0xaU0wcDBVRk5LZVdJelVtaGtSMVZ2VFVOQk1VMURRVEZOUTJ0cFVHbEJaMUJJU214Wk0xRm5aVVF3YVU1RVkybEpTR3M1U1dwSk1FbHBRbmxsUkRCcFQxTTBNRWxwUW5sbFZEQnBUa00wTkVscFFqTmhWMUl3WVVRd2FVNXBTV2RoUjFad1dqSm9NRkJUU1hoTmFVbG5XbTFzYzJKRU1HbEpla0YzVGxSV2FFNVRTU3RKUTBGblNVUjRhR0p0YkhSWldGSnNTVWRHTUdSSVNuQlpibFl3V2xVMWFHSlhWVGxKYlRsM1dWZE9jR1JJYTJsSlNGcG9Za2hXYkdONk1HbE5WSE4zU1dsQ01HRlhNV3hqZWpCcFRVUnplRWxwUW10a1dFazVTV3BHZWtscFFtbGFWMlJ3WW1vd2FVeFVRWFZQVkVVeVRtcFpNazVxV1RKT2Fsa3lUbXBaTWs1dVRXbEpTRXBzWTBkV2FHUkZUblprVnpVd1VGTktjR0p0VW14YWJXeDFZVmhTYkVscU5EaE1Na1oxWVZjeGFHUkhWU3RKUTBFNFRETktiRmt6VVN0UVF6bHVVR3A0YmtsSVVubFpWelY2V20wNWVXSlVNR2xqYlRrd1dWaFNiRXRFVFhkSlJGVjNTVVJWZDB0VFNTdEpRMEU0WTIxV2FtUkRRalJRVTBrd1RubEpaMlZVTUdsTmFsRnBTVWhLTkZCVFNUVk1hbEZwU1VoS05WQlRTVEJNYW1kcFNVaGtjRnBJVW05UVUwa3lTV2xDYjFwWGJHNWhTRkU1U1dwRmVVbHBRbTFoVjNoelVGTkphazFFUVRGT1YwVXhTV28wWjBsRFFXZFFSMFoxWVZjeGFHUkhWV2RaV0ZJd1kyMXNhV1JZVW14VWJVWjBXbFF3YVdJelFtaFpNbXd3WlZOSloyUnRSbk5rVjFaNlVGTkplRTk2UVdsSlNGSndZbGRXZWxCVFNYZFBla1ZwU1VkU01XTnFNR2xOV0UxcFNVZEtiRm95YkhWUVUwbDBUVU0wTkUxNlRYcE5lazE2VFhwTmVrMTZUWHBOZWswd1kzbEpaMk50Vm5kYVYwWXdVVEk1TVdKdVVUbEpiV3gxV2tkV2JXRlhOWEJrUjFWcFVHcDNkbGxYTlhCaVYwWXdXbFEwWjBsRWQzWmpiVlpxWkVRME9Fd3lZeXRRUjJOblpFaEthR0p1VG0xaU0wcDBVRk5LZVdJelVtaGtSMVZ2VG1wQlowNVVRV2RPVkVGd1NXbzBaMGxFZUhsYVYwNHdTVWhuT1VscVVUTkphVUkxVUZOSmVVNURTV2RqYm1jNVNXcHJkVTVEU1dkamJtczVTV3BSZFU5RFNXZGtNbXhyWkVkbk9VbHFXV2xKUjJoc1lWZGtiMlJFTUdsTlZFbHBTVWRhY0dKSGR6bEphVTEzVFVSVk1WbFVWV2xRYVVGblNVTkJPRmxYTlhCaVYwWXdXbE5DYUdSSVVubGhWMG94WkVkV1QxbFhNV3hRVTBwMlkwZEdhbUZZVWpWSmFVSXlXVmQ0TVZwWVRUbEpha1UzVFVOSloyUkhiSFJhV0UwNVNXcEJOMDFUU1dkYVNGWjVVRk5KZUdONVNXZFpiVlp1WVZjME9VbHBNSGRNYW1NeFkzbEpaMk50Vm5kYVYwWXdVVEk1TVdKdVVUbEpiV3gxV2tkV2JXRlhOWEJrUjFWcFVHcDNkbGxYTlhCaVYwWXdXbFEwWjBsRWQzWmpiVlpxWkVRME9Fd3lZeXRRUjJOblpFaEthR0p1VG0xaU0wcDBVRk5LZVdJelVtaGtSMVZ2VDFSQlowNVVRV2RPVkVGd1NXbzBaMGxFZUhsYVYwNHdTVWhuT1VscVVUTkphVUkxVUZOSmVVNURTV2RqYm1jNVNXcHJkVTVEU1dkamJtczVTV3BSZFU5RFNXZGtNbXhyWkVkbk9VbHFXV2xKUjJoc1lWZGtiMlJFTUdsTlZFbHBTVWRhY0dKSGR6bEphVTEzVFVSVk1WbFVWV2xRYVVGblNVTkJPRmxYTlhCaVYwWXdXbE5DYUdSSVVubGhWMG94WkVkV1QxbFhNV3hRVTBwMlkwZEdhbUZZVWpWSmFVSXlXVmQ0TVZwWVRUbEpha1UzVFVOSloyUkhiSFJhV0UwNVNXcEJOMDFUU1dkYVNGWjVVRk5KZUdONVNXZFpiVlp1WVZjME9VbHBNSGRNYWxreVRtcFpNazVxV1RKT2Fsa3lUbXBaTWs1cVducEphVUo1V2xoQ2JGbFlVa1JpTTFaMVpFUXdhV0ZYTld0YVYxcHdZbTFzTUZwVFNTdFFRemxvWW0xc2RGbFlVbXhRYVVGblVFTTVlVnBYVGpCUWFuZDJXbm8wT0ZwNVFqQmpiVVoxWXpKYWRtTnRNRGxKYmtwMlpFZEdNRnBUWjNoTmFrRm5UbFJCWjA1VVFYQkphalJuU1VSNGVWcFhUakJKU0djNVNXcFJNMGxwUWpWUVUwbDVUa05KWjJOdVp6bEphbXQxVGtOSloyTnVhemxKYWxGMVQwTkpaMlF5Ykd0a1IyYzVTV3BaYVVsSGFHeGhWMlJ2WkVRd2FVMVVTV2xKUjFwd1lrZDNPVWxwVFhkTlJGVXhXVlJWYVZCcFFXZEpRMEU0V1ZjMWNHSlhSakJhVTBKb1pFaFNlV0ZYU2pGa1IxWlBXVmN4YkZCVFNuWmpSMFpxWVZoU05VbHBRakpaVjNneFdsaE5PVWxxUlRkTlEwbG5aRWRzZEZwWVRUbEpha0UzVFZOSloxcElWbmxRVTBsNFkzbEpaMWx0Vm01aFZ6UTVTV2t3ZDB4cVZUUk5lazE2VFhwTmVrMTZUWHBOZWsxNlRYcFNla2xwUW5sYVdFSnNXVmhTUkdJelZuVmtSREJwWVZjMWExcFhXbkJpYld3d1dsTkpLMUJET1doaWJXeDBXVmhTYkZCcFFXZFFRemw1V2xkT01GQnFkM1phZWpRNFdubENNR050Um5Wak1scDJZMjB3T1VsdVNuWmtSMFl3V2xObmVFNVVRV2RPVkVGblRsUkJjRWxxTkdkSlJIaDVXbGRPTUVsSVp6bEphbEV6U1dsQ05WQlRTWGxPUTBsblkyNW5PVWxxYTNWT1EwbG5ZMjVyT1VscVVYVlBRMGxuWkRKc2EyUkhaemxKYWxscFNVZG9iR0ZYWkc5a1JEQnBUVlJKYVVsSFduQmlSM2M1U1dsTmQwMUVWVEZaVkZWcFVHbEJaMGxEUVRoWlZ6VndZbGRHTUZwVFFtaGtTRko1WVZkS01XUkhWazlaVnpGc1VGTktkbU5IUm1waFdGSTFTV2xDTWxsWGVERmFXRTA1U1dwRk4wMURTV2RrUjJ4MFdsaE5PVWxxUVRkTlUwbG5Xa2hXZVZCVFNYaGplVWxuV1cxV2JtRlhORGxKYVRCM1RHcFdla2xwUW5sYVdFSnNXVmhTUkdJelZuVmtSREJwWVZjMWExcFhXbkJpYld3d1dsTkpLMUJET1doaWJXeDBXVmhTYkZCcFFXZFFRemw1V2xkT01GQnFkM1phZWpRNFdubENNR050Um5Wak1scDJZMjB3T1VsdVNuWmtSMFl3V2xObmVFOUVRV2RPVkVGblRsUkJjRWxxTkdkSlJIaDVXbGRPTUVsSVp6bEphbEV6U1dsQ05WQlRTWGxPUTBsblkyNW5PVWxxYTNWT1EwbG5ZMjVyT1VscVVYVlBRMGxuWkRKc2EyUkhaemxKYWxscFNVZG9iR0ZYWkc5a1JEQnBUVlJKYVVsSFduQmlSM2M1U1dsTmQwMUVWVEZaVkZWcFVHbEJaMGxEUVRoWlZ6VndZbGRHTUZwVFFtaGtTRko1WVZkS01XUkhWazlaVnpGc1VGTktkbU5IUm1waFdGSTFTV2xDTWxsWGVERmFXRTA1U1dwRk4wMURTV2RrUjJ4MFdsaE5PVWxxUVRkTlUwbG5Xa2hXZVZCVFNYaGplVWxuV1cxV2JtRlhORGxKYVRCM1RHcFJlRTVxV1RKT2Fsa3lUbXBaTWs1cVdUSk9hbVI2U1dsQ2VWcFlRbXhaV0ZKRVlqTldkV1JFTUdsaFZ6VnJXbGRhY0dKdGJEQmFVMGtyVUVNNWFHSnRiSFJaV0ZKc1VHbEJaMUJET1hsYVYwNHdVR3AzZGxwNk5EaGFlVUl3WTIxR2RXTXlXblpqYlRBNVNXNUtkbVJIUmpCYVUyZDVUVlJCWjA1VVFXZE9WRUZ3U1dvMFowbEVlSGxhVjA0d1NVaG5PVWxxVVROSmFVSTFVRk5KZVU1RFNXZGpibWM1U1dwcmRVNURTV2RqYm1zNVNXcFJkVTlEU1dka01teHJaRWRuT1VscVdXbEpSMmhzWVZka2IyUkVNR2xOVkVscFNVZGFjR0pIZHpsSmFVMTNUVVJWTVZsVVZXbFFhVUZuU1VOQk9GbFhOWEJpVjBZd1dsTkNhR1JJVW5saFYwb3haRWRXVDFsWE1XeFFVMHAyWTBkR2FtRllValZKYVVJeVdWZDRNVnBZVFRsSmFrVTNUVU5KWjJSSGJIUmFXRTA1U1dwQk4wMVRTV2RhU0ZaNVVGTkplR041U1dkWmJWWnVZVmMwT1VscE1IZE1hazE2VFhwTmVrMTZUWHBOZWsxNlRYcE5lazE2VG5wSmFVSjVXbGhDYkZsWVVrUmlNMVoxWkVRd2FXRlhOV3RhVjFwd1ltMXNNRnBUU1N0UVF6bG9ZbTFzZEZsWVVteFFhVUZuVUVNNWVWcFhUakJRYW5kMldubzBPRnA1UWpCamJVWjFZekphZG1OdE1EbEpia3AyWkVkR01GcFRaM2xPUkVGblRsUkJaMDVVUVhCSmFqUm5TVVI0ZVZwWFRqQkpTR2M1U1dwUk0wbHBRalZRVTBsNVRrTkpaMk51WnpsSmFtdDFUa05KWjJOdWF6bEphbEYxVDBOSloyUXliR3RrUjJjNVNXcFphVWxIYUd4aFYyUnZaRVF3YVUxVVNXbEpSMXB3WWtkM09VbHBUWGROUkZVeFdWUlZhVkJwUVdkSlEwRTRXVmMxY0dKWFJqQmFVMEpvWkVoU2VXRlhTakZrUjFaUFdWY3hiRkJUU25aalIwWnFZVmhTTlVscFFqSlpWM2d4V2xoTk9VbHFSVGROUTBsblpFZHNkRnBZVFRsSmFrRTNUVk5KWjFwSVZubFFVMGw0WTNsSloxbHRWbTVoVnpRNVNXa3dkMHhxU1RGamVVbG5ZMjFXZDFwWFJqQlJNamt4WW01Uk9VbHRiSFZhUjFadFlWYzFjR1JIVldsUWFuZDJXVmMxY0dKWFJqQmFWRFJuU1VSM2RtTnRWbXBrUkRRNFRESmpLMUJIWTJka1NFcG9ZbTVPYldJelNuUlFVMHA1WWpOU2FHUkhWVzlOYW1OM1NVUlZkMGxFVlhkTFUwa3JTVU5CT0dOdFZtcGtRMEkwVUZOSk1FNTVTV2RsVkRCcFRXcFJhVWxJU2pSUVUwazFUR3BSYVVsSVNqVlFVMGt3VEdwbmFVbElaSEJhU0ZKdlVGTkpNa2xwUW05YVYyeHVZVWhST1VscVJYbEphVUp0WVZkNGMxQlRTV3BOUkVFeFRsZEZNVWxxTkdkSlEwRm5VRWRHZFdGWE1XaGtSMVZuV1ZoU01HTnRiR2xrV0ZKc1ZHMUdkRnBVTUdsaU0wSm9XVEpzTUdWVFNXZGtiVVp6WkZkV2VsQlRTWGhQZWtGcFNVaFNjR0pYVm5wUVUwbDNUM3BGYVVsSFVqRmphakJwVFZoTmFVbEhTbXhhTW14MVVGTkpkRTFETkhoT2Fsa3lUbXBaTWs1cVdUSk9hbGt5VG1wWk1rNXVUV2xKU0Vwc1kwZFdhR1JGVG5aa1Z6VXdVRk5LY0dKdFVteGFiV3gxWVZoU2JFbHFORGhNTWtaMVlWY3hhR1JIVlN0SlEwRTRURE5LYkZrelVTdFFRemx1VUdwNGJrbElVbmxaVnpWNldtMDVlV0pVTUdsamJUa3dXVmhTYkV0RVRYZE5RMEV4VFVOQk1VMURhMmxRYVVGblVFaEtiRmt6VVdkbFJEQnBUa1JqYVVsSWF6bEpha2t3U1dsQ2VXVkVNR2xQVXpRd1NXbENlV1ZVTUdsT1F6UTBTV2xDTTJGWFVqQmhSREJwVG1sSloyRkhWbkJhTW1nd1VGTkplRTFwU1dkYWJXeHpZa1F3YVVsNlFYZE9WRlpvVGxOSkswbERRV2RKUkhob1ltMXNkRmxZVW14SlIwWXdaRWhLY0ZsdVZqQmFWVFZvWWxkVk9VbHRPWGRaVjA1d1pFaHJhVWxJV21oaVNGWnNZM293YVUxVWMzZEphVUl3WVZjeGJHTjZNR2xOUkhONFNXbENhMlJZU1RsSmFrWjZTV2xDYVZwWFpIQmlhakJwVEZSQmRVMUVaM3BOZWsxNlRYcE5lazE2VFhwTmVrMTZUWHBPZWtscFFubGFXRUpzV1ZoU1JHSXpWblZrUkRCcFlWYzFhMXBYV25CaWJXd3dXbE5KSzFCRE9XaGliV3gwV1ZoU2JGQnBRV2RRUXpsNVdsZE9NRkJxZDNaYWVqUTRXbmxDTUdOdFJuVmpNbHAyWTIwd09VbHVTblprUjBZd1dsTm5lazE2UVdkT1ZFRm5UbFJCY0VscU5HZEpSSGg1V2xkT01FbElaemxKYWxFelNXbENOVkJUU1hsT1EwbG5ZMjVuT1VscWEzVk9RMGxuWTI1ck9VbHFVWFZQUTBsblpESnNhMlJIWnpsSmFsbHBTVWRvYkdGWFpHOWtSREJwVFZSSmFVbEhXbkJpUjNjNVNXbE5kMDFFVlRGWlZGVnBVR2xCWjBsRFFUaFpWelZ3WWxkR01GcFRRbWhrU0ZKNVlWZEtNV1JIVms5WlZ6RnNVRk5LZG1OSFJtcGhXRkkxU1dsQ01sbFhlREZhV0UwNVNXcEZOMDFEU1dka1IyeDBXbGhOT1VscVFUZE5VMGxuV2toV2VWQlRTWGhqZVVsbldXMVdibUZYTkRsSmFrSjZTV2xDZVZwWVFteFpXRkpFWWpOV2RXUkVNR2xoVnpWcldsZGFjR0p0YkRCYVUwa3JVRU01YUdKdGJIUlpXRkpzVUdsQloxQkRPWGxhVjA0d1VHcDNkbHA2TkRoTU0wNHlXbm8wUFNrZ2JtOHRjbVZ3WldGMElHTmxiblJsY2cwS2ZRMEtEUXB0WVhKcklIc05DbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJMlptTURzTkNtTnZiRzl5T2lNd01EQTdEUXBtYjI1MExYZGxhV2RvZERvM01EQU5DbjBOQ2cwS0xtTnZiblJ5YjJ3Nk9uTmxiR1ZqZEdsdmJpQjdEUXBpWVdOclozSnZkVzVrTFdOdmJHOXlPaU5ETlVNMVF6VU5DbjBOQ2cwS0xtTnZiblJ5YjJ3Nk9pMXRiM290YzJWc1pXTjBhVzl1SUhzTkNtSmhZMnRuY205MWJtUXRZMjlzYjNJNkkwTTFRelZETlEwS2ZRMEtEUW91Y21saVltOXVZblYwZEc5dU9taHZkbVZ5T201dmRDZzZZV04wYVhabEtUcHViM1FvTG1ScGMyRmliR1ZrS1NCN0RRcG1hV3gwWlhJNlluSnBaMmgwYm1WemN5ZzVNQ1VwT3cwS2ZRMEtEUW91Y21saVltOXVZblYwZEc5dU9tRmpkR2wyWlRwdWIzUW9MbVJwYzJGaWJHVmtLU0I3RFFwbWFXeDBaWEk2WW5KcFoyaDBibVZ6Y3lnNE1DVXBPdzBLZlEwS0RRb3VjbWxpWW05dVluVjBkRzl1YzIxaGJHdzZhRzkyWlhJNmJtOTBLRHBoWTNScGRtVXBPbTV2ZENndVpHbHpZV0pzWldRcElIc05DbVpwYkhSbGNqcGljbWxuYUhSdVpYTnpLRGt3SlNrN0RRcDlEUW9OQ2k1eWFXSmliMjVpZFhSMGIyNXpiV0ZzYkRwaFkzUnBkbVU2Ym05MEtDNWthWE5oWW14bFpDa2dldzBLWm1sc2RHVnlPbUp5YVdkb2RHNWxjM01vT0RBbEtUc05DbjBOQ2cwS0xuSnBZbUp2Ym5CaFoyVm9aV0ZrWlhJdGFHbGtaR1Z1SUhzTkNtSmhZMnRuY205MWJtUXRZMjlzYjNJNkl6QXdOMkZqWXpzTkNtTnZiRzl5T2lObVptWTdEUXBqZFhKemIzSTZjRzlwYm5SbGNqc05DbjBOQ2cwS0xuSnBZbUp2Ym5CaFoyVm9aV0ZrWlhJdGFHbGtaR1Z1T21odmRtVnlJSHNOQ21acGJIUmxjanBpY21sbmFIUnVaWE56S0Rrd0pTazdEUXA5RFFvTkNpNXlhV0ppYjI1d1lXZGxhR1ZoWkdWeUxXRmpkR2wyWlNCN0RRcGlZV05yWjNKdmRXNWtMV052Ykc5eU9pTkdNRVl3UmpBN0RRcDlEUW9OQ2k1MFlXSmpiMjUwY205c0lIc05DbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJMFl3UmpCR01BMEtmUTBLRFFvdWRHRmlZMjl1ZEhKdmJIQmhaMlZvWldGa1pYSXRhR2xrWkdWdU9taHZkbVZ5SUhzTkNtWnBiSFJsY2pwaWNtbG5hSFJ1WlhOektEa3dKU2s3RFFwOURRb05DaTUwWVdKamIyNTBjbTlzY0dGblpXaGxZV1JsY2kxamJHOXpaV0oxZEhSdmJqcG9iM1psY2lCN0RRcGlZV05yWjNKdmRXNWtMV052Ykc5eU9pTkRRME03RFFwaWIzSmtaWEk2TVhCNElITnZiR2xrSUNOQk5rRTJRVFk3RFFwamIyeHZjam9qTURBd0RRcDlEUW9OQ2k1emFXMXdiR1ZpZFhSMGIyNDZhRzkyWlhJNmJtOTBLQzVrYVhOaFlteGxaQ2tnZXcwS1ptbHNkR1Z5T21KeWFXZG9kRzVsYzNNb09UQWxLVHNOQ24wTkNnMEtMbWx1Y0hWMFkyOXVkSEp2YkRwb2IzWmxjanB1YjNRb0xtUnBjMkZpYkdWa0tUcHViM1FvTG5CdmNIVndLU0I3RFFwbWFXeDBaWEk2WW5KcFoyaDBibVZ6Y3lnNU1DVXBPdzBLZlEwS0RRb3VjMmx0Y0d4bFluVjBkRzl1T21GamRHbDJaVHB1YjNRb0xtUnBjMkZpYkdWa0tTQjdEUXBpWVdOclozSnZkVzVrTFdOdmJHOXlPaU13TURkaFkyTTdEUXBpYjNKa1pYSTZNWEI0SUhOdmJHbGtJQ013TURkaFkyTTdEUXBqYjJ4dmNqb2pabVptRFFwOURRb05Da0JyWlhsbWNtRnRaWE1nUTI5c2IzSkdiR0Z6YUNCN0RRcG1jbTl0SUhzTkNtSmhZMnRuY205MWJtUXRZMjlzYjNJNkkyWm1aZzBLZlEwS0RRcDBieUI3RFFwaVlXTnJaM0p2ZFc1a0xXTnZiRzl5T2lNd01EZGhZMk1OQ24wTkNuME5DZzBLTG1admNtMHRZbUZ6WlNCN0RRcGliM0prWlhJdFkyOXNiM0k2SXpBd04yRmpZdzBLZlEwS0RRb3VabTl5YlMxb1pXRmthVzVuSUhzTkNtSmhZMnRuY205MWJtUXRZMjlzYjNJNkl6QXdOMkZqWXcwS2ZRMEtEUW91Wm05eWJTMW9aV0ZrYVc1bkxYUnBkR3hsSUhzTkNtTnZiRzl5T2lObVptWU5DbjBOQ2cwS0xtWnZjbTB0YUdWaFpHbHVaeTFpZFhSMGIyNGdldzBLWTI5c2IzSTZJMlptWmcwS2ZRMEtEUW91Wm05eWJTMW9aV0ZrYVc1bkxXSjFkSFJ2Ympwb2IzWmxjanB1YjNRb0xtWnZjbTB0YUdWaFpHbHVaeTFpZFhSMGIyNHRZMnh2YzJVcElIc05DbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJekpCT0VGRU5BMEtmUTBLRFFvdVptOXliUzFvWldGa2FXNW5MV0oxZEhSdmJqcGhZM1JwZG1VNmJtOTBLQzVtYjNKdExXaGxZV1JwYm1jdFluVjBkRzl1TFdOc2IzTmxLU0I3RFFwaVlXTnJaM0p2ZFc1a0xXTnZiRzl5T2lNd01UVkRPVVlOQ24wTkNnMEtMbVp2Y20wdGFHVmhaR2x1WnkxaWRYUjBiMjR0WTJ4dmMyVTZhRzkyWlhJZ2V3MEtZbUZqYTJkeWIzVnVaQzFqYjJ4dmNqb2pSVGd4TVRJekRRcDlEUW9OQ2k1bWIzSnRMV2hsWVdScGJtY3RZblYwZEc5dUxXTnNiM05sT21GamRHbDJaU0I3RFFwaVlXTnJaM0p2ZFc1a0xXTnZiRzl5T2lOR01UY3dOMEVOQ24wTkNnMEtMbU5sYkd3Z2V3MEtEUXA5RFFvTkNpNWpaV3hzY205M0lIc05DbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJMlptWmcwS2ZRMEtEUW91WTJWc2JISnZkenBvYjNabGNpQjdEUXBtYVd4MFpYSTZZbkpwWjJoMGJtVnpjeWc1TUNVcE93MEtmUTBLRFFvdVkyVnNiSEp2ZHpwaFkzUnBkbVVnZXcwS1ltRmphMmR5YjNWdVpDMWpiMnh2Y2pvalFVVkJSVUZGSVdsdGNHOXlkR0Z1ZEEwS2ZRMEtEUW91WlhabGJpQjdEUW9nSUNBZ1ltRmphMmR5YjNWdVpDMWpiMnh2Y2pvZ2NtZGlLREkwTml3Z01qUTNMQ0F5TkRrcElDRnBiWEJ2Y25SaGJuUU5DbjBOQ2cwS0xtTmxiR3h5YjNjdGMyVnNaV04wWldRZ2V3MEtZbUZqYTJkeWIzVnVaQzFqYjJ4dmNqcHlaMkpoS0RFc01URTFMREU1T1N3d0xqTXBJQ0ZwYlhCdmNuUmhiblFOQ24wTkNnMEtMbU5sYkd4eWIzY3RjMlZzWldOMFpXUTZhRzkyWlhJZ2V3MEtabWxzZEdWeU9tSnlhV2RvZEc1bGMzTW9PVEFsS1RzTkNuME5DZzBLTG1obFlXUnBibWNnZXcwS1ltRmphMmR5YjNWdVpDMWpiMnh2Y2pvalJqQkdNRVl3T3cwS1ltOXlaR1Z5TFhKcFoyaDBPakZ3ZUNCemIyeHBaQ0FqUVRaQk5rRTJJV2x0Y0c5eWRHRnVkQTBLZlEwS0RRb3VhR1ZoWkdsdVp6cG9iM1psY2lCN0RRcG1hV3gwWlhJNlluSnBaMmgwYm1WemN5ZzVNQ1VwT3cwS2ZRMEtEUW91YUdWaFpHbHVaenBoWTNScGRtVWdldzBLWm1sc2RHVnlPbUp5YVdkb2RHNWxjM01vT0RBbEtUc05DbjBOQ2cwS0xtaGxZV1JwYm1jdFkyOXVkR0ZwYm1WeUlIc05DbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJMFl3UmpCR01Ec05DbUp2Y21SbGNpMWliM1IwYjIwNk1YQjRJSE52Ykdsa0lDTkJOa0UyUVRZaGFXMXdiM0owWVc1MERRcDlEUW9OQ2k1bmNtbGtJSHNOQ21KaFkydG5jbTkxYm1RdFkyOXNiM0k2STJabVpqc05DbUp2Y21SbGNqb3hjSGdnYzI5c2FXUWdJMEUyUVRaQk5nMEtmUTBLRFFvdWNISnZaM0psYzNOaVlYSWdldzBLWW1GamEyZHliM1Z1WkMxamIyeHZjam9qWm1abU93MEtZbTl5WkdWeU9qRndlQ0J6YjJ4cFpDQWpRVFpCTmtFMkRRcDlEUW9OQ2k1d2NtOW5jbVZ6YzJKaGNtSnZaSGtnZXcwS1ltRmphMmR5YjNWdVpDMWpiMnh2Y2pvak1EQTNZV05qRFFwOURRb05DaTVqYjI1MFpYaDBiV1Z1ZFNCN0RRcGlZV05yWjNKdmRXNWtMV052Ykc5eU9pTm1abVk3RFFwaWIzSmtaWEk2YzI5c2FXUWdNWEI0SUNNNE1EZzJPRUVOQ24wTkNnMEtMbU52Ym5SbGVIUnBkR1Z0T21odmRtVnlJSHNOQ21KaFkydG5jbTkxYm1RdFkyOXNiM0k2STBOR1EwWkRSZzBLZlEwS0RRb3VZMjl1ZEdWNGRHbDBaVzF6WlhCbGNtRjBiM0lnZXcwS1ltRmphMmR5YjNWdVpDMWpiMnh2Y2pvalFqbENPVUk1RFFwOURRb05DaTVrYVdGc2IyZGlkWFIwYjI1elpXTjBhVzl1SUhzTkNtSmhZMnRuY205MWJtUXRZMjlzYjNJNkkwWXdSakJHTUEwS2ZRMEtEUW91YzNCc2FYUmpiMjUwY205c0lIc05DbUp2Y21SbGNqb3hjSGdnYzI5c2FXUWdJMEUyUVRaQk5nMEtmUTBLRFFvdWMzQnNhWFIwWlhKMlpYSjBhV05oYkNCN0RRcGliM0prWlhJdGJHVm1kRG94Y0hnZ0kwTXpRek5ETXlCemIyeHBaRHNOQ21KdmNtUmxjaTF5YVdkb2REb3hjSGdnSTBNelF6TkRNeUJ6YjJ4cFpBMEtmUTBLRFFvdWMzQnNhWFIwWlhKb2IzSnBlbTl1ZEdGc0lIc05DbUp2Y21SbGNpMWliM1IwYjIwNk1YQjRJQ05ETTBNelF6TWdjMjlzYVdRN0RRcGliM0prWlhJdGRHOXdPakZ3ZUNBalF6TkRNME16SUhOdmJHbGtEUXA5RFFvTkNpNXpjR3hwZEhSbGNtaHZjbWw2YjI1MFlXdzZhRzkyWlhJZ2V3MEtabWxzZEdWeU9tSnlhV2RvZEc1bGMzTW9PVEFsS1RzTkNtTjFjbk52Y2pwd2IybHVkR1Z5T3cwS2ZRMEtEUW91Y0hKcGJXRnllVHBvYjNabGNpQjdEUW9KWm1sc2RHVnlPbUp5YVdkb2RHNWxjM01vT1RBbEtUc05DZ2xqZFhKemIzSTZjRzlwYm5SbGNqc05DbjBOQ2cwS0xuTndiR2wwZEdWeWRtVnlkR2xqWVd3NmFHOTJaWElnZXcwS1ptbHNkR1Z5T21KeWFXZG9kRzVsYzNNb09UQWxLVHNOQ21OMWNuTnZjanB3YjJsdWRHVnlPdzBLZlEwS0RRb3VkRzl2YkMxMGFYQWdldzBLWW1GamEyZHliM1Z1WkMxamIyeHZjam9qWm1abU93MEtZbTl5WkdWeU9uTnZiR2xrSURGd2VDQWpPREE0TmpoQk93MEtkR1Y0ZEMxemFHRmtiM2M2TGpKd2VDQXVNbkI0SUhKblltRW9NQ3d3TERBc01DNDFLUTBLZlEwS0RRb3VabTl5YlMxb1pXRmthVzVuTFcxcGJqcG9iM1psY2lCN0RRcGlZV05yWjNKdmRXNWtMV052Ykc5eU9pTXlRVGhCUkRRTkNuME5DZzBLTG5OcGJYQnNaV0oxZEhSdmJpMWhZM1JwZG1VZ2V3MEtZbUZqYTJkeWIzVnVaQzFqYjJ4dmNqb2pRVVZCUlVGRk93MEtZbTl5WkdWeU9qRndlQ0J6YjJ4cFpDQWpOemMzRFFwOURRb05DaTV3Y21sdFlYSjVJSHNOQ21KaFkydG5jbTkxYm1RdFkyOXNiM0k2SXpBd04yRmpZdzBLZlEwS0RRb3VkR0ZpYUdWaFpHVnlMV052Ym5SaGFXNWxjaUI3RFFwaWIzSmtaWEl0WW05MGRHOXRPakp3ZUNBak1EQTNZV05qSUhOdmJHbGtEUXA5RFFvTkNpNXpkR0ZqYXkxcGRHVnREUXA3RFFvZ0lDQWdZbUZqYTJkeWIzVnVaQzFqYjJ4dmNqcDNhR2wwWlRzTkNpQWdJQ0JpYjNKa1pYSXRZbTkwZEc5dE9pQXhjSGdnSTBNMVF6VkROU0J6YjJ4cFpEc05DbjBOQ2cwS0xuTjBZV05yTFdsMFpXMHRZV04wYVhabGV3MEtJQ0FnSUc5MWRHeHBibVU2Wkc5MGRHVmtJREZ3ZUNBak1EQXdJV2x0Y0c5eWRHRnVkRHNOQ2lBZ0lDQnZkWFJzYVc1bExXOW1abk5sZERvdE1YQjRPdzBLSUNBZ0lHOTFkR3hwYm1VdGQybGtkR2c2TFRGd2VEc05DaUFnSUNCaVlXTnJaM0p2ZFc1a0xXTnZiRzl5T25KblltRW9NU3d4TVRVc01UazVMREF1TXlraGFXMXdiM0owWVc1MERRcDlEUW9OQ2k1emRHRmpheTFwZEdWdExXRmpkR2wyWlRwb2IzWmxjbnNOQ21acGJIUmxjanBpY21sbmFIUnVaWE56S0Rrd0pTazdEUXA5RFFvTkNpNXpkR0ZqYXkxcGRHVnRPbWh2ZG1WeUlIc05DaUFnSUNCbWFXeDBaWEk2WW5KcFoyaDBibVZ6Y3lnNU1DVXBPdzBLSUNBZ0lHTjFjbk52Y2pwd2IybHVkR1Z5T3cwS2ZRMEtEUW92S2lCUWNtbHVkR2x1WnlBcUx3MEtEUW91Y0hKcGJuUXRZbTlrZVEwS2V3MEtJQ0FnSUdKaFkydG5jbTkxYm1RNklISm5ZaWd5TURRc01qQTBMREl3TkNrN0RRcDlEUXB3WVdkbE9tWnBjbk4wTFdOb2FXeGtEUXA3RFFvSmJXRnlaMmx1TFhSdmNEb2dNQzQxWTIwN0RRcDlEUXB3WVdkbElIc05DaUFnWW1GamEyZHliM1Z1WkRvZ2QyaHBkR1U3RFFvZ0lHUnBjM0JzWVhrNklHSnNiMk5yT3cwS0lDQnRZWEpuYVc0NklEQWdZWFYwYnpzTkNpQWdiV0Z5WjJsdUxXSnZkSFJ2YlRvZ01DNDFZMjA3RFFvZ0lHSnZlQzF6YUdGa2IzYzZJREFnTUNBd0xqVmpiU0J5WjJKaEtEQXNNQ3d3TERBdU5TazdEUXA5RFFvdWNHRm5aUzFtYjJOMWMyVmtEUXA3RFFvSlltOTRMWE5vWVdSdmR6b2dNQ0F3SURKamJTQnlaMkpoS0RZekxEY3lMREl3TkN3d0xqZ3BPdzBLZlEwS2NHRm5aVnR6YVhwbFBTSkJOQ0pkSUhzZ0lBMEtJQ0IzYVdSMGFEb2dNakZqYlRzTkNpQWdhR1ZwWjJoME9pQXlPUzQzWTIwN0lBMEtmUTBLY0dGblpWdHphWHBsUFNKQk5DSmRXMnhoZVc5MWREMGlUR0Z1WkhOallYQmxJbDBnZXcwS0lDQjNhV1IwYURvZ01qa3VOMk50T3cwS0lDQm9aV2xuYUhRNklESXhZMjA3SUNBTkNuME5DbkJoWjJWYmMybDZaVDBpUVRNaVhTQjdEUW9nSUhkcFpIUm9PaUF5T1M0M1kyMDdEUW9nSUdobGFXZG9kRG9nTkRKamJUc05DbjBOQ25CaFoyVmJjMmw2WlQwaVFUTWlYVnRzWVhsdmRYUTlJa3hoYm1SelkyRndaU0pkSUhzTkNpQWdkMmxrZEdnNklEUXlZMjA3RFFvZ0lHaGxhV2RvZERvZ01qa3VOMk50T3lBZ0RRcDlEUXB3WVdkbFczTnBlbVU5SWtFMUlsMGdldzBLSUNCM2FXUjBhRG9nTVRRdU9HTnRPdzBLSUNCb1pXbG5hSFE2SURJeFkyMDdEUXA5RFFwd1lXZGxXM05wZW1VOUlrRTFJbDFiYkdGNWIzVjBQU0pNWVc1a2MyTmhjR1VpWFNCN0RRb2dJSGRwWkhSb09pQXlNV050T3cwS0lDQm9aV2xuYUhRNklERTBMamhqYlRzZ0lBMEtmUTBLRFFwQWJXVmthV0VnY0hKcGJuUWdldzBLSUNBdWNISnBiblF0WW05a2VTd2djR0ZuWlNCN0RRb2dJQ0FnYldGeVoybHVPaUF3T3cwS0lDQWdJR0p2ZUMxemFHRmtiM2M2SURBN0RRb2dJSDBOQ24wPVwiO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGNoYXIgRGF0ZVNlcGVyYXRvciA9ICcvJztcclxuXHJcbiAgICAgICAgcHVibGljIGVudW0gRGF0ZVBvc2l0aW9uXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBGaXJzdCxcclxuICAgICAgICAgICAgU2Vjb25kLFxyXG4gICAgICAgICAgICBUaGlyZFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBWZWN0b3IyIENvbnNvbGVEZWZhdWx0U2l6ZSA9IG5ldyBWZWN0b3IyKDU0MCwgMjQwKTtcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIE1lc3NhZ2VGb3JtQmVlcCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGludCBNYXhpbXVtUGl4ZWxTY3JvbGxpbmdSb3dzID0gNTAwMDAwO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIEFjdGlvbjxzdHJpbmc+IE9uU2VuZEVycm9yID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIElzQ2hyb21lID0gQnJvd3Nlci5Jc0Nocm9tZTtcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIEFsbG93Q2xvc2VXaXRob3V0UXVlc3Rpb24gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBBY3Rpb24gT25BcHBsaWNhdGlvbkNsb3NlID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIFNob3dFeGNlcHRpb25EaWFsb2cgPSB0cnVlO1xyXG5cclxuICAgICAgICBbT2Jzb2xldGUoXCJObyBMb25nZXIgaXMgaW4gdGhlIHN5c3RlbSEgLSByZW1vdmUgc2VsZiBqcXVlcnkuLi5cIildXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBpbnQgRm9ybUZhZGVEdXJhdGlvbiA9IDEwMDtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgaW50IF9kcGk7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgYm9vbCBfZHBpU2V0dXAgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBmbG9hdCBHZXRDbVRvUGl4ZWwoaW50IHBpeGVsKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIHBwY20gPSBHZXRQaXhlbFBlckNtKCk7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKHBpeGVsID09IDAgfHwgcHBjbSA9PSAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIHJldHVybiBwaXhlbCAvIHBwY207XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGludCBHZXRQaXhlbFBlckNtKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKF9kcGlTZXR1cClcclxuICAgICAgICAgICAgICAgIHJldHVybiBfZHBpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGRpdiA9IG5ldyBDb250cm9sKCk7XHJcbiAgICAgICAgICAgIGRpdi5Ub3AgPSBcIi0xMDAwY21cIjtcclxuICAgICAgICAgICAgZGl2LkxlZnQgPSBcIi0xMDAwY21cIjtcclxuICAgICAgICAgICAgZGl2LkhlaWdodCA9IFwiMTAwMGNtXCI7XHJcbiAgICAgICAgICAgIGRpdi5XaWR0aCA9IFwiMTAwMGNtXCI7XHJcblxyXG4gICAgICAgICAgICBSZXR5cGVkLmRvbS5kb2N1bWVudC5ib2R5LkFwcGVuZENoaWxkKGRpdik7XHJcbiAgICAgICAgICAgIF9kcGkgPSAoaW50KSgoKFJldHlwZWQuZG9tLkRPTVJlY3QpZGl2LkNvbnRlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLmhlaWdodCAvIDEwMDAuMGQpO1xyXG4gICAgICAgICAgICBSZXR5cGVkLmRvbS5kb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkPFJldHlwZWQuZG9tLk5vZGU+KChSZXR5cGVkLmRvbS5Ob2RlKWRpdik7XHJcbiAgICAgICAgICAgIF9kcGlTZXR1cCA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybiBfZHBpOyAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIEluY3JlYXNlIFJlbmRlciBTcGVlZFxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIFJlbW92ZUF0dHJpYnV0ZXNPZmZFbGVtZW50c1doZW5Mb3NlRm9jdXM7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBTZXR1cCgpXHJcbiAgICAgICAgeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBTZXR1cFN0eWxlRGVmYXVsdHMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBTZXR1cFN0eWxlRGVmYXVsdHMoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFJldHlwZWQuZG9tLlN0eWxlU2hlZXRMaXN0IHNoZWV0cyA9IFJldHlwZWQuZG9tLmRvY3VtZW50LnN0eWxlU2hlZXRzO1xyXG4gICAgICAgICAgICAgICAgZm9yKHVpbnQgaSA9IDA7IGkgPCBzaGVldHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG93bmVyTm9kZSA9IHNoZWV0c1tpXS5vd25lck5vZGUgYXMgUmV0eXBlZC5kb20uSFRNTExpbmtFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKG93bmVyTm9kZSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZihvd25lck5vZGUuaWQuVG9Mb3dlcigpID09IFwiZXhwcmVzc2NyYWZ0XCIpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0U3R5bGVTaGVldCA9IHNoZWV0c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYob3duZXJOb2RlLmlkLlRvTG93ZXIoKSA9PSBcImV4cHJlc3NjcmFmdHBsdWdpblwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUGx1Z2luU3R5bGVTaGVldCA9IHNoZWV0c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYob3duZXJOb2RlLmlkLlRvTG93ZXIoKSA9PSBcInJlc291cmNlbWFuYWdlclwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VNYW5hbmdlclNoZWV0cy5BZGQoc2hlZXRzW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZihEZWZhdWx0U3R5bGVTaGVldCA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHZhciBkZiA9IEdldEV4cHJlc3NTdHlsZVJ1bGVWYWx1ZShcImZvbnRcIiwgXCIuY29udHJvbFwiKTtcclxuICAgICAgICAgICAgICAgIGlmKGRmICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgRGVmYXVsdEZvbnQgPSBkZjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaChFeGNlcHRpb24pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBkeW5hbWljIEdldFN0eWxlUnVsZVZhbHVlKExpc3Q8UmV0eXBlZC5kb20uU3R5bGVTaGVldD4gY3NzRmlsZSwgc3RyaW5nIHN0eWxlLCBzdHJpbmcgY2xhc3NOYW1lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKGNzc0ZpbGUgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JlYWNoKHZhciBpdGVtIGluIGNzc0ZpbGUpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljIHZhbHVlID0gR2V0U3R5bGVSdWxlVmFsdWUoaXRlbSwgc3R5bGUsIGNsYXNzTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaChFeGNlcHRpb24pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZHluYW1pYyBHZXRTdHlsZVJ1bGVWYWx1ZShSZXR5cGVkLmRvbS5TdHlsZVNoZWV0IGNzc0ZpbGUsIHN0cmluZyBzdHlsZSwgc3RyaW5nIGNsYXNzTmFtZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRyeVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihjc3NGaWxlICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pYyBwU3R5bGVzID0gY3NzRmlsZTtcclxuICAgICAgICAgICAgICAgICAgICBpZihwU3R5bGVzLmNzc1J1bGVzKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IHBTdHlsZXMuY3NzUnVsZXMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWMgcnVsZSA9IHBTdHlsZXMuY3NzUnVsZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihydWxlLnNlbGVjdG9yVGV4dCAmJiBydWxlLnNlbGVjdG9yVGV4dC5zcGxpdCgnLCcpLmluZGV4T2YoY2xhc3NOYW1lKSAhPSAtMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVsZS5zdHlsZVtzdHlsZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2goRXhjZXB0aW9uKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGR5bmFtaWMgR2V0RXhwcmVzc1N0eWxlUnVsZVZhbHVlKHN0cmluZyBzdHlsZSwgc3RyaW5nIGNsYXNzTmFtZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGR5bmFtaWMgdmFsdWUgPSBHZXRTdHlsZVJ1bGVWYWx1ZShQbHVnaW5TdHlsZVNoZWV0LCBzdHlsZSwgY2xhc3NOYW1lKTtcclxuICAgICAgICAgICAgaWYodmFsdWUgPT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBHZXRTdHlsZVJ1bGVWYWx1ZShEZWZhdWx0U3R5bGVTaGVldCwgc3R5bGUsIGNsYXNzTmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAgICAgXHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IFRvb2xUaXBQb3B1cERlbGF5TXMgPSAxMDAwO1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IFRvb2xUaXBQb3B1cFN0YXlPcGVuRGVsYXlQZXJXb3JkTXMgPSAyNTA7XHJcblxuICAgIFxucHJpdmF0ZSBzdGF0aWMgZGVjaW1hbCBfX1Byb3BlcnR5X19Jbml0aWFsaXplcl9fVGF4UGVyY2VudD0wLjFtO31cclxufSIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5MaW5xO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxudXNpbmcgU3lzdGVtLlRocmVhZGluZy5UYXNrcztcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIFNoZWV0Q2VsbFxyXG4gICAge1xyXG4gICAgICAgIHByaXZhdGUgb2JqZWN0IF92YWx1ZTtcclxuICAgICAgICBwcm90ZWN0ZWQgU2hlZXQgX3NoZWV0O1xyXG5cclxuICAgICAgICBwdWJsaWMgU2hlZXRDZWxsKFNoZWV0IHNoZWV0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgX3NoZWV0ID0gc2hlZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb2JqZWN0IFZhbHVlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gX3ZhbHVlOyB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihfdmFsdWUgIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3ZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgX3NoZWV0IT1udWxsP2dsb2JhbDo6QnJpZGdlLlNjcmlwdC5Gcm9tTGFtYmRhKCgpPT5fc2hlZXQuUmVxdWVzdFJlZnJlc2goKSk6bnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uTGlucTtcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcbnVzaW5nIFN5c3RlbS5UaHJlYWRpbmcuVGFza3M7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBTaGVldENvbHVtblxyXG4gICAge1xyXG4gICAgICAgIHByaXZhdGUgZmxvYXQgX3dpZHRoID0gMTAwO1xyXG4gICAgICAgIHByb3RlY3RlZCBTaGVldCBfc2hlZXQ7XHJcblxyXG4gICAgICAgIHB1YmxpYyBTaGVldENvbHVtbihTaGVldCBzaGVldClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIF9zaGVldCA9IHNoZWV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGZsb2F0IFdpZHRoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gX3dpZHRoOyB9XHJcbiAgICAgICAgICAgIHNldCB7XHJcbiAgICAgICAgICAgICAgICBpZihfd2lkdGggIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3dpZHRoID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgX3NoZWV0IT1udWxsP2dsb2JhbDo6QnJpZGdlLlNjcmlwdC5Gcm9tTGFtYmRhKCgpPT5fc2hlZXQuUmVxdWVzdFJlZnJlc2goKSk6bnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uTGlucTtcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcbnVzaW5nIFN5c3RlbS5UaHJlYWRpbmcuVGFza3M7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBTaGVldFJvd1xyXG4gICAge1xyXG4gICAgICAgIHByaXZhdGUgZmxvYXQgX2hlaWdodCA9IDIyO1xyXG4gICAgICAgIHByb3RlY3RlZCBTaGVldCBfc2hlZXQ7XHJcblxyXG4gICAgICAgIHB1YmxpYyBTaGVldFJvdyhTaGVldCBzaGVldClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIF9zaGVldCA9IHNoZWV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGZsb2F0IEhlaWdodFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIF9oZWlnaHQ7IH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKF9oZWlnaHQgIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2hlaWdodCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIF9zaGVldCE9bnVsbD9nbG9iYWw6OkJyaWRnZS5TY3JpcHQuRnJvbUxhbWJkYSgoKT0+X3NoZWV0LlJlcXVlc3RSZWZyZXNoKCkpOm51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLkxpbnE7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG51c2luZyBTeXN0ZW0uVGhyZWFkaW5nLlRhc2tzO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgU2l6ZUZcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgZmxvYXQgV2lkdGg7XHJcbiAgICAgICAgcHVibGljIGZsb2F0IEhlaWdodDtcclxuXHJcbiAgICAgICAgcHVibGljIFNpemVGKGZsb2F0IHdpZHRoLCBmbG9hdCBoZWlnaHQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBXaWR0aCA9IHdpZHRoO1xyXG4gICAgICAgICAgICBIZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgU2l6ZUYoZG91YmxlIHdpZHRoLCBkb3VibGUgaGVpZ2h0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgV2lkdGggPSAoZmxvYXQpd2lkdGg7XHJcbiAgICAgICAgICAgIEhlaWdodCA9IChmbG9hdCloZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgc3RyaW5nIFRvU3RyaW5nKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcuRm9ybWF0KFwiezB9LCB7MX1cIixXaWR0aCxIZWlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIEJyaWRnZTtcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIFRleHRCbG9ja1xyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgT3JpZ2luYWxTb3VyY2U7XHJcbiAgICAgICAgcHVibGljIGludCBNYXhXaWR0aDtcclxuXHJcbiAgICAgICAgcHVibGljIGZsb2F0IENvbXB1dGVkSGVpZ2h0O1xyXG4gICAgICAgIHB1YmxpYyBpbnQgTGluZXNDb21wdXRlZDtcclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgRWxlbGVtdHNPdmVyTWF4ID0gZmFsc2U7XHJcbiAgICAgICAgcHVibGljIGZsb2F0IE1heENhbGN1bGF0ZWRXaWR0aCA9IDA7XHJcblxyXG4gICAgICAgIHB1YmxpYyBUZXh0QmxvY2soc3RyaW5nIHNvdXJjZSwgaW50IG1heFdpZHRoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgT3JpZ2luYWxTb3VyY2UgPSBzb3VyY2U7XHJcbiAgICAgICAgICAgIE1heFdpZHRoID0gbWF4V2lkdGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBDb21wdXRlU3RyaW5nKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEVsZWxlbXRzT3Zlck1heCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzdHJpbmdbXSBMaW5lcyA9IE9yaWdpbmFsU291cmNlLlNwbGl0KG5ldyBjaGFyW10geyAnXFxyJywgJ1xcbicgfSk7XHJcblxyXG4gICAgICAgICAgICBkb3VibGUgc2l6ZVBlckNoYXIgPSBDb250cm9sLkdldFRleHRXaWR0aChcIk1cIiwgU2V0dGluZ3MuRGVmYXVsdEZvbnQpO1xyXG5cclxuICAgICAgICAgICAgTGluZXNDb21wdXRlZCA9IDA7XHJcblxyXG4gICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgTGluZXMuTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cmluZyBsaW5lID0gTGluZXNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgZG91YmxlIGxpbmVXaWR0aCA9IENvbnRyb2wuR2V0VGV4dFdpZHRoKE9yaWdpbmFsU291cmNlLCBTZXR0aW5ncy5EZWZhdWx0Rm9udCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYobGluZVdpZHRoID4gTWF4V2lkdGgpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgRWxlbGVtdHNPdmVyTWF4ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBNYXhDYWxjdWxhdGVkV2lkdGggPSBNYXhXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICBpbnQgeXkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihpbnQgeCA9IDA7IHggPCBsaW5lLkxlbmd0aDsgeCsrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeXkrKztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHl5ICogc2l6ZVBlckNoYXIgPiBNYXhXaWR0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTGluZXNDb21wdXRlZCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeXkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZih5eSA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBMaW5lc0NvbXB1dGVkKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIExpbmVzQ29tcHV0ZWQrKztcclxuICAgICAgICAgICAgICAgICAgICBpZihsaW5lV2lkdGggPiBNYXhDYWxjdWxhdGVkV2lkdGgpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXhDYWxjdWxhdGVkV2lkdGggPSAoZmxvYXQpbGluZVdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBDb21wdXRlZEhlaWdodCA9IEdldEZvbnRTaXplKFNldHRpbmdzLkRlZmF1bHRGb250KSAqIExpbmVzQ29tcHV0ZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZmxvYXQgR2V0Rm9udFNpemUoc3RyaW5nIGZvbnRXaXRoU2l6ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZ1tdIHN0cnMgPSBmb250V2l0aFNpemUuU3BsaXQobmV3IGNoYXJbXSB7ICcgJyB9LCBTdHJpbmdTcGxpdE9wdGlvbnMuUmVtb3ZlRW1wdHlFbnRyaWVzKTtcclxuXHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBzdHJzLkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihzdHJzW2ldLkVuZHNXaXRoKFwicHRcIikpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmbG9hdClTY3JpcHQuUGFyc2VGbG9hdChzdHJzW2ldKSAqIDEuMzMzMzMzRjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYoc3Ryc1tpXS5FbmRzV2l0aChcInB4XCIpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoZmxvYXQpU2NyaXB0LlBhcnNlRmxvYXQoc3Ryc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiA4LjI1RiAqIDEuMzMzMzMzRjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJ1c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgaW50ZXJuYWwgY2xhc3MgVG9vbFRpcENvbnRyb2wgOiBDb250cm9sXHJcbiAgICB7XHJcbiAgICAgICAgcHJpdmF0ZSBib29sIHZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlIFRvb2xUaXAgX3Rvb2xUaXA7XHJcblxyXG4gICAgICAgIHB1YmxpYyBUb29sVGlwQ29udHJvbChUb29sVGlwIHRvb2xUaXApIDogYmFzZShcInRvb2wtdGlwXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBfdG9vbFRpcCA9IHRvb2xUaXA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBTaG93KFJldHlwZWQuZG9tLk1vdXNlRXZlbnQgZXYpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuQ29udGVudC5FbXB0eSgpO1xyXG5cclxuICAgICAgICAgICAgaWYoX3Rvb2xUaXAgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoIV90b29sVGlwLkhlYWRpbmcuSXNFbXB0eSgpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQ29udGVudC5BcHBlbmRDaGlsZChuZXcgUmV0eXBlZC5kb20uSFRNTFBhcmFncmFwaEVsZW1lbnQoKSB7IGNsYXNzTmFtZSA9IFwidG9vbC10aXAtaGVhZGluZ1wiLCBpbm5lckhUTUwgPSBfdG9vbFRpcC5IZWFkaW5nLkh0bWxFc2NhcGUoKS5SZXBsYWNlKFwiXFxyXFxuXCIsIFwiPGJyPlwiKSB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKCFfdG9vbFRpcC5EZXNjcmlwdGlvbi5Jc0VtcHR5KCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5Db250ZW50LkFwcGVuZENoaWxkKG5ldyBSZXR5cGVkLmRvbS5IVE1MUGFyYWdyYXBoRWxlbWVudCgpIHsgY2xhc3NOYW1lID0gXCJ0b29sLXRpcC1ib2R5XCIsIGlubmVySFRNTCA9IF90b29sVGlwLkRlc2NyaXB0aW9uLkh0bWxFc2NhcGUoKS5SZXBsYWNlKFwiXFxyXFxuXCIsIFwiPGJyPlwiKSB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgbW91c2UgPSBIZWxwZXIuR2V0Q2xpZW50TW91c2VMb2NhdGlvbihldik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLkxvY2F0aW9uID0gbmV3IFZlY3RvcjIobW91c2UuWCwgbW91c2UuWS5Ub0ludCgpICsgMjIpO1xyXG5cclxuICAgICAgICAgICAgaWYoIXZpc2libGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgQ29udGV4dE1lbnUuVG90YWxDb250ZXh0SGFuZGxlcysrO1xyXG4gICAgICAgICAgICAgICAgQ29udGVudC5zdHlsZS56SW5kZXggPSAoQ29udGV4dE1lbnUuVG90YWxDb250ZXh0SGFuZGxlcyArIFNldHRpbmdzLkNvbnRleHRNZW51U3RhcnRpbmdaSW5kZXgpLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBSZXR5cGVkLmRvbS5kb2N1bWVudC5ib2R5LkFwcGVuZENoaWxkKHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBDbG9zZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZih2aXNpYmxlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLkNvbnRlbnQgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkNvbnRlbnQuRGVsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBDb250ZXh0TWVudS5Ub3RhbENvbnRleHRIYW5kbGVzLS07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIFRvb2xUaXBcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgc3RyaW5nIERlc2NyaXB0aW9uO1xyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgSGVhZGluZztcclxuXHJcbiAgICAgICAgcHVibGljIENvbnRyb2wgQXR0YWNoZWRDb250cm9sO1xyXG5cclxuICAgICAgICBwdWJsaWMgVG9vbFRpcChzdHJpbmcgY29udGVudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIERlc2NyaXB0aW9uID0gY29udGVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBUb29sVGlwKHN0cmluZyBoZWFkaW5nLCBzdHJpbmcgZGVzY3JpcHRpb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBEZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICBIZWFkaW5nID0gaGVhZGluZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbnQgR2V0V29yZENvdW50KClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBmdWxsQ29udGVudCA9IHN0cmluZy5Db25jYXQoSGVhZGluZywgXCIgXCIsIERlc2NyaXB0aW9uKS5UcmltKCk7XHJcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSBmdWxsQ29udGVudC5MZW5ndGg7XHJcbiAgICAgICAgICAgIGNoYXIgcHJldkNoYXIgPSAnXFwwJztcclxuICAgICAgICAgICAgdmFyIGJ1aWxkZXIgPSBuZXcgU3RyaW5nQnVpbGRlcigpO1xyXG4gICAgICAgICAgICBjaGFyIGN1cnJlbnQ7XHJcbiAgICAgICAgICAgIGludCBXb3JkQ291bnQgPSAxO1xyXG4gICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBmdWxsQ29udGVudFtpXTtcclxuICAgICAgICAgICAgICAgIGlmKGNoYXIuSXNXaGl0ZVNwYWNlKGN1cnJlbnQpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGNoYXIuSXNXaGl0ZVNwYWNlKHByZXZDaGFyKSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZDaGFyID0gY3VycmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFdvcmRDb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHByZXZDaGFyID0gY3VycmVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gV29yZENvdW50O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIEJyaWRnZTtcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIHN0cnVjdCBWZWN0b3IyXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIFVuaW9uPHN0cmluZywgaW50LCBmbG9hdD4gWDtcclxuICAgICAgICBwdWJsaWMgVW5pb248c3RyaW5nLCBpbnQsIGZsb2F0PiBZO1xyXG5cclxuICAgICAgICBwdWJsaWMgaW50IFhpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gKGludClYOyB9XHJcbiAgICAgICAgICAgIHNldCB7IFggPSB2YWx1ZTsgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGludCBZaVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIChpbnQpWTsgfVxyXG4gICAgICAgICAgICBzZXQgeyBZID0gdmFsdWU7IH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBmbG9hdCBYZlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIChmbG9hdClYOyB9XHJcbiAgICAgICAgICAgIHNldCB7IFggPSB2YWx1ZTsgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGZsb2F0IFlmXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gKGZsb2F0KVk7IH1cclxuICAgICAgICAgICAgc2V0IHsgWSA9IHZhbHVlOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIGFkZHMgY2FsYyB0byAoMTAwJSAtIDUwcHgpIHR1cm5zIHRvIGNhbGMoMTAwJSAtIDUwcHgpXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJhXCI+PC9wYXJhbT5cclxuICAgICAgICAvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG4gICAgICAgIGludGVybmFsIHN0YXRpYyBzdHJpbmcgcGYoc3RyaW5nIGEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gIXN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoYSkgJiYgYS5TdGFydHNXaXRoKFwiKFwiKSAmJiBhLkVuZHNXaXRoKFwiKVwiKSA/IFwiY2FsY1wiICsgYSA6IGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgVmVjdG9yMihVbmlvbjxzdHJpbmcsIGludCwgZmxvYXQ+IHgsIFVuaW9uPHN0cmluZywgaW50LCBmbG9hdD4geSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFggPSB4O1xyXG4gICAgICAgICAgICBZID0geTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJ1c2luZyBCcmlkZ2U7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBzdHJ1Y3QgVmVjdG9yNFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBVbmlvbjxzdHJpbmcsIGludCwgZmxvYXQ+IFg7XHJcbiAgICAgICAgcHVibGljIFVuaW9uPHN0cmluZywgaW50LCBmbG9hdD4gWTtcclxuICAgICAgICBwdWJsaWMgVW5pb248c3RyaW5nLCBpbnQsIGZsb2F0PiBaO1xyXG4gICAgICAgIHB1YmxpYyBVbmlvbjxzdHJpbmcsIGludCwgZmxvYXQ+IE07XHJcblxyXG4gICAgICAgIHB1YmxpYyBWZWN0b3I0KFVuaW9uPHN0cmluZywgaW50LCBmbG9hdD4geCwgVW5pb248c3RyaW5nLCBpbnQsIGZsb2F0PiB5LCBVbmlvbjxzdHJpbmcsIGludCwgZmxvYXQ+IHosIFVuaW9uPHN0cmluZywgaW50LCBmbG9hdD4gbSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFggPSB4O1xyXG4gICAgICAgICAgICBZID0geTtcclxuICAgICAgICAgICAgWiA9IHo7XHJcbiAgICAgICAgICAgIE0gPSBtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFZlY3RvcjQoVmVjdG9yMiBhLCBWZWN0b3IyIGIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBYID0gYS5YO1xyXG4gICAgICAgICAgICBZID0gYS5ZO1xyXG4gICAgICAgICAgICBaID0gYi5YO1xyXG4gICAgICAgICAgICBNID0gYi5ZO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGludCBYaVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIChpbnQpWDsgfVxyXG4gICAgICAgICAgICBzZXQgeyBYID0gdmFsdWU7IH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbnQgWWlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiAoaW50KVk7IH1cclxuICAgICAgICAgICAgc2V0IHsgWSA9IHZhbHVlOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW50IFppXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gKGludClaOyB9XHJcbiAgICAgICAgICAgIHNldCB7IFogPSB2YWx1ZTsgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGludCBNaVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIChpbnQpTTsgfVxyXG4gICAgICAgICAgICBzZXQgeyBNID0gdmFsdWU7IH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBmbG9hdCBYZlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIChmbG9hdClYOyB9XHJcbiAgICAgICAgICAgIHNldCB7IFggPSB2YWx1ZTsgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGZsb2F0IFlmXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gKGZsb2F0KVk7IH1cclxuICAgICAgICAgICAgc2V0IHsgWSA9IHZhbHVlOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZmxvYXQgWmZcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiAoZmxvYXQpWjsgfVxyXG4gICAgICAgICAgICBzZXQgeyBaID0gdmFsdWU7IH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBmbG9hdCBNZlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIChmbG9hdClNOyB9XHJcbiAgICAgICAgICAgIHNldCB7IE0gPSB2YWx1ZTsgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5MaW5xO1xyXG51c2luZyBTeXN0ZW0uUmVmbGVjdGlvbjtcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcbnVzaW5nIFN5c3RlbS5UaHJlYWRpbmcuVGFza3M7XHJcbnVzaW5nIFhhbWFyaW4uRm9ybXM7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0LnhhbWxcclxue1xyXG4gICAgcHVibGljIGNsYXNzIFhBTUxEZWZpbml0aW9uc1xyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBIYXNMb2FkZWQ7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBYQU1MRmlsZXMgPSBuZXcgRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4oKTtcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIEJ1aWxkVUkoQ29udGVudFBhZ2UgcGFnZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCFIYXNMb2FkZWQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB2YXIgZmlsZU5hbWUgPSBwYWdlLkdldFR5cGUoKS5OYW1lLlRvTG93ZXIoKSArIFwiLnhhbWxcIjtcclxuXHJcbiAgICAgICAgICAgIGlmKFhBTUxGaWxlcy5Db250YWluc0tleShmaWxlTmFtZSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciBmaWxlID0gWEFNTEZpbGVzW2ZpbGVOYW1lXTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgeG1sRG9jID0gbmV3IFJldHlwZWQuZG9tLkRPTVBhcnNlcigpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRvY3VtZW50ID0geG1sRG9jLnBhcnNlRnJvbVN0cmluZyhmaWxlLCBcInRleHQveG1sXCIpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBBcHBseURvY3VtZW50KHBhZ2UsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgXHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZS5HZXRUeXBlKCkuR2V0TWV0aG9kcyhCaW5kaW5nRmxhZ3MuTm9uUHVibGljIHwgQmluZGluZ0ZsYWdzLkluc3RhbmNlKSwgcGFnZSwgdHJ1ZSk7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHN0cmluZyBHZXROYW1lc3BhY2Uoc3RyaW5nIG5hbWVzcGFjZVVSSSlcclxuICAgICAgICB7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKHN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UobmFtZXNwYWNlVVJJKSB8fCAhbmFtZXNwYWNlVVJJLkNvbnRhaW5zKFwiY2xyLW5hbWVzcGFjZTpcIikgfHwgIW5hbWVzcGFjZVVSSS5Db250YWlucyhcIjtcIikpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZXNwYWNlVVJJO1xyXG4gICAgICAgICAgICByZXR1cm4gU3lzdGVtLkxpbnEuRW51bWVyYWJsZS5GaXJzdE9yRGVmYXVsdDxzdHJpbmc+KG5hbWVzcGFjZVVSSS5SZXBsYWNlKFwiY2xyLW5hbWVzcGFjZTpcIiwgXCJcIikuU3BsaXQoJzsnKSk7ICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyB2b2lkIEFwcGx5RG9jdW1lbnQoQ29udHJvbCBjb250cm9sLCBSZXR5cGVkLmRvbS5FbGVtZW50IGVsZW1lbnQsIE1ldGhvZEluZm9bXSBwYWdlTWV0aG9kcywgQ29udGVudFBhZ2UgUGFnZSwgYm9vbCBwYXJlbnQgPSBmYWxzZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIENvbnRyb2wgY2hpbGQgPSBudWxsO1xyXG4gICAgICAgICAgICBpZighcGFyZW50KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgeCA9IEdldE5hbWVzcGFjZShlbGVtZW50Lm5hbWVzcGFjZVVSSSk7XHJcbiAgICAgICAgICAgICAgICBpZihzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKHgpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHggPSBlbGVtZW50LnRhZ05hbWU7XHJcblxyXG4gICAgICAgICAgICAgICAgfWVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB4ID0geCArIFwiLlwiICsgZWxlbWVudC50YWdOYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2hpbGQgPSBBY3RpdmF0b3IuQ3JlYXRlSW5zdGFuY2UoVHlwZS5HZXRUeXBlKHgpKS5BczxDb250cm9sPigpO1xyXG4gICAgICAgICAgICB9ZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZCA9IGNvbnRyb2w7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGZpZWxkcyA9IGNoaWxkLkdldFR5cGUoKS5HZXRGaWVsZHMoKTtcclxuICAgICAgICAgICAgdmFyIHByb3BzID0gY2hpbGQuR2V0VHlwZSgpLkdldFByb3BlcnRpZXMoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBldmVudHMgPSBjaGlsZC5HZXRUeXBlKCkuR2V0RXZlbnRzKCk7XHJcbiAgICAgICAgICAgIC8vVE9ETyBDQUNIRSBNZXRob2RJbmZvcy5cclxuICAgICAgICAgICAgLy8gQ0FDSEUgRG9tUGFyc2VyLlxyXG4gICAgICAgICAgICBmb3IodWludCBpID0gMDsgaSA8IGVsZW1lbnQuYXR0cmlidXRlcy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IGVsZW1lbnQuYXR0cmlidXRlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBib29sIGZvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGludCBqID0gMDsgaiA8IGZpZWxkcy5MZW5ndGg7IGorKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGZpZWxkc1tqXS5OYW1lID09IGF0dHJpYnV0ZS5ub2RlTmFtZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRzW2pdLlNldFZhbHVlKGNoaWxkLCBhdHRyaWJ1dGUudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFmb3VuZClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihpbnQgaiA9IDA7IGogPCBwcm9wcy5MZW5ndGg7IGorKylcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocHJvcHNbal0uTmFtZSA9PSBhdHRyaWJ1dGUubm9kZU5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHNbal0uU2V0VmFsdWUoY2hpbGQsIGF0dHJpYnV0ZS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFmb3VuZCAmJiAhc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShhdHRyaWJ1dGUubm9kZU5hbWUpKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGludCBqID0gMDsgaiA8IGV2ZW50cy5MZW5ndGg7IGorKylcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZXZlbnRzW2pdLk5hbWUgPT0gYXR0cmlidXRlLm5vZGVOYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihpbnQgamogPSAwOyBqaiA8IHBhZ2VNZXRob2RzLkxlbmd0aDsgamorKylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBhZ2VNZXRob2RzW2pqXS5OYW1lID09IGF0dHJpYnV0ZS52YWx1ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50c1tqXS5BZGRFdmVudEhhbmRsZXIoY2hpbGQsIHBhZ2VNZXRob2RzW2pqXS5DcmVhdGVEZWxlZ2F0ZShQYWdlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlbGVnYXRlIGhhbmRsZXIgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vL0RlbGVnYXRlLkNyZWF0ZURlbGVnYXRlKGV2ZW50SW5mby5FdmVudEhhbmRsZXJUeXBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLyAgICAgICAgICAgICAgICAgICAgICAgIHAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kSW5mbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SW5mby5BZGRFdmVudEhhbmRsZXIocCwgaGFuZGxlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ldmVudHNbal0uQWRkRXZlbnRIYW5kbGVyKGNoaWxkLCAocGFnZU1ldGhvZHNbampdLkNyZWF0ZURlbGVnYXRlKCkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaChFeGNlcHRpb24pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoZWxlbWVudC5jaGlsZEVsZW1lbnRDb3VudCA+IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZvcih1aW50IGkgPSAwOyBpIDwgZWxlbWVudC5jaGlsZEVsZW1lbnRDb3VudDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIEFwcGx5RG9jdW1lbnQoY2hpbGQsIGVsZW1lbnQuY2hpbGRyZW5baV0sIHBhZ2VNZXRob2RzLCBQYWdlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKCFwYXJlbnQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnRyb2wuQWRkKGNoaWxkKTtcclxuICAgICAgICAgICAgfSAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIExvYWQoQXNzZW1ibHkgYXNzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoSGFzTG9hZGVkKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vU3lzdGVtLkNvbnNvbGUuV3JpdGVMaW5lKGFzcy5GdWxsTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yZWFjaCh2YXIgaXRlbSBpbiBhc3MuR2V0TWFuaWZlc3RSZXNvdXJjZU5hbWVzKCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIWl0ZW0uVG9Mb3dlcigpLkVuZHNXaXRoKFwiLnhhbWxcIikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vU3lzdGVtLkNvbnNvbGUuV3JpdGVMaW5lKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkb2MgPSBSZXR5cGVkLmRvbS53aW5kb3cuYXRvYihhc3MuR2V0TWFuaWZlc3RSZXNvdXJjZURhdGFBc0Jhc2U2NChpdGVtKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZG9jLlN0YXJ0c1dpdGgoXCLDr8K7wr9cIikpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2MgPSBkb2MuU3Vic3RyaW5nKFwiw6/Cu8K/XCIuTGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9TeXN0ZW0uQ29uc29sZS5Xcml0ZUxpbmUoZG9jKTtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgbmFtZSA9IGl0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYobmFtZS5TdGFydHNXaXRoKGFzcy5GdWxsTmFtZSArIFwiLlwiKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUuU3Vic3RyaW5nKGFzcy5GdWxsTmFtZS5MZW5ndGggKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICBYQU1MRmlsZXNbbmFtZS5Ub0xvd2VyKCldID0gZG9jOyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2goRXhjZXB0aW9uKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgSGFzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9ICAgIFxyXG59XHJcbiIsInVzaW5nIEJyaWRnZTtcclxudXNpbmcgU3lzdGVtO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgQWNlQ29kZUVkaXRvciA6IENvbnRyb2xcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIEV4dGVybmFsUGx1Z2luIEV4dGVybmFsQWNlQ29kZUVkaXRvciA9IG5ldyBFeHRlcm5hbFBsdWdpbihcImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2FjZS8xLjAuMC9hY2UuanNcIik7XHJcbiAgICAgICAgcHVibGljIG9iamVjdCBlZGl0b3IgPSBudWxsO1xyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBDbGVhclNlbGVjdGlvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBTY3JpcHQuQ2FsbChcInRoaXMuZWRpdG9yLmNsZWFyU2VsZWN0aW9uXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgUmVhZE9ubHlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gU2NyaXB0LldyaXRlPGJvb2w+KFwidGhpcy5lZGl0b3IuZ2V0UmVhZE9ubHkoKVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXQgeyBTY3JpcHQuQ2FsbChcInRoaXMuZWRpdG9yLnNldFJlYWRPbmx5XCIsIHZhbHVlKTsgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBTb3VyY2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gU2NyaXB0LldyaXRlPHN0cmluZz4oXCJ0aGlzLmVkaXRvci5nZXRWYWx1ZSgpXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZXQgeyBTY3JpcHQuQ2FsbChcInRoaXMuZWRpdG9yLnNldFZhbHVlXCIsIHZhbHVlKTsgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIFNldHVwKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEV4dGVybmFsQWNlQ29kZUVkaXRvci5TZXR1cCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBBY2VNb2RlVHlwZXMgX21vZGVUeXBlO1xyXG4gICAgICAgIHByaXZhdGUgQWNlVGhlbWVUeXBlcyBfdGhlbWVUeXBlO1xyXG5cclxuICAgICAgICBwdWJsaWMgQWNlQ29kZUVkaXRvcihBY2VNb2RlVHlwZXMgbW9kZVR5cGUgPSBBY2VNb2RlVHlwZXMuY3NoYXJwLCBBY2VUaGVtZVR5cGVzIHRoZW1lVHlwZSA9IEFjZVRoZW1lVHlwZXMueGNvZGUpIDogYmFzZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBfbW9kZVR5cGUgPSBtb2RlVHlwZTtcclxuICAgICAgICAgICAgX3RoZW1lVHlwZSA9IHRoZW1lVHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBBY3Rpb24gT25Gb2N1cyA9IG51bGw7XHJcbiAgICAgICAgcHVibGljIEFjdGlvbiBPbkJsdXIgPSBudWxsO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIFJlbmRlcigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBFeHRlcm5hbEFjZUNvZGVFZGl0b3IuVXNhZ2VDaGVjaygpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHRoZW1lID0gX3RoZW1lVHlwZS5Ub1N0cmluZyhcIkdcIik7XHJcbiAgICAgICAgICAgIHZhciBtb2RlID0gX21vZGVUeXBlLlRvU3RyaW5nKFwiR1wiKTtcclxuXHJcbiAgICAgICAgICAgIC8qQFxyXG5cdFx0XHR0aGlzLmVkaXRvciA9IGFjZS5lZGl0KHRoaXMuQ29udGVudCk7XHJcblx0XHRcdHRoaXMuZWRpdG9yLnNldFRoZW1lKFwiYWNlL3RoZW1lL1wiICsgdGhlbWUpO1xyXG5cdFx0XHR0aGlzLmVkaXRvci5nZXRTZXNzaW9uKCkuc2V0TW9kZShcImFjZS9tb2RlL1wiICsgbW9kZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZWRpdG9yLm9uKFwiZm9jdXNcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLk9uRm9jdXMgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLk9uRm9jdXMoKTsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5lZGl0b3Iub24oXCJibHVyXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5PbkJsdXIgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLk9uQmx1cigpOyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH0pO1xyXG5cdFx0XHQqL1xyXG4gICAgICAgICAgICB0aGlzLk9uUmVzaXplID0gKGNvbnQpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8qQFxyXG5cdFx0XHRcdHRoaXMuZWRpdG9yLnJlc2l6ZSh0cnVlKTtcclxuXHRcdFx0XHQqL1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5Db250ZW50LmFkZEV2ZW50TGlzdGVuZXI8c3RyaW5nPihcIm1vdXNlZG93blwiLCAoZ2xvYmFsOjpSZXR5cGVkLmRvbS5IVE1MRWxlbWVudC5hZGRFdmVudExpc3RlbmVyRm48c3RyaW5nPikoKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBGb3JtLkluRXh0ZXJuYWxNb3VzZUV2ZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5Db250ZW50LmFkZEV2ZW50TGlzdGVuZXI8c3RyaW5nPihcIm1vdXNldXBcIiwgKGdsb2JhbDo6UmV0eXBlZC5kb20uSFRNTEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lckZuPHN0cmluZz4pKChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgRm9ybS5JbkV4dGVybmFsTW91c2VFdmVudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICAgICBiYXNlLlJlbmRlcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW51bSBBY2VUaGVtZVR5cGVzXHJcbiAgICB7XHJcbiAgICAgICAgbGFiZWwsIC8vIGJyaWdodFxyXG4gICAgICAgIGNocm9tZSwgLy8gY2hyb21lXHJcbiAgICAgICAgY2xvdWRzLCAvLyBjbG91ZHNcclxuICAgICAgICBjcmltc29uX2VkaXRvciwgLy8gY3JpbXNvbl9lZGl0b3JcclxuICAgICAgICBkYXduLCAvLyBkYXduXHJcbiAgICAgICAgZHJlYW13ZWF2ZXIsIC8vIGRyZWFtd2VhdmVyXHJcbiAgICAgICAgZWNsaXBzZSwgLy8gZWNsaXBzZVxyXG4gICAgICAgIGdpdGh1YiwgLy8gZ2l0aHViXHJcbiAgICAgICAgc29sYXJpemVkX2xpZ2h0LCAvLyBzb2xhcml6ZWRfbGlnaHRcclxuICAgICAgICB0ZXh0bWF0ZSwgLy8gdGV4dG1hdGVcclxuICAgICAgICB0b21vcnJvdywgLy8gdG9tb3Jyb3dcclxuICAgICAgICB4Y29kZSwgLy8geGNvZGVcclxuICAgICAgICBjbG91ZHNfbWlkbmlnaHQsIC8vIGNsb3Vkc19taWRuaWdodFxyXG4gICAgICAgIGNvYmFsdCwgLy8gY29iYWx0XHJcbiAgICAgICAgaWRsZV9maW5nZXJzLCAvLyBpZGxlX2ZpbmdlcnNcclxuICAgICAgICBrcl90aGVtZSwgLy8ga3JfdGhlbWVcclxuICAgICAgICBtZXJiaXZvcmUsIC8vIG1lcmJpdm9yZVxyXG4gICAgICAgIG1lcmJpdm9yZV9zb2Z0LCAvLyBtZXJiaXZvcmVfc29mdFxyXG4gICAgICAgIG1vbm9faW5kdXN0cmlhbCwgLy8gbW9ub19pbmR1c3RyaWFsXHJcbiAgICAgICAgbW9ub2thaSwgLy8gbW9ub2thaVxyXG4gICAgICAgIHBhc3RlbF9vbl9kYXJrLCAvLyBwYXN0ZWxfb25fZGFya1xyXG4gICAgICAgIHNvbGFyaXplZF9kYXJrLCAvLyBzb2xhcml6ZWRfZGFya1xyXG4gICAgICAgIHRlcm1pbmFsLCAvLyB0ZXJtaW5hbFxyXG4gICAgICAgIHRvbW9ycm93X25pZ2h0LCAvLyB0b21vcnJvd19uaWdodFxyXG4gICAgICAgIHRvbW9ycm93X25pZ2h0X2JsdWUsIC8vIHRvbW9ycm93X25pZ2h0X2JsdWVcclxuICAgICAgICB0b21vcnJvd19uaWdodF9icmlnaHQsIC8vIHRvbW9ycm93X25pZ2h0X2JyaWdodFxyXG4gICAgICAgIHRvbW9ycm93X25pZ2h0X2VpZ2h0aWVzLCAvLyB0b21vcnJvd19uaWdodF9laWdodGllc1xyXG4gICAgICAgIHR3aWxpZ2h0LCAvLyB0d2lsaWdodFxyXG4gICAgICAgIHZpYnJhbnRfaW5rIC8vIHZpYnJhbnRfaW5rPC9vcHRpb24+PC9vcHRncm91cD5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW51bSBBY2VNb2RlVHlwZXNcclxuICAgIHtcclxuICAgICAgICBhYmFwLCAvLyBBQkFQXHJcbiAgICAgICAgYWJjLCAvLyBBQkNcclxuICAgICAgICBhY3Rpb25zY3JpcHQsIC8vIEFjdGlvblNjcmlwdFxyXG4gICAgICAgIGFkYSwgLy8gQURBXHJcbiAgICAgICAgYXBhY2hlX2NvbmYsIC8vIEFwYWNoZSwgLy8gQ29uZlxyXG4gICAgICAgIGFzY2lpZG9jLCAvLyBBc2NpaURvY1xyXG4gICAgICAgIGFzc2VtYmx5X3g4NiwgLy8gQXNzZW1ibHksIC8vIHg4NlxyXG4gICAgICAgIGF1dG9ob3RrZXksIC8vIEF1dG9Ib3RLZXlcclxuICAgICAgICBiYXRjaGZpbGUsIC8vIEJhdGNoRmlsZVxyXG4gICAgICAgIGJybywgLy8gQnJvXHJcbiAgICAgICAgY19jcHAsIC8vIEMsIC8vIGFuZCwgLy8gQysrXHJcbiAgICAgICAgYzlzZWFyY2gsIC8vIEM5U2VhcmNoXHJcbiAgICAgICAgY2lycnUsIC8vIENpcnJ1XHJcbiAgICAgICAgY2xvanVyZSwgLy8gQ2xvanVyZVxyXG4gICAgICAgIGNvYm9sLCAvLyBDb2JvbFxyXG4gICAgICAgIGNvZmZlZSwgLy8gQ29mZmVlU2NyaXB0XHJcbiAgICAgICAgY29sZGZ1c2lvbiwgLy8gQ29sZEZ1c2lvblxyXG4gICAgICAgIGNzaGFycCwgLy8gQyNcclxuICAgICAgICBjc3MsIC8vIENTU1xyXG4gICAgICAgIGN1cmx5LCAvLyBDdXJseVxyXG4gICAgICAgIGQsIC8vIERcclxuICAgICAgICBkYXJ0LCAvLyBEYXJ0XHJcbiAgICAgICAgZGlmZiwgLy8gRGlmZlxyXG4gICAgICAgIGRvY2tlcmZpbGUsIC8vIERvY2tlcmZpbGVcclxuICAgICAgICBkb3QsIC8vIERvdFxyXG4gICAgICAgIGRyb29scywgLy8gRHJvb2xzXHJcbiAgICAgICAgZHVtbXksIC8vIER1bW15XHJcbiAgICAgICAgZHVtbXlzeW50YXgsIC8vIER1bW15U3ludGF4XHJcbiAgICAgICAgZWlmZmVsLCAvLyBFaWZmZWxcclxuICAgICAgICBlanMsIC8vIEVKU1xyXG4gICAgICAgIGVsaXhpciwgLy8gRWxpeGlyXHJcbiAgICAgICAgZWxtLCAvLyBFbG1cclxuICAgICAgICBlcmxhbmcsIC8vIEVybGFuZ1xyXG4gICAgICAgIGZvcnRoLCAvLyBGb3J0aFxyXG4gICAgICAgIGZvcnRyYW4sIC8vIEZvcnRyYW5cclxuICAgICAgICBmdGwsIC8vIEZyZWVNYXJrZXJcclxuICAgICAgICBnY29kZSwgLy8gR2NvZGVcclxuICAgICAgICBnaGVya2luLCAvLyBHaGVya2luXHJcbiAgICAgICAgZ2l0aWdub3JlLCAvLyBHaXRpZ25vcmVcclxuICAgICAgICBnbHNsLCAvLyBHbHNsXHJcbiAgICAgICAgZ29ic3RvbmVzLCAvLyBHb2JzdG9uZXNcclxuICAgICAgICBnb2xhbmcsIC8vIEdvXHJcbiAgICAgICAgZ3Jvb3Z5LCAvLyBHcm9vdnlcclxuICAgICAgICBoYW1sLCAvLyBIQU1MXHJcbiAgICAgICAgaGFuZGxlYmFycywgLy8gSGFuZGxlYmFyc1xyXG4gICAgICAgIGhhc2tlbGwsIC8vIEhhc2tlbGxcclxuICAgICAgICBoYXNrZWxsX2NhYmFsLCAvLyBIYXNrZWxsLCAvLyBDYWJhbFxyXG4gICAgICAgIGhheGUsIC8vIGhhWGVcclxuICAgICAgICBoanNvbiwgLy8gSGpzb25cclxuICAgICAgICBodG1sLCAvLyBIVE1MXHJcbiAgICAgICAgaHRtbF9lbGl4aXIsIC8vIEhUTUwsIC8vIChFbGl4aXIpXHJcbiAgICAgICAgaHRtbF9ydWJ5LCAvLyBIVE1MLCAvLyAoUnVieSlcclxuICAgICAgICBpbmksIC8vIElOSVxyXG4gICAgICAgIGlvLCAvLyBJb1xyXG4gICAgICAgIGphY2ssIC8vIEphY2tcclxuICAgICAgICBqYWRlLCAvLyBKYWRlXHJcbiAgICAgICAgamF2YSwgLy8gSmF2YVxyXG4gICAgICAgIGphdmFzY3JpcHQsIC8vIEphdmFTY3JpcHRcclxuICAgICAgICBqc29uLCAvLyBKU09OXHJcbiAgICAgICAganNvbmlxLCAvLyBKU09OaXFcclxuICAgICAgICBqc3AsIC8vIEpTUFxyXG4gICAgICAgIGpzeCwgLy8gSlNYXHJcbiAgICAgICAganVsaWEsIC8vIEp1bGlhXHJcbiAgICAgICAga290bGluLCAvLyBLb3RsaW5cclxuICAgICAgICBsYXRleCwgLy8gTGFUZVhcclxuICAgICAgICBsZXNzLCAvLyBMRVNTXHJcbiAgICAgICAgbGlxdWlkLCAvLyBMaXF1aWRcclxuICAgICAgICBsaXNwLCAvLyBMaXNwXHJcbiAgICAgICAgbGl2ZXNjcmlwdCwgLy8gTGl2ZVNjcmlwdFxyXG4gICAgICAgIGxvZ2lxbCwgLy8gTG9naVFMXHJcbiAgICAgICAgbHNsLCAvLyBMU0xcclxuICAgICAgICBsdWEsIC8vIEx1YVxyXG4gICAgICAgIGx1YXBhZ2UsIC8vIEx1YVBhZ2VcclxuICAgICAgICBsdWNlbmUsIC8vIEx1Y2VuZVxyXG4gICAgICAgIG1ha2VmaWxlLCAvLyBNYWtlZmlsZVxyXG4gICAgICAgIG1hcmtkb3duLCAvLyBNYXJrZG93blxyXG4gICAgICAgIG1hc2ssIC8vIE1hc2tcclxuICAgICAgICBtYXRsYWIsIC8vIE1BVExBQlxyXG4gICAgICAgIG1hemUsIC8vIE1hemVcclxuICAgICAgICBtZWwsIC8vIE1FTFxyXG4gICAgICAgIG11c2hjb2RlLCAvLyBNVVNIQ29kZVxyXG4gICAgICAgIG15c3FsLCAvLyBNeVNRTFxyXG4gICAgICAgIG5peCwgLy8gTml4XHJcbiAgICAgICAgbnNpcywgLy8gTlNJU1xyXG4gICAgICAgIG9iamVjdGl2ZWMsIC8vIE9iamVjdGl2ZS1DXHJcbiAgICAgICAgb2NhbWwsIC8vIE9DYW1sXHJcbiAgICAgICAgcGFzY2FsLCAvLyBQYXNjYWxcclxuICAgICAgICBwZXJsLCAvLyBQZXJsXHJcbiAgICAgICAgcGdzcWwsIC8vIHBnU1FMXHJcbiAgICAgICAgcGhwLCAvLyBQSFBcclxuICAgICAgICBwb3dlcnNoZWxsLCAvLyBQb3dlcnNoZWxsXHJcbiAgICAgICAgcHJhYXQsIC8vIFByYWF0XHJcbiAgICAgICAgcHJvbG9nLCAvLyBQcm9sb2dcclxuICAgICAgICBwcm9wZXJ0aWVzLCAvLyBQcm9wZXJ0aWVzXHJcbiAgICAgICAgcHJvdG9idWYsIC8vIFByb3RvYnVmXHJcbiAgICAgICAgcHl0aG9uLCAvLyBQeXRob25cclxuICAgICAgICByLCAvLyBSXHJcbiAgICAgICAgcmF6b3IsIC8vIFJhem9yXHJcbiAgICAgICAgcmRvYywgLy8gUkRvY1xyXG4gICAgICAgIHJodG1sLCAvLyBSSFRNTFxyXG4gICAgICAgIHJzdCwgLy8gUlNUXHJcbiAgICAgICAgcnVieSwgLy8gUnVieVxyXG4gICAgICAgIHJ1c3QsIC8vIFJ1c3RcclxuICAgICAgICBzYXNzLCAvLyBTQVNTXHJcbiAgICAgICAgc2NhZCwgLy8gU0NBRFxyXG4gICAgICAgIHNjYWxhLCAvLyBTY2FsYVxyXG4gICAgICAgIHNjaGVtZSwgLy8gU2NoZW1lXHJcbiAgICAgICAgc2NzcywgLy8gU0NTU1xyXG4gICAgICAgIHNoLCAvLyBTSFxyXG4gICAgICAgIHNqcywgLy8gU0pTXHJcbiAgICAgICAgc21hcnR5LCAvLyBTbWFydHlcclxuICAgICAgICBzbmlwcGV0cywgLy8gc25pcHBldHNcclxuICAgICAgICBzb3lfdGVtcGxhdGUsIC8vIFNveSwgLy8gVGVtcGxhdGVcclxuICAgICAgICBzcGFjZSwgLy8gU3BhY2VcclxuICAgICAgICBzcWwsIC8vIFNRTFxyXG4gICAgICAgIHNxbHNlcnZlciwgLy8gU1FMU2VydmVyXHJcbiAgICAgICAgc3R5bHVzLCAvLyBTdHlsdXNcclxuICAgICAgICBzdmcsIC8vIFNWR1xyXG4gICAgICAgIHN3aWZ0LCAvLyBTd2lmdFxyXG4gICAgICAgIHRjbCwgLy8gVGNsXHJcbiAgICAgICAgdGV4LCAvLyBUZXhcclxuICAgICAgICB0ZXh0LCAvLyBUZXh0XHJcbiAgICAgICAgdGV4dGlsZSwgLy8gVGV4dGlsZVxyXG4gICAgICAgIHRvbWwsIC8vIFRvbWxcclxuICAgICAgICB0c3gsIC8vIFRTWFxyXG4gICAgICAgIHR3aWcsIC8vIFR3aWdcclxuICAgICAgICB0eXBlc2NyaXB0LCAvLyBUeXBlc2NyaXB0XHJcbiAgICAgICAgdmFsYSwgLy8gVmFsYVxyXG4gICAgICAgIHZic2NyaXB0LCAvLyBWQlNjcmlwdFxyXG4gICAgICAgIHZlbG9jaXR5LCAvLyBWZWxvY2l0eVxyXG4gICAgICAgIHZlcmlsb2csIC8vIFZlcmlsb2dcclxuICAgICAgICB2aGRsLCAvLyBWSERMXHJcbiAgICAgICAgd29sbG9rLCAvLyBXb2xsb2tcclxuICAgICAgICB4bWwsIC8vIFhNTFxyXG4gICAgICAgIHhxdWVyeSwgLy8gWFF1ZXJ5XHJcbiAgICAgICAgeWFtbCwgLy8gWUFNTFxyXG4gICAgICAgIGRqYW5nbyAvLyBEamFuZ29cclxuICAgIH1cclxufSIsInVzaW5nIEJyaWRnZTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5MaW5xO1xyXG51c2luZyBTeXN0ZW07XHJcbnVzaW5nIFJldHlwZWQ7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBGb3JtIDogQ29udHJvbFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgUmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQgV2luZG93SG9sZGVyO1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgTGlzdDxGb3JtPiBNaW5pbWl6ZWRGb3JtcyA9IG5ldyBMaXN0PEZvcm0+KCk7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBSZXR5cGVkLmRvbS5IVE1MRGl2RWxlbWVudCBXaW5kb3dMb2FkZXI7XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIFRvb2xUaXAgX2FjdGl2ZVRvb2xUaXA7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgaW50IF90b29sVGlwVGltZXJIYW5kbGUgPSAtMTtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBBY3Rpb248UmV0eXBlZC5kb20uRXZlbnQ+IF9hY3RpdmVUb29sVGlwTW91c2VNb3ZlO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIFRvb2xUaXBDb250cm9sIF9hY3RpdmVUb29sVGlwQ29udHJvbCA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgaW50IF9vZXBudG9vbFRpcFRpbWVySGFuZGxlID0gLTE7XHJcblxyXG4gICAgICAgIHByaXZhdGUgYm9vbCBfZGlzYWJsZUJveFNoYWRvdztcclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgRGlzYWJsZUJveFNoYWRvd1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIF9kaXNhYmxlQm94U2hhZG93OyB9XHJcbiAgICAgICAgICAgIHNldCB7XHJcbiAgICAgICAgICAgICAgICBfZGlzYWJsZUJveFNoYWRvdyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYoX2Rpc2FibGVCb3hTaGFkb3cpXHJcbiAgICAgICAgICAgICAgICAgICAgQ29udGVudC5zdHlsZS5ib3hTaGFkb3cgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBDb250ZW50LnN0eWxlLmJveFNoYWRvdyA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8QWN0aW9uPFJldHlwZWQuZG9tLktleWJvYXJkRXZlbnQ+PiBLZXlIb29rcyA9IG5ldyBMaXN0PEFjdGlvbjxSZXR5cGVkLmRvbS5LZXlib2FyZEV2ZW50Pj4oKTtcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBUb29sVGlwIEFjdGl2ZVRvb2xUaXBcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBfYWN0aXZlVG9vbFRpcDsgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoX2FjdGl2ZVRvb2xUaXAgIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodmFsdWUgIT0gbnVsbCAmJiB2YWx1ZS5BdHRhY2hlZENvbnRyb2wgIT0gbnVsbCAmJiB2YWx1ZS5BdHRhY2hlZENvbnRyb2wuQ29udGVudCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoX2FjdGl2ZVRvb2xUaXBNb3VzZU1vdmUgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuQXR0YWNoZWRDb250cm9sLkNvbnRlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCAoZ2xvYmFsOjpTeXN0ZW0uQWN0aW9uPGdsb2JhbDo6UmV0eXBlZC5kb20uRXZlbnQ+KV9hY3RpdmVUb29sVGlwTW91c2VNb3ZlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hY3RpdmVUb29sVGlwTW91c2VNb3ZlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZihfYWN0aXZlVG9vbFRpcENvbnRyb2wgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hY3RpdmVUb29sVGlwQ29udHJvbC5DbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWN0aXZlVG9vbFRpcENvbnRyb2wgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZihfdG9vbFRpcFRpbWVySGFuZGxlID4gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBSZXR5cGVkLmRvbS5jbGVhclRpbWVvdXQoX3Rvb2xUaXBUaW1lckhhbmRsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90b29sVGlwVGltZXJIYW5kbGUgPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9hY3RpdmVUb29sVGlwID0gdmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGludCBtZXNzYWdlTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKF9hY3RpdmVUb29sVGlwICE9IG51bGwgJiYgKG1lc3NhZ2VMZW5ndGggPSBfYWN0aXZlVG9vbFRpcC5HZXRXb3JkQ291bnQoKSkgPiAwICYmIF9hY3RpdmVUb29sVGlwLkF0dGFjaGVkQ29udHJvbCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2FjdGl2ZVRvb2xUaXBNb3VzZU1vdmUgPSAoZXYpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKF90b29sVGlwVGltZXJIYW5kbGUgPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXR5cGVkLmRvbS5jbGVhclRpbWVvdXQoX3Rvb2xUaXBUaW1lckhhbmRsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdG9vbFRpcFRpbWVySGFuZGxlID0gKGludClSZXR5cGVkLmRvbS5zZXRUaW1lb3V0KChnbG9iYWw6OlJldHlwZWQuZG9tLnNldFRpbWVvdXRGbikoKGFiKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKF9hY3RpdmVUb29sVGlwQ29udHJvbCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FjdGl2ZVRvb2xUaXBDb250cm9sLkNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hY3RpdmVUb29sVGlwQ29udHJvbCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKF9vZXBudG9vbFRpcFRpbWVySGFuZGxlID4gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXR5cGVkLmRvbS5jbGVhclRpbWVvdXQoX29lcG50b29sVGlwVGltZXJIYW5kbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2VwbnRvb2xUaXBUaW1lckhhbmRsZSA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWN0aXZlVG9vbFRpcENvbnRyb2wgPSBuZXcgVG9vbFRpcENvbnRyb2woX2FjdGl2ZVRvb2xUaXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hY3RpdmVUb29sVGlwQ29udHJvbC5TaG93KGV2LkFzPFJldHlwZWQuZG9tLk1vdXNlRXZlbnQ+KCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2VwbnRvb2xUaXBUaW1lckhhbmRsZSA9IChpbnQpUmV0eXBlZC5kb20uc2V0VGltZW91dCgoZ2xvYmFsOjpSZXR5cGVkLmRvbS5zZXRUaW1lb3V0Rm4pKChhYjIpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihfYWN0aXZlVG9vbFRpcENvbnRyb2wgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FjdGl2ZVRvb2xUaXBDb250cm9sLkNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWN0aXZlVG9vbFRpcENvbnRyb2wgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIE1hdGguTWF4KDEwMDAsIG1lc3NhZ2VMZW5ndGggKiBNYXRoLk1heChTZXR0aW5ncy5Ub29sVGlwUG9wdXBTdGF5T3BlbkRlbGF5UGVyV29yZE1zLCAxMCkpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoX2FjdGl2ZVRvb2xUaXBNb3VzZU1vdmUgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLkF0dGFjaGVkQ29udHJvbC5Db250ZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgKGdsb2JhbDo6U3lzdGVtLkFjdGlvbjxnbG9iYWw6OlJldHlwZWQuZG9tLkV2ZW50PilfYWN0aXZlVG9vbFRpcE1vdXNlTW92ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hY3RpdmVUb29sVGlwTW91c2VNb3ZlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgTWF0aC5NYXgoMSwgU2V0dGluZ3MuVG9vbFRpcFBvcHVwRGVsYXlNcykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5BdHRhY2hlZENvbnRyb2wuQ29udGVudC5hZGRFdmVudExpc3RlbmVyPFJldHlwZWQuZG9tLkV2ZW50PihcIm1vdXNlbW92ZVwiLCAoZ2xvYmFsOjpTeXN0ZW0uQWN0aW9uPGdsb2JhbDo6UmV0eXBlZC5kb20uRXZlbnQ+KV9hY3RpdmVUb29sVGlwTW91c2VNb3ZlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIEluRGVzaWduID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IFJlc2l6ZUNvcm5lcnMgPSAyO1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgRm9ybSBNb3ZpbmdGb3JtID0gbnVsbDtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIFJldHlwZWQuZG9tLkhUTUxFbGVtZW50IFBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIE1vdXNlX0Rvd24gPSBmYWxzZTtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgTWVudU9wZW4gPSBmYWxzZTtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIFJldHlwZWQuZG9tLkhUTUxFbGVtZW50IEZvcm1PdmVyTGF5O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIGJvb2wgX2hhc1NldHVwID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIEhhc1NldHVwIHsgZ2V0IHsgcmV0dXJuIF9oYXNTZXR1cDsgfSB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgYm9vbCBQcmV2aW91c1NpemVDaGFuZ2UgPSB0cnVlO1xyXG4gICAgICAgIHByaXZhdGUgYm9vbCBQcmV2aW91c01vdmVDaGFuZ2UgPSB0cnVlO1xyXG4gICAgICAgIHByaXZhdGUgYm9vbCBQcmV2aW91c1Nob3dNYXggPSB0cnVlO1xyXG4gICAgICAgIHByaXZhdGUgYm9vbCBQcmV2aW91c1Nob3dNaW4gPSB0cnVlO1xyXG4gICAgICAgIHByaXZhdGUgc3RyaW5nIFByZXZpb3VzT3BhY2l0eSA9IFwiXCI7XHJcbiAgICAgICAgcHJvdGVjdGVkIGJvb2wgSGFzUmVtb3ZlZFBsYWNlSG9sZGVyO1xyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBBbGxvd1NpemVDaGFuZ2UgPSB0cnVlO1xyXG4gICAgICAgIHB1YmxpYyBib29sIEFsbG93TW92ZUNoYW5nZSA9IHRydWU7XHJcbnB1YmxpYyBSZXR5cGVkLmRvbS5IVE1MQ29sbGVjdGlvbiBDb250cm9sc1xyXG57XHJcbiAgICBnZXRcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gQm9keS5jaGlsZHJlbjtcclxuICAgIH1cclxufVxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBJbkV4dGVybmFsTW91c2VFdmVudCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBTaG93TWluaW1pemVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBCdXR0b25NaW5pbWl6ZSAhPSBudWxsOyB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDaGFuZ2VIZWFkaW5nQnV0dG9uKEZvcm1CdXR0b25UeXBlLk1pbmltaXplLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbnB1YmxpYyBSZXR5cGVkLmRvbS5DU1NTdHlsZURlY2xhcmF0aW9uIEJvZHlTdHlsZVxyXG57XHJcbiAgICBnZXRcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gQm9keS5zdHlsZTtcclxuICAgIH1cclxufVxyXG4gICAgICAgIHB1YmxpYyBib29sIFNob3dDbG9zZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIEJ1dHRvbkNsb3NlICE9IG51bGw7IH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIENoYW5nZUhlYWRpbmdCdXR0b24oRm9ybUJ1dHRvblR5cGUuQ2xvc2UsIHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgU2hvd01heGltaXplXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gQnV0dG9uRXhwYW5kICE9IG51bGw7IH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIENoYW5nZUhlYWRpbmdCdXR0b24oRm9ybUJ1dHRvblR5cGUuTWF4aW1pemUsIHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgU2hvd01lbnVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBCdXR0b25NZW51ICE9IG51bGw7IH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIENoYW5nZUhlYWRpbmdCdXR0b24oRm9ybUJ1dHRvblR5cGUuTWVudSwgdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBGb3JSZXVzZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgc3RhdGljIGJvb2wgSW5FcnJvckRpYWxvZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBKUXVlcnk8SFRNTEVsZW1lbnQ+IFNlbGY7XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBib29sIF9Jc0RpYWxvZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBJc0RpYWxvZygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gX0lzRGlhbG9nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBMaXN0PENvbnRyb2w+IENoaWxkcmVuID0gbmV3IExpc3Q8Q29udHJvbD4oKTtcclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgTGlua2NoaWxkVG9Gb3JtKENvbnRyb2wgY2hpbGQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihjaGlsZCA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBDaGlsZHJlbi5BZGQoY2hpbGQpO1xyXG4gICAgICAgICAgICBjaGlsZC5MaW5rZWRGb3JtID0gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIExpbmtjaGlsZHJlblRvRm9ybShwYXJhbXMgQ29udHJvbFtdIGNoaWxkcmVuKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoY2hpbGRyZW4gPT0gbnVsbCB8fCBjaGlsZHJlbi5MZW5ndGggPT0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgQ2hpbGRyZW4uQWRkUmFuZ2UoY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgY2hpbGRyZW4uTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKGNoaWxkcmVuW2ldICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW5baV0uTGlua2VkRm9ybSA9IHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBGb3JtIEFwcGVuZENoaWxkKENvbnRyb2wgbm9kZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuQm9keS5hcHBlbmRDaGlsZDxSZXR5cGVkLmRvbS5Ob2RlPigoUmV0eXBlZC5kb20uTm9kZSlub2RlKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEZvcm0gQXBwZW5kQ2hpbGRyZW4ocGFyYW1zIENvbnRyb2xbXSBub2RlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5Cb2R5LkFwcGVuZENoaWxkcmVuKG5vZGUpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgRm9ybSBBcHBlbmRDaGlsZChSZXR5cGVkLmRvbS5IVE1MRWxlbWVudCBub2RlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5Cb2R5LmFwcGVuZENoaWxkPEhUTUxFbGVtZW50Pihub2RlKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEZvcm0gQXBwZW5kQ2hpbGRyZW4ocGFyYW1zIFJldHlwZWQuZG9tLkhUTUxFbGVtZW50W10gbm9kZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuQm9keS5BcHBlbmRDaGlsZHJlbihub2RlKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHN0YXRpYyBGb3JtQ29sbGVjdGlvbiBzdGFuZEFsb25lRm9ybXMgPSBuZXcgRm9ybUNvbGxlY3Rpb24obnVsbCk7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBMaXN0PEZvcm1Db2xsZWN0aW9uPiBGb3JtQ29sbGVjdGlvbnMgPSBuZXcgTGlzdDxGb3JtQ29sbGVjdGlvbj4oKTtcclxuXHJcbiAgICAgICAgcHVibGljIEZvcm1TdGFydFBvc2l0aW9uIFN0YXJ0UG9zaXRpb24gPSBGb3JtU3RhcnRQb3NpdGlvbi5XaW5kb3dzRGVmYXVsdExvY2F0aW9uO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgU2hvd0JvZHlPdmVyTGF5ID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IFdpbmRvd19EZWZhdWx0SGVpZ2h0ID0gNDgwO1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IFdpbmRvd19EZWZhdWx0V2lkdGggPSA2NDA7XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIEZvcm0gX0FjdGl2ZUZvcm07XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgRm9ybSBfUHJldkFjdGl2ZUZvcm07XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgTW91c2VNb3ZlQWN0aW9uIE1vdmVBY3Rpb24gPSBNb3VzZU1vdmVBY3Rpb24uTW92ZTtcclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgVG9wTW9zdCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwdWJsaWMgRGlhbG9nUmVzdWx0RW51bSBEaWFsb2dSZXN1bHQgPSBEaWFsb2dSZXN1bHRFbnVtLk5vbmU7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IFdpbmRvd0hvbGRlclNlbGVjdGlvbkJveFg7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBpbnQgV2luZG93SG9sZGVyU2VsZWN0aW9uQm94WTtcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBpbnQgV2luZG93SG9sZGVyU2VsZWN0aW9uQm94WE9mZjtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIGludCBXaW5kb3dIb2xkZXJTZWxlY3Rpb25Cb3hZT2ZmO1xyXG5cclxuICAgICAgICBwdWJsaWMgUmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQgSGVhZGluZztcclxuICAgICAgICBwcm90ZWN0ZWQgUmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQgQnV0dG9uQ2xvc2U7XHJcbiAgICAgICAgcHJvdGVjdGVkIFJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50IEJ1dHRvbkV4cGFuZDtcclxuICAgICAgICBwcm90ZWN0ZWQgUmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQgQnV0dG9uTWluaW1pemU7XHJcbiAgICAgICAgcHJvdGVjdGVkIFJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50IEJ1dHRvbk1lbnU7XHJcbiAgICAgICAgcHJvdGVjdGVkIFJldHlwZWQuZG9tLkhUTUxTcGFuRWxlbWVudCBIZWFkaW5nVGl0bGU7XHJcblxyXG4gICAgICAgIHB1YmxpYyBSZXR5cGVkLmRvbS5IVE1MRGl2RWxlbWVudCBCb2R5O1xyXG4gICAgICAgIHB1YmxpYyBSZXR5cGVkLmRvbS5IVE1MRGl2RWxlbWVudCBCb2R5T3ZlckxheTtcclxuXHJcbiAgICAgICAgcHVibGljIGZsb2F0IHByZXZfcHg7XHJcbiAgICAgICAgcHVibGljIGZsb2F0IHByZXZfcHk7XHJcblxyXG4gICAgICAgIHByaXZhdGUgaW50IHByZXZfd2lkdGg7XHJcbiAgICAgICAgcHJpdmF0ZSBpbnQgcHJldl9oZWlnaHQ7XHJcblxyXG4gICAgICAgIHByaXZhdGUgaW50IHByZXZfdG9wO1xyXG4gICAgICAgIHByaXZhdGUgaW50IHByZXZfbGVmdDtcclxuXHJcbiAgICAgICAgcHVibGljIGludCBNaW5XaWR0aCA9IDIwMDtcclxuICAgICAgICBwdWJsaWMgaW50IE1pbkhlaWdodCA9IDUwO1xyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBSZXNpemVDaGlsZHJlbihSZXR5cGVkLmRvbS5IVE1MRWxlbWVudCBwYXJlbnQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihPblJlc2l6ZSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgT25SZXNpemUodGhpcyk7XHJcbiAgICAgICAgICAgIE9uUmVzaXppbmcoKTtcclxuXHJcbiAgICAgICAgICAgIGZvcih1aW50IHggPSAwOyB4IDwgcGFyZW50LmNoaWxkcmVuLmxlbmd0aDsgeCsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZighcGFyZW50LmNoaWxkcmVuW3hdLmNsYXNzTGlzdC5jb250YWlucyhcImNvbnRyb2xcIikpXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgQ2hpbGRyZW4uQ291bnQ7IGkrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihDaGlsZHJlbltpXSAhPSBudWxsICYmIENoaWxkcmVuW2ldLk9uUmVzaXplICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihDaGlsZHJlbltpXS5Db250ZW50ID09IHBhcmVudC5jaGlsZHJlblt4XSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hpbGRyZW5baV0uT25SZXNpemUoQ2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBSZXNpemVDaGlsZHJlbihwYXJlbnQuY2hpbGRyZW5beF0uQXM8UmV0eXBlZC5kb20uSFRNTEVsZW1lbnQ+KCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBSZXNpemluZygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihPblJlc2l6ZSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgT25SZXNpemUodGhpcyk7XHJcbiAgICAgICAgICAgIE9uUmVzaXppbmcoKTtcclxuXHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBDaGlsZHJlbi5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihDaGlsZHJlbltpXSAhPSBudWxsICYmIENoaWxkcmVuW2ldLk9uUmVzaXplICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgQ2hpbGRyZW5baV0uT25SZXNpemUoQ2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgdmlydHVhbCB2b2lkIE9uUmVzaXppbmcoKVxyXG4gICAgICAgIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgV2luZG93U3RhdGVUeXBlIHdpbmRvd1N0YXRlO1xyXG4gICAgICAgIHByaXZhdGUgV2luZG93U3RhdGVUeXBlIF9wcmV2d2luZG93U3RhdGUgPSBXaW5kb3dTdGF0ZVR5cGUuTm9ybWFsO1xyXG5cclxuICAgICAgICBwdWJsaWMgV2luZG93U3RhdGVUeXBlIFdpbmRvd1N0YXRlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gd2luZG93U3RhdGU7IH1cclxuICAgICAgICAgICAgc2V0IHsgU2V0V2luZG93U3RhdGUodmFsdWUpOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgTWlkbGVPZkFjdGlvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gTW92aW5nRm9ybSAhPSBudWxsOyAvLyBXaW5kb3dIb2xkZXJTZWxlY3Rpb25Cb3ggIT0gbnVsbCB8fFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgSXNDb250ZW50VmlzaWJsZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gQ29udGVudCAhPSBudWxsICYmIENvbnRlbnQuc3R5bGUudmlzaWJpbGl0eS5FcXVhbHMoXCJ2aXNpYmxlXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQ2hhbmdlSGVhZGluZ0J1dHRvbihGb3JtQnV0dG9uVHlwZSBidXR0b24sIGJvb2wgdmlzaWJsZSA9IHRydWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzd2l0Y2goYnV0dG9uKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEZvcm1CdXR0b25UeXBlLk1pbmltaXplOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmKEJ1dHRvbk1pbmltaXplICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBCdXR0b25NaW5pbWl6ZS5EZWxldGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQnV0dG9uTWluaW1pemUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZih2aXNpYmxlKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQnV0dG9uTWluaW1pemUgPSBDcmVhdGVGb3JtQnV0dG9uKGJ1dHRvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIEZvcm1CdXR0b25UeXBlLk1heGltaXplOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmKEJ1dHRvbkV4cGFuZCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQnV0dG9uRXhwYW5kLkRlbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBCdXR0b25FeHBhbmQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZih2aXNpYmxlKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQnV0dG9uRXhwYW5kID0gQ3JlYXRlRm9ybUJ1dHRvbihidXR0b24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIEZvcm1CdXR0b25UeXBlLkNsb3NlOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmKEJ1dHRvbkNsb3NlICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBCdXR0b25DbG9zZS5EZWxldGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQnV0dG9uQ2xvc2UgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZih2aXNpYmxlKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQnV0dG9uQ2xvc2UgPSBDcmVhdGVGb3JtQnV0dG9uKGJ1dHRvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRm9ybUJ1dHRvblR5cGUuTWVudTpcclxuICAgICAgICAgICAgICAgICAgICBpZihCdXR0b25NZW51ICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBCdXR0b25NZW51LkRlbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBCdXR0b25NZW51ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodmlzaWJsZSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEJ1dHRvbk1lbnUgPSBDcmVhdGVGb3JtQnV0dG9uKGJ1dHRvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIENhbGN1bGF0ZUJ1dHRvbkxvY2F0aW9ucygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHZpcnR1YWwgdm9pZCBJbml0aWFsaXNlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgdmlydHVhbCB2b2lkIE9uU2hvd2luZygpXHJcbiAgICAgICAge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHZpcnR1YWwgdm9pZCBPblNob3dlZCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHZpcnR1YWwgdm9pZCBPbkNsb3NpbmcoKVxyXG4gICAgICAgIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCB2aXJ0dWFsIHZvaWQgT25DbG9zZWQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBBY3Rpb24gT25Gb3JtQ2xvc2VkID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBGb3JtQ29sbGVjdGlvbiBHZXRBY3RpdmVGb3JtQ29sbGVjdGlvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IoaW50IGkgPSBGb3JtQ29sbGVjdGlvbnMuQ291bnQgLSAxOyBpID49IDA7IGktLSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZybUNvbCA9IEZvcm1Db2xsZWN0aW9uc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmKGZybUNvbC5Gb3JtT3duZXIgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IoaW50IHggPSAwOyB4IDwgZnJtQ29sLlZpc2libGVGb3Jtcy5Db3VudDsgeCsrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZnJtQ29sLlZpc2libGVGb3Jtc1t4XSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm1Db2wuVmlzaWJsZUZvcm1zW3hdLkNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgRm9ybUNvbGxlY3Rpb25zLlJlbW92ZUF0KGkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmcm1Db2w7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIFNldEJvZHlPdmVyTGF5KClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBBY3RpdmVDb2xsZWN0aW9uID0gR2V0QWN0aXZlRm9ybUNvbGxlY3Rpb24oKTtcclxuICAgICAgICAgICAgaWYoQWN0aXZlQ29sbGVjdGlvbiA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgQWN0aXZlQ29sbGVjdGlvbi5Gb3JtT3duZXIuU2hvd0JvZHlPdmVyTGF5U3R5bGUoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBWaXNpYmxlRm9ybXMgPSBBY3RpdmVDb2xsZWN0aW9uLlZpc2libGVGb3JtcztcclxuXHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBWaXNpYmxlRm9ybXMuQ291bnQ7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvcm0gPSBWaXNpYmxlRm9ybXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZihmb3JtICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybS5TaG93Qm9keU92ZXJMYXlTdHlsZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBTaG93Qm9keU92ZXJMYXlTdHlsZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihCb2R5T3ZlckxheSAhPSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICBCb2R5T3ZlckxheS5zdHlsZS52aXNpYmlsaXR5LkVxdWFscyhcImNvbGxhcHNlXCIpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihJbkRlc2lnbilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBCb2R5T3ZlckxheS5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCB2aXJ0dWFsIHZvaWQgT25Hb3RGb2N1cygpXHJcbiAgICAgICAge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHZpcnR1YWwgdm9pZCBPbkxvc3RGb2N1cygpXHJcbiAgICAgICAge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBGb3JtIEFjdGl2ZUZvcm1cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBfQWN0aXZlRm9ybTsgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoX0FjdGl2ZUZvcm0gIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgX1ByZXZBY3RpdmVGb3JtID0gX0FjdGl2ZUZvcm07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKF9BY3RpdmVGb3JtICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfQWN0aXZlRm9ybS5Pbkxvc3RGb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihfQWN0aXZlRm9ybS5Db250ZW50ICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKF9BY3RpdmVGb3JtLkluRGVzaWduKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9BY3RpdmVGb3JtLkJvZHlPdmVyTGF5LnN0eWxlLnZpc2liaWxpdHkgPSBcImNvbGxhcHNlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX0FjdGl2ZUZvcm0uQm9keU92ZXJMYXkuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF9BY3RpdmVGb3JtID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoX0FjdGl2ZUZvcm0gIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9BY3RpdmVGb3JtLk9uR290Rm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoX0FjdGl2ZUZvcm0uQ29udGVudCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfQWN0aXZlRm9ybS5Cb2R5T3ZlckxheS5zdHlsZS52aXNpYmlsaXR5ID0gXCJjb2xsYXBzZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX0FjdGl2ZUZvcm0uQnJpbmdUb0Zyb250KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoX1ByZXZBY3RpdmVGb3JtIGlzIEZvcm1Qb3B1cCAmJiAoKF9BY3RpdmVGb3JtICE9IG51bGwgJiYgIShfQWN0aXZlRm9ybSBpcyBGb3JtUG9wdXApKSB8fCBfQWN0aXZlRm9ybSA9PSBudWxsKSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENsb3NlRm9ybVBvcHVwcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIENoYW5nZVN0YXRlVGV4dFNlbGVjdGlvbihSZXR5cGVkLmRvbS5IVE1MRWxlbWVudCBlbGVtZW50LCBib29sIHN0YXRlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS51c2VyU2VsZWN0ID0gc3RhdGUgPyBcInRleHRcIiA6IFwibm9uZVwiOyAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIFBlcmZvcm1Gb2N1c1NoYWtlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKEFjdGl2ZUZvcm0gIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvcm0gPSBBY3RpdmVGb3JtO1xyXG4gICAgICAgICAgICAgICAgZm9ybS5IZWFkaW5nLmNsYXNzTGlzdC5hZGQoXCJmb3JtLWhlYWRpbmctZmxhc2hcIik7XHJcbiAgICAgICAgICAgICAgICBSZXR5cGVkLmRvbS5zZXRUaW1lb3V0KChnbG9iYWw6OlJldHlwZWQuZG9tLnNldFRpbWVvdXRGbikoKGFiKSA9PlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm0uSGVhZGluZy5jbGFzc0xpc3QucmVtb3ZlKFwiZm9ybS1oZWFkaW5nLWZsYXNoXCIpO1xyXG4gICAgICAgICAgICAgICAgfSksIDgwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBEaXNhYmxlU3RhdGVEcmFnKFJldHlwZWQuZG9tLkhUTUxFbGVtZW50IGVsZW1lbnQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihlbGVtZW50IGlzIFJldHlwZWQuZG9tLkhUTUxJbWFnZUVsZW1lbnQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuQXM8UmV0eXBlZC5kb20uSFRNTEltYWdlRWxlbWVudD4oKS5vbmRyYWdzdGFydCA9IChldikgPT5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGR5bmFtaWMgZWwgPSBlbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgZWwuc3R5bGUud2Via2l0VXNlckRyYWcgPSBcIm5vbmVcIjsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBTZXR1cEhpZGVFbGVtZW50c09uVmlldygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBSZXR5cGVkLmRvbS53aW5kb3cgLm9uYmx1ciA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoUmV0eXBlZC5kb20uZG9jdW1lbnQuYm9keS5jb250YWlucyhXaW5kb3dIb2xkZXIpKVxyXG4gICAgICAgICAgICAgICAgICAgIFJldHlwZWQuZG9tLmRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQ8UmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQ+KFdpbmRvd0hvbGRlcik7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBSZXR5cGVkLmRvbS53aW5kb3cgLm9uZm9jdXMgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKCFSZXR5cGVkLmRvbS5kb2N1bWVudC5ib2R5LmNvbnRhaW5zKFdpbmRvd0hvbGRlcikpXHJcbiAgICAgICAgICAgICAgICAgICAgUmV0eXBlZC5kb20uZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZDxSZXR5cGVkLmRvbS5IVE1MRGl2RWxlbWVudD4oV2luZG93SG9sZGVyKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBDbG9zZUZvcm1Qb3B1cHMoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciB4ID0gR2V0QWN0aXZlRm9ybUNvbGxlY3Rpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgeC5WaXNpYmxlRm9ybXMuQ291bnQ7IGkrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZih4LlZpc2libGVGb3Jtc1tpXSAhPSBudWxsICYmIHguVmlzaWJsZUZvcm1zW2ldIGlzIEZvcm1Qb3B1cCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4LlZpc2libGVGb3Jtc1tpXS5Jc0NvbnRlbnRWaXNpYmxlKCkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4LlZpc2libGVGb3Jtc1tpXS5DbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKHguRm9ybU93bmVyIGlzIEZvcm1Qb3B1cClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB4LkZvcm1Pd25lci5DbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoKEV4Y2VwdGlvbilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBpbnQgTG9hZGluZ0NvdW50ID0gMDtcclxuICAgICAgICBcclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgQmVnaW5Mb2FkaW5nKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIExvYWRpbmdDb3VudCsrOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBTZXRDdXJzb3IoXCJ3YWl0XCIpO1xyXG4gICAgICAgICAgICBXaW5kb3dMb2FkZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xyXG4gICAgICAgICAgICBXaW5kb3dMb2FkZXIuc3R5bGUub3BhY2l0eSA9IFwiMC40XCI7ICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIEVuZExvYWRpbmcoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgTG9hZGluZ0NvdW50LS07XHJcbiAgICAgICAgICAgIGlmKExvYWRpbmdDb3VudCA9PSAwKVxyXG4gICAgICAgICAgICB7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgU2V0Q3Vyc29yKFwiZGVmYXVsdFwiKTtcclxuICAgICAgICAgICAgICAgIFdpbmRvd0xvYWRlci5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICAgICAgICAgICAgICAgIFdpbmRvd0xvYWRlci5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgU2V0dXAoUmV0eXBlZC5kb20uSFRNTEVsZW1lbnQgcGFyZW50ID0gbnVsbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vU2V0dGluZ3MuU2V0dXAoKTtcclxuICAgICAgICAgICAgaWYoX2hhc1NldHVwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBfaGFzU2V0dXAgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYocGFyZW50ID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICBQYXJlbnQgPSBSZXR5cGVkLmRvbS5kb2N1bWVudC5ib2R5O1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBQYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBXaW5kb3dIb2xkZXIgPSBEaXYoXCJmb3JtLWNvbnRhaW5lclwiKTtcclxuXHJcbiAgICAgICAgICAgIEZvcm1PdmVyTGF5ID0gRGl2KFwic3lzdGVtLWZvcm0tY29sbGVjdGlvbi1vdmVybGF5XCIpO1xyXG5cclxuICAgICAgICAgICAgV2luZG93TG9hZGVyID0gbmV3IFJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50KCk7XHJcbiAgICAgICAgICAgIFdpbmRvd0xvYWRlci5jbGFzc05hbWUgPSBcImFqYXgtbG9hZGluZy1zY3JlZW5cIjtcclxuICAgICAgICAgICAgV2luZG93TG9hZGVyLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG4gICAgICAgICAgICBXaW5kb3dMb2FkZXIuc3R5bGUub3BhY2l0eSA9IFwiMFwiO1xyXG4gICAgICAgICAgICBXaW5kb3dMb2FkZXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgICAgICBXaW5kb3dMb2FkZXIuU2V0Qm91bmRzRnVsbCgpO1xyXG4gICAgICAgICAgICBXaW5kb3dMb2FkZXIuc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XHJcbiAgICAgICAgICAgIFdpbmRvd0xvYWRlci5zdHlsZS56SW5kZXggPSBcIjEwMDAwMFwiO1xyXG4gICAgICAgICAgICBXaW5kb3dMb2FkZXIub25jb250ZXh0bWVudSA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgV2luZG93TG9hZGVyLm9ubW91c2Vkb3duID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFdpbmRvd0xvYWRlci5zdHlsZS50cmFuc2l0aW9uID0gXCJvcGFjaXR5IDFzIGVhc2VcIjtcclxuXHJcbiAgICAgICAgICAgIFJldHlwZWQuZG9tLmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQ8UmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQ+KFdpbmRvd0xvYWRlcik7XHJcblxyXG4gICAgICAgICAgICBGb3JtT3ZlckxheS5vbm1vdXNlZG93biA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoQWN0aXZlRm9ybSBpcyBGb3JtUG9wdXApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgQ2xvc2VGb3JtUG9wdXBzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoUmV0eXBlZC5kb20uZG9jdW1lbnQgLmFjdGl2ZUVsZW1lbnQgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvL0Zvcm1Qb3B1cFxyXG4gICAgICAgICAgICAgICAgICAgIFJldHlwZWQuZG9tLmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuQXM8UmV0eXBlZC5kb20uSFRNTEVsZW1lbnQ+KCkuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIFNldEN1cnNvcihcImRlZmF1bHRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIEZvcm1PdmVyTGF5Lm9uY2xpY2sgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFBlcmZvcm1Gb2N1c1NoYWtlKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIEZvcm1PdmVyTGF5Lm9uY29udGV4dG1lbnUgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgRm9ybU92ZXJMYXkuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xyXG5cclxuICAgICAgICAgICAgUmV0eXBlZC5kb20ud2luZG93IC5vbmtleWRvd24gPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGludCBsZW5ndGggPSBLZXlIb29rcy5Db3VudDtcclxuICAgICAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihLZXlIb29rc1tpXSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBLZXlIb29rc1tpXShldik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBSZXR5cGVkLmRvbS53aW5kb3cgLm9ucmVzaXplID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihGb3JtQ29sbGVjdGlvbnMgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IEZvcm1Db2xsZWN0aW9ucy5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKEZvcm1Db2xsZWN0aW9uc1tpXSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZmMgPSBGb3JtQ29sbGVjdGlvbnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZmMuRm9ybU93bmVyICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZjLkZvcm1Pd25lci5SZXNpemluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihpbnQgeCA9IDA7IHggPCBmYy5WaXNpYmxlRm9ybXMuQ291bnQ7IHgrKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGZjLlZpc2libGVGb3Jtc1t4XSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmMuVmlzaWJsZUZvcm1zW3hdLlJlc2l6aW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIENhbGN1bGF0ZU1pbm1pemVkRm9ybXNMb2NhdGlvbigpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgUmV0eXBlZC5kb20ud2luZG93IC5vbm1vdXNlbW92ZSA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoSW5FeHRlcm5hbE1vdXNlRXZlbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBtZXYgPSBldi5BczxSZXR5cGVkLmRvbS5Nb3VzZUV2ZW50PigpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKE1vdmluZ0Zvcm0gIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZighTW92aW5nRm9ybS5EaXNhYmxlQm94U2hhZG93KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBNb3ZpbmdGb3JtLlN0eWxlLmJveFNoYWRvdyA9IFwibm9uZVwiOyAvLyBib3ggLSBzaGFkb3c6IG5vbmU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKE1vdmluZ0Zvcm0uQm9keU92ZXJMYXkuc3R5bGUudmlzaWJpbGl0eS5FcXVhbHMoXCJjb2xsYXBzZVwiKSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKE1vdmluZ0Zvcm0uSW5EZXNpZ24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9BY3RpdmVGb3JtLkJvZHlPdmVyTGF5LnN0eWxlLnZpc2liaWxpdHkgPSBcImNvbGxhcHNlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNb3ZpbmdGb3JtLkJvZHlPdmVyTGF5LnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgTW92aW5nRm9ybS5IZWFkaW5nLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW91c2VQb3MgPSBIZWxwZXIuR2V0Q2xpZW50TW91c2VMb2NhdGlvbihldik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZsb2F0IG1YO1xyXG4gICAgICAgICAgICAgICAgICAgIGZsb2F0IG1ZO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3WCA9ICgobVggPSBtb3VzZVBvcy5YZikgKyBNb3ZpbmdGb3JtLnByZXZfcHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdZID0gKChtWSA9IG1vdXNlUG9zLllmKSArIE1vdmluZ0Zvcm0ucHJldl9weSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKE1vdmluZ0Zvcm0ud2luZG93U3RhdGUgPT0gV2luZG93U3RhdGVUeXBlLk1heGltaXplZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBNb3ZlQWN0aW9uID09IE1vdXNlTW92ZUFjdGlvbi5Nb3ZlKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTW92aW5nRm9ybS5jaGFuZ2VXaW5kb3dTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdYID0gbW91c2VQb3MuWGYgLSAoTW92aW5nRm9ybS5wcmV2X3dpZHRoIC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE1vdmluZ0Zvcm0ucHJldl9weCA9IG5ld1ggLSBtb3VzZVBvcy5YZjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZsb2F0IHggPSAoZmxvYXQpU2NyaXB0LlBhcnNlRmxvYXQoTW92aW5nRm9ybS5TdHlsZS5sZWZ0KTtcclxuICAgICAgICAgICAgICAgICAgICBmbG9hdCB5ID0gKGZsb2F0KVNjcmlwdC5QYXJzZUZsb2F0KE1vdmluZ0Zvcm0uU3R5bGUudG9wKTtcclxuICAgICAgICAgICAgICAgICAgICBmbG9hdCB3ID0gKGZsb2F0KVNjcmlwdC5QYXJzZUZsb2F0KE1vdmluZ0Zvcm0uU3R5bGUud2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZsb2F0IGggPSAoZmxvYXQpU2NyaXB0LlBhcnNlRmxvYXQoTW92aW5nRm9ybS5TdHlsZS5oZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmbG9hdCBweCA9IHg7XHJcbiAgICAgICAgICAgICAgICAgICAgZmxvYXQgcHkgPSB5O1xyXG4gICAgICAgICAgICAgICAgICAgIGZsb2F0IHB3ID0gdztcclxuICAgICAgICAgICAgICAgICAgICBmbG9hdCBwaCA9IGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKG5ld1kgPCAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdZID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBpZihuZXdYIDwgMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3WCA9IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKG1YIDwgMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgbVggPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKG1ZIDwgMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgbVkgPSAxO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2goTW92ZUFjdGlvbilcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTW91c2VNb3ZlQWN0aW9uLk1vdmU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gbmV3WDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBuZXdZO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIE1vdXNlTW92ZUFjdGlvbi5Ub3BMZWZ0UmVzaXplOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdyAtPSBuZXdYIC0geDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggLT0gbmV3WSAtIHk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodyA8IE1vdmluZ0Zvcm0uTWluV2lkdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3WCAtPSBNb3ZpbmdGb3JtLk1pbldpZHRoIC0gdztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ID0gTW92aW5nRm9ybS5NaW5XaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGggPCBNb3ZpbmdGb3JtLk1pbkhlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdZIC09IE1vdmluZ0Zvcm0uTWluSGVpZ2h0IC0gaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gTW92aW5nRm9ybS5NaW5IZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gbmV3WDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBuZXdZO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBNb3VzZU1vdmVBY3Rpb24uVG9wUmVzaXplOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaCAtPSBuZXdZIC0geTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihoIDwgTW92aW5nRm9ybS5NaW5IZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3WSAtPSBNb3ZpbmdGb3JtLk1pbkhlaWdodCAtIGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IE1vdmluZ0Zvcm0uTWluSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBuZXdZO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBNb3VzZU1vdmVBY3Rpb24uVG9wUmlnaHRSZXNpemU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoIC09IG5ld1kgLSB5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdyA9IG1YIC0geDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihoIDwgTW92aW5nRm9ybS5NaW5IZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3WSAtPSBNb3ZpbmdGb3JtLk1pbkhlaWdodCAtIGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IE1vdmluZ0Zvcm0uTWluSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodyA8IE1vdmluZ0Zvcm0uTWluV2lkdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdyA9IE1vdmluZ0Zvcm0uTWluV2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IG5ld1k7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIE1vdXNlTW92ZUFjdGlvbi5MZWZ0UmVzaXplOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdyAtPSBuZXdYIC0geDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih3IDwgTW92aW5nRm9ybS5NaW5XaWR0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdYIC09IE1vdmluZ0Zvcm0uTWluV2lkdGggLSB3O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcgPSBNb3ZpbmdGb3JtLk1pbldpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSBuZXdYO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBNb3VzZU1vdmVBY3Rpb24uQm90dG9tTGVmdFJlc2l6ZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcgLT0gbmV3WCAtIHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gbVkgLSB5O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHcgPCBNb3ZpbmdGb3JtLk1pbldpZHRoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ggLT0gTW92aW5nRm9ybS5NaW5XaWR0aCAtIHc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdyA9IE1vdmluZ0Zvcm0uTWluV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaCA8IE1vdmluZ0Zvcm0uTWluSGVpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSBNb3ZpbmdGb3JtLk1pbkhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gbmV3WDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTW91c2VNb3ZlQWN0aW9uLkJvdHRvbVJlc2l6ZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSBtWSAtIHk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaCA8IE1vdmluZ0Zvcm0uTWluSGVpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSBNb3ZpbmdGb3JtLk1pbkhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTW91c2VNb3ZlQWN0aW9uLlJpZ2h0UmVzaXplOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdyA9IG1YIC0geDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih3IDwgTW92aW5nRm9ybS5NaW5XaWR0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ID0gTW92aW5nRm9ybS5NaW5XaWR0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTW91c2VNb3ZlQWN0aW9uLkJvdHRvbVJpZ2h0UmVzaXplOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdyA9IG1YIC0geDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gbVkgLSB5O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGggPCBNb3ZpbmdGb3JtLk1pbkhlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gTW92aW5nRm9ybS5NaW5IZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih3IDwgTW92aW5nRm9ybS5NaW5XaWR0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ID0gTW92aW5nRm9ybS5NaW5XaWR0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYm9vbCBjaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocHggIT0geClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKFNldHRpbmdzLkFsaWduRm9ybVRvR3JpZCAmJiBNb3ZlQWN0aW9uID09IE1vdXNlTW92ZUFjdGlvbi5Nb3ZlICYmIFNldHRpbmdzLkFsaWdubWVudEZvckZvcm0gPiAxICYmIHggIT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9ICgoaW50KSh4IC8gU2V0dGluZ3MuQWxpZ25tZW50Rm9yRm9ybSkpICogU2V0dGluZ3MuQWxpZ25tZW50Rm9yRm9ybTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHB4ICE9IHgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTW92aW5nRm9ybS5TdHlsZS5sZWZ0ID0gU2NyaXB0LldyaXRlPHN0cmluZz4oXCJ4ICsgJ3B4J1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vdmluZ0Zvcm0uU3R5bGUubGVmdCA9IFNjcmlwdC5Xcml0ZTxzdHJpbmc+KFwieCArICdweCdcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHB5ICE9IHkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihTZXR0aW5ncy5BbGlnbkZvcm1Ub0dyaWQgJiYgTW92ZUFjdGlvbiA9PSBNb3VzZU1vdmVBY3Rpb24uTW92ZSAmJiBTZXR0aW5ncy5BbGlnbm1lbnRGb3JGb3JtID4gMSAmJiB5ICE9IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSAoKGludCkoeSAvIFNldHRpbmdzLkFsaWdubWVudEZvckZvcm0pKSAqIFNldHRpbmdzLkFsaWdubWVudEZvckZvcm07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihweSAhPSB5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vdmluZ0Zvcm0uU3R5bGUudG9wID0gU2NyaXB0LldyaXRlPHN0cmluZz4oXCJ5ICsgJ3B4J1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTW92aW5nRm9ybS5TdHlsZS50b3AgPSBTY3JpcHQuV3JpdGU8c3RyaW5nPihcInkgKyAncHgnXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZihwdyAhPSB3KVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE1vdmluZ0Zvcm0uU3R5bGUud2lkdGggPSBTY3JpcHQuV3JpdGU8c3RyaW5nPihcIncgKyAncHgnXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYocGggIT0gaClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBNb3ZpbmdGb3JtLlN0eWxlLmhlaWdodCA9IFNjcmlwdC5Xcml0ZTxzdHJpbmc+KFwiaCArICdweCdcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihjaGFuZ2VkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBNb3ZpbmdGb3JtLlJlc2l6aW5nKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBSZXR5cGVkLmRvbS53aW5kb3cgLm9ubW91c2V1cCA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgSW5FeHRlcm5hbE1vdXNlRXZlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmKE1vdmluZ0Zvcm0gIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZighTW92aW5nRm9ybS5EaXNhYmxlQm94U2hhZG93KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBNb3ZpbmdGb3JtLlN0eWxlLmJveFNoYWRvdyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgTW92aW5nRm9ybS5Cb2R5T3ZlckxheS5zdHlsZS52aXNpYmlsaXR5ID0gXCJjb2xsYXBzZVwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIE1vdmluZ0Zvcm0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgTW91c2VfRG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgTW92ZUFjdGlvbiA9IE1vdXNlTW92ZUFjdGlvbi5Nb3ZlO1xyXG4gICAgICAgICAgICAgICAgU2V0Q3Vyc29yKFwiZGVmYXVsdFwiKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgUmV0eXBlZC5kb20ud2luZG93IC5vbmJlZm9yZXVubG9hZCA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoIVNldHRpbmdzLkFsbG93Q2xvc2VXaXRob3V0UXVlc3Rpb24pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgU2NyaXB0LldyaXRlKFwicmV0dXJuICdXb3VsZCB5b3UgbGlrZSB0byBjbG9zZSB0aGlzIGFwcGxpY2F0aW9uPydcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFJldHlwZWQuZG9tLndpbmRvdyAub251bmxvYWQgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKFNldHRpbmdzLk9uQXBwbGljYXRpb25DbG9zZSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIFNldHRpbmdzLk9uQXBwbGljYXRpb25DbG9zZSgpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZHluYW1pYyB3aW5kb3cyID0gUmV0eXBlZC5kb20ud2luZG93O1xyXG5cclxuICAgICAgICAgICAgRnVuYzxzdHJpbmcsIHN0cmluZywgaW50ICxpbnQsIG9iamVjdCwgYm9vbD4gZXJyb3JGdW5jID0gKHN0cmluZyBtZXNzYWdlLCBzdHJpbmcgdXJsLCBpbnQgbGluZU51bWJlciwgaW50IGNvbHVtbk51bWJlciwgb2JqZWN0IGVycm9yKSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihJbkVycm9yRGlhbG9nKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRyeVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIEluRXJyb3JEaWFsb2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyBlcnJTdHI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShtZXNzYWdlKSB8fCBtZXNzYWdlID09IFwiU2NyaXB0IGVycm9yLlwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyU3RyID0gXCJTY3JpcHQgRXJyb3I6IFNlZSBCcm93c2VyIENvbnNvbGUgZm9yIERldGFpbCdzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyclN0ciA9IFwiU2NyaXB0IEVycm9yOiBcIiArIG1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihBcHBsaWNhdGlvbi5BcGxpY2F0aW9uRGVmaXRpb24gPT0gQXBwbGljYXRpb25EZWZpdG5pb24uRXhwcmVzc0NyYWZ0Q29uc29sZSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbnNvbGVGb3JtLkxvZyhlcnJTdHIsIENvbnNvbGVMb2dUeXBlLkVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKFNldHRpbmdzLlNob3dFeGNlcHRpb25EaWFsb2cpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXNnQm94ID0gbmV3IE1lc3NhZ2VCb3hGb3JtKGVyclN0ciwgTWVzc2FnZUJveExheW91dC5FcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZ0JveC5TaG93RGlhbG9nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2goRXhjZXB0aW9uKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZmluYWxseVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIEluRXJyb3JEaWFsb2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB3aW5kb3cyLm9uZXJyb3IgPSBlcnJvckZ1bmM7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBXaW5kb3dIb2xkZXIuYXBwZW5kQ2hpbGQ8SFRNTEVsZW1lbnQ+KEZvcm1PdmVyTGF5KTtcclxuXHJcbiAgICAgICAgICAgIFBhcmVudC5BcHBlbmRDaGlsZHJlbihXaW5kb3dIb2xkZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIFNldEN1cnNvcihzdHJpbmcgY3Vyc29yKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgUmV0eXBlZC5kb20uZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSBjdXJzb3I7XHJcbiAgICAgICAgICAgIHZhciB4ID0gUmV0eXBlZC5kb20uZG9jdW1lbnQuYm9keS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgICAgICAgIFJldHlwZWQuZG9tLmRvY3VtZW50LmJvZHkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgICAgICBSZXR5cGVkLmRvbS5kb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0cmluZyBwcmV2aW91c0Rpc3BsYXk7XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNldFdpbmRvd1N0YXRlKFdpbmRvd1N0YXRlVHlwZSBTdGF0ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKFN0YXRlID09IHdpbmRvd1N0YXRlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgX3ByZXZ3aW5kb3dTdGF0ZSA9IHdpbmRvd1N0YXRlO1xyXG5cclxuICAgICAgICAgICAgaWYoX3ByZXZ3aW5kb3dTdGF0ZSA9PSBXaW5kb3dTdGF0ZVR5cGUuTWluaW1pemVkKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBCb2R5LnN0eWxlLm9wYWNpdHkgPSBQcmV2aW91c09wYWNpdHk7XHJcbiAgICAgICAgICAgICAgICBBbGxvd1NpemVDaGFuZ2UgPSBQcmV2aW91c1NpemVDaGFuZ2U7XHJcbiAgICAgICAgICAgICAgICBBbGxvd01vdmVDaGFuZ2UgPSBQcmV2aW91c01vdmVDaGFuZ2U7XHJcbiAgICAgICAgICAgICAgICBTaG93TWF4aW1pemUgPSBQcmV2aW91c1Nob3dNYXg7XHJcbiAgICAgICAgICAgICAgICBTaG93TWluaW1pemUgPSBQcmV2aW91c1Nob3dNaW47XHJcbiAgICAgICAgICAgICAgICBIZWFkaW5nVGl0bGUuc3R5bGUubGVmdCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICBIZWFkaW5nVGl0bGUuc3R5bGUubWFyZ2luUmlnaHQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgSGVhZGluZ1RpdGxlLnN0eWxlLnRyYW5zZm9ybSA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoQnV0dG9uTWluaW1pemUgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBCdXR0b25NaW5pbWl6ZS5pbm5lckhUTUwgPSBcIi1cIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIEhlYWRpbmcuY2xhc3NMaXN0LnJlbW92ZShcImZvcm0taGVhZGluZy1taW5cIik7XHJcblxyXG4gICAgICAgICAgICAgICAgTWluaW1pemVkRm9ybXMuUmVtb3ZlKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIEJvZHkuc3R5bGUuZGlzcGxheSA9IHByZXZpb3VzRGlzcGxheTtcclxuXHJcbiAgICAgICAgICAgICAgICBDYWxjdWxhdGVNaW5taXplZEZvcm1zTG9jYXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoIUFsbG93U2l6ZUNoYW5nZSlcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGlmKCh3aW5kb3dTdGF0ZSA9IFN0YXRlKSA9PSBXaW5kb3dTdGF0ZVR5cGUuTm9ybWFsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLlNldEJvdW5kcyhwcmV2X2xlZnQsIHByZXZfdG9wLCBwcmV2X3dpZHRoLCBwcmV2X2hlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBSZXNpemluZygpO1xyXG4gICAgICAgICAgICAgICAgU3R5bGUuYm9yZGVyV2lkdGggPSBcIjFweFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYod2luZG93U3RhdGUgPT0gV2luZG93U3RhdGVUeXBlLk1heGltaXplZClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoX3ByZXZ3aW5kb3dTdGF0ZSA9PSBXaW5kb3dTdGF0ZVR5cGUuTm9ybWFsKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZfbGVmdCA9IExlZnQuVG9JbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2X3RvcCA9IFRvcC5Ub0ludCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZfd2lkdGggPSBXaWR0aC5Ub0ludCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZfaGVpZ2h0ID0gSGVpZ2h0LlRvSW50KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgU3R5bGUuYm9yZGVyV2lkdGggPSBcIjBcIjtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLlNldEJvdW5kcygwLCAwLCBcIjEwMCVcIiwgXCIxMDAlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYod2luZG93U3RhdGUgPT0gV2luZG93U3RhdGVUeXBlLk1pbmltaXplZClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgUHJldmlvdXNTaXplQ2hhbmdlID0gQWxsb3dTaXplQ2hhbmdlO1xyXG4gICAgICAgICAgICAgICAgUHJldmlvdXNNb3ZlQ2hhbmdlID0gQWxsb3dNb3ZlQ2hhbmdlO1xyXG4gICAgICAgICAgICAgICAgUHJldmlvdXNPcGFjaXR5ID0gQm9keS5zdHlsZS5vcGFjaXR5O1xyXG4gICAgICAgICAgICAgICAgUHJldmlvdXNTaG93TWF4ID0gU2hvd01heGltaXplO1xyXG4gICAgICAgICAgICAgICAgUHJldmlvdXNTaG93TWluID0gU2hvd01pbmltaXplO1xyXG5cclxuICAgICAgICAgICAgICAgIEFsbG93U2l6ZUNoYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgQm9keS5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XHJcbiAgICAgICAgICAgICAgICBTaG93TWF4aW1pemUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIFNob3dNaW5pbWl6ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgQWxsb3dNb3ZlQ2hhbmdlID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoX3ByZXZ3aW5kb3dTdGF0ZSA9PSBXaW5kb3dTdGF0ZVR5cGUuTm9ybWFsKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZfbGVmdCA9IExlZnQuVG9JbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2X3RvcCA9IFRvcC5Ub0ludCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZfd2lkdGggPSBXaWR0aC5Ub0ludCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZfaGVpZ2h0ID0gSGVpZ2h0LlRvSW50KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgU3R5bGUuYm9yZGVyV2lkdGggPSBcIjFweFwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIEhlYWRpbmdUaXRsZS5zdHlsZS5tYXJnaW5SaWdodCA9IFwiMFwiO1xyXG4gICAgICAgICAgICAgICAgSGVhZGluZ1RpdGxlLnN0eWxlLmxlZnQgPSBcIjNweFwiO1xyXG4gICAgICAgICAgICAgICAgSGVhZGluZ1RpdGxlLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKDAsIC01MCUpXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IChTaG93Q2xvc2UgPyA0NS41ZiA6IDApO1xyXG5cclxuICAgICAgICAgICAgICAgIFdpZHRoID0gKGZsb2F0KU1hdGguTWF4KEdldFRleHRXaWR0aChUZXh0LCBcIjEwcHQgVGFob21hXCIpICsgMzIsIDEwMCkgKyBvZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBIZWlnaHQgPSAzMDtcclxuXHJcbiAgICAgICAgICAgICAgICBIZWFkaW5nLmNsYXNzTGlzdC5hZGQoXCJmb3JtLWhlYWRpbmctbWluXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKEJ1dHRvbk1pbmltaXplICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgQnV0dG9uTWluaW1pemUuaW5uZXJIVE1MID0gXCIrXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcHJldmlvdXNEaXNwbGF5ID0gQm9keS5zdHlsZS5kaXNwbGF5O1xyXG4gICAgICAgICAgICAgICAgQm9keS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgTWluaW1pemVkRm9ybXMuQWRkKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIENhbGN1bGF0ZU1pbm1pemVkRm9ybXNMb2NhdGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBSZXNpemluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgdm9pZCBDYWxjdWxhdGVNaW5taXplZEZvcm1zTG9jYXRpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoTWluaW1pemVkRm9ybXMuQ291bnQgPiAwICYmIE1pbmltaXplZEZvcm1zLkNvbnRhaW5zKG51bGwpKVxyXG4gICAgICAgICAgICAgICAgTWluaW1pemVkRm9ybXMuUmVtb3ZlKG51bGwpO1xyXG4gICAgICAgICAgICB2YXIgUmVtb3ZlTGlzdCA9IG5ldyBMaXN0PEZvcm0+KCk7XHJcbiAgICAgICAgICAgIGludCBjb3VudCA9IDA7XHJcbiAgICAgICAgICAgIGZsb2F0IHdpZHRoVG90YWwgPSAwO1xyXG4gICAgICAgICAgICBpbnQgeSA9IDMwO1xyXG5cclxuICAgICAgICAgICAgdmFyIHZpZXdTaXplID0gKFJldHlwZWQuZG9tLkRPTVJlY3QpUGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgICAgICAgICAgZm9yZWFjaCh2YXIgaXRlbSBpbiBNaW5pbWl6ZWRGb3JtcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoaXRlbS5Db250ZW50ID09IG51bGwgfHwgaXRlbS53aW5kb3dTdGF0ZSAhPSBXaW5kb3dTdGF0ZVR5cGUuTWluaW1pemVkKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFJlbW92ZUxpc3QuQWRkKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBUb0luY3JlbWVudCA9IDMgKyBpdGVtLldpZHRoLlRvRmxvYXQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYod2lkdGhUb3RhbCArIFRvSW5jcmVtZW50ID4gdmlld1NpemUud2lkdGgpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aFRvdGFsID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB5ICs9IDMzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5Mb2NhdGlvbiA9IG5ldyBWZWN0b3IyKHdpZHRoVG90YWwsIFwiKDEwMCUgLSBcIiArICh5ICsgMikgKyBcInB4KVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY291bnQrKztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGhUb3RhbCArPSBUb0luY3JlbWVudDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3JlYWNoKHZhciBpdGVtIGluIFJlbW92ZUxpc3QpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIE1pbmltaXplZEZvcm1zLlJlbW92ZShpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9MZWZ0ID0gMDtcclxuICAgICAgICAgICAgLy9Ub3AgPSBcImNhbGMoMTAwJSAtIDMwcHgpXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHZvaWQgY2hhbmdlV2luZG93U3RhdGUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYod2luZG93U3RhdGUgPT0gV2luZG93U3RhdGVUeXBlLk1heGltaXplZClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgU2V0V2luZG93U3RhdGUoV2luZG93U3RhdGVUeXBlLk5vcm1hbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZih3aW5kb3dTdGF0ZSA9PSBXaW5kb3dTdGF0ZVR5cGUuTWluaW1pemVkKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBTZXRXaW5kb3dTdGF0ZShfcHJldndpbmRvd1N0YXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFNldFdpbmRvd1N0YXRlKFdpbmRvd1N0YXRlVHlwZS5NYXhpbWl6ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBDYWxjdWxhdGVCdXR0b25Mb2NhdGlvbnMoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZmxvYXQgUmlnaHRPZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICBmbG9hdCBhcHBlbmQgPSA0NS41ZjtcclxuXHJcbiAgICAgICAgICAgIGlmKEhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBhcHBlbmQgPSA2NS41ZjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoU2hvd0Nsb3NlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBCdXR0b25DbG9zZS5zdHlsZS5sZWZ0ID0gXCJjYWxjKDEwMCUgLSBcIiArIGFwcGVuZCArIFwicHgpXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBSaWdodE9mZnNldCArPSBhcHBlbmQ7XHJcbiAgICAgICAgICAgICAgICBpZighSGVhZGluZy5jb250YWlucyhCdXR0b25DbG9zZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgSGVhZGluZy5BcHBlbmRDaGlsZChCdXR0b25DbG9zZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKFNob3dNYXhpbWl6ZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgUmlnaHRPZmZzZXQgKz0gYXBwZW5kO1xyXG4gICAgICAgICAgICAgICAgQnV0dG9uRXhwYW5kLnN0eWxlLmxlZnQgPSBcImNhbGMoMTAwJSAtIFwiICsgUmlnaHRPZmZzZXQgKyBcInB4KVwiO1xyXG4gICAgICAgICAgICAgICAgaWYoIUhlYWRpbmcuY29udGFpbnMoQnV0dG9uRXhwYW5kKSlcclxuICAgICAgICAgICAgICAgICAgICBIZWFkaW5nLkFwcGVuZENoaWxkKEJ1dHRvbkV4cGFuZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoU2hvd01pbmltaXplKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBSaWdodE9mZnNldCArPSBhcHBlbmQ7XHJcbiAgICAgICAgICAgICAgICBCdXR0b25NaW5pbWl6ZS5zdHlsZS5sZWZ0ID0gXCJjYWxjKDEwMCUgLSBcIiArIFJpZ2h0T2Zmc2V0ICsgXCJweClcIjtcclxuICAgICAgICAgICAgICAgIGlmKCFIZWFkaW5nLmNvbnRhaW5zKEJ1dHRvbk1pbmltaXplKSlcclxuICAgICAgICAgICAgICAgICAgICBIZWFkaW5nLkFwcGVuZENoaWxkKEJ1dHRvbk1pbmltaXplKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoU2hvd01lbnUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIEJ1dHRvbk1lbnUuc3R5bGUubGVmdCA9IFwiMFwiO1xyXG4gICAgICAgICAgICAgICAgaWYoIUhlYWRpbmcuY29udGFpbnMoQnV0dG9uTWVudSkpXHJcbiAgICAgICAgICAgICAgICAgICAgSGVhZGluZy5BcHBlbmRDaGlsZChCdXR0b25NZW51KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBSZXR5cGVkLmRvbS5IVE1MRGl2RWxlbWVudCBDcmVhdGVGb3JtQnV0dG9uKEZvcm1CdXR0b25UeXBlIFR5cGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgYnV0dCA9IERpdihcImZvcm0taGVhZGluZy1idXR0b25cIik7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2goVHlwZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBGb3JtQnV0dG9uVHlwZS5DbG9zZTpcclxuICAgICAgICAgICAgICAgICAgICBidXR0LmNsYXNzTGlzdC5hZGQoXCJmb3JtLWhlYWRpbmctYnV0dG9uLWNsb3NlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHQuaW5uZXJIVE1MID0gXCImdGltZXM7XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHQub25tb3VzZWRvd24gPSAoZXYpID0+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihNb3ZpbmdGb3JtICE9IG51bGwpIC8vICB8fCBXaW5kb3dIb2xkZXJTZWxlY3Rpb25Cb3ggIT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBNb3VzZV9Eb3duID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgQWN0aXZlRm9ybSA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dC5vbm1vdXNldXAgPSAoZXYpID0+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihNb3ZpbmdGb3JtICE9IG51bGwpIC8vfHwgV2luZG93SG9sZGVyU2VsZWN0aW9uQm94ICE9IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoSW5EZXNpZ24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBDbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBGb3JtQnV0dG9uVHlwZS5NYXhpbWl6ZTpcclxuICAgICAgICAgICAgICAgICAgICBidXR0LmlubmVySFRNTCA9IFwiJiM5NjMzO1wiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBidXR0Lm9ubW91c2V1cCA9IChldikgPT5cclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKE1vdmluZ0Zvcm0gIT0gbnVsbCkgLy8gIHx8IFdpbmRvd0hvbGRlclNlbGVjdGlvbkJveCAhPSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE1vdXNlX0Rvd24gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZVdpbmRvd1N0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBGb3JtQnV0dG9uVHlwZS5NaW5pbWl6ZTpcclxuICAgICAgICAgICAgICAgICAgICBidXR0LmlubmVySFRNTCA9IFwiLVwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBidXR0Lm9ubW91c2V1cCA9IChldikgPT5cclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKE1vdmluZ0Zvcm0gIT0gbnVsbCkgLy8gfHwgV2luZG93SG9sZGVyU2VsZWN0aW9uQm94ICE9IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoYnV0dC5pbm5lckhUTUwgPT0gXCItXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHQuaW5uZXJIVE1MID0gXCIrXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaW5kb3dTdGF0ZSA9IFdpbmRvd1N0YXRlVHlwZS5NaW5pbWl6ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaW5kb3dTdGF0ZSA9IF9wcmV2d2luZG93U3RhdGUgPT0gV2luZG93U3RhdGVUeXBlLk1pbmltaXplZCA/IFdpbmRvd1N0YXRlVHlwZS5Ob3JtYWwgOiBfcHJldndpbmRvd1N0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dC5pbm5lckhUTUwgPSBcIi1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgTW91c2VfRG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgRm9ybUJ1dHRvblR5cGUuUmVzdG9yZTpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBGb3JtQnV0dG9uVHlwZS5IZWxwOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dC5vbm1vdXNldXAgPSAoZXYpID0+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihNb3ZpbmdGb3JtICE9IG51bGwpIC8vICB8fCBXaW5kb3dIb2xkZXJTZWxlY3Rpb25Cb3ggIT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBNb3VzZV9Eb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIEZvcm1CdXR0b25UeXBlLk1lbnU6XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dC5pbm5lckhUTUwgPSBcIiYjOTc3NjtcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dC5vbm1vdXNldXAgPSAoZXYpID0+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihNb3ZpbmdGb3JtICE9IG51bGwpIC8vICB8fCBXaW5kb3dIb2xkZXJTZWxlY3Rpb25Cb3ggIT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBNb3VzZV9Eb3duID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBPbk1lbnVDbGljaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBidXR0Lm9ubW91c2VlbnRlciA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoTW92aW5nRm9ybSAhPSBudWxsKSAvLyAgfHwgV2luZG93SG9sZGVyU2VsZWN0aW9uQm94ICE9IG51bGxcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBTZXRDdXJzb3IoXCJkZWZhdWx0XCIpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgYnV0dC5vbmRibGNsaWNrID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGJ1dHQub25tb3VzZW1vdmUgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKE1vdmluZ0Zvcm0gIT0gbnVsbCkgLy8gIHx8IFdpbmRvd0hvbGRlclNlbGVjdGlvbkJveCAhPSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIGV2LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGlmKFR5cGUgIT0gRm9ybUJ1dHRvblR5cGUuQ2xvc2UpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJ1dHQub25tb3VzZWRvd24gPSAoZXYpID0+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoTW92aW5nRm9ybSAhPSBudWxsKSAvLyB8fCBXaW5kb3dIb2xkZXJTZWxlY3Rpb25Cb3ggIT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIE1vdXNlX0Rvd24gPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBBY3RpdmVGb3JtID0gdGhpcztcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKEhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBidXR0LnN0eWxlLndpZHRoID0gXCI2NXB4XCI7XHJcbiAgICAgICAgICAgICAgICBidXR0LnN0eWxlLmhlaWdodCA9IFwiNDlweFwiO1xyXG4gICAgICAgICAgICAgICAgYnV0dC5zdHlsZS5mb250U2l6ZSA9IFwiMTZwdFwiO1xyXG4gICAgICAgICAgICAgICAgYnV0dC5zdHlsZS5saW5lSGVpZ2h0ID0gXCI0OXB4XCI7XHJcbiAgICAgICAgICAgICAgICBidXR0LkV4Y2hhbmdlQ2xhc3MoXCJwcmltYXJ5XCIsIFwicHJpbWFyeVwiKTtcclxuICAgICAgICAgICAgICAgIGJ1dHQuc3R5bGUuZmlsdGVyID0gXCJicmlnaHRuZXNzKDExMCUpXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBidXR0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgdm9pZCBPbk1lbnVDbGljaygpXHJcbiAgICAgICAge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEZvcm0oKSA6IGJhc2UoXCJmb3JtLWJhc2VcIilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEhlYWRpbmcgPSBEaXYoXCJmb3JtLWhlYWRpbmdcIik7XHJcblxyXG4gICAgICAgICAgICBIZWFkaW5nLm9uY29udGV4dG1lbnUgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIEhlYWRpbmdUaXRsZSA9IFNwYW4oXCJmb3JtLWhlYWRpbmctdGl0bGVcIik7XHJcblxyXG4gICAgICAgICAgICBCb2R5ID0gRGl2KFwiZm9ybS1ib2R5XCIpO1xyXG5cclxuICAgICAgICAgICAgQm9keS5vbmNvbnRleHRtZW51ID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihldi50YXJnZXQgPT0gQm9keSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgQmFja0NvbG9yID0gXCIjRjBGMEYwXCI7XHJcblxyXG4gICAgICAgICAgICBCb2R5T3ZlckxheSA9IERpdihcImZvcm0tYm9keS1vdmVybGF5XCIpO1xyXG5cclxuICAgICAgICAgICAgQm9keU92ZXJMYXkuc3R5bGUub3BhY2l0eSA9IFNob3dCb2R5T3ZlckxheSA/IFwiMC41XCIgOiBcIjBcIjtcclxuXHJcbiAgICAgICAgICAgIENoYW5nZUhlYWRpbmdCdXR0b24oRm9ybUJ1dHRvblR5cGUuQ2xvc2UpO1xyXG4gICAgICAgICAgICBpZighSGVscGVyLk5vdERlc2t0b3ApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIENoYW5nZUhlYWRpbmdCdXR0b24oRm9ybUJ1dHRvblR5cGUuTWF4aW1pemUpO1xyXG4gICAgICAgICAgICAgICAgQ2hhbmdlSGVhZGluZ0J1dHRvbihGb3JtQnV0dG9uVHlwZS5NaW5pbWl6ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKEhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBIZWFkaW5nLnN0eWxlLmhlaWdodCA9IFwiNTBweFwiO1xyXG4gICAgICAgICAgICAgICAgSGVhZGluZ1RpdGxlLnN0eWxlLmZvbnRTaXplID0gXCIxNHB4XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgQm9keS5zdHlsZS50b3AgPSBcIjUwcHhcIjtcclxuICAgICAgICAgICAgICAgIEJvZHkuc3R5bGUuaGVpZ2h0ID0gXCJjYWxjKDEwMCUgLSA1MHB4KVwiO1xyXG5cclxuICAgICAgICAgICAgICAgIEJvZHlPdmVyTGF5LnN0eWxlLnRvcCA9IFwiNTBweFwiO1xyXG4gICAgICAgICAgICAgICAgQm9keU92ZXJMYXkuc3R5bGUuaGVpZ2h0ID0gXCJjYWxjKDEwMCUgLSA1MHB4KVwiO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBCb2R5T3ZlckxheS5zdHlsZS52aXNpYmlsaXR5ID0gXCJjb2xsYXBzZVwiO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgQ29udGVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChnbG9iYWw6OlN5c3RlbS5BY3Rpb248Z2xvYmFsOjpSZXR5cGVkLmRvbS5FdmVudD4pKChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoSW5FeHRlcm5hbE1vdXNlRXZlbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1ldiA9IGV2LkFzPFJldHlwZWQuZG9tLk1vdXNlRXZlbnQ+KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgbWV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgbWV2LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCFJc0FjdGl2ZUZvcm1Db2xsZWN0aW9uKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIE1vdXNlX0Rvd24gPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIE1vdmluZ0Zvcm0gPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgQWN0aXZlRm9ybSA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgU2V0Qm9keU92ZXJMYXkoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgY2xpZW50UmVjID0gKFJldHlwZWQuZG9tLkRPTVJlY3QpdGhpcy5Db250ZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBtb3VzZVBvcyA9IEhlbHBlci5HZXRDbGllbnRNb3VzZUxvY2F0aW9uKGV2KTtcclxuXHJcbiAgICAgICAgICAgICAgICBwcmV2X3B4ID0gKGZsb2F0KWNsaWVudFJlYy5sZWZ0IC0gbW91c2VQb3MuWGY7XHJcbiAgICAgICAgICAgICAgICBwcmV2X3B5ID0gKGZsb2F0KWNsaWVudFJlYy50b3AgLSBtb3VzZVBvcy5ZZjtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSAoZmxvYXQpY2xpZW50UmVjLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IChmbG9hdCljbGllbnRSZWMuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgIGZsb2F0IFggPSBtb3VzZVBvcy5YZiAtIChmbG9hdCljbGllbnRSZWMubGVmdDtcclxuICAgICAgICAgICAgICAgIGZsb2F0IFkgPSBtb3VzZVBvcy5ZZiAtIChmbG9hdCljbGllbnRSZWMudG9wO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHdpbmRvd1N0YXRlID09IFdpbmRvd1N0YXRlVHlwZS5NYXhpbWl6ZWQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgU2V0Q3Vyc29yKFwiZGVmYXVsdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBNb3ZlQWN0aW9uID0gTW91c2VNb3ZlQWN0aW9uLk1vdmU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKHdpbmRvd1N0YXRlID09IFdpbmRvd1N0YXRlVHlwZS5NaW5pbWl6ZWQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgU2V0Q3Vyc29yKFwiZGVmYXVsdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBNb3ZlQWN0aW9uID0gTW91c2VNb3ZlQWN0aW9uLk5vbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlV2luZG93U3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihJbkRlc2lnbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihIZWFkaW5nVGl0bGUgIT0gbnVsbCAmJiBldi50YXJnZXQgPT0gSGVhZGluZ1RpdGxlKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2V0Q3Vyc29yKFwiZGVmYXVsdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTW92ZUFjdGlvbiA9IE1vdXNlTW92ZUFjdGlvbi5Nb3ZlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihBbGxvd1NpemVDaGFuZ2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKFggPD0gUmVzaXplQ29ybmVycyAmJiBZIDw9IFJlc2l6ZUNvcm5lcnMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2V0Q3Vyc29yKFwibndzZS1yZXNpemVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTW92ZUFjdGlvbiA9IE1vdXNlTW92ZUFjdGlvbi5Ub3BMZWZ0UmVzaXplO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihZIDw9IFJlc2l6ZUNvcm5lcnMgJiYgWCA+PSB3aWR0aCAtIFJlc2l6ZUNvcm5lcnMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2V0Q3Vyc29yKFwibmVzdy1yZXNpemVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTW92ZUFjdGlvbiA9IE1vdXNlTW92ZUFjdGlvbi5Ub3BSaWdodFJlc2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoWSA8PSBSZXNpemVDb3JuZXJzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldEN1cnNvcihcIm4tcmVzaXplXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vdmVBY3Rpb24gPSBNb3VzZU1vdmVBY3Rpb24uVG9wUmVzaXplO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihYIDw9IFJlc2l6ZUNvcm5lcnMgJiYgWSA+PSBoZWlnaHQgLSBSZXNpemVDb3JuZXJzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldEN1cnNvcihcIm5lc3ctcmVzaXplXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vdmVBY3Rpb24gPSBNb3VzZU1vdmVBY3Rpb24uQm90dG9tTGVmdFJlc2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoWSA+PSBoZWlnaHQgLSBSZXNpemVDb3JuZXJzICYmIFggPj0gd2lkdGggLSBSZXNpemVDb3JuZXJzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldEN1cnNvcihcIm53c2UtcmVzaXplXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vdmVBY3Rpb24gPSBNb3VzZU1vdmVBY3Rpb24uQm90dG9tUmlnaHRSZXNpemU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKFkgPj0gaGVpZ2h0IC0gUmVzaXplQ29ybmVycylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZXRDdXJzb3IoXCJzLXJlc2l6ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNb3ZlQWN0aW9uID0gTW91c2VNb3ZlQWN0aW9uLkJvdHRvbVJlc2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoWCA8PSBSZXNpemVDb3JuZXJzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldEN1cnNvcihcInctcmVzaXplXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vdmVBY3Rpb24gPSBNb3VzZU1vdmVBY3Rpb24uTGVmdFJlc2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoWCA+PSB3aWR0aCAtIFJlc2l6ZUNvcm5lcnMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2V0Q3Vyc29yKFwiZS1yZXNpemVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTW92ZUFjdGlvbiA9IE1vdXNlTW92ZUFjdGlvbi5SaWdodFJlc2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZXRDdXJzb3IoXCJkZWZhdWx0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vdmVBY3Rpb24gPSBNb3VzZU1vdmVBY3Rpb24uTW92ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZighQWxsb3dNb3ZlQ2hhbmdlICYmIE1vdmVBY3Rpb24gPT0gTW91c2VNb3ZlQWN0aW9uLk1vdmUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgU2V0Q3Vyc29yKFwiZGVmYXVsdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBNb3ZlQWN0aW9uID0gTW91c2VNb3ZlQWN0aW9uLk5vbmU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICAgIEhlYWRpbmcuYWRkRXZlbnRMaXN0ZW5lcihcImRibGNsaWNrXCIsIChnbG9iYWw6OlN5c3RlbS5BY3Rpb248Z2xvYmFsOjpSZXR5cGVkLmRvbS5FdmVudD4pKChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoQWxsb3dTaXplQ2hhbmdlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZVdpbmRvd1N0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICAgICBDb250ZW50LmFkZEV2ZW50TGlzdGVuZXI8c3RyaW5nPihcIm1vdXNlbGVhdmVcIiwgKGdsb2JhbDo6UmV0eXBlZC5kb20uSFRNTEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lckZuPHN0cmluZz4pKChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoTW92aW5nRm9ybSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFNldEN1cnNvcihcImRlZmF1bHRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICAgIEJvZHkuYWRkRXZlbnRMaXN0ZW5lcjxzdHJpbmc+KFwibW91c2VlbnRlclwiLCAoZ2xvYmFsOjpSZXR5cGVkLmRvbS5IVE1MRGl2RWxlbWVudC5hZGRFdmVudExpc3RlbmVyRm48c3RyaW5nPikoKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBTZXRDdXJzb3IoXCJkZWZhdWx0XCIpO1xyXG4gICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICAgICBDb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgKGdsb2JhbDo6U3lzdGVtLkFjdGlvbjxnbG9iYWw6OlJldHlwZWQuZG9tLkV2ZW50PikoKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihJbkV4dGVybmFsTW91c2VFdmVudClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoZXYudGFyZ2V0ID09IEhlYWRpbmdUaXRsZSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB2YXIgbWV2ID0gZXYuQXM8UmV0eXBlZC5kb20uTW91c2VFdmVudD4oKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBDb250ZW50LmNsaWVudFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IENvbnRlbnQuY2xpZW50SGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgdmFyIFggPSBtZXYucGFnZVggLSBDb250ZW50Lm9mZnNldExlZnQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgWSA9IG1ldi5wYWdlWSAtIENvbnRlbnQub2Zmc2V0VG9wO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKE1vdmluZ0Zvcm0gIT0gbnVsbCAmJiBNb3ZlQWN0aW9uID09IE1vdXNlTW92ZUFjdGlvbi5Nb3ZlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFNldEN1cnNvcihcImRlZmF1bHRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZih3aW5kb3dTdGF0ZSA9PSBXaW5kb3dTdGF0ZVR5cGUuTWF4aW1pemVkKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFNldEN1cnNvcihcImRlZmF1bHRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoSW5EZXNpZ24pXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKEFsbG93U2l6ZUNoYW5nZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihNb3ZlQWN0aW9uID09IE1vdXNlTW92ZUFjdGlvbi5Ub3BMZWZ0UmVzaXplIHx8IFggPD0gUmVzaXplQ29ybmVycyAmJiBZIDw9IFJlc2l6ZUNvcm5lcnMpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZXRDdXJzb3IoXCJud3NlLXJlc2l6ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihNb3ZlQWN0aW9uID09IE1vdXNlTW92ZUFjdGlvbi5Ub3BSaWdodFJlc2l6ZSB8fCBZIDw9IFJlc2l6ZUNvcm5lcnMgJiYgWCA+PSB3aWR0aCAtIFJlc2l6ZUNvcm5lcnMpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZXRDdXJzb3IoXCJuZXN3LXJlc2l6ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihZIDw9IFJlc2l6ZUNvcm5lcnMgfHwgTW92ZUFjdGlvbiA9PSBNb3VzZU1vdmVBY3Rpb24uVG9wUmVzaXplKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2V0Q3Vyc29yKFwibi1yZXNpemVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoTW92ZUFjdGlvbiA9PSBNb3VzZU1vdmVBY3Rpb24uQm90dG9tTGVmdFJlc2l6ZSB8fCBYIDw9IFJlc2l6ZUNvcm5lcnMgJiYgWSA+PSBoZWlnaHQgLSBSZXNpemVDb3JuZXJzKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2V0Q3Vyc29yKFwibmVzdy1yZXNpemVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoTW92ZUFjdGlvbiA9PSBNb3VzZU1vdmVBY3Rpb24uQm90dG9tUmlnaHRSZXNpemUgfHwgWSA+PSBoZWlnaHQgLSBSZXNpemVDb3JuZXJzICYmIFggPj0gd2lkdGggLSBSZXNpemVDb3JuZXJzKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2V0Q3Vyc29yKFwibndzZS1yZXNpemVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoTW92ZUFjdGlvbiA9PSBNb3VzZU1vdmVBY3Rpb24uQm90dG9tUmVzaXplIHx8IFkgPj0gaGVpZ2h0IC0gUmVzaXplQ29ybmVycylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNldEN1cnNvcihcInMtcmVzaXplXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKE1vdmVBY3Rpb24gPT0gTW91c2VNb3ZlQWN0aW9uLkxlZnRSZXNpemUgfHwgWCA8PSBSZXNpemVDb3JuZXJzKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2V0Q3Vyc29yKFwidy1yZXNpemVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoTW92ZUFjdGlvbiA9PSBNb3VzZU1vdmVBY3Rpb24uUmlnaHRSZXNpemUgfHwgWCA+PSB3aWR0aCAtIFJlc2l6ZUNvcm5lcnMpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZXRDdXJzb3IoXCJlLXJlc2l6ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2V0Q3Vyc29yKFwiZGVmYXVsdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgU2V0Q3Vyc29yKFwiZGVmYXVsdFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgSGVhZGluZy5hZGRFdmVudExpc3RlbmVyPHN0cmluZz4oXCJtb3VzZWRvd25cIiwgKGdsb2JhbDo6UmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lckZuPHN0cmluZz4pKChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgU2V0Qm9keU92ZXJMYXkoKTtcclxuICAgICAgICAgICAgICAgIGlmKCFJc0FjdGl2ZUZvcm1Db2xsZWN0aW9uKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHdpbmRvd1N0YXRlID09IFdpbmRvd1N0YXRlVHlwZS5NYXhpbWl6ZWQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgTW92aW5nRm9ybSA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgU2V0Q3Vyc29yKFwiZGVmYXVsdFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgTW92ZUFjdGlvbiA9IE1vdXNlTW92ZUFjdGlvbi5Nb3ZlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIE1vdmluZ0Zvcm0gPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIEFjdGl2ZUZvcm0gPSB0aGlzO1xyXG4gICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICAgICBCb2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGdsb2JhbDo6U3lzdGVtLkFjdGlvbjxnbG9iYWw6OlJldHlwZWQuZG9tLkV2ZW50PikoKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihJbkV4dGVybmFsTW91c2VFdmVudClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZighSXNBY3RpdmVGb3JtQ29sbGVjdGlvbigpKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICBBY3RpdmVGb3JtID0gdGhpcztcclxuICAgICAgICAgICAgICAgIE1vdmluZ0Zvcm0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICAgIEJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCAoZ2xvYmFsOjpTeXN0ZW0uQWN0aW9uPGdsb2JhbDo6UmV0eXBlZC5kb20uRXZlbnQ+KSgoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKEluRXh0ZXJuYWxNb3VzZUV2ZW50KVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihNb3ZpbmdGb3JtID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIUlzQWN0aXZlRm9ybUNvbGxlY3Rpb24oKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICAgICBCb2R5T3ZlckxheS5hZGRFdmVudExpc3RlbmVyPHN0cmluZz4oXCJtb3VzZWRvd25cIiwgKGdsb2JhbDo6UmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lckZuPHN0cmluZz4pKChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoSW5EZXNpZ24pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgQm9keU92ZXJMYXkuc3R5bGUudmlzaWJpbGl0eSA9IFwiY29sbGFwc2VcIjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZighSXNBY3RpdmVGb3JtQ29sbGVjdGlvbigpKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIEJvZHlPdmVyTGF5LnN0eWxlLnZpc2liaWxpdHkgPSBcImNvbGxhcHNlXCI7XHJcbiAgICAgICAgICAgICAgICBBY3RpdmVGb3JtID0gdGhpcztcclxuICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgQm9keS5hZGRFdmVudExpc3RlbmVyPHN0cmluZz4oXCJtb3VzZWxlYXZlXCIsIChnbG9iYWw6OlJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXJGbjxzdHJpbmc+KSgoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKEluRGVzaWduKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIEJvZHlPdmVyTGF5LnN0eWxlLnZpc2liaWxpdHkgPSBcImNvbGxhcHNlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKE1vdmluZ0Zvcm0gPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBTZXRCb2R5T3ZlckxheSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICAgICBCb2R5T3ZlckxheS5hZGRFdmVudExpc3RlbmVyPHN0cmluZz4oXCJtb3VzZWVudGVyXCIsIChnbG9iYWw6OlJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXJGbjxzdHJpbmc+KSgoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKEluRGVzaWduKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIEJvZHlPdmVyTGF5LnN0eWxlLnZpc2liaWxpdHkgPSBcImNvbGxhcHNlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoTW92aW5nRm9ybSA9PSBudWxsICYmIElzQWN0aXZlRm9ybUNvbGxlY3Rpb24oKSkgLy8gV2luZG93SG9sZGVyU2VsZWN0aW9uQm94ID09IG51bGwgJiZcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBTZXRDdXJzb3IoXCJkZWZhdWx0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIEJvZHlPdmVyTGF5LnN0eWxlLnZpc2liaWxpdHkgPSBcImNvbGxhcHNlXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgQm9keU92ZXJMYXkuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICAgICBDb250ZW50LnN0eWxlLndpZHRoID0gV2luZG93X0RlZmF1bHRXaWR0aC5Ub1B4KCk7XHJcbiAgICAgICAgICAgIENvbnRlbnQuc3R5bGUuaGVpZ2h0ID0gV2luZG93X0RlZmF1bHRIZWlnaHQuVG9QeCgpOyAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgQ29udGVudC5BcHBlbmRDaGlsZChIZWFkaW5nKTtcclxuICAgICAgICAgICAgQ29udGVudC5BcHBlbmRDaGlsZChCb2R5KTtcclxuICAgICAgICAgICAgQ29udGVudC5BcHBlbmRDaGlsZChCb2R5T3ZlckxheSk7XHJcblxyXG4gICAgICAgICAgICBIZWFkaW5nLkFwcGVuZENoaWxkKEhlYWRpbmdUaXRsZSk7XHJcblxyXG4gICAgICAgICAgICBjbG9zZUFjdGlvbiA9ICgpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIENvbnRlbnQuRW1wdHkoKTtcclxuICAgICAgICAgICAgICAgIGlmKENvbnRlbnQgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBDb250ZW50LkRlbGV0ZSgpOyBDb250ZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIEluaXRpYWxpc2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbnQgVGl0bGVCYXJIZWlnaHQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIChpbnQpSGVhZGluZy5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW50IFRpdGxlQmFyV2lkdGgoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIChpbnQpSGVhZGluZy5jbGllbnRXaWR0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbnQgQ2xpZW50WCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKGludClCb2R5LmNsaWVudExlZnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW50IENsaWVudFkoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIChpbnQpQm9keS5jbGllbnRUb3A7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RyaW5nIFRleHRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBIZWFkaW5nVGl0bGUuaW5uZXJIVE1MOyB9XHJcbiAgICAgICAgICAgIHNldCB7IEhlYWRpbmdUaXRsZS5pbm5lckhUTUwgPSB2YWx1ZTsgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBCYWNrQ29sb3JcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBCb2R5LnN0eWxlLmJhY2tncm91bmRDb2xvcjsgfVxyXG4gICAgICAgICAgICBzZXQgeyBCb2R5LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHZhbHVlOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RyaW5nIEZvcmVDb2xvclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIEJvZHkuc3R5bGUuY29sb3I7IH1cclxuICAgICAgICAgICAgc2V0IHsgQm9keS5zdHlsZS5jb2xvciA9IHZhbHVlOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgTGlzdDxEaWFsb2dSZXN1bHQ+IERpYWxvZ1Jlc3VsdHMgPSBuZXcgTGlzdDxEaWFsb2dSZXN1bHQ+KCk7XHJcblxyXG4gICAgICAgIHB1YmxpYyBGb3JtQ29sbGVjdGlvbiBHZXRGb3JtQ29sbGVjdGlvbkZyb21Gb3JtKEZvcm0gZm9ybSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKGZvcm0uX3NlcGVyYXRlSW5zdGFuY2UpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciB2aXNpYmxlRm9ybXMgPSBzdGFuZEFsb25lRm9ybXMuVmlzaWJsZUZvcm1zO1xyXG4gICAgICAgICAgICAgICAgZm9yKGludCB4ID0gMDsgeCA8IHZpc2libGVGb3Jtcy5Db3VudDsgeCsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHZpc2libGVGb3Jtc1t4XSA9PSB0aGlzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhbmRBbG9uZUZvcm1zO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IEZvcm1Db2xsZWN0aW9ucy5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMgPT0gRm9ybUNvbGxlY3Rpb25zW2ldLkZvcm1Pd25lcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZvcm1Db2xsZWN0aW9uc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmlzaWJsZUZvcm1zID0gRm9ybUNvbGxlY3Rpb25zW2ldLlZpc2libGVGb3JtcztcclxuICAgICAgICAgICAgICAgICAgICBmb3IoaW50IHggPSAwOyB4IDwgdmlzaWJsZUZvcm1zLkNvdW50OyB4KyspXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih2aXNpYmxlRm9ybXNbeF0gPT0gdGhpcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGb3JtQ29sbGVjdGlvbnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIElzQWN0aXZlRm9ybUNvbGxlY3Rpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYodGhpcy5fc2VwZXJhdGVJbnN0YW5jZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEdldEZvcm1Db2xsZWN0aW9uRnJvbUZvcm0odGhpcykgPT0gc3RhbmRBbG9uZUZvcm1zO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEdldEZvcm1Db2xsZWN0aW9uRnJvbUZvcm0odGhpcykgPT0gR2V0QWN0aXZlRm9ybUNvbGxlY3Rpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgSXNWaXNpYmxlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBHZXRGb3JtQ29sbGVjdGlvbkZyb21Gb3JtKHRoaXMpICE9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBTaG93U3RhcnROZXdMZXZlbCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZighSGFzU2V0dXApXHJcbiAgICAgICAgICAgICAgICBTZXR1cCgpO1xyXG5cclxuICAgICAgICAgICAgaWYoSXNWaXNpYmxlKCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIEFscmVhZHkgT3Blbj8/P1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIkludmFsaWQgcmVxdWVzdCB0byBvcGVuIGZvcm0gYXMgYSBkaWFsb2cgdGhhdCBpcyBhbHJlYWR5IHZpc2libGUhXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBGb3JtQ29sbGVjdGlvbnMuQWRkKG5ldyBGb3JtQ29sbGVjdGlvbih0aGlzKSk7XHJcbiAgICAgICAgICAgIFdpbmRvd0hvbGRlci5BcHBlbmRDaGlsZCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIENhbGN1bGF0ZVpPcmRlcigpO1xyXG5cclxuICAgICAgICAgICAgaWYoU3RhcnRQb3NpdGlvbiA9PSBGb3JtU3RhcnRQb3NpdGlvbi5DZW50ZXIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIENlbnRyZUZvcm0oKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgT25TaG93ZWQoKTtcclxuXHJcbiAgICAgICAgICAgIFJlc2l6aW5nKCk7XHJcblxyXG4gICAgICAgICAgICBBY3RpdmVGb3JtID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIEJvZHkuRm9jdXNFbGVtZW50KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBTaG93RGlhbG9nKHBhcmFtcyBEaWFsb2dSZXN1bHRbXSBkaWFsb2dSZXN1bHRzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIUhhc1NldHVwKVxyXG4gICAgICAgICAgICAgICAgU2V0dXAoKTtcclxuXHJcbiAgICAgICAgICAgIEluRGlhbG9nUmVzdWx0ID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBpZihCdXR0b25NaW5pbWl6ZSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgQnV0dG9uTWluaW1pemUuRGVsZXRlKCk7XHJcbiAgICAgICAgICAgIGlmKEJ1dHRvbkV4cGFuZCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgQnV0dG9uRXhwYW5kLkRlbGV0ZSgpO1xyXG4gICAgICAgICAgICBpZihCdXR0b25DbG9zZSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgQnV0dG9uQ2xvc2UuRGVsZXRlKCk7XHJcblxyXG4gICAgICAgICAgICBfSXNEaWFsb2cgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZihTdGFydFBvc2l0aW9uICE9IEZvcm1TdGFydFBvc2l0aW9uLk1hbnVhbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoIUhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICAgICAgICAgIFN0YXJ0UG9zaXRpb24gPSBGb3JtU3RhcnRQb3NpdGlvbi5DZW50ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgU2hvd1N0YXJ0TmV3TGV2ZWwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmKGRpYWxvZ1Jlc3VsdHMgIT0gbnVsbCAmJiBkaWFsb2dSZXN1bHRzLkxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIERpYWxvZ1Jlc3VsdHMuQWRkUmFuZ2UoZGlhbG9nUmVzdWx0cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZmxvYXQgTWluWmVybyhmbG9hdCBpbnB1dClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCA8IDAgPyAwIDogaW5wdXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGludCBNaW5aZXJvKGludCBpbnB1dClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCA8IDAgPyAwIDogaW5wdXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBDZW50cmVGb3JtKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKFdpbmRvd0hvbGRlciA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgQ29udGVudC5zdHlsZS5sZWZ0ID0gTWluWmVybygoZmxvYXQpKFdpbmRvd0hvbGRlci5jbGllbnRXaWR0aCAvIDIpIC0gKFNjcmlwdC5QYXJzZUludCh0aGlzLldpZHRoLlRvSHRtbFZhbHVlKCkpIC8gMikpLlRvUHgoKTtcclxuICAgICAgICAgICAgQ29udGVudC5zdHlsZS50b3AgPSBNaW5aZXJvKChmbG9hdCkoV2luZG93SG9sZGVyLmNsaWVudEhlaWdodCAvIDIpIC0gKFNjcmlwdC5QYXJzZUludCh0aGlzLkhlaWdodC5Ub0h0bWxWYWx1ZSgpKSAvIDIpKS5Ub1B4KCk7ICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBSZW5kZXIoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIUhhc1JlbmRlcmVkKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBiYXNlLlJlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgT25TaG93aW5nKCk7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgU2hvd24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgU2hvd24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgSW5DbG9zZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZihDaGlsZHJlbiA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgQ2hpbGRyZW4uQ291bnQ7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoQ2hpbGRyZW5baV0gIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIENoaWxkcmVuW2ldLk9uTG9hZGVkICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgQ2hpbGRyZW5baV0uT25Mb2FkZWQoQ2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIENoaWxkcmVuLlJlbW92ZShudWxsKTsgICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBib29sIF9zZXBlcmF0ZUluc3RhbmNlID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNob3coYm9vbCBzZXBlcmF0ZUluc3RhbmNlID0gZmFsc2UpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZighSGFzU2V0dXApXHJcbiAgICAgICAgICAgICAgICBTZXR1cCgpO1xyXG5cclxuICAgICAgICAgICAgaWYoX0lzRGlhbG9nKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBfc2VwZXJhdGVJbnN0YW5jZSA9IHNlcGVyYXRlSW5zdGFuY2U7XHJcbiAgICAgICAgICAgIGlmKCFzZXBlcmF0ZUluc3RhbmNlICYmIChGb3JtQ29sbGVjdGlvbnMgPT0gbnVsbCB8fCBGb3JtQ29sbGVjdGlvbnMuQ291bnQgPT0gMCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFNob3dTdGFydE5ld0xldmVsKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBhY3RpdmVDb2xsZWN0ID0gIXNlcGVyYXRlSW5zdGFuY2UgPyBHZXRBY3RpdmVGb3JtQ29sbGVjdGlvbigpIDogc3RhbmRBbG9uZUZvcm1zO1xyXG4gICAgICAgICAgICB2YXIgdmlzYmlsZUZvcm1zID0gYWN0aXZlQ29sbGVjdC5WaXNpYmxlRm9ybXM7XHJcblxyXG4gICAgICAgICAgICBpZighdmlzYmlsZUZvcm1zLkNvbnRhaW5zKHRoaXMpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2aXNiaWxlRm9ybXMuQWRkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgV2luZG93SG9sZGVyLkFwcGVuZENoaWxkKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIENvbnRlbnQuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xyXG5cclxuICAgICAgICAgICAgICAgIENhbGN1bGF0ZVpPcmRlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKFN0YXJ0UG9zaXRpb24gIT0gRm9ybVN0YXJ0UG9zaXRpb24uTWFudWFsICYmIHdpbmRvd1N0YXRlID09IFdpbmRvd1N0YXRlVHlwZS5Ob3JtYWwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoU3RhcnRQb3NpdGlvbiA9PSBGb3JtU3RhcnRQb3NpdGlvbi5DZW50ZXIgfHwgKGFjdGl2ZUNvbGxlY3QgPT0gbnVsbCB8fCB2aXNiaWxlRm9ybXMgPT0gbnVsbCB8fCB2aXNiaWxlRm9ybXMuQ291bnQgPT0gMCB8fCB2aXNiaWxlRm9ybXNbdmlzYmlsZUZvcm1zLkNvdW50IC0gMV0ud2luZG93U3RhdGUgIT0gV2luZG93U3RhdGVUeXBlLk5vcm1hbCB8fCB2aXNiaWxlRm9ybXNbdmlzYmlsZUZvcm1zLkNvdW50IC0gMV0uQ29udGVudCA9PSBudWxsKSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENlbnRyZUZvcm0oKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihTdGFydFBvc2l0aW9uID09IEZvcm1TdGFydFBvc2l0aW9uLldpbmRvd3NEZWZhdWx0TG9jYXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqID0gdmlzYmlsZUZvcm1zW3Zpc2JpbGVGb3Jtcy5Db3VudCAtIDFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0IHggPSBTY3JpcHQuUGFyc2VJbnQob2JqLkxlZnQuVG9IdG1sVmFsdWUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdCB5ID0gU2NyaXB0LlBhcnNlSW50KG9iai5Ub3AuVG9IdG1sVmFsdWUoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihTY3JpcHQuSXNOYU4oeCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKFNjcmlwdC5Jc05hTih5KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWMgPSAoUmV0eXBlZC5kb20uRE9NUmVjdClXaW5kb3dIb2xkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb3VibGUgcHcyNSA9IHJlYy53aWR0aCAqIDAuMTU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvdWJsZSBwaDI1ID0gcmVjLmhlaWdodCAqIDAuMTU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb3VibGUgcHc3NSA9IHJlYy53aWR0aCAqIDAuNTU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvdWJsZSBwaDc1ID0gcmVjLmhlaWdodCAqIDAuNTU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZigoaW50KXggPCBwdzI1KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IChpbnQpcHcyNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoKGludCl5IDwgcGgyNSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSAoaW50KXBoMjU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZigoaW50KXggPiBwdzc1KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IChpbnQpcHcyNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoKGludCl5ID4gcGg3NSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSAoaW50KXBoMjU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPSAoaW50KXggKyAxMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IChpbnQpeSArIDEwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Db250ZW50LnN0eWxlLmxlZnQgPSBNaW5aZXJvKChpbnQpeCkuVG9QeCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkNvbnRlbnQuc3R5bGUudG9wID0gTWluWmVybygoaW50KXgpLlRvUHgoKTsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIE9uU2hvd2VkKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgUmVzaXppbmcoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgQWN0aXZlRm9ybSA9IHRoaXM7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgUmV0eXBlZC5kb20uc2V0VGltZW91dCgoZ2xvYmFsOjpSZXR5cGVkLmRvbS5zZXRUaW1lb3V0Rm4pKChhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5Db250ZW50LmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5Db250ZW50LmNsaWNrKCk7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH0pLCAwKTsgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQnJpbmdUb0Zyb250KClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBhY3RpdmVDb2xsZWN0ID0gR2V0QWN0aXZlRm9ybUNvbGxlY3Rpb24oKTtcclxuICAgICAgICAgICAgaWYoYWN0aXZlQ29sbGVjdCAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihhY3RpdmVDb2xsZWN0LkZvcm1Pd25lciA9PSB0aGlzKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHZhciB2aXNpYmxlRm9ybXMgPSBhY3RpdmVDb2xsZWN0LlZpc2libGVGb3JtcztcclxuICAgICAgICAgICAgICAgIGlmKHZpc2libGVGb3JtcyAhPSBudWxsICYmIHZpc2libGVGb3Jtcy5Db3VudCA+IDEpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZUZvcm1zLlJlbW92ZSh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlRm9ybXMuQWRkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIENhbGN1bGF0ZVpPcmRlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBTZXRaSW5kZXgocmVmIGludCB6SW5kZXgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLkNvbnRlbnQuc3R5bGUuekluZGV4ID0gKHpJbmRleCsrKS5Ub1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgdm9pZCBDbGVhclpJbmRleCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgeCA9IEdldEFjdGl2ZUZvcm1Db2xsZWN0aW9uKCkuRm9ybU93bmVyO1xyXG4gICAgICAgICAgICBXaW5kb3dIb2xkZXIuc3R5bGUuekluZGV4ID0gXCItXCIgKyBXaW5kb3dIb2xkZXIuY2hpbGRFbGVtZW50Q291bnQ7XHJcbiAgICAgICAgICAgIGJvb2wgRm91bmQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGZvcih1aW50IGkgPSAwOyBpIDwgV2luZG93SG9sZGVyLmNoaWxkRWxlbWVudENvdW50OyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKEZvdW5kIHx8IHguQ29udGVudCA9PSBXaW5kb3dIb2xkZXIuY2hpbGRyZW5baV0pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgV2luZG93SG9sZGVyLmNoaWxkcmVuW2ldLkFzPFJldHlwZWQuZG9tLkhUTUxFbGVtZW50PigpLnN0eWxlLnpJbmRleCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgRm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFdpbmRvd0hvbGRlci5jaGlsZHJlbltpXS5BczxSZXR5cGVkLmRvbS5IVE1MRWxlbWVudD4oKS5zdHlsZS56SW5kZXggPSAoaSAtIFdpbmRvd0hvbGRlci5jaGlsZEVsZW1lbnRDb3VudCAtIDEpLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHZvaWQgQXBwbHlaSW5kZXgoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgV2luZG93SG9sZGVyLnN0eWxlLnpJbmRleCA9IFwiXCI7XHJcbiAgICAgICAgICAgIGZvcih1aW50IGkgPSAwOyBpIDwgV2luZG93SG9sZGVyLmNoaWxkRWxlbWVudENvdW50OyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFdpbmRvd0hvbGRlci5jaGlsZHJlbltpXS5BczxSZXR5cGVkLmRvbS5IVE1MRWxlbWVudD4oKS5zdHlsZS56SW5kZXggPSBpLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIGludCBDYWxjdWxhdGVaT3JkZXIoRm9ybUNvbGxlY3Rpb24gZm9ybUNvbGxlY3Rpb24sIGludCB6SW5kZXgpIC8vICwgRG9jdW1lbnRGcmFnbWVudCBmcmFnXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBMaXN0PEZvcm0+IFRvcE1vc3RGb3JtcyA9IG5ldyBMaXN0PEZvcm0+KCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgVmlzaWJsZUZvcm1zID0gZm9ybUNvbGxlY3Rpb24uVmlzaWJsZUZvcm1zO1xyXG4gICAgICAgICAgICBpZihWaXNpYmxlRm9ybXMgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IFZpc2libGVGb3Jtcy5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKFZpc2libGVGb3Jtc1tpXS5Db250ZW50ID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBUb0NsZWFuLkFkZChWaXNpYmxlRm9ybXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihWaXNpYmxlRm9ybXNbaV0uVG9wTW9zdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRvcE1vc3RGb3Jtcy5BZGQoVmlzaWJsZUZvcm1zW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgVG9DbGVhbi5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKFZpc2libGVGb3Jtcy5Db250YWlucyhUb0NsZWFuW2ldKSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFZpc2libGVGb3Jtcy5SZW1vdmUoVG9DbGVhbltpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRvQ2xlYW5baV0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBUb0NsZWFuLlJlbW92ZShudWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihmb3JtQ29sbGVjdGlvbi5Gb3JtT3duZXIgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtQ29sbGVjdGlvbi5Gb3JtT3duZXIuTWFuYWdlUGxhY2VIb2xkZXJzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybUNvbGxlY3Rpb24uRm9ybU93bmVyLlN0eWxlLnpJbmRleCA9IHpJbmRleC5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZnJhZy5BcHBlbmRDaGlsZChmb3JtQ29sbGVjdGlvbi5Gb3JtT3duZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2lmKEhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICAgICAgICAgIC8ve1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgIGlmKFZpc2libGVGb3Jtcy5Db3VudCA9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgZm9ybUNvbGxlY3Rpb24uRm9ybU93bmVyLk1hbmFnZVBsYWNlSG9sZGVycygpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICBmcmFnLkFwcGVuZENoaWxkKGZvcm1Db2xsZWN0aW9uLkZvcm1Pd25lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIHJldHVybiB6SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIC8ve1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgIGZvcm1Db2xsZWN0aW9uLkZvcm1Pd25lci5NYW5hZ2VQbGFjZUhvbGRlcnMoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICBmcmFnLkFwcGVuZENoaWxkKGZvcm1Db2xsZWN0aW9uLkZvcm1Pd25lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IFRvcE1vc3RGb3Jtcy5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmb3JtID0gVG9wTW9zdEZvcm1zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIFZpc2libGVGb3Jtcy5SZW1vdmUoZm9ybSk7XHJcbiAgICAgICAgICAgICAgICAgICAgVmlzaWJsZUZvcm1zLkFkZChmb3JtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGludCBsZW5ndGggPSBWaXNpYmxlRm9ybXMuQ291bnQ7XHJcbiAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoVmlzaWJsZUZvcm1zW2ldICE9IG51bGwgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgVmlzaWJsZUZvcm1zW2ldLkNvbnRlbnQgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFZpc2libGVGb3Jtc1tpXS5NYW5hZ2VQbGFjZUhvbGRlcnMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVmlzaWJsZUZvcm1zW2ldLlN0eWxlLnpJbmRleCA9IHpJbmRleC5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB6SW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9mcmFnLkFwcGVuZENoaWxkKFZpc2libGVGb3Jtc1tpXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmKEhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgaWYobGVuZ3RoIC0gMSA9PSBpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICBWaXNpYmxlRm9ybXNbaV0uTWFuYWdlUGxhY2VIb2xkZXJzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICBmcmFnLkFwcGVuZENoaWxkKFZpc2libGVGb3Jtc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICByZXR1cm4gekluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vfWVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy97XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIFZpc2libGVGb3Jtc1tpXS5NYW5hZ2VQbGFjZUhvbGRlcnMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgZnJhZy5BcHBlbmRDaGlsZChWaXNpYmxlRm9ybXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB6SW5kZXg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgUmV0eXBlZC5kb20uSFRNTEVsZW1lbnQgR2V0Q29udHJvbEJhc2UoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQm9keTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgdm9pZCBNYW5hZ2VQbGFjZUhvbGRlcnMoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIVNldHRpbmdzLlJlbW92ZUF0dHJpYnV0ZXNPZmZFbGVtZW50c1doZW5Mb3NlRm9jdXMpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBib29sIHNob3VsZEhpZGVQbGFjZWhvbGRlcnMgPSBBY3RpdmVGb3JtICE9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBpZihzaG91bGRIaWRlUGxhY2Vob2xkZXJzICE9IEhhc1JlbW92ZWRQbGFjZUhvbGRlcilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgSGFzUmVtb3ZlZFBsYWNlSG9sZGVyID0gc2hvdWxkSGlkZVBsYWNlaG9sZGVycztcclxuICAgICAgICAgICAgICAgIHZhciBxdWUgPSBuZXcgUXVldWU8UmV0eXBlZC5kb20uSFRNTEVsZW1lbnQ+KCk7XHJcbiAgICAgICAgICAgICAgICBxdWUuRW5xdWV1ZShCb2R5KTtcclxuXHJcbiAgICAgICAgICAgICAgICB3aGlsZShxdWUuQ291bnQgPiAwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gcXVlLkRlcXVldWUoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZihzaG91bGRIaWRlUGxhY2Vob2xkZXJzKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShhKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1wbGFjZWhvbGRlclwiLCBhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1wbGFjZWhvbGRlclwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoYSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1wbGFjZWhvbGRlclwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIiwgYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaW50IGxlbmd0aCA9IChpbnQpZWxlbWVudC5jaGlsZEVsZW1lbnRDb3VudDtcclxuICAgICAgICAgICAgICAgICAgICBpZihsZW5ndGggPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHVpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlLkVucXVldWUoZWxlbWVudC5jaGlsZHJlbltpXS5BczxSZXR5cGVkLmRvbS5IVE1MRWxlbWVudD4oKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBDYWxjdWxhdGVaT3JkZXIoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgR2V0QWN0aXZlRm9ybUNvbGxlY3Rpb24oKTtcclxuXHJcbiAgICAgICAgICAgIGlmKEZvcm1Db2xsZWN0aW9ucyA9PSBudWxsICYmIHN0YW5kQWxvbmVGb3Jtcy5WaXNpYmxlRm9ybXMuQ291bnQgPT0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgRm9ybUNvbGxlY3Rpb25zLlJlbW92ZShudWxsKTtcclxuICAgICAgICAgICAgdmFyIGNvdW50ID0gRm9ybUNvbGxlY3Rpb25zLkNvdW50O1xyXG4gICAgICAgICAgICBpbnQgekluZGV4ID0gMTtcclxuXHJcbiAgICAgICAgICAgIC8vdmFyIGZyYWcgPSBEb2N1bWVudC5DcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcblxyXG4gICAgICAgICAgICBGb3JtT3ZlckxheS5zdHlsZS5vcGFjaXR5ID0gY291bnQgPT0gMCA/IFwiXCIgOiBjb3VudCA9PSAxID8gXCIwXCIgOiBcIjAuNFwiO1xyXG5cclxuICAgICAgICAgICAgZm9yKGludCB4ID0gMDsgeCA8IGNvdW50OyB4KyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vaWYoSGVscGVyLk5vdERlc2t0b3ApXHJcbiAgICAgICAgICAgICAgICAvL3tcclxuICAgICAgICAgICAgICAgIC8vICAgIGlmKHggPT0gY291bnQgLSAxKVxyXG4gICAgICAgICAgICAgICAgLy8gICAge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgIGZyYWcuQXBwZW5kQ2hpbGQoRm9ybU92ZXJMYXkpO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgIHpJbmRleCA9IENhbGN1bGF0ZVpPcmRlcihGb3JtQ29sbGVjdGlvbnNbeF0sIHpJbmRleCwgZnJhZyk7XHJcbiAgICAgICAgICAgICAgICAvLyAgICB9XHJcbiAgICAgICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgICAgIC8vZWxzZVxyXG4gICAgICAgICAgICAgICAgLy97XHJcbiAgICAgICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgICAgIGlmKHggPT0gY291bnQgLSAxKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZnJhZy5BcHBlbmRDaGlsZChGb3JtT3ZlckxheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgRm9ybU92ZXJMYXkuc3R5bGUuekluZGV4ID0gekluZGV4LlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgekluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB6SW5kZXggPSBDYWxjdWxhdGVaT3JkZXIoRm9ybUNvbGxlY3Rpb25zW3hdLCB6SW5kZXgpOyAvLyBmcmFnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgekluZGV4ID0gQ2FsY3VsYXRlWk9yZGVyKHN0YW5kQWxvbmVGb3JtcywgekluZGV4KTsgLy8gZnJhZ1xyXG5cclxuICAgICAgICAgICAgLy9XaW5kb3dIb2xkZXIuRW1wdHkoKTtcclxuICAgICAgICAgICAgLy9XaW5kb3dIb2xkZXIuQXBwZW5kQ2hpbGQoZnJhZyk7XHJcblxyXG4gICAgICAgICAgICBpZihBY3RpdmVGb3JtICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIEFjdGl2ZUZvcm0uQm9keS5mb2N1cygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8Rm9ybT4gVG9DbGVhbiA9IG5ldyBMaXN0PEZvcm0+KCk7XHJcbiAgICAgICAgcHJpdmF0ZSBBY3Rpb24gY2xvc2VBY3Rpb247XHJcbiAgICAgICAgcHJvdGVjdGVkIGJvb2wgSW5DbG9zZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBDbG9zZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihfSXNEaWFsb2cgJiYgSW5EaWFsb2dSZXN1bHQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBJbkNsb3NlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIE9uQ2xvc2luZygpO1xyXG5cclxuICAgICAgICAgICAgVG9DbGVhbi5BZGQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgb3duZXJGb3JtQ29sbGVjdGlvbiA9IEdldEZvcm1Db2xsZWN0aW9uRnJvbUZvcm0odGhpcyk7XHJcblxyXG4gICAgICAgICAgICBpZihvd25lckZvcm1Db2xsZWN0aW9uICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKG93bmVyRm9ybUNvbGxlY3Rpb24uRm9ybU93bmVyID09IHRoaXMpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3duZXJGb3JtQ29sbGVjdGlvbi5Gb3JtT3duZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBvd25lckZvcm1Db2xsZWN0aW9uLlZpc2libGVGb3Jtcy5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYob3duZXJGb3JtQ29sbGVjdGlvbi5WaXNpYmxlRm9ybXNbaV0gPT0gdGhpcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvd25lckZvcm1Db2xsZWN0aW9uLlZpc2libGVGb3Jtc1tpXS5DbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZihGb3JtQ29sbGVjdGlvbnMuQ291bnQgPT0gMSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEZvcm1Db2xsZWN0aW9ucyA9IG5ldyBMaXN0PEZvcm1Db2xsZWN0aW9uPigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBvd25lckZvcm1Db2xsZWN0aW9uLlZpc2libGVGb3Jtcy5SZW1vdmUodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKENvbnRlbnQgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoIUZvclJldXNlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKFNldHRpbmdzLkZvcm1GYWRlRHVyYXRpb24gPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHsgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vU2VsZi5mYWRlT3V0KFNldHRpbmdzLkZvcm1GYWRlRHVyYXRpb24sIGNsb3NlQWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VBY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VBY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBDb250ZW50LnN0eWxlLnZpc2liaWxpdHkgPSBcImNvbGxhcHNlXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIENhbGN1bGF0ZVpPcmRlcigpO1xyXG5cclxuICAgICAgICAgICAgQWN0aXZlRm9ybSA9IF9QcmV2QWN0aXZlRm9ybTtcclxuICAgICAgICAgICAgaWYoX0lzRGlhbG9nKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBJbkRpYWxvZ1Jlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZihEaWFsb2dSZXN1bHQgIT0gRGlhbG9nUmVzdWx0RW51bS5Ob25lICYmXHJcbiAgICAgICAgICAgICAgICBEaWFsb2dSZXN1bHRzICE9IG51bGwgJiYgRGlhbG9nUmVzdWx0cy5Db3VudCA+IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IERpYWxvZ1Jlc3VsdHMuQ291bnQ7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERpYWxvZ1Jlc3VsdHNbaV0uSW52b2tlSWZSZXN1bHQoRGlhbG9nUmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKE9uRm9ybUNsb3NlZCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgT25Gb3JtQ2xvc2VkKCk7XHJcbiAgICAgICAgICAgIE9uQ2xvc2VkKCk7XHJcblxyXG4gICAgICAgICAgICBpZihXaW5kb3dTdGF0ZSA9PSBXaW5kb3dTdGF0ZVR5cGUuTWluaW1pemVkKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBNaW5pbWl6ZWRGb3Jtcy5SZW1vdmUodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBDYWxjdWxhdGVNaW5taXplZEZvcm1zTG9jYXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgSW5DbG9zZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBib29sIEluRGlhbG9nUmVzdWx0ID0gZmFsc2U7XHJcbiAgICB9XHJcbn0iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uTGlucTtcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBDYWxjdWxhdG9yQ29udHJvbCA6IENvbnRyb2xcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgTWVtb0lucHV0IERpc3BsYXlJbnB1dDtcclxuXHJcbiAgICAgICAgcHVibGljIFNpbXBsZUJ1dHRvbiBidG5DbG9zZTtcclxuICAgICAgICBwdWJsaWMgU2ltcGxlQnV0dG9uIGJ0bkJhY2s7XHJcbiAgICAgICAgcHVibGljIFNpbXBsZUJ1dHRvbiBidG5DRTtcclxuICAgICAgICBwdWJsaWMgU2ltcGxlQnV0dG9uIGJ0bkM7XHJcbiAgICAgICAgcHVibGljIFNpbXBsZUJ1dHRvbiBidG5QVEFYO1xyXG4gICAgICAgIHB1YmxpYyBTaW1wbGVCdXR0b24gYnRuTVRBWDtcclxuICAgICAgICBwdWJsaWMgU2ltcGxlQnV0dG9uIGJ0blRBWDtcclxuICAgICAgICBwdWJsaWMgU2ltcGxlQnV0dG9uIGJ0bkRibDtcclxuXHJcbiAgICAgICAgcHVibGljIFNpbXBsZUJ1dHRvbiBidG43O1xyXG4gICAgICAgIHB1YmxpYyBTaW1wbGVCdXR0b24gYnRuODtcclxuICAgICAgICBwdWJsaWMgU2ltcGxlQnV0dG9uIGJ0bjk7XHJcbiAgICAgICAgcHVibGljIFNpbXBsZUJ1dHRvbiBidG5EaXY7XHJcbiAgICAgICAgcHVibGljIFNpbXBsZUJ1dHRvbiBidG5TcXJ0O1xyXG5cclxuICAgICAgICBwdWJsaWMgU2ltcGxlQnV0dG9uIGJ0bjQ7XHJcbiAgICAgICAgcHVibGljIFNpbXBsZUJ1dHRvbiBidG41O1xyXG4gICAgICAgIHB1YmxpYyBTaW1wbGVCdXR0b24gYnRuNjtcclxuICAgICAgICBwdWJsaWMgU2ltcGxlQnV0dG9uIGJ0bk11bDtcclxuICAgICAgICBwdWJsaWMgU2ltcGxlQnV0dG9uIGJ0blBlcjtcclxuXHJcbiAgICAgICAgcHVibGljIFNpbXBsZUJ1dHRvbiBidG4xO1xyXG4gICAgICAgIHB1YmxpYyBTaW1wbGVCdXR0b24gYnRuMjtcclxuICAgICAgICBwdWJsaWMgU2ltcGxlQnV0dG9uIGJ0bjM7XHJcbiAgICAgICAgcHVibGljIFNpbXBsZUJ1dHRvbiBidG5NaW51cztcclxuICAgICAgICBwdWJsaWMgU2ltcGxlQnV0dG9uIGJ0bjFPdmVyWDtcclxuXHJcbiAgICAgICAgcHVibGljIFNpbXBsZUJ1dHRvbiBidG4wO1xyXG4gICAgICAgIHB1YmxpYyBTaW1wbGVCdXR0b24gYnRucGx1c09yTmVnO1xyXG4gICAgICAgIHB1YmxpYyBTaW1wbGVCdXR0b24gYnRuRG90O1xyXG4gICAgICAgIHB1YmxpYyBTaW1wbGVCdXR0b24gYnRuUGx1cztcclxuICAgICAgICBwdWJsaWMgU2ltcGxlQnV0dG9uIGJ0bkVxO1xyXG5cclxuICAgICAgICBwdWJsaWMgZGVjaW1hbCBWYWx1ZTtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBMaXN0PHN0cmluZz4gX2NvbW1hbmRzID0gbmV3IExpc3Q8c3RyaW5nPigpO1xyXG4gICAgICAgIHByaXZhdGUgc3RyaW5nIGN1cnJlbnRfY29tbWFuZCA9IFwiXCI7XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBBZGRUZXh0VG9Db21tYW5kKFNpbXBsZUJ1dHRvbiBidXR0b24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihidXR0b24uVGV4dCA9PSBcIi5cIiAmJiBjdXJyZW50X2NvbW1hbmQuQ29udGFpbnMoXCIuXCIpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgaWYoY3VycmVudF9jb21tYW5kID09IFwiMFwiKVxyXG4gICAgICAgICAgICAgICAgY3VycmVudF9jb21tYW5kID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgIGN1cnJlbnRfY29tbWFuZCArPSBidXR0b24uVGV4dDtcclxuXHJcbiAgICAgICAgICAgIFJlZnJlc2hWYWx1ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEFjdGlvbjxkZWNpbWFsPiBPbkVxdWFsID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQ2FsY3VsYXRlQW5kQ2xvc2UoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIHggPSBDYWxjdWxhdGUoKTtcclxuXHJcbiAgICAgICAgICAgIGlmKE9uRXF1YWwgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIE9uRXF1YWwoeCk7XHJcbiAgICAgICAgICAgIGlmKCFEb250UmVmcmVzaClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoT25DbG9zZSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIE9uQ2xvc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEFjdGlvbiBPbkNsb3NlO1xyXG5cclxuICAgICAgICBwdWJsaWMgZGVjaW1hbCBDYWxjdWxhdGUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZGVjaW1hbCBwcmV2aW91c1ZhbHVlID0gMDtcclxuXHJcbiAgICAgICAgICAgIHN0cmluZyBwcmV2aW91c09wID0gXCJcIjtcclxuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IF9jb21tYW5kcy5Db3VudDtcclxuXHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbW1hbmQgPSBfY29tbWFuZHNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoY29tbWFuZC5FbmRzV2l0aChcIiVcIikpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9IGNvbW1hbmQuU3Vic3RyaW5nKDAsIGNvbW1hbmQuTGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZGVjaW1hbCB0cnlEZWM7XHJcbiAgICAgICAgICAgICAgICBpZihkZWNpbWFsLlRyeVBhcnNlKGNvbW1hbmQsIG91dCB0cnlEZWMpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHByZXZpb3VzT3AgIT0gXCJcIilcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKF9jb21tYW5kc1tpXS5FbmRzV2l0aChcIiVcIikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeURlYyA9IHByZXZpb3VzVmFsdWUgKiAodHJ5RGVjIC8gMTAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoKEV4Y2VwdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnlEZWMgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihwcmV2aW91c09wID09IFwiK1wiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1ZhbHVlID0gcHJldmlvdXNWYWx1ZSArIHRyeURlYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHByZXZpb3VzT3AgPT0gXCItXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSBwcmV2aW91c1ZhbHVlIC0gdHJ5RGVjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYocHJldmlvdXNPcCA9PSBcIi9cIilcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNWYWx1ZSA9IHByZXZpb3VzVmFsdWUgLyB0cnlEZWM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaChFeGNlcHRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNWYWx1ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihwcmV2aW91c09wID09IFwiKlwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1ZhbHVlID0gcHJldmlvdXNWYWx1ZSAqIHRyeURlYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHByZXZpb3VzT3AgPT0gXCIqXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSBwcmV2aW91c1ZhbHVlICogdHJ5RGVjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c09wID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNWYWx1ZSA9IHRyeURlYztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNPcCA9IGNvbW1hbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocHJldmlvdXNPcCA9PSBcIitUQVhcIilcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSBIZWxwZXIuQWRkVGF4KHByZXZpb3VzVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c09wID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihwcmV2aW91c09wID09IFwiLVRBWFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNWYWx1ZSA9IEhlbHBlci5EZWR1Y3RUYXgocHJldmlvdXNWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzT3AgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHByZXZpb3VzT3AgPT0gXCJUQVhcIilcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSBIZWxwZXIuR2V0UG9ydGlvblRheChwcmV2aW91c1ZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNPcCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYocHJldmlvdXNPcCA9PSBcIkRibFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNWYWx1ZSA9IHByZXZpb3VzVmFsdWUgKiAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c09wID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihwcmV2aW91c09wID09IFwic3FydFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSAoZGVjaW1hbClNYXRoLlNxcnQoKGRvdWJsZSlwcmV2aW91c1ZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaChFeGNlcHRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzT3AgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHByZXZpb3VzT3AgPT0gXCIxL3hcIilcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1ZhbHVlID0gMS4wbSAvIHByZXZpb3VzVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2goRXhjZXB0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1ZhbHVlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNPcCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYocHJldmlvdXNPcCA9PSBcIisvLVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNWYWx1ZSA9IC1wcmV2aW91c1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c09wID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1ZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgUmVmcmVzaFZhbHVlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKERvbnRSZWZyZXNoKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB2YXIgYnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gX2NvbW1hbmRzLkNvdW50O1xyXG5cclxuICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChfY29tbWFuZHNbaV0gKyBcIiBcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoY3VycmVudF9jb21tYW5kKTtcclxuICAgICAgICAgICAgRGlzcGxheUlucHV0LlRleHQgPSBcIlwiO1xyXG4gICAgICAgICAgICBEaXNwbGF5SW5wdXQuVGV4dCA9IGJ1aWxkZXIuVG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIElzQWxsTnVtYmVycyhzdHJpbmcgdmFsdWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBkZWNpbWFsIHg7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWNpbWFsLlRyeVBhcnNlKHZhbHVlLCBvdXQgeCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHZvaWQgQmFjayhTaW1wbGVCdXR0b24gYnV0dG9uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoY3VycmVudF9jb21tYW5kICE9IFwiXCIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRfY29tbWFuZCA9IGN1cnJlbnRfY29tbWFuZC5TdWJzdHJpbmcoMCwgY3VycmVudF9jb21tYW5kLkxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoX2NvbW1hbmRzLkNvdW50ID4gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IFN5c3RlbS5MaW5xLkVudW1lcmFibGUuTGFzdDxzdHJpbmc+KF9jb21tYW5kcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoSXNBbGxOdW1iZXJzKHgpKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9jb21tYW5kID0geDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9jb21tYW5kID0gY3VycmVudF9jb21tYW5kLlN1YnN0cmluZygwLCBjdXJyZW50X2NvbW1hbmQuTGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfY29tbWFuZCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF9jb21tYW5kcy5SZW1vdmVBdChfY29tbWFuZHMuQ291bnQgLSAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBSZWZyZXNoVmFsdWUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIElzU2luZ2xlT3BlcmF0b3Ioc3RyaW5nIHgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKHguQ29udGFpbnMoXCJUQVhcIikgfHwgeCA9PSBcIkRibFwiIHx8IHggPT0gXCIxL3hcIiB8fCB4ID09IFwiKy8tXCIgfHwgeCA9PSBcInNxcnRcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBEb250UmVmcmVzaCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBBZGRPcGVyYXRvcihTaW1wbGVCdXR0b24gYnV0dG9uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoSXNTaW5nbGVPcGVyYXRvcihidXR0b24uVGV4dCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKF9jb21tYW5kcy5Db3VudCA+IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBTeXN0ZW0uTGlucS5FbnVtZXJhYmxlLkxhc3Q8c3RyaW5nPihfY29tbWFuZHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFJc1NpbmdsZU9wZXJhdG9yKHgpKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoY3VycmVudF9jb21tYW5kID09IFwiXCIgJiYgIUlzQWxsTnVtYmVycyh4KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKGN1cnJlbnRfY29tbWFuZCAhPSBcIlwiKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIF9jb21tYW5kcy5BZGQoY3VycmVudF9jb21tYW5kKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50X2NvbW1hbmQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIF9jb21tYW5kcy5BZGQoYnV0dG9uLlRleHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIFJlZnJlc2hWYWx1ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoY3VycmVudF9jb21tYW5kID09IFwiXCIpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoYnV0dG9uLlRleHQgPT0gXCI9XCIpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBDYWxjdWxhdGVBbmRDbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKF9jb21tYW5kcy5Db3VudCA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0gU3lzdGVtLkxpbnEuRW51bWVyYWJsZS5MYXN0PHN0cmluZz4oX2NvbW1hbmRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFJc1NpbmdsZU9wZXJhdG9yKHgpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZihidXR0b24uVGV4dCA9PSBcIiVcIilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihfY29tbWFuZHMuQ291bnQgPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBTeXN0ZW0uTGlucS5FbnVtZXJhYmxlLkxhc3Q8c3RyaW5nPihfY29tbWFuZHMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIUlzU2luZ2xlT3BlcmF0b3IoeCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfY29tbWFuZCArPSBcIiVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb21tYW5kcy5BZGQoY3VycmVudF9jb21tYW5kKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfY29tbWFuZCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2NvbW1hbmRzLkFkZChjdXJyZW50X2NvbW1hbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfY29tbWFuZCA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGJ1dHRvbi5UZXh0ID09IFwiPVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQ2FsY3VsYXRlQW5kQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbW1hbmRzLkFkZChidXR0b24uVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgUmVmcmVzaFZhbHVlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBDYWxjdWxhdG9yQ29udHJvbChkZWNpbWFsIHN0YXJ0aW5nVmFsdWUsIGJvb2wgQ2xvc2VCdXR0b25WaXNpYmxlID0gZmFsc2UpIDogYmFzZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBWYWx1ZSA9IHN0YXJ0aW5nVmFsdWU7XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50X2NvbW1hbmQgPSBWYWx1ZS5Ub1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGRvYyA9IFJldHlwZWQuZG9tLmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuXHJcbiAgICAgICAgICAgIGludCBBZGRIZWlnaHQgPSAoSGVscGVyLk5vdERlc2t0b3AgPyA0NSA6IDIyKTtcclxuXHJcbiAgICAgICAgICAgIC8vMjcuNzc3NzhcclxuXHJcbiAgICAgICAgICAgIGRvYy5hcHBlbmRDaGlsZDxIVE1MRWxlbWVudD4oXHJcbiAgICAgICAgICAgICAgICAoRGlzcGxheUlucHV0ID0gbmV3IE1lbW9JbnB1dCgpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgUmVhZG9ubHkgPSB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIEJvdW5kcyA9IG5ldyBWZWN0b3I0KDQsIDQsIFwiKDEwMCUgLSA4cHgpXCIsIEFkZEhlaWdodClcclxuICAgICAgICAgICAgICAgIH0pLkNvbnRlbnRcclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgRGlzcGxheUlucHV0LlN0eWxlLmZvbnRTaXplID0gXCIxNHB4XCI7XHJcbiAgICAgICAgICAgICAgICBEaXNwbGF5SW5wdXQuSGVpZ2h0ID0gNDU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIExpc3Q8U2ltcGxlQnV0dG9uPiBidXR0b25zID0gbmV3IExpc3Q8U2ltcGxlQnV0dG9uPigpO1xyXG5cclxuICAgICAgICAgICAgYnV0dG9ucy5BZGRSYW5nZShcclxuICAgICAgICAgICAgICAgIG5ldyBTaW1wbGVCdXR0b25bXSB7XHJcbiAgICAgICAgICAgICAgICBidG5QVEFYID0gbmV3IFNpbXBsZUJ1dHRvbigpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgVGV4dCA9IFwiK1RBWFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIEl0ZW1DbGljayA9IEFkZE9wZXJhdG9yXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYnRuNyA9IG5ldyBTaW1wbGVCdXR0b24oKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFRleHQgPSBcIjdcIixcclxuICAgICAgICAgICAgICAgICAgICBJdGVtQ2xpY2sgPSBBZGRUZXh0VG9Db21tYW5kXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYnRuOCA9IG5ldyBTaW1wbGVCdXR0b24oKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFRleHQgPSBcIjhcIixcclxuICAgICAgICAgICAgICAgICAgICBJdGVtQ2xpY2sgPSBBZGRUZXh0VG9Db21tYW5kXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYnRuOSA9IG5ldyBTaW1wbGVCdXR0b24oKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFRleHQgPSBcIjlcIixcclxuICAgICAgICAgICAgICAgICAgICBJdGVtQ2xpY2sgPSBBZGRUZXh0VG9Db21tYW5kXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYnRuRGl2ID0gbmV3IFNpbXBsZUJ1dHRvbigpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgVGV4dCA9IFwiL1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIEl0ZW1DbGljayA9IEFkZE9wZXJhdG9yXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYnRuU3FydCA9IG5ldyBTaW1wbGVCdXR0b24oKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFRleHQgPSBcInNxcnRcIixcclxuICAgICAgICAgICAgICAgICAgICBJdGVtQ2xpY2sgPSBBZGRPcGVyYXRvclxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJ0bk1UQVggPSBuZXcgU2ltcGxlQnV0dG9uKClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBUZXh0ID0gXCItVEFYXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgSXRlbUNsaWNrID0gQWRkT3BlcmF0b3JcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBidG40ID0gbmV3IFNpbXBsZUJ1dHRvbigpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgVGV4dCA9IFwiNFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIEl0ZW1DbGljayA9IEFkZFRleHRUb0NvbW1hbmRcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBidG41ID0gbmV3IFNpbXBsZUJ1dHRvbigpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgVGV4dCA9IFwiNVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIEl0ZW1DbGljayA9IEFkZFRleHRUb0NvbW1hbmRcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBidG42ID0gbmV3IFNpbXBsZUJ1dHRvbigpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgVGV4dCA9IFwiNlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIEl0ZW1DbGljayA9IEFkZFRleHRUb0NvbW1hbmRcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBidG5NdWwgPSBuZXcgU2ltcGxlQnV0dG9uKClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBUZXh0ID0gXCIqXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgSXRlbUNsaWNrID0gQWRkT3BlcmF0b3JcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBidG5QZXIgPSBuZXcgU2ltcGxlQnV0dG9uKClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBUZXh0ID0gXCIlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgSXRlbUNsaWNrID0gQWRkT3BlcmF0b3JcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBidG5UQVggPSBuZXcgU2ltcGxlQnV0dG9uKClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBUZXh0ID0gXCJUQVhcIixcclxuICAgICAgICAgICAgICAgICAgICBJdGVtQ2xpY2sgPSBBZGRPcGVyYXRvclxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJ0bjEgPSBuZXcgU2ltcGxlQnV0dG9uKClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBUZXh0ID0gXCIxXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgSXRlbUNsaWNrID0gQWRkVGV4dFRvQ29tbWFuZFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJ0bjIgPSBuZXcgU2ltcGxlQnV0dG9uKClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBUZXh0ID0gXCIyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgSXRlbUNsaWNrID0gQWRkVGV4dFRvQ29tbWFuZFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJ0bjMgPSBuZXcgU2ltcGxlQnV0dG9uKClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBUZXh0ID0gXCIzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgSXRlbUNsaWNrID0gQWRkVGV4dFRvQ29tbWFuZFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJ0bk1pbnVzID0gbmV3IFNpbXBsZUJ1dHRvbigpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgVGV4dCA9IFwiLVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIEl0ZW1DbGljayA9IEFkZE9wZXJhdG9yXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYnRuMU92ZXJYID0gbmV3IFNpbXBsZUJ1dHRvbigpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgVGV4dCA9IFwiMS94XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgSXRlbUNsaWNrID0gQWRkT3BlcmF0b3JcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBidG5EYmwgPSBuZXcgU2ltcGxlQnV0dG9uKClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBUZXh0ID0gXCJEYmxcIixcclxuICAgICAgICAgICAgICAgICAgICBJdGVtQ2xpY2sgPSBBZGRPcGVyYXRvclxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJ0bjAgPSBuZXcgU2ltcGxlQnV0dG9uKClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBUZXh0ID0gXCIwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgSXRlbUNsaWNrID0gQWRkVGV4dFRvQ29tbWFuZFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJ0bnBsdXNPck5lZyA9IG5ldyBTaW1wbGVCdXR0b24oKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFRleHQgPSBcIisvLVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIEl0ZW1DbGljayA9IEFkZE9wZXJhdG9yXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYnRuRG90ID0gbmV3IFNpbXBsZUJ1dHRvbigpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgVGV4dCA9IFwiLlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIEl0ZW1DbGljayA9IEFkZFRleHRUb0NvbW1hbmRcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBidG5QbHVzID0gbmV3IFNpbXBsZUJ1dHRvbigpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgVGV4dCA9IFwiK1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIEl0ZW1DbGljayA9IEFkZE9wZXJhdG9yXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYnRuRXEgPSBuZXcgU2ltcGxlQnV0dG9uKClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBUZXh0ID0gXCI9XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgSXRlbUNsaWNrID0gQWRkT3BlcmF0b3JcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBpbnQgaW5kZXggPSAwO1xyXG4gICAgICAgICAgICBpbnQgeSA9IDA7XHJcbiAgICAgICAgICAgIGludCB5T2Zmc2V0ID0gMjggKyBBZGRIZWlnaHQ7XHJcbiAgICAgICAgICAgIGJ0bkNsb3NlID0gbmV3IFNpbXBsZUJ1dHRvbigpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFRleHQgPSBcIiZ0aW1lcztcIixcclxuICAgICAgICAgICAgICAgIFNpemUgPSBuZXcgVmVjdG9yMihcIigoMTAwJSAtIDI4cHgpICogMC4xNjY2NjY2NjY2NjY2NjY3KVwiLCBcIigoMTAwJSAtIFwiICsgeU9mZnNldCArIFwicHgpICogMC4yKVwiKSxcclxuICAgICAgICAgICAgICAgIExvY2F0aW9uID0gbmV3IFZlY3RvcjIoXCIoKCgxMDAlIC0gMjhweCkgKiBcIiArICg1ICogMC4xNjY2NjY2NjY2NjY2NjY3bSkgKyBcIikgKyBcIiArICgoNSAqIDQpICsgNCkgKyBcInB4KVwiLCBcIigoKDEwMCUgLSBcIiArIHlPZmZzZXQgKyBcInB4KSAqIFwiICsgKHkgKiAwLjJtKSArIFwiKSArIFwiICsgKCgoeSAqIDQpICsgOCkgKyBBZGRIZWlnaHQpICsgXCJweClcIiksXHJcbiAgICAgICAgICAgICAgICBJdGVtQ2xpY2sgPSAoZXYpID0+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihPbkNsb3NlICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbkNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYnRuQ2xvc2UuU3R5bGUuZm9udFNpemUgPSBcIjI2cHhcIjtcclxuICAgICAgICAgICAgICAgIGJ0bkNsb3NlLlN0eWxlLmZvbnRXZWlnaHQgPSBcImJvbGRcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBidG5CYWNrID0gbmV3IFNpbXBsZUJ1dHRvbigpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFRleHQgPSBcIkJhY2tcIixcclxuICAgICAgICAgICAgICAgIFNpemUgPSBuZXcgVmVjdG9yMihcIigoKDEwMCUgLSAyNHB4KSAtICgoMTAwJSAtIDI4cHgpICogMC4xNjY2NjY2NjY2NjY2NjY3KSkgKiAwLjMzMylcIiwgXCIoKDEwMCUgLSBcIiArIHlPZmZzZXQgKyBcInB4KSAqIDAuMilcIiksXHJcbiAgICAgICAgICAgICAgICBMb2NhdGlvbiA9IG5ldyBWZWN0b3IyKFwiKCgoKCgxMDAlIC0gMjRweCkgLSAoKDEwMCUgLSAyOHB4KSAqIDAuMTY2NjY2NjY2NjY2NjY2NykpICogMC4zMzMpICogMCkgKyA0cHgpXCIsIFwiKCgoMTAwJSAtIFwiICsgeU9mZnNldCArIFwicHgpICogXCIgKyAoeSAqIDAuMm0pICsgXCIpICsgXCIgKyAoKCh5ICogNCkgKyA4KSArIEFkZEhlaWdodCkgKyBcInB4KVwiKSxcclxuICAgICAgICAgICAgICAgIEl0ZW1DbGljayA9IEJhY2tcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYoSGVscGVyLk5vdERlc2t0b3ApXHJcbiAgICAgICAgICAgICAgICBidG5CYWNrLlN0eWxlLmZvbnRTaXplID0gXCIxNHB4XCI7XHJcbiAgICAgICAgICAgIGJ0bkNFID0gbmV3IFNpbXBsZUJ1dHRvbigpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFRleHQgPSBcIkNFXCIsXHJcbiAgICAgICAgICAgICAgICBTaXplID0gbmV3IFZlY3RvcjIoXCIoKCgxMDAlIC0gMjRweCkgLSAoKDEwMCUgLSAyOHB4KSAqIDAuMTY2NjY2NjY2NjY2NjY2NykpICogMC4zMzMpXCIsIFwiKCgxMDAlIC0gXCIgKyB5T2Zmc2V0ICsgXCJweCkgKiAwLjIpXCIpLFxyXG4gICAgICAgICAgICAgICAgTG9jYXRpb24gPSBuZXcgVmVjdG9yMihcIigoKCgoMTAwJSAtIDI0cHgpIC0gKCgxMDAlIC0gMjhweCkgKiAwLjE2NjY2NjY2NjY2NjY2NjcpKSAqIDAuMzMzKSAqIDEpICsgOHB4KVwiLCBcIigoKDEwMCUgLSBcIiArIHlPZmZzZXQgKyBcInB4KSAqIFwiICsgKHkgKiAwLjJtKSArIFwiKSArIFwiICsgKCgoeSAqIDQpICsgOCkgKyBBZGRIZWlnaHQpICsgXCJweClcIiksXHJcbiAgICAgICAgICAgICAgICBJdGVtQ2xpY2sgPSAoZXYpID0+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudF9jb21tYW5kID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICBSZWZyZXNoVmFsdWUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYoSGVscGVyLk5vdERlc2t0b3ApXHJcbiAgICAgICAgICAgICAgICBidG5DRS5TdHlsZS5mb250U2l6ZSA9IFwiMTRweFwiO1xyXG4gICAgICAgICAgICBidG5DID0gbmV3IFNpbXBsZUJ1dHRvbigpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFRleHQgPSBcIkNcIixcclxuICAgICAgICAgICAgICAgIFNpemUgPSBuZXcgVmVjdG9yMihcIigoKCgxMDAlIC0gMjRweCkgLSAoKDEwMCUgLSAyOHB4KSAqIDAuMTY2NjY2NjY2NjY2NjY2NykpICogMC4zMzMpICsgNHB4KVwiLCBcIigoMTAwJSAtIFwiICsgeU9mZnNldCArIFwicHgpICogMC4yKVwiKSxcclxuICAgICAgICAgICAgICAgIExvY2F0aW9uID0gbmV3IFZlY3RvcjIoXCIoKCgoKDEwMCUgLSAyNHB4KSAtICgoMTAwJSAtIDI4cHgpICogMC4xNjY2NjY2NjY2NjY2NjY3KSkgKiAwLjMzMykgKiAyKSArIDEycHgpXCIsIFwiKCgoMTAwJSAtIFwiICsgeU9mZnNldCArIFwicHgpICogXCIgKyAoeSAqIDAuMm0pICsgXCIpICsgXCIgKyAoKCh5ICogNCkgKyA4KSArIEFkZEhlaWdodCkgKyBcInB4KVwiKSxcclxuICAgICAgICAgICAgICAgIEl0ZW1DbGljayA9IChldikgPT5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBfY29tbWFuZHMgPSBuZXcgTGlzdDxzdHJpbmc+KCk7IGN1cnJlbnRfY29tbWFuZCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgUmVmcmVzaFZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmKEhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICAgICAgYnRuQy5TdHlsZS5mb250U2l6ZSA9IFwiMTRweFwiO1xyXG5cclxuICAgICAgICAgICAgZG9jLkFwcGVuZENoaWxkcmVuKGJ0bkNsb3NlLkNvbnRlbnQsIGJ0bkJhY2suQ29udGVudCwgYnRuQ0UuQ29udGVudCwgYnRuQy5Db250ZW50KTtcclxuXHJcbiAgICAgICAgICAgIHkrKztcclxuXHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBidXR0b25zLkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbnNbaV0uU2l6ZSA9IG5ldyBWZWN0b3IyKFwiKCgxMDAlIC0gMjhweCkgKiAwLjE2NjY2NjY2NjY2NjY2NjcpXCIsIFwiKCgxMDAlIC0gXCIgKyB5T2Zmc2V0ICsgXCJweCkgKiAwLjIpXCIpO1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uc1tpXS5Mb2NhdGlvbiA9IG5ldyBWZWN0b3IyKFwiKCgoMTAwJSAtIDI4cHgpICogXCIgKyAoaW5kZXggKiAwLjE2NjY2NjY2NjY2NjY2NjdtKSArIFwiKSArIFwiICsgKChpbmRleCAqIDQpICsgNCkgKyBcInB4KVwiLCBcIigoKDEwMCUgLSBcIiArIHlPZmZzZXQgKyBcInB4KSAqIFwiICsgKHkgKiAwLjJtKSArIFwiKSArIFwiICsgKCgoeSAqIDQpICsgOCkgKyBBZGRIZWlnaHQpICsgXCJweClcIik7XHJcbiAgICAgICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAgICAgICAgICBidXR0b25zW2ldLlN0eWxlLmZvbnRTaXplID0gXCIxNHB4XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgZG9jLmFwcGVuZENoaWxkPEhUTUxFbGVtZW50PihidXR0b25zW2ldLkNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgIGlmKGluZGV4ID09IDYpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHkrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYnRuRGJsLlN0eWxlLmZvbnRTaXplID0gXCI2LjVwdFwiO1xyXG4gICAgICAgICAgICBidG5UQVguU3R5bGUuZm9udFNpemUgPSBcIjYuNXB0XCI7XHJcbiAgICAgICAgICAgIGJ0blBUQVguU3R5bGUuZm9udFNpemUgPSBcIjYuNXB0XCI7XHJcbiAgICAgICAgICAgIGJ0bk1UQVguU3R5bGUuZm9udFNpemUgPSBcIjYuNXB0XCI7XHJcblxyXG4gICAgICAgICAgICBidG5DbG9zZS5TdHlsZS5jb2xvciA9IFwicmVkXCI7XHJcbiAgICAgICAgICAgIGJ0bkNsb3NlLlN0eWxlLmZvbnRXZWlnaHQgPSBcImJvbGRcIjtcclxuXHJcbiAgICAgICAgICAgIGlmKCFDbG9zZUJ1dHRvblZpc2libGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJ0bkNsb3NlLlN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBSZWZyZXNoVmFsdWUoKTtcclxuXHJcbiAgICAgICAgICAgIENvbnRlbnQuYXBwZW5kQ2hpbGQ8RG9jdW1lbnRGcmFnbWVudD4oZG9jKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uTGlucTtcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcbnVzaW5nIFN5c3RlbS5UaHJlYWRpbmcuVGFza3M7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBDYW52YXNDb250cm9sIDogQ29udHJvbFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBSZXR5cGVkLmRvbS5DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgQ29udGV4dDtcclxuICAgICAgICBwdWJsaWMgUmV0eXBlZC5kb20uSFRNTENhbnZhc0VsZW1lbnQgQ2FudmFzO1xyXG4gICAgICAgIHB1YmxpYyBib29sIENsZWFyT25SZXNpemUgPSB0cnVlO1xyXG5cclxuICAgICAgICBwdWJsaWMgQ2FudmFzQ29udHJvbCgpIDogYmFzZShuZXcgUmV0eXBlZC5kb20uSFRNTENhbnZhc0VsZW1lbnQoKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIENhbnZhcyA9IHRoaXMuQ29udGVudC5BczxSZXR5cGVkLmRvbS5IVE1MQ2FudmFzRWxlbWVudD4oKTtcclxuICAgICBcclxuICAgICAgICAgICAgQ29udGV4dCA9IENhbnZhcy5nZXRDb250ZXh0KFwiMmRcIikuQXM8UmV0eXBlZC5kb20uQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEPigpO1xyXG5cclxuICAgICAgICAgICAgT25SZXNpemUgPSAoc2VuZGVyKSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYm91bmRzID0gKFJldHlwZWQuZG9tLkRPTVJlY3QpQ29udGVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgICAgIENhbnZhcy53aWR0aCA9ICh1aW50KWJvdW5kcy53aWR0aDtcclxuICAgICAgICAgICAgICAgIENhbnZhcy5oZWlnaHQgPSAodWludClib3VuZHMuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgIFJlZnJlc2goKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIFJlbmRlcigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiYXNlLlJlbmRlcigpO1xyXG5cclxuICAgICAgICAgICAgUmVmcmVzaCgpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gUmVmcmVzaCBjb250cm9sLi5cclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFJlZnJlc2goKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoQ2xlYXJPblJlc2l6ZSlcclxuICAgICAgICAgICAgICAgIE9uQ2xlYXIoKTtcclxuICAgICAgICAgICAgT25QYWludCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEdyYXBoaWNzIENyZWF0ZUdyYXBoaWNzKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgR3JhcGhpY3ModGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCB2b2lkIE9uQ2xlYXIoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ29udGV4dC5jbGVhclJlY3QoMCwgMCwgQ2FudmFzLndpZHRoLCBDYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2aXJ0dWFsIHZvaWQgT25QYWludCgpXHJcbiAgICAgICAge1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcbiIsInVzaW5nIFN5c3RlbTtcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIENoZWNrRWRpdCA6IENvbnRyb2xcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgVGV4dElucHV0IEVkaXQ7XHJcbiAgICAgICAgcHVibGljIFJldHlwZWQuZG9tLkhUTUxTcGFuRWxlbWVudCBzcGFuO1xyXG4gICAgICAgIHB1YmxpYyBBY3Rpb248Q2hlY2tFZGl0PiBPbkNoZWNrQ2hhbmdlZDsgICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyBib29sIENoZWNrZWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBFZGl0LlRleHQuSXNUcnVlKCkgPT0gMTsgfVxyXG4gICAgICAgICAgICBzZXQgeyBFZGl0LlRleHQgPSB2YWx1ZS5Ub1N0cmluZygpOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgQ2hlY2tFZGl0KHN0cmluZyBsYWJlbCA9IFwiXCIpIDogYmFzZShuZXcgUmV0eXBlZC5kb20uSFRNTExhYmVsRWxlbWVudCgpIHsgY2xhc3NOYW1lID0gQmFzZUNsYXNzKGZhbHNlLCB0cnVlKSB9KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRWRpdCA9IG5ldyBUZXh0SW5wdXQoXCJjaGVja2JveFwiKTtcclxuICAgICAgICAgICAgRWRpdC5Db250cm9sbGVyID0gdGhpcztcclxuICAgICAgICAgICAgRWRpdC5PblRleHRDaGFuZ2VkID0gKHNlbmRlcikgPT4geyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmKE9uQ2hlY2tDaGFuZ2VkICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgT25DaGVja0NoYW5nZWQodGhpcyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHNwYW4gPSBuZXcgUmV0eXBlZC5kb20uSFRNTFNwYW5FbGVtZW50KCk7XHJcblxyXG4gICAgICAgICAgICBUZXh0ID0gbGFiZWw7XHJcblxyXG4gICAgICAgICAgICB0aGlzLkNvbnRlbnQuQXBwZW5kQ2hpbGRyZW4oRWRpdCwgc3Bhbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGltcGxpY2l0IG9wZXJhdG9yIFRleHRJbnB1dChDaGVja0VkaXQgY2hlY2tFZGl0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNoZWNrRWRpdC5FZGl0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBUZXh0XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gc3Bhbi5pbm5lckhUTUw7IH1cclxuICAgICAgICAgICAgc2V0IHsgc3Bhbi5pbm5lckhUTUwgPSB2YWx1ZTsgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBUZXh0SW5wdXQgOiBDb250cm9sXHJcbiAgICB7XHJcbiAgICAgICAgcHJpdmF0ZSBzdHJpbmcgcHJldlRleHQgPSBcIlwiO1xyXG5cclxuICAgICAgICBwdWJsaWMgQWN0aW9uPFRleHRJbnB1dD4gT25UZXh0Q2hhbmdlZCA9IG51bGw7XHJcbiAgICAgICAgcHVibGljIEFjdGlvbjxUZXh0SW5wdXQsIFJldHlwZWQuZG9tLktleWJvYXJkRXZlbnQ+IE9uS2V5RG93biA9IG51bGw7XHJcbiAgICAgICAgcHVibGljIEFjdGlvbjxUZXh0SW5wdXQsIFJldHlwZWQuZG9tLktleWJvYXJkRXZlbnQ+IE9uS2V5VXAgPSBudWxsO1xyXG4gICAgICAgIHB1YmxpYyBBY3Rpb248VGV4dElucHV0LCBSZXR5cGVkLmRvbS5LZXlib2FyZEV2ZW50PiBPbktleVByZXNzID0gbnVsbDtcclxuICAgICAgICBwdWJsaWMgQWN0aW9uPFRleHRJbnB1dD4gT25Hb3RGb2N1cyA9IG51bGw7XHJcbiAgICAgICAgcHVibGljIEFjdGlvbjxUZXh0SW5wdXQ+IE9uTG9zdEZvY3VzID0gbnVsbDtcclxuICAgICAgICBwdWJsaWMgQWN0aW9uPFRleHRJbnB1dD4gT25WYWxpZGF0ZURhdGEgPSBudWxsO1xyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBEaXNhYmxlRm9jdXM7XHJcblxyXG4gICAgICAgIHB1YmxpYyB2aXJ0dWFsIHZvaWQgVmFsaWRhdGVEYXRhKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMgaXMgVGV4dElucHV0RHJvcERvd24pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciBjID0gdGhpcy5BczxUZXh0SW5wdXREcm9wRG93bj4oKTtcclxuICAgICAgICAgICAgICAgIGlmKGMuVXNlZEVkaXQgIT0gbnVsbCAmJiBjLk9uVmFsaWRhdGVEYXRhICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgYy5PblZhbGlkYXRlRGF0YShjLlVzZWRFZGl0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihPblZhbGlkYXRlRGF0YSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgT25WYWxpZGF0ZURhdGEodGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBJc1N1Ym1pdCB7IGdldDsgc2V0OyB9XHJcbiAgICAgICAgcHVibGljIGJvb2wgR29OZXh0IHsgZ2V0OyBzZXQ7IH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgT25Gb2N1c0RvbnRTZWxlY3RBbGwgeyBnZXQ7IHNldDsgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgc3RyaW5nIF9kaXNwbGF5Rm9ybWF0ID0gXCJcIjtcclxuXHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgdm9pZCBTZXREaXNwbGF5Rm9ybWF0KHN0cmluZyB2YWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIF9kaXNwbGF5Rm9ybWF0ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGZvcm1hdFRleHQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2aXJ0dWFsIHN0cmluZyBHZXREaXNwbGF5Rm9ybWF0KClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZGlzcGxheUZvcm1hdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgRGlzcGxheUZvcm1hdFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIF9kaXNwbGF5Rm9ybWF0OyB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBTZXREaXNwbGF5Rm9ybWF0KHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIENvbnRyb2wgQ29udHJvbGxlciA9IG51bGw7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgVHlwZTtcclxuICAgICAgICBwdWJsaWMgYm9vbCBEaXNhYmxlRm9jdXNQb3B1cDtcclxuICAgICAgICBwcml2YXRlIGJvb2wgSXNPdmVycmlkZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCBzdHJpbmcgR2V0VmFsdWUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIENvbnRlbnQuaW5uZXJIVE1MO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgdm9pZCBTZXRWYWx1ZShzdHJpbmcgdmFsdWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDb250ZW50LmlubmVySFRNTCA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgU2V0RGF0ZVRpbWUoRGF0ZVRpbWUgZGF0ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFNldERhdGUoc3RyaW5nLkZvcm1hdChcInswOlwiICsgR2V0RGlzcGxheUZvcm1hdCgpICsgXCJ9XCIsIGRhdGUpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBUZXh0SW5wdXQoUmV0eXBlZC5kb20uSFRNTEVsZW1lbnQgb3ZlcnJpZGVFbGVtZW50LCBib29sIGFkZElucHV0Q29udHJvbCA9IHRydWUsIGJvb2wgYWRkRXZlbnRzT25Db250cm9sID0gdHJ1ZSkgOiBiYXNlKG92ZXJyaWRlRWxlbWVudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG92ZXJyaWRlRWxlbWVudC5jbGFzc05hbWUgPSAoYWRkSW5wdXRDb250cm9sID8gXCJpbnB1dGNvbnRyb2xcIiA6IFwiXCIpICsgQmFzZUNsYXNzKGFkZElucHV0Q29udHJvbCk7XHJcbiAgICAgICAgICAgIElzT3ZlcnJpZGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZihhZGRFdmVudHNPbkNvbnRyb2wpXHJcbiAgICAgICAgICAgICAgICBhZGRFdmVudHMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2aXJ0dWFsIHZvaWQgT25Gb2N1cygpXHJcbiAgICAgICAge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgUmV0eXBlZC5kb20uSFRNTElucHV0RWxlbWVudCBHZXRJbnB1dCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihDb250ZW50LklzPFJldHlwZWQuZG9tLkhUTUxJbnB1dEVsZW1lbnQ+KCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBDb250ZW50LkFzPFJldHlwZWQuZG9tLkhUTUxJbnB1dEVsZW1lbnQ+KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29udGVudC5BczxSZXR5cGVkLmRvbS5IVE1MSW5wdXRFbGVtZW50PigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZGVjaW1hbCBHZXROdW1iZXJWYWx1ZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBkZWNpbWFsIHZhbHVlID0gVGV4dC5TdHJpcE5vbk51bWJlclN0cmluZygpO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb2JqZWN0IEdldEVkaXRWYWx1ZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZih0aGlzIGlzIFNlYXJjaElucHV0KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSAoKFNlYXJjaElucHV0KXRoaXMpLkVkaXRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIGlmKHZhbHVlID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7ICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9ZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihUeXBlID09IFwibnVtYmVyXCIpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVjaW1hbCB2YWx1ZSA9IFRleHQuU3RyaXBOb25OdW1iZXJTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKFR5cGUgPT0gXCJkYXRlXCIpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGF0ZVRpbWUgZGF0ZSA9IEdldERhdGVUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRleHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNjcm9sbChpbnQgdmFsdWUsIFJldHlwZWQuZG9tLkhUTUxFbGVtZW50IHBhcmVudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHBhcmVudCA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBwYXJlbnQuc2Nyb2xsVG9wID0gdmFsdWU7XHJcbiAgICAgICAgICAgIC8vR2xvYmFsLlNldFRpbWVvdXQoKCkgPT5cclxuICAgICAgICAgICAgLy97XHJcbiAgICAgICAgICAgIC8vICAgIGlmKHRoaXMuQ29udGVudC5QYXJlbnRFbGVtZW50ID09IG51bGwgfHwgdGhpcy5Db250ZW50LlBhcmVudEVsZW1lbnQuUGFyZW50RWxlbWVudCA9PSBudWxsKVxyXG4gICAgICAgICAgICAvLyAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAvLyAgICB0aGlzLkNvbnRlbnQuUGFyZW50RWxlbWVudC5QYXJlbnRFbGVtZW50LlNjcm9sbFRvcCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAvL30sIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBHZXREaXNwbGF5VmFsdWUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShEaXNwbGF5Rm9ybWF0KSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFRleHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihUeXBlID09IFwibnVtYmVyXCIpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVjaW1hbCB2YWx1ZSA9IFRleHQuU3RyaXBOb25OdW1iZXJTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZihEaXNwbGF5Rm9ybWF0LlRvTG93ZXIoKS5TdGFydHNXaXRoKFwiY1wiKSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvb2wgd2FzTmVnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlIDwgMClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FzTmVnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gLXZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHdhc05lZyA/IFwiLVwiIDogXCJcIikgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLkZvcm1hdChcIiR7MDpcIiArIERpc3BsYXlGb3JtYXQuUmVwbGFjZShcImNcIiwgXCJuXCIpLlJlcGxhY2UoXCJDXCIsIFwiTlwiKSArIFwifVwiLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoRGlzcGxheUZvcm1hdC5Ub0xvd2VyKCkuU3RhcnRzV2l0aChcInBcIikpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLkZvcm1hdChcInswOlwiICsgRGlzcGxheUZvcm1hdCArIFwifVwiLCB2YWx1ZSA9PSAwID8gMCA6IHZhbHVlIC8gMTAwLjBtKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5Gb3JtYXQoXCJ7MDpcIiArIERpc3BsYXlGb3JtYXQgKyBcIn1cIiwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYoVHlwZSA9PSBcImRhdGVcIilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBEYXRlVGltZSB2YWx1ZSA9IFRleHQuU3RyaXBOb25EYXRlU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodmFsdWUgPT0gRGF0ZVRpbWUuTWluVmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5Gb3JtYXQoXCJ7MDpcIiArIERpc3BsYXlGb3JtYXQgKyBcIn1cIiwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLkZvcm1hdChcInswOlwiICsgRGlzcGxheUZvcm1hdCArIFwifVwiLCBUZXh0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIGZvcm1hdFRleHQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gR2V0SW5wdXQoKTtcclxuICAgICAgICAgICAgaWYoaW5wdXQgIT0gbnVsbCAmJiBpbnB1dCAhPSBSZXR5cGVkLmRvbS5kb2N1bWVudC5hY3RpdmVFbGVtZW50KSAvLyBJcyBBY3RpdmVcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoIXN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoRGlzcGxheUZvcm1hdCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQudHlwZSA9IFwidGV4dFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyBuZXdUZXh0ID0gR2V0RGlzcGxheVZhbHVlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKG5ld1RleHQgIT0gVGV4dClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRleHQgPSBuZXdUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdHJpbmcgUHJlWkluZGV4O1xyXG5cclxuICAgICAgICBwcml2YXRlIHZvaWQgYWRkRXZlbnRzKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCFJc092ZXJyaWRlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSBHZXRJbnB1dCgpO1xyXG4gICAgICAgICAgICAgICAgaWYoaW5wdXQgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZighc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShEaXNwbGF5Rm9ybWF0KSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKFR5cGUgPT0gXCJwYXNzd29yZFwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC50eXBlID0gXCJ0ZXh0XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLkNvbnRlbnQub25ibHVyID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDb250ZW50LnN0eWxlLnpJbmRleCA9IFByZVpJbmRleDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3JtYXRUZXh0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoT25Mb3N0Rm9jdXMgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBPbkxvc3RGb2N1cyh0aGlzKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5Db250ZW50Lm9uZm9jdXMgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKERpc2FibGVGb2N1cylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBDb250ZW50LmJsdXIoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgUHJlWkluZGV4ID0gQ29udGVudC5zdHlsZS56SW5kZXg7XHJcbiAgICAgICAgICAgICAgICBDb250ZW50LnN0eWxlLnpJbmRleCA9IFwiMTAwMDBcIjtcclxuXHJcbiAgICAgICAgICAgICAgICBPbkZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSBHZXRJbnB1dCgpO1xyXG4gICAgICAgICAgICAgICAgaWYoaW5wdXQgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZighc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShEaXNwbGF5Rm9ybWF0KSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKFR5cGUgPT0gXCJudW1iZXJcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGV4dCA9IFRleHQuU3RyaXBOb25OdW1iZXJTdHJpbmcoKS5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2goRXhjZXB0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRleHQgPSBcIjAuMDBcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIUhlbHBlci5Jc0ZpcmVGb3goKSAmJiAhUmVhZG9ubHkgJiYgVHlwZSAhPSBcImRhdGVcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQudHlwZSA9IFR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoVHlwZSAhPSBcImNoZWNrYm94XCIgJiZcclxuICAgICAgICAgICAgICAgICAgICBTZXR0aW5ncy5PbkZvY3VzU2VsZWN0QWxsICYmICFPbkZvY3VzRG9udFNlbGVjdEFsbCkgLy8gJiYgSGVscGVyLklzRmlyZUZveCgpICYmIEJyb3dzZXIuSXNJRVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5zZWxlY3QoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgIGlmKE9uR290Rm9jdXMgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBPbkdvdEZvY3VzKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCFEaXNhYmxlRm9jdXNQb3B1cCAmJiAhUmVhZG9ubHkgJiYgRW5hYmxlZCAmJiBIZWxwZXIuTm90RGVza3RvcCAmJiAhKHRoaXMgaXMgVGV4dElucHV0RHJvcERvd24pICYmIENvbnRyb2xsZXIgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZighU2V0dGluZ3MuRGlzYWJsZVRleHRQb3B1cEVkaXRvcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRleHRGb3JtKHRoaXMpLlNob3dQb3B1cChuZXcgVmVjdG9yMigwLCAwKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuQ29udGVudC5vbmNoYW5nZSA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQ2hlY2tUZXh0Q2hhbmdlZCgpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLkNvbnRlbnQub25jb250ZXh0bWVudSA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuQ29udGVudC5vbmtleXByZXNzID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDaGVja1RleHRDaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgICAgICBpZihPbktleVByZXNzICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgT25LZXlQcmVzcyh0aGlzLCBldik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuQ29udGVudC5vbmtleWRvd24gPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIENoZWNrVGV4dENoYW5nZWQoKTtcclxuICAgICAgICAgICAgICAgIGlmKE9uS2V5RG93biAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIE9uS2V5RG93bih0aGlzLCBldik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuQ29udGVudC5vbmtleXVwID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDaGVja1RleHRDaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgICAgICBpZihPbktleVVwICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgT25LZXlVcCh0aGlzLCBldik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuQ29udGVudC5hZGRFdmVudExpc3RlbmVyKFwicGFzdGVcIiwgKGdsb2JhbDo6U3lzdGVtLkFjdGlvbikoKCkgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQ2hlY2tUZXh0Q2hhbmdlZCgpO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIHRoaXMuQ29udGVudC5hZGRFdmVudExpc3RlbmVyKFwiY3V0XCIsIChnbG9iYWw6OlN5c3RlbS5BY3Rpb24pKCgpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIENoZWNrVGV4dENoYW5nZWQoKTtcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgRml4SW5wdXQoc3RyaW5nIHR5cGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZih0eXBlID09IFwiZGF0ZVwiIHx8IChIZWxwZXIuSXNGaXJlRm94KCkgJiYgdHlwZSAhPSBcInBhc3N3b3JkXCIgJiYgdHlwZSAhPSBcImNoZWNrYm94XCIgJiYgdHlwZSAhPSBcInJhZGlvXCIpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ0ZXh0XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFRleHRJbnB1dCgpIDogdGhpcyhcInRleHRcIiwgdHJ1ZSlcclxuICAgICAgICB7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFRleHRJbnB1dChzdHJpbmcgdHlwZSA9IFwidGV4dFwiLCBib29sIGFjID0gdHJ1ZSkgOiBiYXNlKFwiaW5wdXRjb250cm9sXCIsIHRydWUsIEZpeElucHV0KHR5cGUpLCBhYylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFR5cGUgPSB0eXBlO1xyXG5cclxuICAgICAgICAgICAgaWYoVHlwZSA9PSBcIm51bWJlclwiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDb250ZW50LnN0eWxlLnRleHRBbGlnbiA9IFwicmlnaHRcIjtcclxuICAgICAgICAgICAgICAgIENvbnRlbnQuc3R5bGUudGV4dEluZGVudCA9IFwiM3B4XCI7XHJcbiAgICAgICAgICAgICAgICBDb250ZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IFwiM3B4XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgRGlzcGxheUZvcm1hdCA9IFwibjJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKFR5cGUgPT0gXCJkYXRlXCIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdHIgPSBuZXcgc3RyaW5nWzNdO1xyXG4gICAgICAgICAgICAgICAgc3RyWyhpbnQpU2V0dGluZ3MuRGF5UG9zaXRpb25dID0gXCJkZFwiO1xyXG4gICAgICAgICAgICAgICAgc3RyWyhpbnQpU2V0dGluZ3MuTW9udGhQb3NpdGlvbl0gPSBcIk1NXCI7XHJcbiAgICAgICAgICAgICAgICBzdHJbKGludClTZXR0aW5ncy5ZZWFyUG9zaXRpb25dID0gXCJ5eXl5XCI7XHJcbiAgICAgICAgICAgICAgICB2YXIgYnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IDM7IGkrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChzdHJbaV0gKyBTZXR0aW5ncy5EYXRlU2VwZXJhdG9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJ1aWxkZXIuTGVuZ3RoLS07XHJcbiAgICAgICAgICAgICAgICBEaXNwbGF5Rm9ybWF0ID0gYnVpbGRlci5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhZGRFdmVudHMoKTtcclxuXHJcbiAgICAgICAgICAgIGZvcm1hdFRleHQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBDaGVja1RleHRDaGFuZ2VkKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKFRleHQgIT0gcHJldlRleHQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKE9uVGV4dENoYW5nZWQgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBPblRleHRDaGFuZ2VkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgcHJldlRleHQgPSBUZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBSZW5kZXIoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYmFzZS5SZW5kZXIoKTtcclxuICAgICAgICAgICAgcHJldlRleHQgPSBUZXh0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBUZXh0XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoSXNPdmVycmlkZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gR2V0VmFsdWUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihUeXBlID09IFwiY2hlY2tib3hcIiB8fCBUeXBlID09IFwicmFkaW9cIilcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkNvbnRlbnQuQXM8UmV0eXBlZC5kb20uSFRNTElucHV0RWxlbWVudD4oKS5AY2hlY2tlZC5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5Db250ZW50LkFzPFJldHlwZWQuZG9tLkhUTUxJbnB1dEVsZW1lbnQ+KCkudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihJc092ZXJyaWRlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFNldFZhbHVlKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihUeXBlID09IFwiY2hlY2tib3hcIiB8fCBUeXBlID09IFwicmFkaW9cIilcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuVG9Mb3dlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkNvbnRlbnQuQXM8UmV0eXBlZC5kb20uSFRNTElucHV0RWxlbWVudD4oKS5AY2hlY2tlZCA9IHZhbHVlLklzVHJ1ZSgpID09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuQ29udGVudC5BczxSZXR5cGVkLmRvbS5IVE1MSW5wdXRFbGVtZW50PigpLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdFRleHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgQ2hlY2tUZXh0Q2hhbmdlZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBTZXREYXRlKHN0cmluZyBkYXRlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIXN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoZGF0ZSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciBkZCA9IGRhdGUuU3RyaXBOb25EYXRlU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBpZihkZCA9PSBEYXRlVGltZS5NaW5WYWx1ZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBUZXh0ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBUZXh0ID0gc3RyaW5nLkZvcm1hdChcInswOlwiICsgRGlzcGxheUZvcm1hdCArIFwifVwiLCBkZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBUZXh0ID0gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBHZXREYXRlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCFzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKFRleHQpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGQgPSBUZXh0LlN0cmlwTm9uRGF0ZVN0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgaWYoZGQgPT0gRGF0ZVRpbWUuTWluVmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5Gb3JtYXQoXCJ7MDpcIiArIERpc3BsYXlGb3JtYXQgKyBcIn1cIiwgZGQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBEYXRlVGltZSBHZXREYXRlVGltZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gVGV4dC5TdHJpcE5vbkRhdGVTdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIElzTnVtZXJpY1R5cGUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIFR5cGUgPT0gXCJudW1iZXJcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIElzRGF0ZVR5cGUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIFR5cGUgPT0gXCJkYXRlXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGJvb2wgZW5hYmxlZCA9IHRydWU7XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIEVuYWJsZWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBlbmFibGVkOyB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkID0gdmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodGhpcyBpcyBUZXh0SW5wdXREcm9wRG93bilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wID0gdGhpcy5BczxUZXh0SW5wdXREcm9wRG93bj4oKTtcclxuICAgICAgICAgICAgICAgICAgICBpbnAuVXNlZEVkaXQuRW5hYmxlZCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfWVsc2UgaWYodGhpcyBpcyBSYWRpb0VsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucCA9IHRoaXMuQXM8UmFkaW9FbGVtZW50PigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGlucC5sYWJlbEVsZW1lbnQgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucC5Qcm9jZXNzSXNFbmFibGVkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYoZW5hYmxlZClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkNvbnRlbnQucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5Db250ZW50LnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGJvb2wgX3JlYWRvbmx5ID0gZmFsc2U7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcHVibGljIGJvb2wgUmVhZG9ubHlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBfcmVhZG9ubHk7IH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHsgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgX3JlYWRvbmx5ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZihfcmVhZG9ubHkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5Db250ZW50LnNldEF0dHJpYnV0ZShcInJlYWRvbmx5XCIsIChfcmVhZG9ubHkpLlRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQ29udGVudC5yZW1vdmVBdHRyaWJ1dGUoXCJyZWFkb25seVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbTtcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIERhdGVDb250cm9sIDogQ29udHJvbFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBTaW1wbGVCdXR0b24gYnRuVG9wO1xyXG4gICAgICAgIHB1YmxpYyBTaW1wbGVCdXR0b24gYnRuU2VsZWN0ZWRSYW5nZTtcclxuICAgICAgICBwdWJsaWMgU2ltcGxlQnV0dG9uIGJ0blRvZGF5O1xyXG5cclxuICAgICAgICBwdWJsaWMgU2ltcGxlQnV0dG9uIGJ0bkxlZnQ7XHJcbiAgICAgICAgcHVibGljIFNpbXBsZUJ1dHRvbiBidG5SaWdodDtcclxuXHJcbiAgICAgICAgcHVibGljIENvbnRyb2wgQ29udGVudFJhbmdlO1xyXG5cclxuICAgICAgICBwcml2YXRlIGludCBTZWxlY3RlZFllYXI7XHJcbiAgICAgICAgcHJpdmF0ZSBpbnQgU2VsZWN0ZWRNb250aDtcclxuICAgICAgICBwcml2YXRlIGludCBTZWxlY3RlZERheTtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBEaXNwbGF5TW9kZSBfYWN0aXZlRGlzcGxheU1vZGUgPSBEaXNwbGF5TW9kZS5EYXk7XHJcblxyXG4gICAgICAgIHB1YmxpYyBEaXNwbGF5TW9kZSBBY3RpdmVEaXNwbGF5TW9kZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIF9hY3RpdmVEaXNwbGF5TW9kZTsgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoX2FjdGl2ZURpc3BsYXlNb2RlICE9IHZhbHVlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIF9hY3RpdmVEaXNwbGF5TW9kZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIFJlZnJlc2hWaWV3KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBEYXRlVGltZSBHZXRWaWV3RGF0ZVRpbWUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlVGltZShTZWxlY3RlZFllYXIsIFNlbGVjdGVkTW9udGgsIFNlbGVjdGVkRGF5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNldFZpZXdEYXRlVGltZShEYXRlVGltZSBkYXRlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIG5ld1NlbGVjdGVkWWVhciA9IGRhdGUuWWVhcjtcclxuICAgICAgICAgICAgdmFyIG5ld1NlbGVjdGVkTW9udGggPSBkYXRlLk1vbnRoO1xyXG4gICAgICAgICAgICB2YXIgbmV3U2VsZWN0ZWREYXkgPSBkYXRlLkRheTtcclxuXHJcbiAgICAgICAgICAgIGlmKG5ld1NlbGVjdGVkWWVhciAhPSBTZWxlY3RlZFllYXIgfHxcclxuICAgICAgICAgICAgICAgIG5ld1NlbGVjdGVkTW9udGggIT0gU2VsZWN0ZWRNb250aCB8fFxyXG4gICAgICAgICAgICAgICAgbmV3U2VsZWN0ZWREYXkgIT0gU2VsZWN0ZWREYXkgfHwgZGF0ZSA9PSBEYXRlVGltZS5Ub2RheSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgU2VsZWN0ZWRZZWFyID0gbmV3U2VsZWN0ZWRZZWFyO1xyXG4gICAgICAgICAgICAgICAgU2VsZWN0ZWRNb250aCA9IG5ld1NlbGVjdGVkTW9udGg7XHJcbiAgICAgICAgICAgICAgICBTZWxlY3RlZERheSA9IG5ld1NlbGVjdGVkRGF5O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKE9uRGF0ZUNoYW5nZWQgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBPbkRhdGVDaGFuZ2VkKGRhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIFJlZnJlc2hWaWV3KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBBY3Rpb248RGF0ZVRpbWU+IE9uRGF0ZUNoYW5nZWQ7XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHN0cmluZ1tdIERheXMgPSBuZXcgc3RyaW5nW10ge1xyXG4gICAgICAgICAgICBcIk1PXCIsXHJcbiAgICAgICAgICAgIFwiVFVcIixcclxuICAgICAgICAgICAgXCJXRVwiLFxyXG4gICAgICAgICAgICBcIlRIXCIsXHJcbiAgICAgICAgICAgIFwiRlJcIixcclxuICAgICAgICAgICAgXCJTQVwiLFxyXG4gICAgICAgICAgICBcIlNVXCJcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBSZWZyZXNoVmlldygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgZGF0ZSA9IEdldFZpZXdEYXRlVGltZSgpO1xyXG4gICAgICAgICAgICBidG5Ub3AuVGV4dCA9IGRhdGUuVG9TdHJpbmcoXCJkZGQsIGRkIE1NTSB5eXl5XCIpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGRvYyA9IFJldHlwZWQuZG9tLmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaChfYWN0aXZlRGlzcGxheU1vZGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgRGlzcGxheU1vZGUuRGF5OlxyXG4gICAgICAgICAgICAgICAgICAgIGJ0blNlbGVjdGVkUmFuZ2UuVGV4dCA9IGRhdGUuVG9TdHJpbmcoXCJNTU0geXl5eVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgRGF0ZVRpbWUgc3RhcnREYXRlID0gbmV3IERhdGVUaW1lKGRhdGUuWWVhciwgZGF0ZS5Nb250aCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgRGF0ZVRpbWUgZW5kRGF0ZSA9IHN0YXJ0RGF0ZS5BZGRNb250aHMoMSkuQWRkRGF5cygtMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGludCBUb3RhbERheXMgPSAoZW5kRGF0ZSAtIHN0YXJ0RGF0ZSkuRGF5cztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0RGF5SW5kZXggPSAoc3RhcnREYXRlLkRheU9mV2VlayA9PSBEYXlPZldlZWsuU3VuZGF5ID8gNyA6IChpbnQpc3RhcnREYXRlLkRheU9mV2VlaykgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGludCBvZmZzZXRTdGFydCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50IHJvdyA9IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIERhdGVUaW1lIHN0YXJ0T3V0c2lkZSA9IHN0YXJ0RGF5SW5kZXggPT0gMCA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZSA6IHN0YXJ0RGF0ZS5BZGREYXlzKC1zdGFydERheUluZGV4KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZERheUluZGV4ID0gKGVuZERhdGUuRGF5T2ZXZWVrID09IERheU9mV2Vlay5TdW5kYXkgPyA3IDogKGludCllbmREYXRlLkRheU9mV2VlaykgLSAxO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgNDI7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERhdGVUaW1lIGN1ckRhdGUgPSBzdGFydE91dHNpZGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnRuID0gbmV3IFNpbXBsZUJ1dHRvbigpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRleHQgPSBjdXJEYXRlLkRheS5Ub1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQm91bmRzID0gbmV3IFZlY3RvcjQoXCIoMTAwJSAqIFwiICsgKG9mZnNldFN0YXJ0ICogMC4xNDI4KSArIFwiKVwiLCBcIigoKDEwMCUgLSBcIiArIChIZWxwZXIuTm90RGVza3RvcCA/IDI5IDogMTYpICsgXCJweCkgKiBcIiArICgocm93IC0gMSkgKiAwLjE2NjYpICsgXCIpICsgXCIgKyAoSGVscGVyLk5vdERlc2t0b3AgPyAyOSA6IDE2KSArIFwicHgpXCIsIFwiKDEwMCUgKiAwLjE0MjgpXCIsIFwiKCgxMDAlIC0gXCIgKyAoSGVscGVyLk5vdERlc2t0b3AgPyAyOSA6IDE2KSArIFwicHgpICogXCIgKyAwLjE2NjYgKyBcIilcIiksIC8vICBvZmZzZXRTdGFydCAqIDMwLCAgKDIyICogcm93KSAtIDYsIDMwLCAyMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSXRlbUNsaWNrID0gKGV2KSA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKEdldFZpZXdEYXRlVGltZSgpID09IGN1ckRhdGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihPblJlcXVlc3RUb0Nsb3NlICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPblJlcXVlc3RUb0Nsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldFZpZXdEYXRlVGltZShjdXJEYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoSGVscGVyLk5vdERlc2t0b3ApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bi5TdHlsZS5mb250U2l6ZSA9IFwiMTRweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuLlN0eWxlLmZvbnRXZWlnaHQgPSBcImJvbGRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihjdXJEYXRlID09IGRhdGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bi5DbGFzc0xpc3QuYWRkKFwic2ltcGxlYnV0dG9uLWFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidG4uU3R5bGUuYm9yZGVyQ29sb3IgPSBcInRyYW5zcGFyZW50XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihjdXJEYXRlIDwgc3RhcnREYXRlIHx8IGN1ckRhdGUgPiBlbmREYXRlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG4uU3R5bGUuY29sb3IgPSBcInJnYigyMTEsIDIxMSwgMjExKVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoY3VyRGF0ZS5EYXlPZldlZWsgPT0gRGF5T2ZXZWVrLlNhdHVyZGF5IHx8IGN1ckRhdGUuRGF5T2ZXZWVrID09IERheU9mV2Vlay5TdW5kYXkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bi5TdHlsZS5jb2xvciA9IFwicmdiKDE5MSwgMTEsIDExKVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuLlN0eWxlLmZpbHRlciA9IFwiYnJpZ2h0bmVzcygxMTAlKVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuLlN0eWxlLmZpbHRlciA9IFwiYnJpZ2h0bmVzcygxMTAlKVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bi5Db250ZW50Lm9ua2V5ZG93biA9IEJsb2NrVGFiRXZlbnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2MuYXBwZW5kQ2hpbGQ8UmV0eXBlZC5kb20uTm9kZT4oKFJldHlwZWQuZG9tLk5vZGUpYnRuKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFN0YXJ0Kys7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihvZmZzZXRTdGFydCA+IDYpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdysrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0U3RhcnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydE91dHNpZGUgPSBzdGFydE91dHNpZGUuRGF0ZS5BZGREYXlzKDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzdGFydE91dHNpZGUuSG91ciA9PSAyMylcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRPdXRzaWRlID0gc3RhcnRPdXRzaWRlLkFkZEhvdXJzKDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IoaW50IHggPSAwOyB4IDwgNzsgeCsrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhYmVsID0gTGFiZWwoRGF5c1t4XSwgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLlNldExvY2F0aW9uKFwiKDEwMCUgKiBcIiArICh4ICogMC4xNDI4KSArIFwiICsgKCgxMDAlICogMC4xNDI4KSAqIDAuNDUpIC0gNnB4KVwiLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9Cb3VuZHMgPSBuZXcgVmVjdG9yNChcIigxMDAlICogXCIgKyAob2Zmc2V0U3RhcnQgKiAwLjE0MjgpICsgXCIpXCIsIFwiKCgxMDAlICogXCIgKyAocm93ICogMC4xNjY2KSArIFwiKSArICgxMDAlICogMC4xNjY2KSlcIiwgXCIoMTAwJSAqIDAuMTQyOClcIiwgXCIoKDEwMCUgKiBcIiArIDAuMTY2NiArIFwiKSArICgxMDAlICogMC4xNjY2KSlcIiksIC8vICBvZmZzZXRTdGFydCAqIDMwLCAgKDIyICogcm93KSAtIDYsIDMwLCAyMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwuc3R5bGUuZm9udFNpemUgPSBcIjE0cHhcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jLmFwcGVuZENoaWxkPEhUTUxTcGFuRWxlbWVudD4obGFiZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEaXNwbGF5TW9kZS5Nb250aDpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERpc3BsYXlNb2RlLlllYXI6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgQ29udGVudFJhbmdlLkNvbnRlbnQuRW1wdHkoKTsgLy8gZW1wdHkgYW5kIHJlLWNyZWF0ZVxyXG4gICAgICAgICAgICBDb250ZW50UmFuZ2UuQ29udGVudC5BcHBlbmRDaGlsZChkb2MpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEFjdGlvbiBPblJlcXVlc3RUb0Nsb3NlO1xyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBCbG9ja1RhYkV2ZW50KFJldHlwZWQuZG9tLktleWJvYXJkRXZlbnQgZXYpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihldi5rZXlDb2RlID09IDkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKE9uUmVxdWVzdFRvQ2xvc2UgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBPblJlcXVlc3RUb0Nsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgRGF0ZUNvbnRyb2woRGF0ZVRpbWUgc3RhcnREYXRlKSA6IGJhc2UoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgU2l6ZSA9IG5ldyBWZWN0b3IyKDIzMCwgMjQ1KTtcclxuXHJcblxyXG4gICAgICAgICAgICB2YXIgZG9jID0gUmV0eXBlZC5kb20uZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG5cclxuICAgICAgICAgICAgQ29udGVudC5vbmtleWRvd24gPSBCbG9ja1RhYkV2ZW50O1xyXG5cclxuICAgICAgICAgICAgYnRuVG9wID0gbmV3IFNpbXBsZUJ1dHRvbigpO1xyXG4gICAgICAgICAgICBidG5Ub3AuU3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoLTUwJSwgMClcIjtcclxuICAgICAgICAgICAgYnRuVG9wLlN0eWxlLmxlZnQgPSBcIjUwJVwiO1xyXG4gICAgICAgICAgICBidG5Ub3AuU3R5bGUubWFyZ2luUmlnaHQgPSBcIjUwJVwiO1xyXG4gICAgICAgICAgICBidG5Ub3AuVG9wID0gNjtcclxuICAgICAgICAgICAgYnRuVG9wLldpZHRoID0gXCJhdXRvXCI7XHJcbiAgICAgICAgICAgIGJ0blRvcC5TdHlsZS5ib3JkZXJDb2xvciA9IFwidHJhbnNwYXJlbnRcIjtcclxuICAgICAgICAgICAgYnRuVG9wLkNvbnRlbnQub25rZXlkb3duID0gQmxvY2tUYWJFdmVudDtcclxuXHJcbiAgICAgICAgICAgIGJ0blNlbGVjdGVkUmFuZ2UgPSBuZXcgU2ltcGxlQnV0dG9uKClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgSXRlbUNsaWNrID0gKGV2KSA9PlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIE1vdmVVcCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgYnRuU2VsZWN0ZWRSYW5nZS5TdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZSgtNTAlLCAwKVwiO1xyXG4gICAgICAgICAgICBidG5TZWxlY3RlZFJhbmdlLlN0eWxlLmxlZnQgPSBcIjUwJVwiO1xyXG4gICAgICAgICAgICBidG5TZWxlY3RlZFJhbmdlLlN0eWxlLm1hcmdpblJpZ2h0ID0gXCI1MCVcIjtcclxuICAgICAgICAgICAgYnRuU2VsZWN0ZWRSYW5nZS5Ub3AgPSAzMDtcclxuICAgICAgICAgICAgYnRuU2VsZWN0ZWRSYW5nZS5XaWR0aCA9IFwiYXV0b1wiO1xyXG4gICAgICAgICAgICBidG5TZWxlY3RlZFJhbmdlLlN0eWxlLmJvcmRlckNvbG9yID0gXCJ0cmFuc3BhcmVudFwiO1xyXG4gICAgICAgICAgICBidG5TZWxlY3RlZFJhbmdlLkNvbnRlbnQub25rZXlkb3duID0gQmxvY2tUYWJFdmVudDtcclxuXHJcbiAgICAgICAgICAgIGJ0bkxlZnQgPSBuZXcgU2ltcGxlQnV0dG9uKCkgeyBUZXh0ID0gXCI8XCIsIExvY2F0aW9uID0gbmV3IFZlY3RvcjIoMTQsIDM2KSwgU2l6ZSA9IG5ldyBWZWN0b3IyKDEzLCAxMyksIEl0ZW1DbGljayA9IChldikgPT4geyBNb3ZlTGVmdCgpOyB9IH07XHJcbiAgICAgICAgICAgIGJ0bkxlZnQuQ29udGVudC5vbmtleWRvd24gPSBCbG9ja1RhYkV2ZW50O1xyXG5cclxuICAgICAgICAgICAgYnRuUmlnaHQgPSBuZXcgU2ltcGxlQnV0dG9uKCkgeyBUZXh0ID0gXCI+XCIsIExvY2F0aW9uID0gbmV3IFZlY3RvcjIoXCIoMTAwJSAtIDI2cHgpXCIsIDM2KSwgU2l6ZSA9IG5ldyBWZWN0b3IyKDEzLCAxMyksIEl0ZW1DbGljayA9IChldikgPT4geyBNb3ZlUmlnaHQoKTsgfSB9O1xyXG4gICAgICAgICAgICBidG5SaWdodC5Db250ZW50Lm9ua2V5ZG93biA9IG5ldyBSZXR5cGVkLmRvbS5IVE1MRWxlbWVudC5vbmtleWRvd25GbihCbG9ja1RhYkV2ZW50KTtcclxuXHJcbiAgICAgICAgICAgIGJ0bkxlZnQuU3R5bGUuYm9yZGVyUmFkaXVzID0gXCI1MCVcIjtcclxuICAgICAgICAgICAgYnRuUmlnaHQuU3R5bGUuYm9yZGVyUmFkaXVzID0gXCI1MCVcIjtcclxuXHJcbiAgICAgICAgICAgIGJ0bkxlZnQuU3R5bGUubGluZUhlaWdodCA9IFwiMFwiO1xyXG4gICAgICAgICAgICBidG5SaWdodC5TdHlsZS5saW5lSGVpZ2h0ID0gXCIwXCI7XHJcblxyXG4gICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYnRuU2VsZWN0ZWRSYW5nZS5TdHlsZS5mb250U2l6ZSA9IFwiMTRweFwiO1xyXG4gICAgICAgICAgICAgICAgYnRuU2VsZWN0ZWRSYW5nZS5IZWlnaHQgPSAzNjtcclxuICAgICAgICAgICAgICAgIGJ0blNlbGVjdGVkUmFuZ2UuVG9wID0gNDI7XHJcblxyXG4gICAgICAgICAgICAgICAgYnRuVG9wLlN0eWxlLmZvbnRTaXplID0gXCIxNHB4XCI7XHJcbiAgICAgICAgICAgICAgICBidG5Ub3AuSGVpZ2h0ID0gMzY7XHJcblxyXG4gICAgICAgICAgICAgICAgYnRuTGVmdC5TaXplID0gbmV3IFZlY3RvcjIoMzYsIDM2KTtcclxuICAgICAgICAgICAgICAgIGJ0bkxlZnQuU3R5bGUuZm9udFNpemUgPSBcIjE0cHhcIjtcclxuICAgICAgICAgICAgICAgIGJ0bkxlZnQuVG9wID0gMjA7XHJcblxyXG4gICAgICAgICAgICAgICAgYnRuUmlnaHQuU2l6ZSA9IG5ldyBWZWN0b3IyKDM2LCAzNik7XHJcbiAgICAgICAgICAgICAgICBidG5SaWdodC5TdHlsZS5mb250U2l6ZSA9IFwiMTRweFwiO1xyXG4gICAgICAgICAgICAgICAgYnRuUmlnaHQuVG9wID0gMjA7XHJcbiAgICAgICAgICAgICAgICBidG5SaWdodC5MZWZ0ID0gXCIoMTAwJSAtIDUwcHgpXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgQ29udGVudFJhbmdlID0gbmV3IENvbnRyb2woKSB7IFNpemUgPSBuZXcgVmVjdG9yMihcIigxMDAlIC0gMjBweClcIiwgXCIoMTAwJSAtIDE0N3B4KVwiKSwgTG9jYXRpb24gPSBuZXcgVmVjdG9yMigxMSwgOTApIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDb250ZW50UmFuZ2UgPSBuZXcgQ29udHJvbCgpIHsgU2l6ZSA9IG5ldyBWZWN0b3IyKFwiKDEwMCUgLSAyMHB4KVwiLCBcIigxMDAlIC0gOTJweClcIiksIExvY2F0aW9uID0gbmV3IFZlY3RvcjIoMTEsIDYwKSB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBDb250ZW50UmFuZ2UuQ29udGVudC5vbmtleWRvd24gPSBCbG9ja1RhYkV2ZW50O1xyXG5cclxuICAgICAgICAgICAgYnRuVG9kYXkgPSBuZXcgU2ltcGxlQnV0dG9uKClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgVGV4dCA9IFwiVG9kYXlcIixcclxuICAgICAgICAgICAgICAgIFdpZHRoID0gNTAsXHJcbiAgICAgICAgICAgICAgICBJdGVtQ2xpY2sgPSAoZXYpID0+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgQWN0aXZlRGlzcGxheU1vZGUgPSBEaXNwbGF5TW9kZS5EYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgU2V0Vmlld0RhdGVUaW1lKERhdGVUaW1lLlRvZGF5KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoT25EYXRlQ2hhbmdlZCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBPbkRhdGVDaGFuZ2VkKERhdGVUaW1lLlRvZGF5KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoR2V0Vmlld0RhdGVUaW1lKCkgPT0gRGF0ZVRpbWUuVG9kYXkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihPblJlcXVlc3RUb0Nsb3NlICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPblJlcXVlc3RUb0Nsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgYnRuVG9kYXkuU3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoLTUwJSwgMClcIjtcclxuICAgICAgICAgICAgYnRuVG9kYXkuU3R5bGUubGVmdCA9IFwiNTAlXCI7XHJcbiAgICAgICAgICAgIGJ0blRvZGF5LlN0eWxlLm1hcmdpblJpZ2h0ID0gXCI1MCVcIjtcclxuXHJcbiAgICAgICAgICAgIGlmKEhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBidG5Ub2RheS5Ub3AgPSBcIigxMDAlIC0gNTFweClcIjtcclxuICAgICAgICAgICAgICAgIGJ0blRvZGF5LlN0eWxlLmZvbnRTaXplID0gXCIxNHB4XCI7XHJcbiAgICAgICAgICAgICAgICBidG5Ub2RheS5IZWlnaHQgPSA0NTtcclxuICAgICAgICAgICAgICAgIGJ0blRvZGF5LlN0eWxlLm1pbldpZHRoID0gXCI2MHB4XCI7XHJcbiAgICAgICAgICAgICAgICBidG5Ub2RheS5XaWR0aCA9IFwiKDEwMCUgKiAwLjE0MjgpXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBidG5Ub2RheS5Ub3AgPSBcIigxMDAlIC0gMjZweClcIjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYnRuVG9kYXkuQ29udGVudC5vbmtleWRvd24gPSBCbG9ja1RhYkV2ZW50O1xyXG5cclxuICAgICAgICAgICAgZG9jLkFwcGVuZENoaWxkcmVuKGJ0blRvcCwgYnRuTGVmdCwgYnRuU2VsZWN0ZWRSYW5nZSwgYnRuUmlnaHQsIENvbnRlbnRSYW5nZSwgYnRuVG9kYXkpO1xyXG4gICAgICAgICAgICBpZihzdGFydERhdGUgPT0gRGF0ZVRpbWUuTWluVmFsdWUpXHJcbiAgICAgICAgICAgICAgICBzdGFydERhdGUgPSBEYXRlVGltZS5Ub2RheTtcclxuXHJcbiAgICAgICAgICAgIENvbnRlbnQuYXBwZW5kQ2hpbGQ8RG9jdW1lbnRGcmFnbWVudD4oZG9jKTtcclxuXHJcbiAgICAgICAgICAgIFNldFZpZXdEYXRlVGltZShzdGFydERhdGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgTW92ZUxlZnQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgTW92ZUxlZnRPclJpZ2h0KC0xKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIE1vdmVVcCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIC8vaWYoX2FjdGl2ZURpc3BsYXlNb2RlICE9IERpc3BsYXlNb2RlLlllYXIpXHJcbiAgICAgICAgICAgIC8ve1xyXG4gICAgICAgICAgICAvLyAgICBfYWN0aXZlRGlzcGxheU1vZGUrKztcclxuICAgICAgICAgICAgLy8gICAgUmVmcmVzaFZpZXcoKTtcclxuICAgICAgICAgICAgLy99XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBNb3ZlTGVmdE9yUmlnaHQoaW50IHRpbWVzVmFsdWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgZGF0ZSA9IEdldFZpZXdEYXRlVGltZSgpO1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoKF9hY3RpdmVEaXNwbGF5TW9kZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGNhc2UgRGlzcGxheU1vZGUuRGF5OlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBkYXRlLkFkZE1vbnRocygoMSAqIHRpbWVzVmFsdWUpKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERpc3BsYXlNb2RlLk1vbnRoOlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBkYXRlLkFkZE1vbnRocygoMTIgKiB0aW1lc1ZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEaXNwbGF5TW9kZS5ZZWFyOlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBkYXRlLkFkZFllYXJzKCgxMjAgKiB0aW1lc1ZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFNldFZpZXdEYXRlVGltZShkYXRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIE1vdmVSaWdodCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBNb3ZlTGVmdE9yUmlnaHQoMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZW51bSBEaXNwbGF5TW9kZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRGF5LFxyXG4gICAgICAgICAgICBNb250aCxcclxuICAgICAgICAgICAgWWVhclxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbTtcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIFNpbXBsZUJ1dHRvbiA6IENvbnRyb2xcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgQWN0aW9uPFNpbXBsZUJ1dHRvbj4gSXRlbUNsaWNrO1xyXG4gICAgICAgIHB1YmxpYyBGb3JtIFBhcmVudEZvcm0gPSBudWxsO1xyXG4gICAgICAgIHB1YmxpYyBEaWFsb2dSZXN1bHRFbnVtIERpYWxvZ1Jlc3VsdCA9IERpYWxvZ1Jlc3VsdEVudW0uTm9uZTtcclxuICAgICAgICBwcml2YXRlIFJldHlwZWQuZG9tLkhUTUxJbWFnZUVsZW1lbnQgX2ltYWdlRWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSBzdHJpbmcgX2ltYWdlO1xyXG4gICAgICAgIHB1YmxpYyBldmVudCBFdmVudEhhbmRsZXIgQ2xpY2s7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICBwdWJsaWMgc3RyaW5nIEltYWdlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gX2ltYWdlOyB9XHJcbiAgICAgICAgICAgIHNldCB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZSArIFwiXCIpLlRyaW0oKTtcclxuICAgICAgICAgICAgICAgIGlmKHZhbHVlICE9IF9pbWFnZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBfaW1hZ2UgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBfUHJvY2Vzc0J1dHRvbkltYWdlKCk7XHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGJvb2wgX3VzZUJhc2U2NEltYWdlO1xyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBVc2VCYXNlNjRJbWFnZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIF91c2VCYXNlNjRJbWFnZTsgfVxyXG4gICAgICAgICAgICBzZXQge1xyXG4gICAgICAgICAgICAgICAgaWYoX3VzZUJhc2U2NEltYWdlICE9IHZhbHVlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIF91c2VCYXNlNjRJbWFnZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIF9Qcm9jZXNzQnV0dG9uSW1hZ2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBib29sIF9pbWFnZVJpZ2h0QWxpZ247XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIEltYWdlUmlnaHRBbGlnblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIF9pbWFnZVJpZ2h0QWxpZ247IH1cclxuICAgICAgICAgICAgc2V0IHtcclxuICAgICAgICAgICAgICAgIGlmKF9pbWFnZVJpZ2h0QWxpZ24gIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2ltYWdlUmlnaHRBbGlnbiA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIF9Qcm9jZXNzQnV0dG9uSW1hZ2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGludCBfYnV0dG9uSW1hZ2VTaXplO1xyXG5cclxuICAgICAgICBwdWJsaWMgaW50IEJ1dHRvbkltYWdlU2l6ZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIF9idXR0b25JbWFnZVNpemU7IH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKF9idXR0b25JbWFnZVNpemUgIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2J1dHRvbkltYWdlU2l6ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIF9Qcm9jZXNzQnV0dG9uSW1hZ2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICBwcml2YXRlIHZvaWQgX1Byb2Nlc3NCdXR0b25JbWFnZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKF9pbWFnZSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKF9pbWFnZUVsZW1lbnQgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBfaW1hZ2VFbGVtZW50LkRlbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9pbWFnZUVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihfaW1hZ2VFbGVtZW50ID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2ltYWdlRWxlbWVudCA9IG5ldyBSZXR5cGVkLmRvbS5IVE1MSW1hZ2VFbGVtZW50KCk7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1lbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2ltYWdlRWxlbWVudC5EZWxldGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF9pbWFnZUVsZW1lbnQuU2V0SW1hZ2UoX2ltYWdlLCAhX3VzZUJhc2U2NEltYWdlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgcGFkZGluZyA9IF9idXR0b25JbWFnZVNpemUgPT0gMCA/IFwiMTZweFwiIDogX2J1dHRvbkltYWdlU2l6ZS5Ub1B4KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgX2ltYWdlRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBwYWRkaW5nO1xyXG4gICAgICAgICAgICAgICAgX2ltYWdlRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcclxuICAgICAgICAgICAgICAgIF9pbWFnZUVsZW1lbnQuc3R5bGUudG9wID0gXCIxcHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZighX2ltYWdlUmlnaHRBbGlnbilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBfaW1hZ2VFbGVtZW50LnN0eWxlLmJhY2tncm91bmRQb3NpdGlvbiA9IFwibGVmdFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIF9pbWFnZUVsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSBwYWRkaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIF9pbWFnZUVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2ltYWdlRWxlbWVudC5zdHlsZS5sZWZ0ID0gXCIxcHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoQ29udGVudC5sYXN0Q2hpbGQgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRlbnQuYXBwZW5kQ2hpbGQ8SFRNTEltYWdlRWxlbWVudD4oX2ltYWdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRlbnQuaW5zZXJ0QmVmb3JlPEhUTUxJbWFnZUVsZW1lbnQ+KF9pbWFnZUVsZW1lbnQsIENvbnRlbnQubGFzdENoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBfaW1hZ2VFbGVtZW50LnN0eWxlLnJpZ2h0ID0gXCIxcHhcIjtcclxuICAgICAgICAgICAgICAgICAgICBfaW1hZ2VFbGVtZW50LnN0eWxlLmxlZnQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIF9pbWFnZUVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZFBvc2l0aW9uID0gXCJyaWdodFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIF9pbWFnZUVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gcGFkZGluZztcclxuICAgICAgICAgICAgICAgICAgICBfaW1hZ2VFbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgQ29udGVudC5hcHBlbmRDaGlsZDxIVE1MSW1hZ2VFbGVtZW50PihfaW1hZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH0gICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFNpbXBsZUJ1dHRvbigpIDogdGhpcyhcImJ1dHRvblwiLCB0cnVlKVxyXG4gICAgICAgIHtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgU2ltcGxlQnV0dG9uKHN0cmluZyBidXR0b24gPSBcImJ1dHRvblwiLCBib29sIGFjID0gdHJ1ZSkgOiBiYXNlKFwic2ltcGxlYnV0dG9uXCIsIGZhbHNlLCBidXR0b24sIGFjKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ29udGVudC5vbmNvbnRleHRtZW51ID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpZihhYylcclxuICAgICAgICAgICAgICAgIFN0eWxlLmZvbnQgPSBTZXR0aW5ncy5Gb250O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5TZXRTaXplKFwiNjlweFwiLCBcIjIwcHhcIik7XHJcblxyXG4gICAgICAgICAgICBDb250ZW50Lm9uY2xpY2sgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKGVuYWJsZWQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5Db250ZW50LmJsdXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoRGlhbG9nUmVzdWx0ICE9IERpYWxvZ1Jlc3VsdEVudW0uTm9uZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBQYXJlbnRGb3JtICE9IG51bGwgJiYgUGFyZW50Rm9ybS5Jc0RpYWxvZygpKSAvLyBKdXN0IGluY2FzZSB3ZSBzZXQgZGlzYWJsZWQgYW5kIGlzIGRpYWxvZ1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUGFyZW50Rm9ybS5EaWFsb2dSZXN1bHQgPSBEaWFsb2dSZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihJdGVtQ2xpY2sgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgSXRlbUNsaWNrKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihDbGljayAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBDbGljayh0aGlzLCBFdmVudEFyZ3MuRW1wdHkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihEaWFsb2dSZXN1bHQgIT0gRGlhbG9nUmVzdWx0RW51bS5Ob25lICYmIFBhcmVudEZvcm0uRGlhbG9nUmVzdWx0ICE9IERpYWxvZ1Jlc3VsdEVudW0uTm9uZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBQYXJlbnRGb3JtICE9IG51bGwgJiYgUGFyZW50Rm9ybS5Jc0RpYWxvZygpKSAvLyBKdXN0IGluY2FzZSB3ZSBzZXQgZGlzYWJsZWQgYW5kIGlzIGRpYWxvZ1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUGFyZW50Rm9ybS5DbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGV2LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBDb250ZW50Lm9uZGJsY2xpY2sgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgZXYuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIENvbnRlbnQub25tb3VzZWRvd24gPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgZXYuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIENvbnRlbnQub25tb3VzZXVwID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGV2LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBUZXh0XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gdGhpcy5Db250ZW50LkFzPFJldHlwZWQuZG9tLkhUTUxCdXR0b25FbGVtZW50PigpLmlubmVySFRNTDsgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoVGV4dCAhPSB2YWx1ZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkNvbnRlbnQuQXM8UmV0eXBlZC5kb20uSFRNTEJ1dHRvbkVsZW1lbnQ+KCkuaW5uZXJIVE1MID0gdmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKF9pbWFnZUVsZW1lbnQgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbWFnZUVsZW1lbnQuRGVsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbWFnZUVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIF9Qcm9jZXNzQnV0dG9uSW1hZ2UoKTtcclxuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgYm9vbCBlbmFibGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgRW5hYmxlZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIGVuYWJsZWQ7IH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGlmKGVuYWJsZWQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5Db250ZW50LnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQ29udGVudC5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCAoIWVuYWJsZWQpLlRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIEdyaWRMb29rdXBFZGl0IDogQ29udHJvbFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBHcmlkVmlldyBncmlkVmlldztcclxuICAgICAgICBwdWJsaWMgc3RyaW5nIEZpZWxkTmFtZTtcclxuICAgICAgICBwdWJsaWMgc3RyaW5nIERpc3BsYXlOYW1lO1xyXG4gICAgICAgIHByaXZhdGUgYm9vbCBWaXNpYmxlO1xyXG5cclxuICAgICAgICBwdWJsaWMgR3JpZExvb2t1cEVkaXQoKSA6IGJhc2UoXCJpbnB1dGNvbnRyb2xcIiwgQ29tYm9Cb3hUeXBlcy5EZWZhdWx0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ3JpZFZpZXcgPSBuZXcgR3JpZFZpZXcodHJ1ZSwgdHJ1ZSkgeyBTaXplID0gbmV3IFZlY3RvcjIoMjUwLCA0MDApIH07XHJcbiAgICAgICAgICAgIGdyaWRWaWV3LkNvbnRleHRNZW51ID0gbnVsbDtcclxuICAgICAgICAgICAgZ3JpZFZpZXcuT25Gb2N1c2VkUm93Q2hhbmdlZCA9IChyb3dIYW5kbGUsIFByZXZSb3doYW5kbGUpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuQ29udGVudC5FbXB0eSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHJvd0hhbmRsZSA+IC0xKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQ29udGVudC5BcHBlbmRDaGlsZChuZXcgUmV0eXBlZC5kb20uSFRNTE9wdGlvbkVsZW1lbnQoKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJIVE1MID0gKGdyaWRWaWV3LkdldFJvd0NlbGxWYWx1ZShyb3dIYW5kbGUsIERpc3BsYXlOYW1lKSBhcyBzdHJpbmcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IChncmlkVmlldy5HZXRSb3dDZWxsVmFsdWUocm93SGFuZGxlLCBGaWVsZE5hbWUpIGFzIHN0cmluZylcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKFZpc2libGUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgQ2xvc2VQb3B1cCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZ3JpZFZpZXcuQ29udGVudC5vbm1vdXNlbGVhdmUgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIENsb3NlUG9wdXAoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5Db250ZW50Lm9ubW91c2Vkb3duID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZXYuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBpZihWaXNpYmxlKVxyXG4gICAgICAgICAgICAgICAgICAgIENsb3NlUG9wdXAoKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBTaG93UG9wdXAoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNob3dQb3B1cCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihWaXNpYmxlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB2YXIgeCA9IChSZXR5cGVkLmRvbS5ET01SZWN0KXRoaXMuQ29udGVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgZ3JpZFZpZXcuTG9jYXRpb24gPSBuZXcgVmVjdG9yMigoaW50KXgubGVmdCwgKGludCkoeC50b3AgKyB4LmhlaWdodCkpO1xyXG5cclxuICAgICAgICAgICAgQ29udGV4dE1lbnUuVG90YWxDb250ZXh0SGFuZGxlcysrO1xyXG4gICAgICAgICAgICB0aGlzLkNvbnRlbnQucGFyZW50RWxlbWVudC5BcHBlbmRDaGlsZChncmlkVmlldyk7XHJcblxyXG4gICAgICAgICAgICBncmlkVmlldy5SZW5kZXJHcmlkKCk7XHJcblxyXG4gICAgICAgICAgICBncmlkVmlldy5Db250ZW50LnN0eWxlLnpJbmRleCA9IChDb250ZXh0TWVudS5Ub3RhbENvbnRleHRIYW5kbGVzICsgU2V0dGluZ3MuQ29udGV4dE1lbnVTdGFydGluZ1pJbmRleCkuVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgVmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBDbG9zZVBvcHVwKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKFZpc2libGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGdyaWRWaWV3LkNvbnRlbnQucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZDxSZXR5cGVkLmRvbS5Ob2RlPigoUmV0eXBlZC5kb20uTm9kZSlncmlkVmlldyk7XHJcbiAgICAgICAgICAgICAgICBDb250ZXh0TWVudS5Ub3RhbENvbnRleHRIYW5kbGVzLS07XHJcbiAgICAgICAgICAgICAgICBWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJ1c2luZyBCcmlkZ2U7XHJcbnVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5EaWFnbm9zdGljcztcclxudXNpbmcgU3lzdGVtLkxpbnE7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgR3JpZFZpZXcgOiBDb250cm9sLCBJUHJpbnRhYmxlXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIFJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50IEdyaWRGaW5kUGFuZWw7XHJcblxyXG4gICAgICAgIHB1YmxpYyBSZXR5cGVkLmRvbS5IVE1MRGl2RWxlbWVudCBHcmlkSGVhZGVyO1xyXG4gICAgICAgIHB1YmxpYyBSZXR5cGVkLmRvbS5IVE1MRGl2RWxlbWVudCBHcmlkSGVhZGVyQ29udGFpbmVyO1xyXG4gICAgICAgIHB1YmxpYyBSZXR5cGVkLmRvbS5IVE1MRGl2RWxlbWVudCBHcmlkQm9keUNvbnRhaW5lcjtcclxuICAgICAgICBwdWJsaWMgUmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQgR3JpZEJvZHk7XHJcblxyXG4gICAgICAgIHByaXZhdGUgUmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQgQm90dG9uT2ZUYWJsZTtcclxuICAgICAgICBwcml2YXRlIFJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50IFJpZ2h0T2ZUYWJsZTtcclxuICAgICAgICBwcml2YXRlIFJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50IFJpZ2h0T2ZUYWJsZUhlYWRlcjtcclxuXHJcbiAgICAgICAgcHVibGljIFRleHRJbnB1dCBTZWFyY2hUZXh0SW5wdXQ7XHJcbiAgICAgICAgcHVibGljIFNpbXBsZUJ1dHRvbiBidG5GaW5kO1xyXG4gICAgICAgIHB1YmxpYyBTaW1wbGVCdXR0b24gYnRuQ2xlYXI7XHJcbiAgICAgICAgcHVibGljIFNpbXBsZUJ1dHRvbiBidG5DbG9zZTtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBDb250ZXh0SXRlbSBfc2hvd0ZpbmRQYW5lbENvbnRleHRJdGVtO1xyXG5cclxuICAgICAgICBwcml2YXRlIGJvb2wgX2ZpbmRQYW5lbFZpc2libGU7XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIEZpbmRQYW5lbFZpc2libGVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBfZmluZFBhbmVsVmlzaWJsZTsgfVxyXG4gICAgICAgICAgICBzZXQge1xyXG4gICAgICAgICAgICAgICAgaWYoX2ZpbmRQYW5lbFZpc2libGUgIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNob3dGaW5kUGFuZWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENsb3NlRmluZFBhbmVsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBSZXNvbHZlU2VhcmNoRGF0YUluZGV4KClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAoVmlzaWJsZVJvd0hhbmRsZXMgIT0gbnVsbCAmJiBWaXNpYmxlUm93SGFuZGxlcy5Db3VudCA+IDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBib29sIF9oaWdobGlnaFNlYXJjaFJlc3VsdHMgPSB0cnVlO1xyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBIaWdobGlnaFNlYXJjaFJlc3VsdHNcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBfaGlnaGxpZ2hTZWFyY2hSZXN1bHRzOyB9XHJcbiAgICAgICAgICAgIHNldCB7XHJcbiAgICAgICAgICAgICAgICBpZihfaGlnaGxpZ2hTZWFyY2hSZXN1bHRzICE9IHZhbHVlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIF9oaWdobGlnaFNlYXJjaFJlc3VsdHMgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBSZW5kZXJHcmlkKCk7XHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgU2hvd0ZpbmRQYW5lbCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZighX2ZpbmRQYW5lbFZpc2libGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIF9zaG93RmluZFBhbmVsQ29udGV4dEl0ZW0uQ2FwdGlvbiA9IFwiQ2xvc2UgRmluZCBQYW5lbFwiO1xyXG4gICAgICAgICAgICAgICAgX2ZpbmRQYW5lbFZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgR3JpZEZpbmRQYW5lbC5zdHlsZS52aXNpYmlsaXR5ID0gXCJpbmhlcml0XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgU2V0RGVmYXVsdFNpemVzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgUmVuZGVyR3JpZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIENsb3NlRmluZFBhbmVsKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKF9maW5kUGFuZWxWaXNpYmxlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBfc2hvd0ZpbmRQYW5lbENvbnRleHRJdGVtLkNhcHRpb24gPSBcIlNob3cgRmluZCBQYW5lbFwiO1xyXG4gICAgICAgICAgICAgICAgX2ZpbmRQYW5lbFZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIEdyaWRGaW5kUGFuZWwuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgU2V0RGVmYXVsdFNpemVzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgUmVuZGVyR3JpZCgpO1xyXG4gICAgICAgICAgICB9ICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBEYXRhVGFibGUgX2RhdGFTb3VyY2UgPSBudWxsO1xyXG5cclxuICAgICAgICBwdWJsaWMgQWN0aW9uPGludCwgaW50PiBPbkZvY3VzZWRSb3dDaGFuZ2VkID0gbnVsbDtcclxuICAgICAgICBwdWJsaWMgQWN0aW9uPGludCwgaW50PiBPbkZvY3VzZWRDb2x1bW5DaGFuZ2VkID0gbnVsbDtcclxuICAgICAgICBwdWJsaWMgQWN0aW9uPGludD4gT25Sb3dEb3VibGVDbGljayA9IG51bGw7XHJcbiAgICAgICAgcHVibGljIEFjdGlvbjxSZXR5cGVkLmRvbS5IVE1MRWxlbWVudCwgaW50PiBPbkN1c3RvbVJvd1N0eWxlID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIEFjdGlvbjxSZXR5cGVkLmRvbS5Nb3VzZUV2ZW50PiBPblJvd0NsaWNrO1xyXG4gICAgICAgIHByb3RlY3RlZCBBY3Rpb248UmV0eXBlZC5kb20uTW91c2VFdmVudD4gT25Eb3VibGVDbGljaztcclxuICAgICAgICBwcm90ZWN0ZWQgQWN0aW9uPFJldHlwZWQuZG9tLk1vdXNlRXZlbnQ+IE9uQ2VsbFJvd01vdXNlRG93bjtcclxuXHJcbiAgICAgICAgcHVibGljIEhhcmRTb2Z0TGlzdDxib29sPiBTZWxlY3RlZFJvd3MgPSBuZXcgSGFyZFNvZnRMaXN0PGJvb2w+KGZhbHNlKTtcclxuICAgICAgICBwdWJsaWMgTGlzdDxpbnQ+IFZpc2libGVSb3dIYW5kbGVzID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgU2V0VmlzaWJsZVJvd0hhbmRsZXM8VD4oTGlzdDxUPiBDZWxscywgYm9vbCBhc2MpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihEYXRhU291cmNlLl9zZWFyY2hBY3RpdmUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKGFzYylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc29ydGVkID0gU3lzdGVtLkxpbnEuRW51bWVyYWJsZS5TZWxlY3Q8VCxTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5LZXlWYWx1ZVBhaXI8aW50LCBUPj4oQ2VsbHNcclxuLChnbG9iYWw6OlN5c3RlbS5GdW5jPFQsIGludCwgZ2xvYmFsOjpTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5LZXlWYWx1ZVBhaXI8aW50LCBUPj4pKCh4LCBpKSA9PiBuZXcgS2V5VmFsdWVQYWlyPGludCwgVD4oaSwgeCkpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuV2hlcmUoKGdsb2JhbDo6U3lzdGVtLkZ1bmM8Z2xvYmFsOjpTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5LZXlWYWx1ZVBhaXI8aW50LCBUPiwgYm9vbD4pKChwKSA9PiBEYXRhU291cmNlLl9zZWFyY2hSZXN1bHRzLkNvbnRhaW5zKHAuS2V5KSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5PcmRlckJ5PFQ+KChnbG9iYWw6OlN5c3RlbS5GdW5jPGdsb2JhbDo6U3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuS2V5VmFsdWVQYWlyPGludCwgVD4sIFQ+KSh4ID0+IHguVmFsdWUpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuVG9MaXN0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFZpc2libGVSb3dIYW5kbGVzID0gU3lzdGVtLkxpbnEuRW51bWVyYWJsZS5TZWxlY3Q8U3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuS2V5VmFsdWVQYWlyPGludCwgVD4saW50Pihzb3J0ZWQsKGdsb2JhbDo6U3lzdGVtLkZ1bmM8Z2xvYmFsOjpTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5LZXlWYWx1ZVBhaXI8aW50LCBUPiwgaW50PikoeCA9PiB4LktleSkpLlRvTGlzdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzb3J0ZWQgPSBTeXN0ZW0uTGlucS5FbnVtZXJhYmxlLlNlbGVjdDxULFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLktleVZhbHVlUGFpcjxpbnQsIFQ+PihDZWxsc1xyXG4sKGdsb2JhbDo6U3lzdGVtLkZ1bmM8VCwgaW50LCBnbG9iYWw6OlN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLktleVZhbHVlUGFpcjxpbnQsIFQ+PikoKHgsIGkpID0+IG5ldyBLZXlWYWx1ZVBhaXI8aW50LCBUPihpLCB4KSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5XaGVyZSgoZ2xvYmFsOjpTeXN0ZW0uRnVuYzxnbG9iYWw6OlN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLktleVZhbHVlUGFpcjxpbnQsIFQ+LCBib29sPikoKHApID0+IERhdGFTb3VyY2UuX3NlYXJjaFJlc3VsdHMuQ29udGFpbnMocC5LZXkpKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLk9yZGVyQnlEZXNjZW5kaW5nPFQ+KChnbG9iYWw6OlN5c3RlbS5GdW5jPGdsb2JhbDo6U3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuS2V5VmFsdWVQYWlyPGludCwgVD4sIFQ+KSh4ID0+IHguVmFsdWUpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuVG9MaXN0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFZpc2libGVSb3dIYW5kbGVzID0gU3lzdGVtLkxpbnEuRW51bWVyYWJsZS5TZWxlY3Q8U3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuS2V5VmFsdWVQYWlyPGludCwgVD4saW50Pihzb3J0ZWQsKGdsb2JhbDo6U3lzdGVtLkZ1bmM8Z2xvYmFsOjpTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5LZXlWYWx1ZVBhaXI8aW50LCBUPiwgaW50PikoeCA9PiB4LktleSkpLlRvTGlzdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoYXNjKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzb3J0ZWQgPSBTeXN0ZW0uTGlucS5FbnVtZXJhYmxlLlNlbGVjdDxULFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLktleVZhbHVlUGFpcjxpbnQsIFQ+PihDZWxsc1xyXG4sKGdsb2JhbDo6U3lzdGVtLkZ1bmM8VCwgaW50LCBnbG9iYWw6OlN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLktleVZhbHVlUGFpcjxpbnQsIFQ+PikoKHgsIGkpID0+IG5ldyBLZXlWYWx1ZVBhaXI8aW50LCBUPihpLCB4KSkpICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5PcmRlckJ5PFQ+KChnbG9iYWw6OlN5c3RlbS5GdW5jPGdsb2JhbDo6U3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuS2V5VmFsdWVQYWlyPGludCwgVD4sIFQ+KSh4ID0+IHguVmFsdWUpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuVG9MaXN0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFZpc2libGVSb3dIYW5kbGVzID0gU3lzdGVtLkxpbnEuRW51bWVyYWJsZS5TZWxlY3Q8U3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuS2V5VmFsdWVQYWlyPGludCwgVD4saW50Pihzb3J0ZWQsKGdsb2JhbDo6U3lzdGVtLkZ1bmM8Z2xvYmFsOjpTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5LZXlWYWx1ZVBhaXI8aW50LCBUPiwgaW50PikoeCA9PiB4LktleSkpLlRvTGlzdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzb3J0ZWQgPSBTeXN0ZW0uTGlucS5FbnVtZXJhYmxlLlNlbGVjdDxULFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLktleVZhbHVlUGFpcjxpbnQsIFQ+PihDZWxsc1xyXG4sKGdsb2JhbDo6U3lzdGVtLkZ1bmM8VCwgaW50LCBnbG9iYWw6OlN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLktleVZhbHVlUGFpcjxpbnQsIFQ+PikoKHgsIGkpID0+IG5ldyBLZXlWYWx1ZVBhaXI8aW50LCBUPihpLCB4KSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5PcmRlckJ5RGVzY2VuZGluZzxUPigoZ2xvYmFsOjpTeXN0ZW0uRnVuYzxnbG9iYWw6OlN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLktleVZhbHVlUGFpcjxpbnQsIFQ+LCBUPikoeCA9PiB4LlZhbHVlKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLlRvTGlzdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBWaXNpYmxlUm93SGFuZGxlcyA9IFN5c3RlbS5MaW5xLkVudW1lcmFibGUuU2VsZWN0PFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLktleVZhbHVlUGFpcjxpbnQsIFQ+LGludD4oc29ydGVkLChnbG9iYWw6OlN5c3RlbS5GdW5jPGdsb2JhbDo6U3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuS2V5VmFsdWVQYWlyPGludCwgVD4sIGludD4pKHggPT4geC5LZXkpKS5Ub0xpc3QoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIF9hbGxvd1Jvd0RyYWcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgQWxsb3dSb3dEcmFnXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gX2FsbG93Um93RHJhZzsgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoX2FsbG93Um93RHJhZyAhPSB2YWx1ZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBfYWxsb3dSb3dEcmFnID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgUmVuZGVyR3JpZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBBdXRvR2VuZXJhdGVDb2x1bW5zRnJvbVNvdXJjZSA9IHRydWU7XHJcbiAgICAgICAgcHVibGljIGJvb2wgQWxsb3dNdWx0aVNlbGVjdGlvbiA9IHRydWU7XHJcblxyXG4gICAgICAgIHByaXZhdGUgYm9vbCBzaG93QXV0b0ZpbHRlclJvdyA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBTaG93QXV0b0ZpbHRlclJvd1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIHNob3dBdXRvRmlsdGVyUm93OyB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihzaG93QXV0b0ZpbHRlclJvdyAhPSB2YWx1ZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93QXV0b0ZpbHRlclJvdyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFzaG93QXV0b0ZpbHRlclJvdylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBGaWx0ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBDb2x1bW5Db3VudCgpOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vRmlsdGVyRWRpdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb2x1bW5zW2ldLkZpbHRlckVkaXQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29sdW1uc1tpXS5GaWx0ZXJWYWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgQ2FsY3VsYXRlVmlzaWJsZVJvd3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgUmVuZGVyR3JpZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBDYWxjdWxhdGVWaXNpYmxlUm93cygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBMaXN0PGludD4gY2FsY1Zpc2libGVSb3dzID0gbmV3IExpc3Q8aW50PigpO1xyXG5cclxuICAgICAgICAgICAgZm9yKGludCB5ID0gMDsgeSA8IFJvd0NvdW50KCk7IHkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYm9vbCBBZGRJbmRleCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKGludCB4ID0gMDsgeCA8IENvbHVtbkNvdW50KCk7IHgrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZighQ29sdW1uc1t4XS5WYWx1ZU1hdGNoRmlsdGVyKHkpKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQWRkSW5kZXggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoQWRkSW5kZXgpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsY1Zpc2libGVSb3dzLkFkZCh5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgVmlzaWJsZVJvd0hhbmRsZXMgPSBjYWxjVmlzaWJsZVJvd3M7XHJcbiAgICAgICAgICAgIFJlbmRlckdyaWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBmbG9hdCBVbml0SGVpZ2h0ID0gMjguMGY7XHJcbiAgICAgICAgcHJpdmF0ZSBib29sIF9jb2x1bW5BdXRvV2lkdGggPSBmYWxzZTtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBpbnQgX2ZvY3VzZWRjb2x1bW4gPSAtMTtcclxuXHJcbiAgICAgICAgcHVibGljIGludCBGb2N1c2VkQ29sdW1uXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9mb2N1c2VkY29sdW1uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZih2YWx1ZSAhPSBGb2N1c2VkQ29sdW1uKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gX2ZvY3VzZWRjb2x1bW47XHJcbiAgICAgICAgICAgICAgICAgICAgX2ZvY3VzZWRjb2x1bW4gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAvL1JlbmRlckdyaWQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZihPbkZvY3VzZWRDb2x1bW5DaGFuZ2VkICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9uRm9jdXNlZENvbHVtbkNoYW5nZWQoX2ZvY3VzZWRjb2x1bW4sIHByZXYpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGludCBfZm9jdXNlZERhdGFIYW5kbGUgPSAtMTtcclxuICAgICAgICBcclxuICAgICAgICBwdWJsaWMgaW50IEZvY3VzZWREYXRhSGFuZGxlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9mb2N1c2VkRGF0YUhhbmRsZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYodmFsdWUgIT0gX2ZvY3VzZWREYXRhSGFuZGxlKVxyXG4gICAgICAgICAgICAgICAgeyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXYgPSBfZm9jdXNlZERhdGFIYW5kbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgX2ZvY3VzZWREYXRhSGFuZGxlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgUmVuZGVyR3JpZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKE9uRm9jdXNlZFJvd0NoYW5nZWQgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgT25Gb2N1c2VkUm93Q2hhbmdlZChfZm9jdXNlZERhdGFIYW5kbGUsIHByZXYpOyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNldERlZmF1bHRTaXplcygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihfY29sdW1uSGVhZGVyc1Zpc2libGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIEdyaWRIZWFkZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwiaW5oZXJpdFwiO1xyXG4gICAgICAgICAgICAgICAgR3JpZEhlYWRlckNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gXCJpbmhlcml0XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoRmluZFBhbmVsVmlzaWJsZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBHcmlkSGVhZGVyQ29udGFpbmVyLlNldEJvdW5kcygwLCA0NywgXCIxMDAlXCIsIFVuaXRIZWlnaHQgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICBHcmlkQm9keUNvbnRhaW5lci5TZXRCb3VuZHMoMCwgVW5pdEhlaWdodCArIDIgKyA0NywgXCIxMDAlXCIsIFwiKDEwMCUgLSBcIiArIChVbml0SGVpZ2h0ICsgMiArIDQ3KSArIFwicHgpXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIEdyaWRIZWFkZXJDb250YWluZXIuU2V0Qm91bmRzKDAsIDAsIFwiMTAwJVwiLCBVbml0SGVpZ2h0ICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgR3JpZEJvZHlDb250YWluZXIuU2V0Qm91bmRzKDAsIFVuaXRIZWlnaHQgKyAyLCBcIjEwMCVcIiwgXCIoMTAwJSAtIFwiICsgKFVuaXRIZWlnaHQgKyAyKSArIFwicHgpXCIpOyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgR3JpZEhlYWRlci5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICAgICAgICAgICAgICAgIEdyaWRIZWFkZXJDb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoRmluZFBhbmVsVmlzaWJsZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBHcmlkQm9keUNvbnRhaW5lci5TZXRCb3VuZHMoMCwgMSArIDQ2LCBcIjEwMCVcIiwgXCIoMTAwJSAtIFwiICsgKDEgKyA0NikgICsgXCJweClcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgR3JpZEJvZHlDb250YWluZXIuU2V0Qm91bmRzKDAsIDEsIFwiMTAwJVwiLCBcIigxMDAlIC0gMXB4KVwiKTtcclxuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgYm9vbCBfY29sdW1uSGVhZGVyc1Zpc2libGUgPSB0cnVlO1xyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBDb2x1bW5IZWFkZXJzVmlzaWJsZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfY29sdW1uSGVhZGVyc1Zpc2libGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKHZhbHVlICE9IF9jb2x1bW5IZWFkZXJzVmlzaWJsZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBfY29sdW1uSGVhZGVyc1Zpc2libGUgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgU2V0RGVmYXVsdFNpemVzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFJlbmRlckdyaWQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgQ29sdW1uQXV0b1dpZHRoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb2x1bW5BdXRvV2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgIEdyaWRCb2R5Q29udGFpbmVyLnN0eWxlLm92ZXJmbG93WCA9IFwiaGlkZGVuXCI7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgR3JpZEJvZHlDb250YWluZXIuc3R5bGUub3ZlcmZsb3dYID0gXCJhdXRvXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoX2NvbHVtbkF1dG9XaWR0aCAhPSB2YWx1ZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBfY29sdW1uQXV0b1dpZHRoID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgUmVuZGVyR3JpZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGJvb2wgX3VzZUVkaXRGb3JtID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgVXNlRWRpdEZvcm1cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3VzZUVkaXRGb3JtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZih2YWx1ZSAhPSBfdXNlRWRpdEZvcm0pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3VzZUVkaXRGb3JtID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgUmVuZGVyR3JpZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIFNvcnRTZXR0aW5nIFNvcnRTZXR0aW5ncztcclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgU29ydENvbHVtbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihTb3J0U2V0dGluZ3MgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgU29ydENvbHVtbihTb3J0U2V0dGluZ3MuQ29sdW1uLCBTb3J0U2V0dGluZ3MuU29ydE1vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBDbGVhclNvcnRDb2x1bW4oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoU29ydFNldHRpbmdzICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFNvcnRDb2x1bW4oU29ydFNldHRpbmdzLkNvbHVtbiwgR3JpZFZpZXdTb3J0TW9kZS5Ob25lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgU29ydENvbHVtbihHcmlkVmlld0NvbHVtbiBjb2x1bW4sIEdyaWRWaWV3U29ydE1vZGUgc29ydCA9IEdyaWRWaWV3U29ydE1vZGUuQXNjKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29sdW1uLlNvcnRlZE1vZGUgPSBzb3J0O1xyXG5cclxuICAgICAgICAgICAgaWYoU29ydFNldHRpbmdzICE9IG51bGwgJiYgU29ydFNldHRpbmdzLkNvbHVtbiAhPSBjb2x1bW4pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFNvcnRTZXR0aW5ncy5Db2x1bW4uU29ydGVkTW9kZSA9IEdyaWRWaWV3U29ydE1vZGUuTm9uZTtcclxuICAgICAgICAgICAgICAgIFZpc2libGVSb3dIYW5kbGVzID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoc29ydCA9PSBHcmlkVmlld1NvcnRNb2RlLk5vbmUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFZpc2libGVSb3dIYW5kbGVzID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJvb2wgc29ydDEgPSBzb3J0ID09IEdyaWRWaWV3U29ydE1vZGUuQXNjO1xyXG5cclxuICAgICAgICAgICAgICAgIHN3aXRjaChjb2x1bW4uQ29sdW1uLkRhdGFUeXBlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5PYmplY3Q6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNldFZpc2libGVSb3dIYW5kbGVzPG9iamVjdD4oKGNvbHVtbi5Db2x1bW4gYXMgRGF0YUNvbHVtbk9iamVjdCkuQ2VsbHMsIHNvcnQxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuQm9vbDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2V0VmlzaWJsZVJvd0hhbmRsZXM8Ym9vbD8+KChjb2x1bW4uQ29sdW1uIGFzIERhdGFDb2x1bW5Cb29sKS5DZWxscywgc29ydDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5EYXRlVGltZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2V0VmlzaWJsZVJvd0hhbmRsZXM8RGF0ZVRpbWU/PigoY29sdW1uLkNvbHVtbiBhcyBEYXRhQ29sdW1uRGF0ZVRpbWUpLkNlbGxzLCBzb3J0MSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLlN0cmluZzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2V0VmlzaWJsZVJvd0hhbmRsZXM8c3RyaW5nPigoY29sdW1uLkNvbHVtbiBhcyBEYXRhQ29sdW1uU3RyaW5nKS5DZWxscywgc29ydDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5CeXRlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZXRWaXNpYmxlUm93SGFuZGxlczxieXRlPz4oKGNvbHVtbi5Db2x1bW4gYXMgRGF0YUNvbHVtbkJ5dGUpLkNlbGxzLCBzb3J0MSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLlNob3J0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZXRWaXNpYmxlUm93SGFuZGxlczxzaG9ydD8+KChjb2x1bW4uQ29sdW1uIGFzIERhdGFDb2x1bW5TaG9ydCkuQ2VsbHMsIHNvcnQxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuSW50ZWdlcjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2V0VmlzaWJsZVJvd0hhbmRsZXM8aW50Pz4oKGNvbHVtbi5Db2x1bW4gYXMgRGF0YUNvbHVtbkludGVnZXIpLkNlbGxzLCBzb3J0MSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkxvbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNldFZpc2libGVSb3dIYW5kbGVzPGxvbmc/PigoY29sdW1uLkNvbHVtbiBhcyBEYXRhQ29sdW1uTG9uZykuQ2VsbHMsIHNvcnQxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuRmxvYXQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNldFZpc2libGVSb3dIYW5kbGVzPGZsb2F0Pz4oKGNvbHVtbi5Db2x1bW4gYXMgRGF0YUNvbHVtbkZsb2F0KS5DZWxscywgc29ydDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5Eb3VibGU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNldFZpc2libGVSb3dIYW5kbGVzPGRvdWJsZT8+KChjb2x1bW4uQ29sdW1uIGFzIERhdGFDb2x1bW5Eb3VibGUpLkNlbGxzLCBzb3J0MSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkRlY2ltYWw6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNldFZpc2libGVSb3dIYW5kbGVzPGRlY2ltYWw/PigoY29sdW1uLkNvbHVtbiBhcyBEYXRhQ29sdW1uRGVjaW1hbCkuQ2VsbHMsIHNvcnQxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFJlbmRlckdyaWQoKTtcclxuICAgICAgICAgICAgU29ydFNldHRpbmdzID0gbmV3IFNvcnRTZXR0aW5nKClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQ29sdW1uID0gY29sdW1uLFxyXG4gICAgICAgICAgICAgICAgU29ydE1vZGUgPSBzb3J0XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW50IENvbHVtbkNvdW50KClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBDb2x1bW5zLkNvdW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGludCBSb3dDb3VudCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihfZGF0YVNvdXJjZSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIHJldHVybiBfZGF0YVNvdXJjZS5Sb3dDb3VudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNjcm9sbFRvQm90dG9tKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEdyaWRCb2R5Q29udGFpbmVyLnNjcm9sbFRvcCA9IEdyaWRCb2R5LmNsaWVudEhlaWdodCAtIEdyaWRCb2R5Q29udGFpbmVyLmNsaWVudEhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNjcm9sbFRvVG9wKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEdyaWRCb2R5Q29udGFpbmVyLnNjcm9sbFRvcCA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgRGF0YVRhYmxlIERhdGFTb3VyY2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX2RhdGFTb3VyY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIEZvY3VzZWREYXRhSGFuZGxlID0gLTE7XHJcbiAgICAgICAgICAgICAgICBTZWxlY3RlZFJvd3MgPSBuZXcgSGFyZFNvZnRMaXN0PGJvb2w+KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIFZpc2libGVSb3dIYW5kbGVzID0gbmV3IExpc3Q8aW50PigpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKF9kYXRhU291cmNlICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2RhdGFTb3VyY2UuT25EYXRhU291cmNlQ2hhbmdlZCAtPSBEYXRhU291cmNlX09uRGF0YVNvdXJjZUNoYW5nZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgX2RhdGFTb3VyY2UgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihfZGF0YVNvdXJjZSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIF9kYXRhU291cmNlLk9uRGF0YVNvdXJjZUNoYW5nZWQgKz0gRGF0YVNvdXJjZV9PbkRhdGFTb3VyY2VDaGFuZ2VkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihDb2x1bW5zLkNvdW50ID09IDAgJiYgQXV0b0dlbmVyYXRlQ29sdW1uc0Zyb21Tb3VyY2UpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3cgPSBTdG9wd2F0Y2guU3RhcnROZXcoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBfZGF0YVNvdXJjZS5Db2x1bW5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3cxID0gU3RvcHdhdGNoLlN0YXJ0TmV3KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGd2YyA9IG5ldyBHcmlkVmlld0NvbHVtbih0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGd2Yy5DYXB0aW9uID0gX2RhdGFTb3VyY2UuQ29sdW1uc1tpXS5GaWVsZE5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBndmMuQ29sdW1uID0gX2RhdGFTb3VyY2UuQ29sdW1uc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGd2Yy5WaXNpYmxlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goX2RhdGFTb3VyY2UuQ29sdW1uc1tpXS5EYXRhVHlwZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkJ5dGU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5TaG9ydDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkludGVnZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5Mb25nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuRmxvYXQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5Eb3VibGU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5EZWNpbWFsOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBndmMuQm9keUFwcGFyZW5jZS5BbGlnbm1lbnQgPSBcInJpZ2h0XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkRhdGVUaW1lOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihTZXR0aW5ncy5HcmlkVmlld0F1dG9Db2x1bW5Gb3JtYXREYXRlcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoU2V0dGluZ3MuR3JpZFZpZXdBdXRvQ29sdW1uR2VuZXJhdGVGb3JtYXRBc0RhdGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3ZjLkZvcm1hdFN0cmluZyA9IFwiezA6ZH1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBndmMuRm9ybWF0U3RyaW5nID0gXCJ7MDp5eXl5LU1NLWRkfVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5Cb29sOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBndmMuQ2VsbERpc3BsYXkgPSBuZXcgR3JpZFZpZXdDZWxsRGlzcGxheUNoZWNrQm94KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbHVtbnMuQWRkKGd2Yyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3cuU3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3lzdGVtLkNvbnNvbGUuV3JpdGVMaW5lKFwiRGF0YVNvdXJjZSBBZGRDb2x1bW4gQXV0bzogXCIgKyBzdzEuRWxhcHNlZE1pbGxpc2Vjb25kcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3LlN0b3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU3lzdGVtLkNvbnNvbGUuV3JpdGVMaW5lKFwiRGF0YVNvdXJjZSBBdXRvQ29sdW1uczogXCIgKyBzdy5FbGFwc2VkTWlsbGlzZWNvbmRzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgUmVuZGVyR3JpZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgTGlzdDxHcmlkVmlld0NvbHVtbj4gQ29sdW1ucyA9IG5ldyBMaXN0PEdyaWRWaWV3Q29sdW1uPigpO1xyXG5cclxuICAgICAgICBwdWJsaWMgR3JpZFZpZXdDb2x1bW4gR2V0Q29sdW1uKGludCBpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIENvbHVtbnNbaV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb2JqZWN0IEdldEZvY3VzZWRSb3dDZWxsVmFsdWUoaW50IGNvbHVtbkluZGV4KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIEdldEZvY3VzZWRSb3dDZWxsVmFsdWUoQ29sdW1uc1tjb2x1bW5JbmRleF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEdyaWRWaWV3Q29sdW1uIEdldEdyaWRWaWV3Q29sdW1uQnlGaWVsZE5hbWUoc3RyaW5nIEZpZWxkTmFtZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBDb2x1bW5Db3VudCgpOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKENvbHVtbnNbaV0uQ29sdW1uLkZpZWxkTmFtZSA9PSBGaWVsZE5hbWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENvbHVtbnNbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb2JqZWN0IEdldEZvY3VzZWRSb3dDZWxsVmFsdWUoc3RyaW5nIEZpZWxkTmFtZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBHZXRGb2N1c2VkUm93Q2VsbFZhbHVlKEdldENvbHVtbkJ5RmllbGROYW1lKEZpZWxkTmFtZSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG9iamVjdCBHZXRGb2N1c2VkUm93Q2VsbFZhbHVlKEdyaWRWaWV3Q29sdW1uIGNvbHVtbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBHZXRSb3dDZWxsVmFsdWUoRm9jdXNlZERhdGFIYW5kbGUsIGNvbHVtbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb2JqZWN0IEdldEZvY3VzZWRSb3dDZWxsVmFsdWUoRGF0YUNvbHVtbiBjb2x1bW4pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gR2V0Um93Q2VsbFZhbHVlKEZvY3VzZWREYXRhSGFuZGxlLCBjb2x1bW4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG9iamVjdCBHZXRSb3dDZWxsVmFsdWUoaW50IERhdGFoYW5kbGUsIEdyaWRWaWV3Q29sdW1uIGNvbHVtbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBHZXRSb3dDZWxsVmFsdWUoRGF0YWhhbmRsZSwgY29sdW1uLkNvbHVtbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb2JqZWN0IEdldFJvd0NlbGxWYWx1ZShpbnQgRGF0YWhhbmRsZSwgRGF0YUNvbHVtbiBjb2x1bW4pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihEYXRhaGFuZGxlID09IC0xKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2x1bW4uR2V0Q2VsbFZhbHVlKERhdGFoYW5kbGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG9iamVjdCBHZXRSb3dDZWxsVmFsdWUoaW50IERhdGFoYW5kbGUsIHN0cmluZyBGaWVsZE5hbWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gR2V0Um93Q2VsbFZhbHVlKERhdGFoYW5kbGUsIEdldENvbHVtbkJ5RmllbGROYW1lKEZpZWxkTmFtZSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG9iamVjdCBHZXRSb3dDZWxsVmFsdWUoaW50IERhdGFoYW5kbGUsIGludCBjb2x1bW5JbmRleClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBHZXRSb3dDZWxsVmFsdWUoRGF0YWhhbmRsZSwgQ29sdW1uc1tjb2x1bW5JbmRleF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEdyaWRWaWV3Q29sdW1uIEdldEdyaWRWaWV3Q29sdW1uQnlGaWVsZE5hbWUoc3RyaW5nIGZpZWxkTmFtZSwgYm9vbCBJZ25vcmVDYXNlID0gZmFsc2UpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgQ29sdW1uQ291bnQoKTsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihDb2x1bW5zW2ldICE9IG51bGwgJiYgQ29sdW1uc1tpXS5Db2x1bW4gIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZy5Db21wYXJlKENvbHVtbnNbaV0uQ29sdW1uLkZpZWxkTmFtZSwgZmllbGROYW1lLCBJZ25vcmVDYXNlKSA9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDb2x1bW5zW2ldO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBEYXRhQ29sdW1uIEdldENvbHVtbkJ5RmllbGROYW1lKHN0cmluZyBmaWVsZE5hbWUsIGJvb2wgSWdub3JlQ2FzZSA9IGZhbHNlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoRGF0YVNvdXJjZSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgRGF0YVNvdXJjZS5Db2x1bW5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihEYXRhU291cmNlLkNvbHVtbnNbaV0gIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZy5Db21wYXJlKERhdGFTb3VyY2UuQ29sdW1uc1tpXS5GaWVsZE5hbWUsIGZpZWxkTmFtZSwgSWdub3JlQ2FzZSkgPT0gMClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRGF0YVNvdXJjZS5Db2x1bW5zW2ldO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEFkZENvbHVtbihzdHJpbmcgY2FwdGlvbiwgc3RyaW5nIGZpZWxkbmFtZSwgaW50IHdpZHRoID0gMTAwLCBzdHJpbmcgZm9ybWF0c3RyaW5nID0gXCJcIiwgc3RyaW5nIGFsaWdubWVudCA9IFwibGVmdFwiLCBzdHJpbmcgZm9yZWNvbG9yID0gbnVsbCwgYm9vbCBpc0JvbGQgPSBmYWxzZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBjb2wgPSBHZXRDb2x1bW5CeUZpZWxkTmFtZShmaWVsZG5hbWUpO1xyXG4gICAgICAgICAgICBpZihjb2wgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgQWRkQ29sdW1uKGNhcHRpb24sIGNvbCwgd2lkdGgsIGZvcm1hdHN0cmluZywgYWxpZ25tZW50LCBmb3JlY29sb3IsIGlzQm9sZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBBZGRDb2x1bW4oc3RyaW5nIGNhcHRpb24sIERhdGFDb2x1bW4gY29sdW1uLCBpbnQgd2lkdGggPSAxMDAsIHN0cmluZyBmb3JtYXRzdHJpbmcgPSBcIlwiLCBzdHJpbmcgYWxpZ25tZW50ID0gXCJsZWZ0XCIsIHN0cmluZyBmb3JlY29sb3IgPSBudWxsLCBib29sIGlzQm9sZCA9IGZhbHNlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQWRkQ29sdW1uKG5ldyBHcmlkVmlld0NvbHVtbih0aGlzLCB3aWR0aCkgeyBDYXB0aW9uID0gY2FwdGlvbiwgQm9keUFwcGFyZW5jZSA9IG5ldyBHcmlkVmlld0NlbGxBcHBhcmVuY2UoaXNCb2xkLCBhbGlnbm1lbnQsIGZvcmVjb2xvciksIEZvcm1hdFN0cmluZyA9IGZvcm1hdHN0cmluZywgQ29sdW1uID0gY29sdW1uIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQWRkQ29sdW1uKEdyaWRWaWV3Q29sdW1uIGNvbHVtbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKGNvbHVtbiA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgQ29sdW1ucy5BZGQoY29sdW1uKTtcclxuXHJcbiAgICAgICAgICAgIFJlbmRlckdyaWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEFkZENvbHVtbnMocGFyYW1zIEdyaWRWaWV3Q29sdW1uW10gY29sdW1ucylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKGNvbHVtbnMgPT0gbnVsbCB8fCBjb2x1bW5zLkxlbmd0aCA9PSAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgQ29sdW1ucy5BZGRSYW5nZShjb2x1bW5zKTtcclxuXHJcbiAgICAgICAgICAgIFJlbmRlckdyaWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFJlbW92ZUNvbHVtbihHcmlkVmlld0NvbHVtbiBjb2x1bW4pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDb2x1bW5zLlJlbW92ZShjb2x1bW4pO1xyXG5cclxuICAgICAgICAgICAgUmVuZGVyR3JpZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGludCBHZXREYXRhU291cmNlUm93KGludCBpKVxyXG4gICAgICAgIHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoVmlzaWJsZVJvd0hhbmRsZXMgPT0gbnVsbCB8fCBWaXNpYmxlUm93SGFuZGxlcy5Db3VudCA9PSAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihEYXRhU291cmNlLl9zZWFyY2hBY3RpdmUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICBEYXRhU291cmNlLl9zZWFyY2hSZXN1bHRzW2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gVmlzaWJsZVJvd0hhbmRsZXNbaV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZmxvYXQgR2V0Q29sdW1uV2lkdGhzKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKF9jb2x1bW5BdXRvV2lkdGgpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoZmxvYXQpR3JpZEJvZHlDb250YWluZXIuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmbG9hdCB3aWR0aCA9IDAuMGY7XHJcbiAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgQ29sdW1ucy5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKENvbHVtbnNbaV0uVmlzaWJsZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggKz0gQ29sdW1uc1tpXS5XaWR0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB3aWR0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQ2xlYXJTZWxlY3Rpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgU2VsZWN0ZWRSb3dzID0gbmV3IEhhcmRTb2Z0TGlzdDxib29sPihmYWxzZSk7XHJcbiAgICAgICAgICAgIFJlbmRlckdyaWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNlbGVjdEFsbFJvd3MoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IGxlbmd0aCA9IFJvd0NvdW50KCk7XHJcbiAgICAgICAgICAgIGlmKGxlbmd0aCA9PSAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBTZWxlY3RlZFJvd3MuQ2xlYXJBbGwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGludFtdIGluZGV4ID0gbmV3IGludFtsZW5ndGhdO1xyXG4gICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4W2ldID0gR2V0RGF0YVNvdXJjZVJvdyhpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFNlbGVjdGVkUm93cy5DbGVhckFsbFNldEhhcmRSYW5nZSh0cnVlLCBpbmRleCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgUmVuZGVyR3JpZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBpbnQgUHJldlJlbmRlckdyaWRTY3JvbGxJZCA9IC0xO1xyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBEZWxheWVkUmVuZGVyR3JpZChib29sIHJlbmRlck5vTGFnID0gZmFsc2UpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihyZW5kZXJOb0xhZylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgUmVuZGVyR3JpZChmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihTZXR0aW5ncy5HcmlkVmlld1Njcm9sbERlbGF5ZWQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoUHJldlJlbmRlckdyaWRTY3JvbGxJZCAhPSAtMSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJldHlwZWQuZG9tLmNsZWFyVGltZW91dChQcmV2UmVuZGVyR3JpZFNjcm9sbElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUHJldlJlbmRlckdyaWRTY3JvbGxJZCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBQcmV2UmVuZGVyR3JpZFNjcm9sbElkID0gKGludClSZXR5cGVkLmRvbS5zZXRUaW1lb3V0KChnbG9iYWw6OlJldHlwZWQuZG9tLnNldFRpbWVvdXRGbikoKGEpID0+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBSZW5kZXJHcmlkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSksIFN5c3RlbS5NYXRoLk1heCgxLCBTZXR0aW5ncy5HcmlkVmlld1Njcm9sbERlbGF5TVMpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBSZW5kZXJHcmlkKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIFN0b3B3YXRjaCBjbGlja1RpbWVEaWZmID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHVibGljIERhdGFSb3cgR2V0Rm9jdXNlZFJvdygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihGb2N1c2VkRGF0YUhhbmRsZSA+IC0xKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRGF0YVNvdXJjZVtHZXREYXRhU291cmNlUm93KEZvY3VzZWREYXRhSGFuZGxlKV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGludCBHZXRWaXNpYmxlQ291bnQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoQ29sdW1ucyA9PSBudWxsIHx8IENvbHVtbnMuQ291bnQgPT0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICBpbnQgbGVuZ3RoID0gQ29sdW1ucy5Db3VudDtcclxuICAgICAgICAgICAgaW50IGxlbmd0aDEgPSBDb2x1bW5zLkNvdW50O1xyXG5cclxuICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZighQ29sdW1uc1tpXS5WaXNpYmxlKVxyXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDEtLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbGVuZ3RoMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbnQgR2V0QmVzdEZpdEZvckNvbHVtbihHcmlkVmlld0NvbHVtbiBjb2x1bW4sIGJvb2wgaW5jbHVkZUNvbHVtbkhlYWRlciA9IGZhbHNlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIWNvbHVtbi5WaXNpYmxlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcblxyXG4gICAgICAgICAgICBpbnQgbWF4TGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgc3RyaW5nIG1heFN0ciA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICBpZihpbmNsdWRlQ29sdW1uSGVhZGVyICYmICFzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKGNvbHVtbi5DYXB0aW9uKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbWF4U3RyID0gY29sdW1uLkNhcHRpb247XHJcbiAgICAgICAgICAgICAgICBtYXhMZW5ndGggPSBjb2x1bW4uQ2FwdGlvbi5MZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBSb3dDb3VudCgpOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cmluZyB2YWx1ZSA9IGNvbHVtbi5HZXREaXNwbGF5VmFsdWVCeURhdGFSb3dIYW5kbGUoaSk7XHJcbiAgICAgICAgICAgICAgICBpZighc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZSh2YWx1ZSkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50IHYgPSB2YWx1ZS5MZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodiA+IG1heExlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heExlbmd0aCA9IHY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heFN0ciA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYobWF4TGVuZ3RoID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChpbnQpR2V0VGV4dFdpZHRoKG1heFN0ciwgU2V0dGluZ3MuRGVmYXVsdEZvbnQpICsgMjA7XHJcbiAgICAgICAgICAgIH1lbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBCZXN0Rml0QWxsQ29sdW1ucyhib29sIGluY2x1ZGVDb2x1bW5IZWFkZXIgPSBmYWxzZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIF9kaXNhYmxlUmVuZGVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IENvbHVtbnMuQ291bnQ7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoQ29sdW1uc1tpXS5WaXNpYmxlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIENvbHVtbnNbaV0uV2lkdGggPSBHZXRCZXN0Rml0Rm9yQ29sdW1uKENvbHVtbnNbaV0sIGluY2x1ZGVDb2x1bW5IZWFkZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF9kaXNhYmxlUmVuZGVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgIFJlbmRlckdyaWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RyaW5nIGhlYWRpbmdDbGFzcztcclxuICAgICAgICBwcml2YXRlIHN0cmluZyBjZWxsQ2xhc3M7XHJcblxyXG4gICAgICAgIHByaXZhdGUgRGljdGlvbmFyeTxpbnQsIFJldHlwZWQuZG9tLkhUTUxFbGVtZW50PiBDYWNoZVJvdyA9IG5ldyBEaWN0aW9uYXJ5PGludCwgUmV0eXBlZC5kb20uSFRNTEVsZW1lbnQ+KCk7XHJcbiAgICAgICAgaW50IENvdW50T2ZEZWxldGlvbiA9IDA7XHJcblxyXG4gICAgICAgIHByaXZhdGUgaW50IF9zZWFyY2hUaW1lciA9IC0xO1xyXG4gICAgICAgIHByaXZhdGUgdm9pZCBfc2VhcmNoKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuRGF0YVNvdXJjZSA9PSBudWxsIHx8ICFGaW5kUGFuZWxWaXNpYmxlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLkRhdGFTb3VyY2UuU2VhcmNoKFNlYXJjaFRleHRJbnB1dC5UZXh0LCB0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIE1ha2VSb3dWaXNpYmxlKGludCByb3dIYW5kbGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihyb3dIYW5kbGUgPCAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdmFyIGdldFRvcE1vc3RSb3dJbmRleCA9IEdldFJhd1RvcFJvd0luZGV4KCk7XHJcblxyXG4gICAgICAgICAgICBpZihyb3dIYW5kbGUgPCBnZXRUb3BNb3N0Um93SW5kZXgpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIEdyaWRCb2R5Q29udGFpbmVyLnNjcm9sbFRvcCAtPSAoaW50KSgoZ2V0VG9wTW9zdFJvd0luZGV4IC0gcm93SGFuZGxlKSAqIFBpeGVsc1BlclJvdyhSb3dDb3VudCgpKSk7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZ2V0VG9wTW9zdFJvd0luZGV4ID0gR2V0UmF3VmlzaWJsZVJvd0NvdW50KCkgKyBnZXRUb3BNb3N0Um93SW5kZXg7XHJcbiAgICAgICAgICAgICAgICBpZihyb3dIYW5kbGUgPj0gZ2V0VG9wTW9zdFJvd0luZGV4KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIEdyaWRCb2R5Q29udGFpbmVyLnNjcm9sbFRvcCArPSAoaW50KSgoKHJvd0hhbmRsZSAtIGdldFRvcE1vc3RSb3dJbmRleCkgKyAxKSAqIFBpeGVsc1BlclJvdyhSb3dDb3VudCgpKSk7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBib29sIF91c2VEcmF3Tm90RG9tO1xyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBVc2VEcmF3Tm90RG9tXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gX3VzZURyYXdOb3REb207IH1cclxuICAgICAgICAgICAgc2V0IHtcclxuICAgICAgICAgICAgICAgIGlmKF91c2VEcmF3Tm90RG9tICE9IHZhbHVlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIF91c2VEcmF3Tm90RG9tID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgUmVuZGVyR3JpZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgR3JpZFZpZXcoKSA6IHRoaXModHJ1ZSwgZmFsc2UpXHJcbiAgICAgICAge1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEV4cG9ydFRvWExTKHN0cmluZyBmaWxlTmFtZSlcclxuICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICB2YXIgYnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBHcmlkIGlzIGVtcHR5Li4uXHJcbiAgICAgICAgICAgIGlmKENvbHVtbkNvdW50KCkgPT0gMCB8fCBSb3dDb3VudCgpID09IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGludCBjb2x1bW5MZW5ndGggPSBDb2x1bW5Db3VudCgpO1xyXG5cclxuICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoXCI8dGFibGU+PHRoZWFkPjx0cj5cIik7XHJcblxyXG4gICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgY29sdW1uTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb2wgPSBDb2x1bW5zW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYoY29sLlZpc2libGUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoc3RyaW5nLkZvcm1hdChcIjx0aD57MH08L3RoPlwiLENvbHVtbnNbaV0uQ2FwdGlvbikpO1xyXG4gICAgICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoXCI8L3RyPjwvdGhlYWQ+XCIpO1xyXG5cclxuICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoXCI8dGJvZHk+XCIpO1xyXG5cclxuICAgICAgICAgICAgaW50IHJvd0xlbmd0aCA9IFJvd0NvdW50KCk7XHJcblxyXG4gICAgICAgICAgICBmb3IoaW50IHkgPSAwOyB5IDwgcm93TGVuZ3RoOyB5KyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiPHRyPlwiKTtcclxuICAgICAgICAgICAgICAgIHZhciBEYXRhUm93aGFuZGxlID0gR2V0RGF0YVNvdXJjZVJvdyh5KTtcclxuICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgIGZvcihpbnQgeCA9IDA7IHggPCBjb2x1bW5MZW5ndGg7IHgrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29sID0gQ29sdW1uc1t4XTtcclxuICAgICAgICAgICAgICAgICAgICBpZighY29sLlZpc2libGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGlzcGxheVZhbHVlID0gY29sLkdldERpc3BsYXlWYWx1ZUJ5RGF0YVJvd0hhbmRsZShEYXRhUm93aGFuZGxlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoc3RyaW5nLkZvcm1hdChcIjx0ZD57MH08L3RkPlwiLGRpc3BsYXlWYWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiPC90cj5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIjwvdGJvZHk+XCIpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiPC90YWJsZT5cIik7XHJcblxyXG4gICAgICAgICAgICB2YXIgdWEgPSBSZXR5cGVkLmRvbS53aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcclxuICAgICAgICAgICAgdmFyIG1zaWUgPSB1YS5JbmRleE9mKFwiTVNJRSBcIik7XHJcblxyXG4gICAgICAgICAgICBpZihtc2llID4gMCkgICAgICAvLyBJZiBJbnRlcm5ldCBFeHBsb3JlclxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaWZyYW1lID0gbmV3IFJldHlwZWQuZG9tLkhUTUxJRnJhbWVFbGVtZW50KCk7XHJcbiAgICAgICAgICAgICAgICBpZnJhbWUuY29udGVudERvY3VtZW50Lm9wZW4oXCJ0eHQvaHRtbFwiLCBcInJlcGxhY2VcIik7XHJcbiAgICAgICAgICAgICAgICBpZnJhbWUuY29udGVudERvY3VtZW50LndyaXRlKGJ1aWxkZXIuVG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICBpZnJhbWUuY29udGVudERvY3VtZW50LmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICBpZnJhbWUuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIGlmcmFtZS5jb250ZW50RG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJTYXZlQXNcIiwgdHJ1ZSwgZmlsZU5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgICAgICAgICAgICAgICAgIC8vb3RoZXIgYnJvd3NlciBub3QgdGVzdGVkIG9uIElFIDExXHJcbiAgICAgICAgICAgICAgICBSZXR5cGVkLmRvbS53aW5kb3cub3BlbihcImRhdGE6YXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLFwiICsgUmV0eXBlZC5lczUuZW5jb2RlVVJJQ29tcG9uZW50KGJ1aWxkZXIuVG9TdHJpbmcoKSkpOyAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEdyaWRWaWV3KGJvb2wgYXV0b0dlbmVyYXRlQ29sdW1ucyA9IHRydWUsIGJvb2wgY29sdW1uQXV0b1dpZHRoID0gZmFsc2UpIDogYmFzZShcImdyaWRcIilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKEhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBVbml0SGVpZ2h0ID0gNTM7XHJcbiAgICAgICAgICAgICAgICBoZWFkaW5nQ2xhc3MgPSBcImhlYWRpbmcgaGVhZGluZy1yZXNwb25zaXZlXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgY2VsbENsYXNzID0gXCJjZWxsIGNlbGwtcmVzcG9uc2l2ZVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgVW5pdEhlaWdodCA9IDIwO1xyXG4gICAgICAgICAgICAgICAgaGVhZGluZ0NsYXNzID0gXCJoZWFkaW5nXCI7XHJcbiAgICAgICAgICAgICAgICBjZWxsQ2xhc3MgPSBcImNlbGxcIjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5Db250ZW50LnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcclxuICAgICAgICAgICAgLy8gI0ZJTkQgI1JFTkRFUiNcclxuICAgICAgICAgICAgcmVuZGVyR3JpZEludGVybmFsID0gKCkgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoX2Rpc2FibGVSZW5kZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIGludCBTdGFydGVkV2l0aCA9IFJlbmRlclRpbWU7XHJcblxyXG4gICAgICAgICAgICAgICAgR3JpZEhlYWRlckNvbnRhaW5lci5zY3JvbGxMZWZ0ID0gR3JpZEJvZHlDb250YWluZXIuc2Nyb2xsTGVmdDtcclxuICAgICAgICAgICAgICAgIGlmKFNldHRpbmdzLkdyaWRWaWV3Qmx1ck9uU2Nyb2xsKVxyXG4gICAgICAgICAgICAgICAgICAgIFByb2Nlc3NCbHVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgVmFsaWRhdGVHcmlkU2l6ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKENvbHVtbkNvdW50KCkgPT0gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBDbGVhckdyaWQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaW50IFJhd0xlZnRDZWxsSW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgZmxvYXQgUmF3TGVmdENlbGxTY3JvbGxQYWRkaW5nID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICBpbnQgUmF3TGVmdENlbGxDb3VudCA9IENvbHVtbnMuQ291bnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgZmxvYXQgTGVmdExvY2F0aW9uID0gMDtcclxuICAgICAgICAgICAgICAgIGJvb2wgZm91bmRMZWZ0TG9jYXRpb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGJvb2wgZm91bmRSaWdodExvY2F0aW9uID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgZmxvYXQgQ2xpZW50V2lkdGggPSAoZmxvYXQpR3JpZEJvZHlDb250YWluZXIuY2xpZW50V2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgI3JlZ2lvbiBcIkNvbHVtbnNcIlxyXG5cclxuICAgICAgICAgICAgICAgIGZsb2F0IFZpZXdXaWR0aCA9IChmbG9hdClHcmlkQm9keUNvbnRhaW5lci5zY3JvbGxMZWZ0ICsgQ2xpZW50V2lkdGg7XHJcbiAgICAgICAgICAgICAgICBmbG9hdCBfY29sdW1uQXV0b1dpZHRoU2luZ2xlID0gMC4wZjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihfY29sdW1uQXV0b1dpZHRoKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIF9jb2x1bW5BdXRvV2lkdGhTaW5nbGUgPSBDbGllbnRXaWR0aCA9PSAwID8gMC4wZiA6IENsaWVudFdpZHRoIC8gR2V0VmlzaWJsZUNvdW50KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZmxvYXQgTWF4V2lkdGg7XHJcbiAgICAgICAgICAgICAgICBmbG9hdCBMYXN0V2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKGludCB4ID0gMDsgeCA8IENvbHVtbnMuQ291bnQ7IHgrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZighQ29sdW1uc1t4XS5WaXNpYmxlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgQ29sdW1uc1t4XS5DYWNoZWRYID0gTGVmdExvY2F0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIExhc3RXaWR0aCA9IF9jb2x1bW5BdXRvV2lkdGggPyBfY29sdW1uQXV0b1dpZHRoU2luZ2xlIDogQ29sdW1uc1t4XS5XaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICBMZWZ0TG9jYXRpb24gKz0gTGFzdFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFmb3VuZExlZnRMb2NhdGlvbiAmJiBMZWZ0TG9jYXRpb24gPj0gR3JpZEJvZHlDb250YWluZXIuc2Nyb2xsTGVmdClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kTGVmdExvY2F0aW9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmF3TGVmdENlbGxJbmRleCA9IHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJhd0xlZnRDZWxsU2Nyb2xsUGFkZGluZyA9IChmbG9hdCkoTGVmdExvY2F0aW9uIC0gR3JpZEJvZHlDb250YWluZXIuc2Nyb2xsTGVmdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGZvdW5kTGVmdExvY2F0aW9uICYmICFmb3VuZFJpZ2h0TG9jYXRpb24gJiYgTGVmdExvY2F0aW9uID49IFZpZXdXaWR0aClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kUmlnaHRMb2NhdGlvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJhd0xlZnRDZWxsQ291bnQgPSB4ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKFN0YXJ0ZWRXaXRoICE9IFJlbmRlclRpbWUpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIE1heFdpZHRoID0gTGVmdExvY2F0aW9uO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBjb2xGcmFnbWVudCA9IFJldHlwZWQuZG9tLmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpbnQgdWJvdW5kUm93Q291bnQgPSBSYXdMZWZ0Q2VsbENvdW50IC0gMTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihfY29sdW1uSGVhZGVyc1Zpc2libGUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGludCB4ID0gUmF3TGVmdENlbGxJbmRleDsgeCA8IFJhd0xlZnRDZWxsQ291bnQ7IHgrKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHggPj0gQ29sdW1ucy5Db3VudClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighQ29sdW1uc1t4XS5WaXNpYmxlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2NvbCA9IENvbHVtbnNbeF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xJbmRleCA9IHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcHBhcmVuY2UgPSBnY29sLkhlYWRpbmdBcHBhcmVuY2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sID0gTGFiZWwoZ2NvbC5DYXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF9jb2x1bW5BdXRvV2lkdGggPyBnY29sLkNhY2hlZFggOiBnY29sLkNhY2hlZFgpLCAwLCAoX2NvbHVtbkF1dG9XaWR0aCA/IF9jb2x1bW5BdXRvV2lkdGhTaW5nbGUgOiBnY29sLldpZHRoKSAtICh4ID09IHVib3VuZFJvd0NvdW50ID8gMCA6IDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwYXJlbmNlLklzQm9sZCwgZmFsc2UsIGhlYWRpbmdDbGFzcywgYXBwYXJlbmNlLkFsaWdubWVudCwgYXBwYXJlbmNlLkZvcmVjb2xvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGdjb2wuU29ydGVkTW9kZSAhPSBHcmlkVmlld1NvcnRNb2RlLk5vbmUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzb3J0SW1hZ2UgPSBEaXYoZ2NvbC5Tb3J0ZWRNb2RlID09IEdyaWRWaWV3U29ydE1vZGUuQXNjID8gXCJncmlkLXNvcnQtdXBcIiA6IFwiZ3JpZC1zb3J0LWRvd25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0SW1hZ2UuU2V0Qm91bmRzKFwiKDEwMCUgLSAxM3B4KVwiLCAxMSwgOSwgNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wuQXBwZW5kQ2hpbGQoc29ydEltYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgU2V0dXBDb2x1bW4oY29sLCB4LCBnY29sKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbEZyYWdtZW50LmFwcGVuZENoaWxkPEhUTUxTcGFuRWxlbWVudD4oY29sKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKFN0YXJ0ZWRXaXRoICE9IFJlbmRlclRpbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFwiQ29sdW1uc1wiXHJcblxyXG4gICAgICAgICAgICAgICAgaWYoX2RhdGFTb3VyY2UgPT0gbnVsbCB8fCBfZGF0YVNvdXJjZS5Sb3dDb3VudCA9PSAwIHx8IF9kYXRhU291cmNlLkNvbHVtbkNvdW50ID09IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgQ2xlYXJHcmlkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgR3JpZEhlYWRlci5BcHBlbmRDaGlsZChjb2xGcmFnbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHZhciBwcHIgPSBQaXhlbHNQZXJSb3coX2RhdGFTb3VyY2UuUm93Q291bnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZsb2F0IFJhd1RvcFJvd0luZGV4ID0gR2V0UmF3VG9wUm93SW5kZXgoKTtcclxuICAgICAgICAgICAgICAgIGZsb2F0IFJhd1RvcFJvd1Njcm9sbFBhZGRpbmcgPSBSYXdUb3BSb3dJbmRleCAlIDEuMGY7XHJcbiAgICAgICAgICAgICAgICBmbG9hdCBSYXdWaXNpYmxlUm93Q291bnQgPSBHZXRSYXdWaXNpYmxlUm93Q291bnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpbnQgTGVuZ3RoID0gKGludCkoUmF3VmlzaWJsZVJvd0NvdW50ICsgUmF3VG9wUm93SW5kZXgpICsgMTtcclxuICAgICAgICAgICAgICAgIGludCBzdGFydCA9IChpbnQpUmF3VG9wUm93SW5kZXg7XHJcblxyXG4gICAgICAgICAgICAgICAgI3JlZ2lvbiBcIlNlbGVjdGlvblwiXHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKGludCB4ID0gU2VsZWN0ZWRSb3dzLlNMLkNvdW50IC0gMTsgeCA+PSAwOyB4LS0pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9vbCBGb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihpbnQgaSA9IHN0YXJ0OyBpIDwgTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpIDwgRGF0YVNvdXJjZS5Sb3dDb3VudClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIERhdGFSb3doYW5kbGUgPSBHZXREYXRhU291cmNlUm93KGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoU2VsZWN0ZWRSb3dzLkdldEluZGV4VmFsdWVCeUhhcmRMaXN0SW5kZXgoU2VsZWN0ZWRSb3dzLlNMW3hdKS5JbmRleCA9PSBEYXRhUm93aGFuZGxlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihTdGFydGVkV2l0aCAhPSBSZW5kZXJUaW1lKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoU3RhcnRlZFdpdGggIT0gUmVuZGVyVGltZSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIUZvdW5kKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2VsZWN0ZWRSb3dzLlNMLlJlbW92ZUF0KHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAjZW5kcmVnaW9uIFwiU2VsZWN0aW9uXCJcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcm93RnJhZ21lbnQgPSBSZXR5cGVkLmRvbS5kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoU2V0dGluZ3MuR3JpZFZpZXdSb3dTY3JvbGxQYWRkaW5nID4gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydCAtPSBTZXR0aW5ncy5HcmlkVmlld1Jvd1Njcm9sbFBhZGRpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgTGVuZ3RoICs9IFNldHRpbmdzLkdyaWRWaWV3Um93U2Nyb2xsUGFkZGluZztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmbG9hdCBZID0gKHN0YXJ0ICogcHByKTsvLyArIFJhd1RvcFJvd1Njcm9sbFBhZGRpbmc7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoU2hvd0F1dG9GaWx0ZXJSb3cpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgTGVuZ3RoIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgWSArPSBVbml0SGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vICNUT0RPIC0gQ0xFQU4uLi5cclxuICAgICAgICAgICAgICAgIGlmKHN0YXJ0IDwgMClcclxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IDA7XHJcbiAgICAgICAgICAgICAgICBpZihMZW5ndGggPiBEYXRhU291cmNlLlJvd0NvdW50KVxyXG4gICAgICAgICAgICAgICAgICAgIExlbmd0aCA9IERhdGFTb3VyY2UuUm93Q291bnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoQ2FjaGVSb3cuQ291bnQgPiAxMClcclxuICAgICAgICAgICAgICAgIHsgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoQ291bnRPZkRlbGV0aW9uID4gOClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENhY2hlUm93ID0gbmV3IERpY3Rpb25hcnk8aW50LCBSZXR5cGVkLmRvbS5IVE1MRWxlbWVudD4oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQ291bnRPZkRlbGV0aW9uID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW50IE1heERlbGV0ZSA9IENhY2hlUm93LkNvdW50IC0gMTA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludCBfX2xlbmd0aCA9IENhY2hlUm93LkNvdW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBMaXN0PGludD4gS2V5c1RvRGVsZXRlID0gbmV3IExpc3Q8aW50PigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgX19sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50IGZpZWxkSW5kZXggPSBTeXN0ZW0uTGlucS5FbnVtZXJhYmxlLkVsZW1lbnRBdDxLZXlWYWx1ZVBhaXI8aW50LCBIVE1MRWxlbWVudD4+KENhY2hlUm93LGkpLktleTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGZpZWxkSW5kZXggPCBzdGFydCB8fCBmaWVsZEluZGV4ID49IExlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBLZXlzVG9EZWxldGUuQWRkKGZpZWxkSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKEtleXNUb0RlbGV0ZS5Db3VudCA+IE1heERlbGV0ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfX2xlbmd0aCA9IEtleXNUb0RlbGV0ZS5Db3VudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoX19sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ291bnRPZkRlbGV0aW9uKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBfX2xlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihDYWNoZVJvdy5Db250YWluc0tleShLZXlzVG9EZWxldGVbaV0pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0gQ2FjaGVSb3dbS2V5c1RvRGVsZXRlW2ldXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4Lm9uY2xpY2sgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgub25kYmxjbGljayA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeC5FbXB0eSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgub25kcmFnc3RhcnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHguRGVsZXRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhY2hlUm93LlJlbW92ZShLZXlzVG9EZWxldGVbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpbnQgcHJldlJvd0NhY2hlID0gQ2FjaGVSb3cuQ291bnQ7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvcihpbnQgaSA9IHN0YXJ0OyBpIDwgTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIUNhY2hlUm93LkNvbnRhaW5zS2V5KGkpKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIERhdGFSb3doYW5kbGUgPSBHZXREYXRhU291cmNlUm93KGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHIgPSBSZXR5cGVkLmRvbS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicm93XCIpOyAvLyBEaXYoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHIuY2xhc3NOYW1lID0gKGkgJSAyID09IDAgPyBcImNlbGxyb3cgZXZlblwiIDogXCJjZWxscm93XCIpICsgKFNlbGVjdGVkUm93cy5HZXRWYWx1ZShEYXRhUm93aGFuZGxlLCB0cnVlKSA/IFwiIGNlbGxyb3ctc2VsZWN0ZWRcIiA6IFwiXCIpICsgKERhdGFSb3doYW5kbGUgPT0gRm9jdXNlZERhdGFIYW5kbGUgPyBcIiBmb2N1c2Vkcm93XCIgOiBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHIuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyLlNldEJvdW5kcygwLCBZLCBfY29sdW1uQXV0b1dpZHRoID8gQ2xpZW50V2lkdGggOiBNYXhXaWR0aCwgVW5pdEhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyLnNldEF0dHJpYnV0ZShcImlcIiwgQ29udmVydC5Ub1N0cmluZyhEYXRhUm93aGFuZGxlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZHIub25jbGljayA9IG5ldyBSZXR5cGVkLmRvbS5IVE1MRWxlbWVudC5vbmNsaWNrRm4oT25Sb3dDbGljayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKFNldHRpbmdzLklzQ2hyb21lKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkci5vbmRibGNsaWNrID0gbmV3IFJldHlwZWQuZG9tLkhUTUxFbGVtZW50Lm9uY2xpY2tGbihPbkRvdWJsZUNsaWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZG9jRnJhZyA9IFJldHlwZWQuZG9tLmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihpbnQgeCA9IFJhd0xlZnRDZWxsSW5kZXg7IHggPCBSYXdMZWZ0Q2VsbENvdW50OyB4KyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2wgPSBDb2x1bW5zW3hdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIWNvbC5WaXNpYmxlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXBwYXJlbmNlID0gY29sLkJvZHlBcHBhcmVuY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29sIHVzZURlZmF1bHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJldHlwZWQuZG9tLkhUTUxFbGVtZW50IGNlbGwgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY29sLkNlbGxEaXNwbGF5ID09IG51bGwgfHwgKHVzZURlZmF1bHQgPSBjb2wuQ2VsbERpc3BsYXkuVXNlRGVmYXVsdEVsZW1lbnQpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXNwbGF5VmFsdWUgPSBjb2wuR2V0RGlzcGxheVZhbHVlQnlEYXRhUm93SGFuZGxlKERhdGFSb3doYW5kbGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsID0gUmV0eXBlZC5kb20uZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNlbGxcIik7Ly8gbmV3IEhUTUxTcGFuRWxlbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NOYW1lID0gY2VsbENsYXNzOy8vICsgXCIgY29udHJvbFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZS5sZWZ0ID0gY29sLkNhY2hlZFggKyBcInB4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZS53aWR0aCA9IChfY29sdW1uQXV0b1dpZHRoID8gX2NvbHVtbkF1dG9XaWR0aFNpbmdsZSA6IGNvbC5XaWR0aCkgKyBcInB4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoXCJ4XCIsIENvbnZlcnQuVG9TdHJpbmcoeCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwub25jbGljayA9IG5ldyBSZXR5cGVkLmRvbS5IVE1MRWxlbWVudC5vbmNsaWNrRm4oT25DZWxsUm93TW91c2VEb3duKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoZGlzcGxheVZhbHVlKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwudGV4dENvbnRlbnQgPSBkaXNwbGF5VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGFwcGFyZW5jZS5BbGlnbm1lbnQgIT0gXCJsZWZ0XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGFwcGFyZW5jZS5BbGlnbm1lbnQgPT0gXCJyaWdodFwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc3R5bGUuZGlyZWN0aW9uID0gXCJydGxcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnN0eWxlLnRleHRBbGlnbiA9IGFwcGFyZW5jZS5BbGlnbm1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoYXBwYXJlbmNlLklzQm9sZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZS5mb250V2VpZ2h0ID0gXCJib2xkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGFwcGFyZW5jZS5Gb3JlY29sb3IgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZS5jb2xvciA9IGFwcGFyZW5jZS5Gb3JlY29sb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdDZWxsID0gdXNlRGVmYXVsdCA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbC5DZWxsRGlzcGxheS5PbkNyZWF0ZURlZmF1bHQoY2VsbCwgdGhpcywgRGF0YVJvd2hhbmRsZSwgeCkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihfaGlnaGxpZ2hTZWFyY2hSZXN1bHRzICYmIERhdGFTb3VyY2UuX3NlYXJjaEFjdGl2ZSAmJiAhdXNlRGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAhc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShkaXNwbGF5VmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGRpc3BsYXlWYWx1ZS5Ub0xvd2VyKCkuU3RhcnRzV2l0aChEYXRhU291cmNlLlNlYXJjaFN0cmluZykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDZWxsLkVtcHR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZWxlbWVudCA9IFJldHlwZWQuZG9tLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJtYXJrXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnQgU2xlbmd0aCA9IERhdGFTb3VyY2UuU2VhcmNoU3RyaW5nLkxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VsZW1lbnQudGV4dENvbnRlbnQgPSBkaXNwbGF5VmFsdWUuU3Vic3RyaW5nKDAsIFNsZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDZWxsLkFwcGVuZENoaWxkcmVuKG1hcmtlbGVtZW50LCBSZXR5cGVkLmRvbS5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkaXNwbGF5VmFsdWUuU3Vic3RyaW5nKFNsZW5ndGgpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2NGcmFnLmFwcGVuZENoaWxkPEhUTUxFbGVtZW50PihuZXdDZWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsID0gY29sLkNlbGxEaXNwbGF5Lk9uQ3JlYXRlKHRoaXMsIERhdGFSb3doYW5kbGUsIHgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZS5sZWZ0ID0gY29sLkNhY2hlZFggKyBcInB4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZS53aWR0aCA9IChfY29sdW1uQXV0b1dpZHRoID8gX2NvbHVtbkF1dG9XaWR0aFNpbmdsZSA6IGNvbC5XaWR0aCkuVG9QeCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2NGcmFnLmFwcGVuZENoaWxkPEhUTUxFbGVtZW50PihjZWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNlbGwgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZHIuQXBwZW5kQ2hpbGQoZG9jRnJhZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihBbGxvd1Jvd0RyYWcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyLnNldEF0dHJpYnV0ZShcImRyYWdnYWJsZVwiLCBcInRydWVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHIub25kcmFnc3RhcnQgPSBuZXcgUmV0eXBlZC5kb20uSFRNTEVsZW1lbnQub25kcmFnRm4oT25Sb3dEcmFnU3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dGcmFnbWVudC5hcHBlbmRDaGlsZDxIVE1MRWxlbWVudD4oZHIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgQ2FjaGVSb3dbaV0gPSBkcjsgICBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKFN0YXJ0ZWRXaXRoICE9IFJlbmRlclRpbWUpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihwcmV2Um93Q2FjaGUgPT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsZWFyR3JpZCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgR3JpZEJvZHkuQXBwZW5kQ2hpbGQocm93RnJhZ21lbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgWSArPSBVbml0SGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYocHJldlJvd0NhY2hlID09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgQ2xlYXJHcmlkKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoT25DdXN0b21Sb3dTdHlsZSAhPSBudWxsICYmIHJvd0ZyYWdtZW50LmNoaWxkTm9kZXMgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY291bnQgPSByb3dGcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgY291bnQ7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKFN0YXJ0ZWRXaXRoICE9IFJlbmRlclRpbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdyaWRCb2R5LkFwcGVuZENoaWxkKHJvd0ZyYWdtZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSAoUmV0eXBlZC5kb20uSFRNTEVsZW1lbnQpcm93RnJhZ21lbnQuY2hpbGROb2Rlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9uQ3VzdG9tUm93U3R5bGUoY2hpbGQsIFNjcmlwdC5QYXJzZUludChjaGlsZC5nZXRBdHRyaWJ1dGUoXCJpXCIpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2goRXhjZXB0aW9uIGV4KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihBcHBsaWNhdGlvbi5BcGxpY2F0aW9uRGVmaXRpb24gPT0gQXBwbGljYXRpb25EZWZpdG5pb24uRXhwcmVzc0NyYWZ0Q29uc29sZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb25zb2xlRm9ybS5Mb2coZXguVG9TdHJpbmcoKSwgQ29uc29sZUxvZ1R5cGUuRXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIEdyaWRIZWFkZXIuQXBwZW5kQ2hpbGQoY29sRnJhZ21lbnQpO1xyXG4gICAgICAgICAgICAgICAgR3JpZEJvZHkuQXBwZW5kQ2hpbGQocm93RnJhZ21lbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKFN0YXJ0ZWRXaXRoICE9IFJlbmRlclRpbWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIFJlbmRlclRpbWUgPSAtMTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIEdyaWRIZWFkZXJDb250YWluZXIgPSBEaXYoXCJoZWFkaW5nLWNvbnRhaW5lclwiKTtcclxuXHJcbiAgICAgICAgICAgIEdyaWRIZWFkZXIgPSBEaXYoKTtcclxuICAgICAgICAgICAgR3JpZEhlYWRlci5TZXRCb3VuZHMoMCwgMCwgMCwgXCIyOXB4XCIpO1xyXG4gICAgICAgICAgICBHcmlkQm9keUNvbnRhaW5lciA9IERpdigpO1xyXG5cclxuICAgICAgICAgICAgR3JpZEJvZHlDb250YWluZXIuc3R5bGUub3ZlcmZsb3dYID0gXCJhdXRvICFpbXBvcnRhbnRcIjtcclxuICAgICAgICAgICAgR3JpZEJvZHlDb250YWluZXIuc3R5bGUub3ZlcmZsb3dZID0gXCJhdXRvICFpbXBvcnRhbnRcIjtcclxuXHJcbiAgICAgICAgICAgIEdyaWRIZWFkZXJDb250YWluZXIuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xyXG5cclxuICAgICAgICAgICAgR3JpZEJvZHkgPSBEaXYoKTtcclxuICAgICAgICAgICAgR3JpZEJvZHkuU2V0Qm91bmRzKDAsIDAsIDAsIDApO1xyXG5cclxuICAgICAgICAgICAgR3JpZEJvZHlDb250YWluZXIuQXBwZW5kQ2hpbGQoR3JpZEJvZHkpO1xyXG4gICAgICAgICAgICBHcmlkSGVhZGVyQ29udGFpbmVyLkFwcGVuZENoaWxkKEdyaWRIZWFkZXIpO1xyXG5cclxuICAgICAgICAgICAgR3JpZEZpbmRQYW5lbCA9IERpdihcImhlYWRpbmctY29udGFpbmVyXCIpO1xyXG4gICAgICAgICAgICBHcmlkRmluZFBhbmVsLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG4gICAgICAgICAgICBHcmlkRmluZFBhbmVsLlNldEJvdW5kcygwLCAwLCBcIjEwMCVcIiwgNDYpO1xyXG5cclxuICAgICAgICAgICAgU2VhcmNoVGV4dElucHV0ID0gbmV3IFRleHRJbnB1dCgpIHsgT25UZXh0Q2hhbmdlZCA9IChzZW5kZXIpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmKF9zZWFyY2hUaW1lciA+IC0xKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFJldHlwZWQuZG9tLmNsZWFyVGltZW91dChfc2VhcmNoVGltZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShTZWFyY2hUZXh0SW5wdXQuVGV4dCkpXHJcbiAgICAgICAgICAgICAgICAgICAgX3NlYXJjaCgpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIF9zZWFyY2hUaW1lciA9IChpbnQpUmV0eXBlZC5kb20uc2V0VGltZW91dCgoZ2xvYmFsOjpSZXR5cGVkLmRvbS5zZXRUaW1lb3V0Rm4pKChhKSA9PiB7IF9zZWFyY2goKTsgfSksIDUwMCk7XHJcbiAgICAgICAgICAgIH0sIE9uS2V5RG93biA9IChzZW5kZXIsIGV2KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZihldi5rZXlDb2RlID09IEtleUNvZGVzLkVudGVyKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ0bkZpbmQuQ29udGVudC5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IH07XHJcbiAgICAgICAgICAgIFNlYXJjaFRleHRJbnB1dC5Cb3VuZHMgPSBuZXcgVmVjdG9yNCgzMCwgMTMsIDM1MCwgMjIpO1xyXG4gICAgICAgICAgICBTZWFyY2hUZXh0SW5wdXQuU2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIiwgXCJFbnRlciB0ZXh0IHRvIHNlYXJjaC4uLlwiKTtcclxuXHJcbiAgICAgICAgICAgIGJ0bkZpbmQgPSBuZXcgU2ltcGxlQnV0dG9uKCkgeyBUZXh0ID0gXCJGaW5kXCIsIEl0ZW1DbGljayA9IChzZW5kZXIpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmKF9zZWFyY2hUaW1lciA+IC0xKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFJldHlwZWQuZG9tLmNsZWFyVGltZW91dChfc2VhcmNoVGltZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgX3NlYXJjaCgpO1xyXG4gICAgICAgICAgICB9LCBCb3VuZHMgPSBuZXcgVmVjdG9yNCgzODUsIDEzLCA2MCwgMjIpIH07XHJcbiAgICAgICAgICAgIGJ0bkNsZWFyID0gbmV3IFNpbXBsZUJ1dHRvbigpIHsgVGV4dCA9IFwiQ2xlYXJcIiwgSXRlbUNsaWNrID0gKHNlbmRlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYoX3NlYXJjaFRpbWVyID4gLTEpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgUmV0eXBlZC5kb20uY2xlYXJUaW1lb3V0KF9zZWFyY2hUaW1lcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBTZWFyY2hUZXh0SW5wdXQuVGV4dCA9IHN0cmluZy5FbXB0eTtcclxuICAgICAgICAgICAgfSwgQm91bmRzID0gbmV3IFZlY3RvcjQoNDQ5LCAxMywgNjAsIDIyKSB9O1xyXG5cclxuICAgICAgICAgICAgYnRuQ2xvc2UgPSBuZXcgU2ltcGxlQnV0dG9uKCkgeyBCb3VuZHMgPSBuZXcgVmVjdG9yNCg3LCAxNSwgMTgsIDE4KSwgSXRlbUNsaWNrID0gKHNlbmRlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgYnRuQ2xlYXIuQ29udGVudC5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgQ2xvc2VGaW5kUGFuZWwoKTtcclxuICAgICAgICAgICAgfSB9O1xyXG4gICAgICAgICAgICBidG5DbG9zZS5Db250ZW50LmlubmVySFRNTCA9IFwiJnRpbWVzO1wiO1xyXG5cclxuXHJcbiAgICAgICAgICAgIEdyaWRGaW5kUGFuZWwuQXBwZW5kQ2hpbGRyZW4oYnRuQ2xvc2UsIFNlYXJjaFRleHRJbnB1dCwgYnRuRmluZCwgYnRuQ2xlYXIpO1xyXG5cclxuICAgICAgICAgICAgU2V0RGVmYXVsdFNpemVzKCk7XHJcblxyXG4gICAgICAgICAgICBDb250ZW50Lm9ubW91c2V1cCA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoUmVzaXplSW5kZXggPT0gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgaW50IHggPSBTY3JpcHQuV3JpdGU8aW50PihcImV2LnBhZ2VYXCIpO1xyXG4gICAgICAgICAgICAgICAgeCA9IENvbHVtbnNbUmVzaXplSW5kZXhdLldpZHRoICsgKHggLSBSZXNpemVQYWdlWCk7XHJcbiAgICAgICAgICAgICAgICBpZih4IDwgMjQpXHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IDI0O1xyXG4gICAgICAgICAgICAgICAgQ29sdW1uc1tSZXNpemVJbmRleF0uV2lkdGggPSB4O1xyXG5cclxuICAgICAgICAgICAgICAgIEZvcm0uU2V0Q3Vyc29yKFwiZGVmYXVsdFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZXYuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICBSZXNpemVJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgUmVzaXplU3BhbiA9IG51bGw7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBPblJlc2l6ZSA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQ2FjaGVSb3cgPSBuZXcgRGljdGlvbmFyeTxpbnQsIFJldHlwZWQuZG9tLkhUTUxFbGVtZW50PigpO1xyXG4gICAgICAgICAgICAgICAgRGVsYXllZFJlbmRlckdyaWQoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGludCBwcmV2bGVmdCA9IDA7XHJcbiAgICAgICAgICAgIGlmKFNldHRpbmdzLklzQ2hyb21lICYmICFIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgR3JpZEJvZHlDb250YWluZXIub25tb3VzZXdoZWVsID0gKGV2KSA9PlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldi5kZWx0YVkgIT0gMClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEdyaWRCb2R5Q29udGFpbmVyLnNjcm9sbFRvcCArPSAoVW5pdEhlaWdodCAqIChldi5kZWx0YVkgLyAxMDAuMDBkKSkgKiAzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGJvb2wgaWdub3JlU2Nyb2xsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIEdyaWRCb2R5Q29udGFpbmVyLm9uc2Nyb2xsID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaWdub3JlU2Nyb2xsKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihwcmV2bGVmdCAhPSBHcmlkQm9keUNvbnRhaW5lci5zY3JvbGxMZWZ0KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIENhY2hlUm93ID0gbmV3IERpY3Rpb25hcnk8aW50LCBSZXR5cGVkLmRvbS5IVE1MRWxlbWVudD4oKTtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2bGVmdCA9IChpbnQpR3JpZEJvZHlDb250YWluZXIuc2Nyb2xsTGVmdDtcclxuICAgICAgICAgICAgICAgICAgICBEZWxheWVkUmVuZGVyR3JpZCgpO1xyXG4gICAgICAgICAgICAgICAgfWVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihTZXR0aW5ncy5Jc0Nocm9tZSAmJiAhSGVscGVyLk5vdERlc2t0b3ApXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyh3aW5kb3cuaW5uZXJIZWlnaHQgKyB3aW5kb3cucGFnZVlPZmZzZXQpID49IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0IC0gMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihHcmlkQm9keUNvbnRhaW5lci5zY3JvbGxUb3AgIT0gMCAmJiBHcmlkQm9keUNvbnRhaW5lci5zY3JvbGxUb3AgKyBHcmlkQm9keUNvbnRhaW5lci5jbGllbnRIZWlnaHQgIT0gR3JpZEJvZHlDb250YWluZXIuc2Nyb2xsSGVpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlmZiA9IEdyaWRCb2R5Q29udGFpbmVyLnNjcm9sbFRvcCAlIFVuaXRIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlmZiAhPSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZVNjcm9sbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR3JpZEJvZHlDb250YWluZXIuc2Nyb2xsVG9wIC09IGRpZmY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlU2Nyb2xsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgRGVsYXllZFJlbmRlckdyaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE9uTG9hZGVkID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBSZW5kZXJHcmlkKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE9uQ2VsbFJvd01vdXNlRG93biA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgRm9jdXNlZENvbHVtbiA9IFNjcmlwdC5QYXJzZUludChldi5jdXJyZW50VGFyZ2V0LkFzPFJldHlwZWQuZG9tLkhUTUxFbGVtZW50PigpLmdldEF0dHJpYnV0ZShcInhcIikpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBPblJvd0NsaWNrID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZighU2V0dGluZ3MuSXNDaHJvbWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY2xpY2tUaW1lRGlmZiA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tUaW1lRGlmZiA9IFN0b3B3YXRjaC5TdGFydE5ldygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja1RpbWVEaWZmLlN0b3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVtcyA9IGNsaWNrVGltZURpZmYuRWxhcHNlZE1pbGxpc2Vjb25kcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tUaW1lRGlmZiA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihlbXMgPCAyMDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9uRG91YmxlQ2xpY2soZXYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHZhciBEYXRhUm93SGFuZGxlID0gU2NyaXB0LlBhcnNlSW50KGV2LmN1cnJlbnRUYXJnZXQuQXM8UmV0eXBlZC5kb20uSFRNTEVsZW1lbnQ+KCkuZ2V0QXR0cmlidXRlKFwiaVwiKSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHZhciBtZXYgPSBldi5BczxSZXR5cGVkLmRvbS5Nb3VzZUV2ZW50PigpO1xyXG4gICAgICAgICAgICAgICAgaWYoQWxsb3dNdWx0aVNlbGVjdGlvbilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihtZXYuY3RybEtleSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNlbGVjdGVkUm93cy5BZGRPclNldCh0cnVlLCBEYXRhUm93SGFuZGxlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmVuZGVyR3JpZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKG1ldi5zaGlmdEtleSAmJiBGb2N1c2VkRGF0YUhhbmRsZSA+IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgIHsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Rpc2FibGVSZW5kZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZWxlY3RlZFJvd3MuQ2xlYXJBbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoRGF0YVJvd0hhbmRsZSA8IEZvY3VzZWREYXRhSGFuZGxlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSBEYXRhUm93SGFuZGxlOyBpIDwgRm9jdXNlZERhdGFIYW5kbGUgKyAxOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VsZWN0ZWRSb3dzLkFkZE9yU2V0KHRydWUsIGksIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSBGb2N1c2VkRGF0YUhhbmRsZTsgaSA8IERhdGFSb3dIYW5kbGUgKyAxOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VsZWN0ZWRSb3dzLkFkZE9yU2V0KHRydWUsIGksIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kaXNhYmxlUmVuZGVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlbmRlckdyaWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFNlbGVjdGVkUm93cy5DbGVhckFuZEFkZE9yU2V0KHRydWUsIERhdGFSb3dIYW5kbGUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgaWYoRGF0YVJvd0hhbmRsZSAhPSBfZm9jdXNlZERhdGFIYW5kbGUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgRm9jdXNlZERhdGFIYW5kbGUgPSBEYXRhUm93SGFuZGxlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFJlbmRlckdyaWQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgQ29udGVudC50YWJJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIE9uRG91YmxlQ2xpY2sgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGludCBkcmggPSBTY3JpcHQuUGFyc2VJbnQoZXYuY3VycmVudFRhcmdldC5BczxSZXR5cGVkLmRvbS5IVE1MRWxlbWVudD4oKS5nZXRBdHRyaWJ1dGUoXCJpXCIpKTtcclxuICAgICAgICAgICAgICAgIGlmKE9uUm93RG91YmxlQ2xpY2sgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBPblJvd0RvdWJsZUNsaWNrKGRyaCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoX3VzZUVkaXRGb3JtKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZHIgPSBEYXRhU291cmNlW2RyaF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmZHJlID0gbmV3IERhdGFSb3dFZGl0Rm9ybShpZHIsIHRoaXMsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZkcmUuU2hvd0RpYWxvZygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgQ29udGVudC5vbmtleWRvd24gPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciBrZXYgPSBldi5BczxSZXR5cGVkLmRvbS5LZXlib2FyZEV2ZW50PigpO1xyXG4gICAgICAgICAgICAgICAgLy9HbG9iYWwuQWxlcnQoXCJDT05UUk9MICsgQVwiKTtcclxuICAgICAgICAgICAgICAgIGlmKEFsbG93TXVsdGlTZWxlY3Rpb24gJiYga2V2LmN0cmxLZXkgJiYgKGtldi5rZXlDb2RlID09IDY1IHx8IGtldi5rZXlDb2RlID09IDk3KSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBrZXlDb2RlID09IDY1IHx8IGtleUNvZGUgPT0gOTdcclxuICAgICAgICAgICAgICAgICAgICAvL0dsb2JhbC5BbGVydChcIkFsbG93TXVsdGlTZWxlY3Rpb24gPSBUUlVFXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIFNlbGVjdEFsbFJvd3MoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihrZXYua2V5Q29kZSA9PSBLZXlDb2Rlcy5VcCB8fCBrZXYua2V5Q29kZSA9PSBLZXlDb2Rlcy5Eb3duKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Rpc2FibGVSZW5kZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJldkZvY3VzZWQgPSBGb2N1c2VkRGF0YUhhbmRsZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoa2V2LmtleUNvZGUgPT0gS2V5Q29kZXMuVXApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCEoRm9jdXNlZERhdGFIYW5kbGUgLSAxIDwgMCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9jdXNlZERhdGFIYW5kbGUtLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGtldi5rZXlDb2RlID09IEtleUNvZGVzLkRvd24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCEoRm9jdXNlZERhdGFIYW5kbGUgPiBSb3dDb3VudCgpKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb2N1c2VkRGF0YUhhbmRsZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHByZXZGb2N1c2VkICE9IEZvY3VzZWREYXRhSGFuZGxlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihrZXYuc2hpZnRLZXkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VsZWN0ZWRSb3dzLkFkZE9yU2V0KHRydWUsIEZvY3VzZWREYXRhSGFuZGxlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWxlY3RlZFJvd3MuQ2xlYXJBbmRBZGRPclNldCh0cnVlLCBGb2N1c2VkRGF0YUhhbmRsZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1ha2VSb3dWaXNpYmxlKEZvY3VzZWREYXRhSGFuZGxlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZGlzYWJsZVJlbmRlciA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlbmRlckdyaWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Rpc2FibGVSZW5kZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy9HbG9iYWwuQWxlcnQoXCJBbGxvd011bHRpU2VsZWN0aW9uID0gRkFMU0VcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBDb250ZXh0TWVudSA9IG5ldyBDb250ZXh0TWVudSgpO1xyXG5cclxuICAgICAgICAgICAgQ29udGV4dE1lbnUuQ29udGV4dEl0ZW1zLkFkZFJhbmdlKG5ldyBDb250ZXh0SXRlbVtdIHtcclxuICAgICAgICAgICAgICAgIG5ldyBDb250ZXh0SXRlbShcIlNvcnQgQXNjZW5kaW5nXCIsIChjbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKEZvY3VzZWRDb2x1bW4gPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNvcnRDb2x1bW4oQ29sdW1uc1tGb2N1c2VkQ29sdW1uXSwgR3JpZFZpZXdTb3J0TW9kZS5Bc2MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgbmV3IENvbnRleHRJdGVtKFwiU29ydCBEZXNjZW5kaW5nXCIsIChjbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKEZvY3VzZWRDb2x1bW4gPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNvcnRDb2x1bW4oQ29sdW1uc1tGb2N1c2VkQ29sdW1uXSwgR3JpZFZpZXdTb3J0TW9kZS5EZXNjKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgIG5ldyBDb250ZXh0SXRlbShcIkNsZWFyIEFsbCBTb3J0aW5nXCIsIChjbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIENsZWFyU29ydENvbHVtbigpO1xyXG4gICAgICAgICAgICAgICAgfSwgIHRydWUpLFxyXG4gICAgICAgICAgICAgICAgLy9uZXcgQ29udGV4dEl0ZW0oXCJHcm91cCBCeSBUaGlzIENvbHVtblwiKSxcclxuICAgICAgICAgICAgICAgIC8vbmV3IENvbnRleHRJdGVtKFwiSGlkZSBHcm91cCBCeSBCb3hcIiwgdHJ1ZSksXHJcbiAgICAgICAgICAgICAgICBuZXcgQ29udGV4dEl0ZW0oXCJIaWRlIFRoaXMgQ29sdW1uXCIsIChjaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKEZvY3VzZWRDb2x1bW4gPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbHVtbnNbRm9jdXNlZENvbHVtbl0uVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBSZW5kZXJHcmlkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAvL25ldyBDb250ZXh0SXRlbShcIlZpZXcgQ29sdW1uc1wiKSxcclxuICAgICAgICAgICAgICAgIC8vbmV3IENvbnRleHRJdGVtKFwiU2F2ZSBDb2x1bW4gTGF5b3V0XCIpLFxyXG4gICAgICAgICAgICAgICAgbmV3IENvbnRleHRJdGVtKFwiQmVzdCBGaXRcIiwgKGNpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoRm9jdXNlZENvbHVtbiA+IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQ29sdW1uc1tGb2N1c2VkQ29sdW1uXS5XaWR0aCA9IEdldEJlc3RGaXRGb3JDb2x1bW4oQ29sdW1uc1tGb2N1c2VkQ29sdW1uXSk7ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkgLFxyXG4gICAgICAgICAgICAgICAgbmV3IENvbnRleHRJdGVtKFwiQmVzdCBGaXQgKGFsbCBjb2x1bW5zKVwiLCAoY2kpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBCZXN0Rml0QWxsQ29sdW1ucygpO1xyXG4gICAgICAgICAgICAgICAgfSwgdHJ1ZSksXHJcbiAgICAgICAgICAgICAgICBuZXcgQ29udGV4dEl0ZW0oXCJFeHBvcnQgdG8gRXhjZWxcIiwgKGNpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5FeHBvcnRUb1hMUyhcImV4cG9ydC54bHNcIik7XHJcbiAgICAgICAgICAgICAgICB9LCB0cnVlKSxcclxuICAgICAgICAgICAgICAgIC8vbmV3IENvbnRleHRJdGVtKFwiRmlsdGVyIEVkaXRvci4uLlwiLCB0cnVlKSxcclxuICAgICAgICAgICAgICAgIF9zaG93RmluZFBhbmVsQ29udGV4dEl0ZW0gPSBuZXcgQ29udGV4dEl0ZW0oXCJTaG93IEZpbmQgUGFuZWxcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIE9uSXRlbUNsaWNrID0gKHNlbmRlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihGaW5kUGFuZWxWaXNpYmxlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRmluZFBhbmVsVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRmluZFBhbmVsVmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIG5ldyBDb250ZXh0SXRlbShcIlNlbGVjdCBBbGxcIiwgKGNtKSA9PiB7IFNlbGVjdEFsbFJvd3MoKTsgfSksXHJcbiAgICAgICAgICAgICAgICBuZXcgQ29udGV4dEl0ZW0oXCJVbnNlbGVjdCBBbGxcIiwgKGNtKSA9PiB7IENsZWFyU2VsZWN0aW9uKCk7IH0pXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgQ29udGVudC5vbmNvbnRleHRtZW51ID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBPbkRvdWJsZUNsaWNrKGV2KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihDb250ZXh0TWVudSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQ29udGV4dE1lbnUuU2hvdyhIZWxwZXIuR2V0Q2xpZW50TW91c2VMb2NhdGlvbihldikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBPbkNvbHVtbk9uQ2xpY2sgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKFJlc2l6ZUluZGV4ID49IDApXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBnY29sID0gQ29sdW1uc1tTY3JpcHQuUGFyc2VJbnQoZXYuY3VycmVudFRhcmdldC5BczxSZXR5cGVkLmRvbS5IVE1MRWxlbWVudD4oKS5nZXRBdHRyaWJ1dGUoXCJpXCIpKV07XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IENvbHVtbkNvdW50KCk7IGkrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihDb2x1bW5zW2ldICE9IGdjb2wpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBDb2x1bW5zW2ldLlNvcnRlZE1vZGUgPSBHcmlkVmlld1NvcnRNb2RlLk5vbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc3dpdGNoKGdjb2wuU29ydGVkTW9kZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgR3JpZFZpZXdTb3J0TW9kZS5Ob25lOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTb3J0Q29sdW1uKGdjb2wsIEdyaWRWaWV3U29ydE1vZGUuQXNjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgR3JpZFZpZXdTb3J0TW9kZS5Bc2M6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNvcnRDb2x1bW4oZ2NvbCwgR3JpZFZpZXdTb3J0TW9kZS5EZXNjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgR3JpZFZpZXdTb3J0TW9kZS5EZXNjOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTb3J0Q29sdW1uKGdjb2wsIEdyaWRWaWV3U29ydE1vZGUuTm9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBPbkNvbHVtbkRyYWdTdGFydCA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgU2NyaXB0LkNhbGwoXCJldi5kYXRhVHJhbnNmZXIuc2V0RGF0YVwiLCBcImdyaWR2aWV3Q29sdW1uRHJhZ1wiLCBldi5jdXJyZW50VGFyZ2V0LkFzPFJldHlwZWQuZG9tLkhUTUxFbGVtZW50PigpLmdldEF0dHJpYnV0ZShcImlcIikpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBPbkNvbHVtbkRyYWdPdmVyID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBPbkNvbHVtbkRyb3AgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKGV2LnRhcmdldCA9PSBudWxsIHx8ICEoZXYudGFyZ2V0IGlzIFJldHlwZWQuZG9tLkhUTUxTcGFuRWxlbWVudCkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBldi50YXJnZXQuQXM8UmV0eXBlZC5kb20uSFRNTFNwYW5FbGVtZW50PigpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHRhcmdldC5wYXJlbnRFbGVtZW50ICE9IEdyaWRIZWFkZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBIb3ZlckluZGV4ID0gU2NyaXB0LlBhcnNlSW50KHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJpXCIpKTtcclxuICAgICAgICAgICAgICAgIHZhciBTZWxlY3RlZEluZGV4ID0gU2NyaXB0LldyaXRlPGludD4oXCJwYXJzZUludChldi5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcXFwiZ3JpZHZpZXdDb2x1bW5EcmFnXFxcIikpO1wiKTtcclxuICAgICAgICAgICAgICAgIGlmKFNlbGVjdGVkSW5kZXggPT0gSG92ZXJJbmRleClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoSG92ZXJJbmRleCA8IDApXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIGludCB4ID0gU2NyaXB0LldyaXRlPGludD4oXCJldi5sYXllclhcIik7XHJcbiAgICAgICAgICAgICAgICB4IC09IChpbnQpdGFyZ2V0LmNsaWVudExlZnQ7XHJcbiAgICAgICAgICAgICAgICBpbnQgdyA9IChpbnQpdGFyZ2V0LmNsaWVudFdpZHRoIC8gMjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihIb3ZlckluZGV4ID09IFNlbGVjdGVkSW5kZXggLSAxICYmIHggPiB3KVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGlmKEhvdmVySW5kZXggPT0gU2VsZWN0ZWRJbmRleCArIDEgJiYgeCA8IHcpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHggPCB3KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIERyYWdJbmRleCA9IEhvdmVySW5kZXg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgRHJhZ0luZGV4ID0gSG92ZXJJbmRleCArIDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoRHJhZ0luZGV4IDwgMCB8fCBTZWxlY3RlZEluZGV4IDwgMClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB2YXIgY29sID0gQ29sdW1uc1tTZWxlY3RlZEluZGV4XTtcclxuICAgICAgICAgICAgICAgIGlmKERyYWdJbmRleCA9PSBDb2x1bW5zLkNvdW50KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIENvbHVtbnMuUmVtb3ZlKGNvbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgQ29sdW1ucy5BZGQoY29sKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29sMSA9IENvbHVtbnNbRHJhZ0luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICBDb2x1bW5zLlJlbW92ZShjb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgIENvbHVtbnMuSW5zZXJ0KENvbHVtbnMuSW5kZXhPZihjb2wxKSwgY29sKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBSZW5kZXJHcmlkKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE9uQ29sdW1uTW91c2VEb3duID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbnQgeCA9IFNjcmlwdC5Xcml0ZTxpbnQ+KFwiZXYubGF5ZXJYXCIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGV2LnRhcmdldC5BczxSZXR5cGVkLmRvbS5IVE1MU3BhbkVsZW1lbnQ+KCk7XHJcbiAgICAgICAgICAgICAgICB4IC09KGludCl0YXJnZXQuY2xpZW50TGVmdDtcclxuICAgICAgICAgICAgICAgIFJlc2l6ZVBhZ2VYID0gU2NyaXB0LldyaXRlPGludD4oXCJldi5wYWdlWFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBGb2N1c2VkQ29sdW1uID0gU2NyaXB0LlBhcnNlSW50KGV2LmN1cnJlbnRUYXJnZXQuQXM8UmV0eXBlZC5kb20uSFRNTEVsZW1lbnQ+KCkuZ2V0QXR0cmlidXRlKFwiaVwiKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoeCA+PSB0YXJnZXQuY2xpZW50V2lkdGggLSAyKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFJlc2l6ZUluZGV4ID0gU2NyaXB0LlBhcnNlSW50KHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJpXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICBSZXNpemVTcGFuID0gdGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIEZvcm0uU2V0Q3Vyc29yKFwiZWFzdC13ZXN0LXJlc2l6ZVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBSZXNpemVTcGFuID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBSZXNpemVJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBPbkNvbHVtbk1vdXNlTW92ZSA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoUmVzaXplSW5kZXggPT0gLTEpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50IHggPSBTY3JpcHQuV3JpdGU8aW50PihcImV2LmxheWVyWFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZXYudGFyZ2V0LkFzPFJldHlwZWQuZG9tLkhUTUxTcGFuRWxlbWVudD4oKTtcclxuICAgICAgICAgICAgICAgICAgICB4IC09IChpbnQpdGFyZ2V0LmNsaWVudExlZnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHggPj0gdGFyZ2V0LmNsaWVudFdpZHRoIC0gMilcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEZvcm0uU2V0Q3Vyc29yKFwiZWFzdC13ZXN0LXJlc2l6ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBGb3JtLlNldEN1cnNvcihcImRlZmF1bHRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBPbkNvbHVtbk1vdXNlTGVhdmUgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKFJlc2l6ZUluZGV4ID09IC0xKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIEZvcm0uU2V0Q3Vyc29yKFwiZGVmYXVsdFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIE9uUm93RHJhZ1N0YXJ0ID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBTY3JpcHQuQ2FsbChcImV2LmRhdGFUcmFuc2Zlci5zZXREYXRhXCIsIFwiZ3JpZHZpZXdSb3dEcmFnXCIsIFJldHlwZWQuZXM1LkpTT04uc3RyaW5naWZ5KERhdGFTb3VyY2VbU2NyaXB0LlBhcnNlSW50KGV2LmN1cnJlbnRUYXJnZXQuQXM8UmV0eXBlZC5kb20uSFRNTEVsZW1lbnQ+KCkuZ2V0QXR0cmlidXRlKFwiaVwiKSldLkdldE9mZmxpbmVEYXRhUm93KCkpKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIENvbnRlbnQuQXBwZW5kQ2hpbGRyZW4oR3JpZEZpbmRQYW5lbCwgR3JpZEhlYWRlckNvbnRhaW5lciwgR3JpZEJvZHlDb250YWluZXIpO1xyXG5cclxuICAgICAgICAgICAgRmlsdGVyUm93T25DaGFuZ2UgPSAodGUpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIENvbHVtbnNbU2NyaXB0LlBhcnNlSW50KHRlLkNvbnRlbnQuZ2V0QXR0cmlidXRlKFwiaVwiKSldLkZpbHRlclZhbHVlID0gdGUuVGV4dDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIEF1dG9HZW5lcmF0ZUNvbHVtbnNGcm9tU291cmNlID0gYXV0b0dlbmVyYXRlQ29sdW1ucztcclxuICAgICAgICAgICAgQ29sdW1uQXV0b1dpZHRoID0gY29sdW1uQXV0b1dpZHRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIERhdGFTb3VyY2VfT25EYXRhU291cmNlQ2hhbmdlZChvYmplY3Qgc2VuZGVyLCBFdmVudEFyZ3MgZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFNvcnRDb2x1bW4oKTtcclxuICAgICAgICAgICAgUmVuZGVyR3JpZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHZvaWQgUmVuZGVyKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhc2UuUmVuZGVyKCk7XHJcbiAgICAgICAgICAgIEhhc1JlbmRlcmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgUmVuZGVyR3JpZCgpO1xyXG5cclxuICAgICAgICAgICAgaWYoQ29udGVudC5wYXJlbnRFbGVtZW50ICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGZsb2F0IEdldFJhd1Zpc2libGVSb3dDb3VudCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKGZsb2F0KShHcmlkQm9keUNvbnRhaW5lci5jbGllbnRIZWlnaHQgPT0gMCA/IDAuMGYgOiBHcmlkQm9keUNvbnRhaW5lci5jbGllbnRIZWlnaHQgLyBVbml0SGVpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBmbG9hdCBHZXRSYXdUb3BSb3dJbmRleCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKGZsb2F0KShHcmlkQm9keUNvbnRhaW5lci5zY3JvbGxUb3AgPT0gMCA/IDAuMGYgOiBHcmlkQm9keUNvbnRhaW5lci5zY3JvbGxUb3AgLyBQaXhlbHNQZXJSb3coUm93Q291bnQoKSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgVmFsaWRhdGVHcmlkV2lkdGgoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIHdpZHRoID0gR2V0Q29sdW1uV2lkdGhzKCk7XHJcbiAgICAgICAgICAgIEdyaWRCb2R5LnN0eWxlLndpZHRoID0gKHdpZHRoKS5Ub1B4KCk7XHJcbiAgICAgICAgICAgIEdyaWRIZWFkZXIuc3R5bGUud2lkdGggPSAoKHdpZHRoKSArIDI0KS5Ub1B4KCk7IC8vICh3aWR0aCkuVG9QeCgpO1xyXG4gICAgICAgICAgICBpZihSaWdodE9mVGFibGUgPT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgUmlnaHRPZlRhYmxlID0gRGl2KCk7XHJcbiAgICAgICAgICAgICAgICBHcmlkQm9keS5BcHBlbmRDaGlsZChSaWdodE9mVGFibGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKFJpZ2h0T2ZUYWJsZUhlYWRlciA9PSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBSaWdodE9mVGFibGVIZWFkZXIgPSBEaXYoKTtcclxuICAgICAgICAgICAgICAgIEdyaWRIZWFkZXIuQXBwZW5kQ2hpbGQoUmlnaHRPZlRhYmxlSGVhZGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBSaWdodE9mVGFibGUuU2V0Qm91bmRzKHdpZHRoIC0gMSwgMCwgMSwgMSk7XHJcbiAgICAgICAgICAgIFJpZ2h0T2ZUYWJsZUhlYWRlci5TZXRCb3VuZHMod2lkdGggLSAxLCAwLCAxLCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBmbG9hdCBQaXhlbHNQZXJSb3coaW50IHJvd0NvdW50KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYocm93Q291bnQgPiBTZXR0aW5ncy5NYXhpbXVtUGl4ZWxTY3JvbGxpbmdSb3dzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMy4wZjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBVbml0SGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBWYWxpZGF0ZUdyaWRIZWlnaHQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGkgPSBSb3dDb3VudCgpO1xyXG4gICAgICAgICAgICB2YXIgcHByID0gUGl4ZWxzUGVyUm93KGkpO1xyXG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcHByICogKGkpO1xyXG5cclxuICAgICAgICAgICAgaWYoaSA+IFNldHRpbmdzLk1heGltdW1QaXhlbFNjcm9sbGluZ1Jvd3MgJiYgR3JpZEJvZHlDb250YWluZXIuY2xpZW50SGVpZ2h0ID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ICs9IChmbG9hdCkoKEdyaWRCb2R5Q29udGFpbmVyLmNsaWVudEhlaWdodCAvIFVuaXRIZWlnaHQpICogcHByKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgR3JpZEJvZHkuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0LlRvUHgoKTtcclxuICAgICAgICAgICAgaWYoQm90dG9uT2ZUYWJsZSA9PSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBCb3R0b25PZlRhYmxlID0gRGl2KCk7XHJcbiAgICAgICAgICAgICAgICBHcmlkQm9keS5BcHBlbmRDaGlsZChCb3R0b25PZlRhYmxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBCb3R0b25PZlRhYmxlLlNldEJvdW5kcygwLCBoZWlnaHQsIDEsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgVmFsaWRhdGVHcmlkU2l6ZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBWYWxpZGF0ZUdyaWRIZWlnaHQoKTtcclxuICAgICAgICAgICAgVmFsaWRhdGVHcmlkV2lkdGgoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIENsZWFySGVhZGVyKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEdyaWRIZWFkZXIuRW1wdHkoKTtcclxuICAgICAgICAgICAgR3JpZEhlYWRlci5BcHBlbmRDaGlsZChSaWdodE9mVGFibGVIZWFkZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQ2xlYXJDb2x1bW5zKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIENvbHVtbnMgPSBuZXcgTGlzdDxHcmlkVmlld0NvbHVtbj4oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIENsZWFyVmlldygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBfZGlzYWJsZVJlbmRlciA9IHRydWU7XHJcbiAgICAgICAgICAgIENvbHVtbnMgPSBuZXcgTGlzdDxHcmlkVmlld0NvbHVtbj4oKTtcclxuICAgICAgICAgICAgVmlzaWJsZVJvd0hhbmRsZXMgPSBuZXcgTGlzdDxpbnQ+KCk7XHJcbiAgICAgICAgICAgIFNlbGVjdGVkUm93cyA9IG5ldyBIYXJkU29mdExpc3Q8Ym9vbD4oZmFsc2UpO1xyXG4gICAgICAgICAgICBfZGF0YVNvdXJjZSA9IG51bGw7XHJcbiAgICAgICAgICAgIF9kaXNhYmxlUmVuZGVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgIFJlbmRlckdyaWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIENsZWFyQm9keSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBHcmlkQm9keS5FbXB0eSgpO1xyXG4gICAgICAgICAgICBHcmlkQm9keS5BcHBlbmRDaGlsZHJlbihSaWdodE9mVGFibGUsIEJvdHRvbk9mVGFibGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQ2xlYXJHcmlkKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIENsZWFySGVhZGVyKCk7XHJcbiAgICAgICAgICAgIENsZWFyQm9keSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGludFtdIEdldFNlbGVjdGVkUm93SGFuZGxlcygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBMaXN0PGludD4gbGlzdE9mSW50ID0gbmV3IExpc3Q8aW50PigpO1xyXG4gICAgICAgICAgICBpbnQgcm93Q291bnQgPSBSb3dDb3VudCgpOyAgICAgICAgXHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCByb3dDb3VudDsgaSsrKVxyXG4gICAgICAgICAgICB7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaW50IGluZGV4ID0gR2V0RGF0YVNvdXJjZVJvdyhpKTtcclxuICAgICAgICAgICAgICAgIGlmKFNlbGVjdGVkUm93cy5HZXRWYWx1ZShpbmRleCwgZmFsc2UpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RPZkludC5BZGQoaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGxpc3RPZkludC5Ub0FycmF5KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW50W10gR2V0U2VsZWN0ZWREYXRhUm93SGFuZGxlcygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBMaXN0PGludD4gbGlzdE9mSW50ID0gbmV3IExpc3Q8aW50PigpO1xyXG4gICAgICAgICAgICBpbnQgcm93Q291bnQgPSBSb3dDb3VudCgpO1xyXG4gICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgcm93Q291bnQ7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaW50IGluZGV4ID0gR2V0RGF0YVNvdXJjZVJvdyhpKTtcclxuICAgICAgICAgICAgICAgIGlmKFNlbGVjdGVkUm93cy5HZXRWYWx1ZShpbmRleCwgZmFsc2UpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RPZkludC5BZGQoaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBsaXN0T2ZJbnQuVG9BcnJheSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBpbnQgRHJhZ0luZGV4ID0gLTE7XHJcbiAgICAgICAgcHJpdmF0ZSBpbnQgUmVzaXplSW5kZXggPSAtMTtcclxuICAgICAgICBwcml2YXRlIGludCBSZXNpemVQYWdlWCA9IDA7XHJcbiAgICAgICAgcHJpdmF0ZSBSZXR5cGVkLmRvbS5IVE1MU3BhbkVsZW1lbnQgUmVzaXplU3BhbiA9IG51bGw7XHJcblxyXG4gICAgICAgIHByaXZhdGUgQWN0aW9uPFJldHlwZWQuZG9tLk1vdXNlRXZlbnQ+IE9uQ29sdW1uT25DbGljaztcclxuICAgICAgICBwcml2YXRlIEFjdGlvbjxSZXR5cGVkLmRvbS5FdmVudD4gT25Db2x1bW5EcmFnU3RhcnQ7XHJcbiAgICAgICAgcHJpdmF0ZSBBY3Rpb248UmV0eXBlZC5kb20uRXZlbnQ+IE9uQ29sdW1uRHJhZ092ZXI7XHJcbiAgICAgICAgcHJpdmF0ZSBBY3Rpb248UmV0eXBlZC5kb20uRXZlbnQ+IE9uQ29sdW1uRHJvcDtcclxuICAgICAgICBwcml2YXRlIEFjdGlvbjxSZXR5cGVkLmRvbS5Nb3VzZUV2ZW50PiBPbkNvbHVtbk1vdXNlRG93bjtcclxuICAgICAgICBwcml2YXRlIEFjdGlvbjxSZXR5cGVkLmRvbS5Nb3VzZUV2ZW50PiBPbkNvbHVtbk1vdXNlTW92ZTtcclxuICAgICAgICBwcml2YXRlIEFjdGlvbjxSZXR5cGVkLmRvbS5Nb3VzZUV2ZW50PiBPbkNvbHVtbk1vdXNlTGVhdmU7XHJcblxyXG4gICAgICAgIHByaXZhdGUgQWN0aW9uPFJldHlwZWQuZG9tLkV2ZW50PiBPblJvd0RyYWdTdGFydDtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIFNldHVwQ29sdW1uKFJldHlwZWQuZG9tLkhUTUxTcGFuRWxlbWVudCBzZSwgaW50IGluZGV4LCBHcmlkVmlld0NvbHVtbiBnY29sKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Uuc2V0QXR0cmlidXRlKFwiaVwiLCBDb252ZXJ0LlRvU3RyaW5nKGluZGV4KSk7XHJcbiAgICAgICAgICAgIHNlLnNldEF0dHJpYnV0ZShcImRyYWdnYWJsZVwiLCBcInRydWVcIik7XHJcbiAgICAgICAgICAgIHNlLm9uY2xpY2sgPSBuZXcgUmV0eXBlZC5kb20uSFRNTEVsZW1lbnQub25jbGlja0ZuKE9uQ29sdW1uT25DbGljayk7XHJcbiAgICAgICAgICAgIHNlLm9uZHJhZ3N0YXJ0ID0gbmV3IFJldHlwZWQuZG9tLkhUTUxFbGVtZW50Lm9uZHJhZ0ZuKE9uQ29sdW1uRHJhZ1N0YXJ0KTtcclxuICAgICAgICAgICAgc2Uub25kcmFnb3ZlciA9IG5ldyBSZXR5cGVkLmRvbS5IVE1MRWxlbWVudC5vbmRyYWdGbihPbkNvbHVtbkRyYWdPdmVyKTtcclxuICAgICAgICAgICAgc2Uub25kcm9wID0gbmV3IFJldHlwZWQuZG9tLkhUTUxFbGVtZW50Lm9uZHJhZ0ZuKE9uQ29sdW1uRHJvcCk7XHJcbiAgICAgICAgICAgIHNlLm9ubW91c2Vkb3duID0gbmV3IFJldHlwZWQuZG9tLkhUTUxFbGVtZW50Lm9uY2xpY2tGbihPbkNvbHVtbk1vdXNlRG93bik7XHJcbiAgICAgICAgICAgIHNlLm9ubW91c2Vtb3ZlID0gbmV3IFJldHlwZWQuZG9tLkhUTUxFbGVtZW50Lm9uY2xpY2tGbihPbkNvbHVtbk1vdXNlTW92ZSk7XHJcbiAgICAgICAgICAgIHNlLm9ubW91c2VsZWF2ZSA9IG5ldyBSZXR5cGVkLmRvbS5IVE1MRWxlbWVudC5vbmNsaWNrRm4oT25Db2x1bW5Nb3VzZUxlYXZlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgaW50IGxhc3RJZCA9IC0xO1xyXG5cclxuICAgICAgICBwcml2YXRlIGludCBQcmV2U2Nyb2xsID0gLTE7XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBQcm9jZXNzQmx1cigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihQcmV2U2Nyb2xsICE9IEdyaWRCb2R5Q29udGFpbmVyLnNjcm9sbFRvcClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgR3JpZEJvZHkuY2xhc3NMaXN0LmFkZChcImJsdXJcIik7XHJcbiAgICAgICAgICAgICAgICBpZihsYXN0SWQgIT0gLTEpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgUmV0eXBlZC5kb20uY2xlYXJUaW1lb3V0KGxhc3RJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdElkID0gLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGFzdElkID0gKGludClSZXR5cGVkLmRvbS5zZXRUaW1lb3V0KChnbG9iYWw6OlJldHlwZWQuZG9tLnNldFRpbWVvdXRGbikoKGEpID0+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgR3JpZEJvZHkuY2xhc3NMaXN0LnJlbW92ZShcImJsdXJcIik7XHJcbiAgICAgICAgICAgICAgICB9KSwgMTAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBQcmV2U2Nyb2xsID0gKGludClHcmlkQm9keUNvbnRhaW5lci5zY3JvbGxUb3A7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIEFjdGlvbjxUZXh0SW5wdXQ+IEZpbHRlclJvd09uQ2hhbmdlO1xyXG5cclxuICAgICAgICBwcml2YXRlIGludCBSZW5kZXJUaW1lID0gLTE7XHJcbiAgICAgICAgcHJpdmF0ZSBBY3Rpb24gcmVuZGVyR3JpZEludGVybmFsO1xyXG4gICAgICAgIHByaXZhdGUgYm9vbCBfZGlzYWJsZVJlbmRlciA9IGZhbHNlO1xyXG4gICAgICAgIHB1YmxpYyB2b2lkIFJlbmRlckdyaWQoYm9vbCBjbGVhciA9IHRydWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihfZGlzYWJsZVJlbmRlcilcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGlmKGNsZWFyKVxyXG4gICAgICAgICAgICAgICAgQ2FjaGVSb3cgPSBuZXcgRGljdGlvbmFyeTxpbnQsIFJldHlwZWQuZG9tLkhUTUxFbGVtZW50PigpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoUmVuZGVyVGltZSA+IC0xKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBSZXR5cGVkLmRvbS5jbGVhclRpbWVvdXQoUmVuZGVyVGltZSk7XHJcbiAgICAgICAgICAgICAgICBSZW5kZXJUaW1lID0gKGludClSZXR5cGVkLmRvbS5zZXRUaW1lb3V0KHJlbmRlckdyaWRJbnRlcm5hbCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZW5kZXJHcmlkSW50ZXJuYWwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIExpc3Q8UGFnZT4gR2V0UGFnZXMoTGF5b3V0IHBhZ2VMYXlvdXQsIFBhZ2VTaXplIHBhZ2VTaXplKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgTGlzdDxQYWdlPiBQYWdlcyA9IG5ldyBMaXN0PFBhZ2U+KCk7XHJcblxyXG4gICAgICAgICAgICBQYWdlIGFjdGl2ZVBhZ2UgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgZmxvYXQgeXAgPSAwO1xyXG4gICAgICAgICAgICBmbG9hdCB4cCA9IDA7XHJcblxyXG4gICAgICAgICAgICBmbG9hdCB3aWR0aDtcclxuICAgICAgICAgICAgZmxvYXQgaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgaWYocGFnZVNpemUgPT0gUGFnZVNpemUuQTQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKHBhZ2VMYXlvdXQgPT0gTGF5b3V0LkxhbmRzY2FwZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IDI5LjdmO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IDIxZjsgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gMjkuN2Y7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSAyMWY7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1lbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKHBhZ2VMYXlvdXQgPT0gTGF5b3V0LkxhbmRzY2FwZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IDQyZjtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSAyOS43ZjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSA0MmY7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSAyOS43ZjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWN0aXZlUGFnZSA9IG5ldyBQYWdlKCk7XHJcbiAgICAgICAgICAgIFBhZ2VzLkFkZChhY3RpdmVQYWdlKTtcclxuXHJcbiAgICAgICAgICAgIGZsb2F0IHNlcCA9IDA7XHJcblxyXG4gICAgICAgICAgICBpZihDb2x1bW5BdXRvV2lkdGgpXHJcbiAgICAgICAgICAgICAgICBzZXAgPSAod2lkdGggLyBHZXRWaXNpYmxlQ291bnQoKSk7XHJcblxyXG4gICAgICAgICAgICBpbnQgcm93SGVpZ2h0ID0gMjg7XHJcblxyXG4gICAgICAgICAgICBmb3IoaW50IHggPSAwOyB4IDwgQ29sdW1uQ291bnQoKTsgeCsrKVxyXG4gICAgICAgICAgICB7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYoQ29sdW1uc1t4XS5WaXNpYmxlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2xXaWR0aCA9IENvbHVtbkF1dG9XaWR0aCA/IHNlcCA6IENvbHVtbnNbeF0uV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgeXAgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29sSGVhZGVyID0gbmV3IENvbnRyb2woKTtcclxuICAgICAgICAgICAgICAgICAgICBjb2xIZWFkZXIuQm91bmRzID0gbmV3IFZlY3RvcjQoeHAsIHlwLCBjb2xXaWR0aCwgcm93SGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICBjb2xIZWFkZXIuQ29udGVudC50ZXh0Q29udGVudCA9IENvbHVtbnNbeF0uQ2FwdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICBjb2xIZWFkZXIuU3R5bGUuYm9yZGVyID0gXCIxcHggc29saWQgZ3JleVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbEhlYWRlci5TdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImxpZ2h0Z3JleVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbEhlYWRlci5TdHlsZS5jb2xvciA9IFwid2hpdGVcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlUGFnZS5BcHBlbmRDaGlsZChjb2xIZWFkZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB5cCArPSByb3dIZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvcihpbnQgeSA9IDA7IHkgPCBSb3dDb3VudCgpOyB5KyspXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm93Q2VsbCA9IG5ldyBDb250cm9sKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd0NlbGwuQm91bmRzID0gbmV3IFZlY3RvcjQoeHAsIHlwLCBjb2xXaWR0aCwgcm93SGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93Q2VsbC5Db250ZW50LnRleHRDb250ZW50ID0gIENvbHVtbnNbeF0uR2V0RGlzcGxheVZhbHVlQnlEYXRhUm93SGFuZGxlKEdldERhdGFTb3VyY2VSb3coeSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dDZWxsLlN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkIGxpZ2h0Z3JleVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVQYWdlLkFwcGVuZENoaWxkKHJvd0NlbGwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgeXAgKz0gcm93SGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB4cCArPSBjb2xXaWR0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIFBhZ2VzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgU29ydFNldHRpbmdcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgR3JpZFZpZXdDb2x1bW4gQ29sdW1uO1xyXG4gICAgICAgIHB1YmxpYyBHcmlkVmlld1NvcnRNb2RlIFNvcnRNb2RlO1xyXG4gICAgfVxyXG59IiwiXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIEdyaWRWaWV3Q2VsbERpc3BsYXlDaGVja0JveCA6IEdyaWRWaWV3Q2VsbERpc3BsYXlcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyByZXNvdXJjZV9jaGVja2VkID0gXCJjaGVja2VkXCI7XHJcblxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSBSZXR5cGVkLmRvbS5IVE1MRWxlbWVudCBPbkNyZWF0ZShHcmlkVmlldyBncmlkVmlldywgaW50IGRhdGFSb3dJbmRleCwgaW50IGNvbHVtbkluZGV4KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gZ3JpZFZpZXcuR2V0Um93Q2VsbFZhbHVlKGRhdGFSb3dJbmRleCwgY29sdW1uSW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNlbGwgPSBDb250cm9sLkRpdihcImNlbGxcIik7XHJcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IENvbnRyb2wuSW5wdXQoXCJcIiwgXCJjaGVja2JveFwiKTtcclxuICAgICAgICAgICAgaW5wdXQuU2V0Qm91bmRzRnVsbCgpO1xyXG4gICAgICAgICAgICBpbnB1dC5TZXRDaGVja2VkKHZhbHVlKTtcclxuICAgICAgICAgICAgaW5wdXQuc3R5bGUubWFyZ2luID0gXCIwXCI7XHJcbiAgICAgICAgICAgIGNlbGwuQXBwZW5kQ2hpbGQoaW5wdXQpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNlbGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIEdyaWRWaWV3Q2VsbERpc3BsYXlJbWFnZSA6IEdyaWRWaWV3Q2VsbERpc3BsYXlcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgYm9vbCBVc2VCYXNlNjRSZXNvdXJjZTtcclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIFJldHlwZWQuZG9tLkhUTUxFbGVtZW50IE9uQ3JlYXRlKEdyaWRWaWV3IGdyaWRWaWV3LCBpbnQgZGF0YVJvd0luZGV4LCBpbnQgY29sdW1uSW5kZXgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgc3JjID0gKGdyaWRWaWV3LkdldFJvd0NlbGxWYWx1ZShkYXRhUm93SW5kZXgsIGNvbHVtbkluZGV4KSArIFwiXCIpLkh0bWxVcmxFc2NhcGUoKTtcclxuICAgICAgICAgICAgdmFyIGltZ0RpdiA9IENvbnRyb2wuRGl2KFwiY2VsbFwiKTtcclxuXHJcbiAgICAgICAgICAgIGltZ0Rpdi5TZXRJbWFnZShzcmMsICFVc2VCYXNlNjRSZXNvdXJjZSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gaW1nRGl2O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5MaW5xO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxudXNpbmcgU3lzdGVtLlRocmVhZGluZy5UYXNrcztcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIEdyb3VwUGFuZWwgOiBDb250cm9sXHJcbiAgICB7XHJcbiAgICAgICAgcHJpdmF0ZSBSZXR5cGVkLmRvbS5IVE1MTGVnZW5kRWxlbWVudCBsZWdlbmQ7XHJcbiAgICAgICAgcHVibGljIHN0cmluZyBDYXB0aW9uXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gbGVnZW5kLnRleHRDb250ZW50OyB9XHJcbiAgICAgICAgICAgIHNldCB7IGxlZ2VuZC50ZXh0Q29udGVudCA9IHZhbHVlOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgR3JvdXBQYW5lbCgpIDogYmFzZShuZXcgUmV0eXBlZC5kb20uSFRNTEZpZWxkU2V0RWxlbWVudCgpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5Db250ZW50LkFwcGVuZENoaWxkKGxlZ2VuZCA9IG5ldyBSZXR5cGVkLmRvbS5IVE1MTGVnZW5kRWxlbWVudCgpKTtcclxuICAgICAgICAgICAgdGhpcy5Db250ZW50LmNsYXNzTmFtZSA9IFwiY29udHJvbCBpbnB1dGNvbnRyb2wgcG9wdXBcIjtcclxuICAgICAgICAgICAgbGVnZW5kLnN0eWxlLm1hcmdpbkxlZnQgPSBcIjdweFwiOyAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJcclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgSW1hZ2VFZGl0IDogQ29udHJvbFxyXG4gICAge1xyXG4gICAgICAgIHByaXZhdGUgQ29udHJvbCBfbm9JbWFnZURhdGFUZXh0O1xyXG5cclxuICAgICAgICBwcml2YXRlIGJvb2wgX2lzVVJMO1xyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBpc1VybFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIF9pc1VSTDsgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoX2lzVVJMICE9IHZhbHVlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIF9pc1VSTCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIFJlZnJlc2hJbWFnZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgSW1hZ2VFZGl0KCkgOiBiYXNlKFwiaW5wdXRjb250cm9sXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBfbm9JbWFnZURhdGFUZXh0ID0gbmV3IENvbnRyb2woXCJmb3JtLWhlYWRpbmctdGl0bGVcIik7XHJcbiAgICAgICAgICAgIF9ub0ltYWdlRGF0YVRleHQuQ29udGVudC5pbm5lckhUTUwgPSBcIk5vIGltYWdlIGRhdGFcIjtcclxuICAgICAgICAgICAgX25vSW1hZ2VEYXRhVGV4dC5Db250ZW50LnN0eWxlLmNvbG9yID0gXCJibGFja1wiO1xyXG4gICAgICAgICAgICBfbm9JbWFnZURhdGFUZXh0LkNvbnRlbnQuc3R5bGUudmlzaWJpbGl0eSA9IFwiaW5oZXJpdFwiO1xyXG5cclxuICAgICAgICAgICAgQ29udGVudC5BcHBlbmRDaGlsZChfbm9JbWFnZURhdGFUZXh0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RyaW5nIF9pbWFnZTtcclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgUmVmcmVzaEltYWdlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCFzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKF9pbWFnZSkpXHJcbiAgICAgICAgICAgIHsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBfbm9JbWFnZURhdGFUZXh0LkNvbnRlbnQuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBfaW1hZ2UgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgX25vSW1hZ2VEYXRhVGV4dC5Db250ZW50LnN0eWxlLnZpc2liaWxpdHkgPSBcImluaGVyaXRcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLlNldEltYWdlKF9pbWFnZSwgX2lzVVJMKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgSW1hZ2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBfaW1hZ2U7IH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKF9pbWFnZSA9PSB2YWx1ZSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBfaW1hZ2UgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIFJlZnJlc2hJbWFnZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLkxpbnE7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG51c2luZyBTeXN0ZW0uVGhyZWFkaW5nLlRhc2tzO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgUHJpbnRlckNvbnRyb2wgOiBDb250cm9sXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIExpc3Q8UGFnZT4gUGFnZXMgPSBuZXcgTGlzdDxQYWdlPigpOyAgICAgICAgXHJcbiAgICAgICAgcHJpdmF0ZSBQYWdlIF9mb2N1c2VkUGFnZSA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSBmbG9hdCBfc2NhbGUgPSAxO1xyXG4gICAgICAgIHByaXZhdGUgUmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQgd3JhcHBlcjtcclxuXHJcbiAgICAgICAgcHVibGljIEFjdGlvbjxQYWdlPiBPbkZvY3VzZWRQYWdlQ2hhbmdlZCA9IG51bGw7XHJcblxyXG4gICAgICAgIHB1YmxpYyBMYXlvdXQgUGFnZUxheW91dCA9IExheW91dC5Qb3J0cmFpdDtcclxuICAgICAgICBcclxuICAgICAgICBwdWJsaWMgdm9pZCBBZGRQYWdlcyhMaXN0PFBhZ2U+IHBhZ2VzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yZWFjaCh2YXIgcGFnZSBpbiBwYWdlcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYocGFnZSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFBhZ2VzLkFkZChwYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB3cmFwcGVyLkFwcGVuZENoaWxkKHBhZ2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBGb2N1c2VkUGFnZSA9IHBhZ2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2UuQ29udGVudC5vbmNsaWNrID0gKGV2KSA9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRm9jdXNlZFBhZ2UgPSBwYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihwYWdlLk9uQ2xpY2sgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2UuT25DbGljaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBmbG9hdCBTY2FsZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIF9zY2FsZTsgfVxyXG4gICAgICAgICAgICBzZXQge1xyXG4gICAgICAgICAgICAgICAgaWYodmFsdWUgPCAwLjEpXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAwLjFmO1xyXG4gICAgICAgICAgICAgICAgaWYodmFsdWUgPiA0KVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gNDtcclxuICAgICAgICAgICAgICAgIF9zY2FsZSA9IHZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgIHdyYXBwZXIuc3R5bGUudHJhbnNmb3JtID0gXCJzY2FsZShcIiArIF9zY2FsZSArIFwiKVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyBQYWdlIEZvY3VzZWRQYWdlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gX2ZvY3VzZWRQYWdlOyB9XHJcbiAgICAgICAgICAgIHNldCB7XHJcbiAgICAgICAgICAgICAgICBpZih2YWx1ZSAhPSBfZm9jdXNlZFBhZ2UpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoX2ZvY3VzZWRQYWdlICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9mb2N1c2VkUGFnZS5DbGFzc0xpc3QucmVtb3ZlKFwicGFnZS1mb2N1c2VkXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfZm9jdXNlZFBhZ2UgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoT25Gb2N1c2VkUGFnZUNoYW5nZWQgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgT25Gb2N1c2VkUGFnZUNoYW5nZWQoX2ZvY3VzZWRQYWdlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoX2ZvY3VzZWRQYWdlICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9mb2N1c2VkUGFnZS5DbGFzc0xpc3QuYWRkKFwicGFnZS1mb2N1c2VkXCIpO1xyXG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gUGFnZSBpcyBhIEhUTUxFbGVtZW50IC0gQXBwZW5kQ2hpbGQgYW5kIEFkZCB0aGUgcGFnZSB0byB0aGUgbGlzdFxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiZWxlbWVudFwiPjwvcGFyYW0+XHJcbiAgICAgICAgcHVibGljIHZvaWQgQWRkRWxlbWVudEZvY3VzZWRQYWdlKENvbnRyb2wgZWxlbWVudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEFkZEVsZW1lbnRGb2N1c2VkUGFnZShlbGVtZW50LkNvbnRlbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBQYWdlIGlzIGEgSFRNTEVsZW1lbnQgLSBBcHBlbmRDaGlsZCBhbmQgQWRkIHRoZSBwYWdlIHRvIHRoZSBsaXN0XHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJlbGVtZW50XCI+PC9wYXJhbT5cclxuICAgICAgICBwdWJsaWMgdm9pZCBBZGRFbGVtZW50Rm9jdXNlZFBhZ2UoUmV0eXBlZC5kb20uSFRNTEVsZW1lbnQgZWxlbWVudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKEZvY3VzZWRQYWdlID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiVGhlcmUgaXMgbm90IGZvY3VzZWQgcGFnZSFcIik7XHJcblxyXG4gICAgICAgICAgICBGb2N1c2VkUGFnZS5Db250ZW50LkFwcGVuZENoaWxkKGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFBhZ2UgQ3JlYXRlTmV3UGFnZShQYWdlU2l6ZSBzaXplID0gUGFnZVNpemUuQTQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgcGFnZSA9IG5ldyBQYWdlKClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgUGFnZVNpemUgPSBzaXplLFxyXG4gICAgICAgICAgICAgICAgTGF5b3V0ID0gUGFnZUxheW91dFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgUGFnZXMuQWRkKHBhZ2UpO1xyXG4gICAgICAgICAgICB3cmFwcGVyLkFwcGVuZENoaWxkKHBhZ2UpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgRm9jdXNlZFBhZ2UgPSBwYWdlO1xyXG5cclxuICAgICAgICAgICAgcGFnZS5Db250ZW50Lm9uY2xpY2sgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIEZvY3VzZWRQYWdlID0gcGFnZTtcclxuICAgICAgICAgICAgICAgIGlmKHBhZ2UuT25DbGljayAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2UuT25DbGljaygpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHBhZ2U7ICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFByaW50KClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gY3JlYXRlIGFuIGlmcmFtZSAtIGFkZCBjc3MgZm9yIHRoZSBwcmludGluZy5cclxuICAgICAgICAgICAgLy8gYWxzbyB0aGUgY29udGVudFxyXG4gICAgICAgICAgICB2YXIgcHJpbnRpbmdGcmFtZSA9IFJldHlwZWQuZG9tLndpbmRvdy5vcGVuKFwiXCIsIFwiXCIpO1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9ICBSZXR5cGVkLmRvbS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImV4cHJlc3NjcmFmdFwiKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJJbmZvID0gXCJcIjtcclxuICAgICAgICAgICAgaWYoZWxlbWVudCAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgZXh0cmE7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoUGFnZUxheW91dCA9PSBMYXlvdXQuUG9ydHJhaXQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0cmEgPSBcIjxzdHlsZSB0eXBlPSd0ZXh0L2NzcycgbWVkaWE9J3ByaW50Jz4gQHBhZ2UgeyBzaXplOiBwb3J0YWl0OyBtYXJnaW46MDsgfSBwYWdlIHsgbWFyZ2luOjAgIWltcG9ydGFudDsgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50OyBvdmVyZmxvdzogaGlkZGVuOyB9IC5wcmludC1ib2R5IHsgbWFyZ2luOjAgIWltcG9ydGFudDsgb3ZlcmZsb3c6IHZpc2libGUgIWltcG9ydGFudDsgfSBwYWdlOmZpcnN0LWNoaWxkIHsgIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDsgfSA8L3N0eWxlPlwiOyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0cmEgPSBcIjxzdHlsZSB0eXBlPSd0ZXh0L2NzcycgbWVkaWE9J3ByaW50Jz4gQHBhZ2UgeyBzaXplOiBsYW5kc2NhcGU7IG1hcmdpbjowOyB9IHBhZ2UgeyBtYXJnaW46MCAhaW1wb3J0YW50OyBib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7IG92ZXJmbG93OiBoaWRkZW47IH0gLnByaW50LWJvZHkgeyBtYXJnaW46MCAhaW1wb3J0YW50OyBvdmVyZmxvdzogdmlzaWJsZSAhaW1wb3J0YW50OyB9IHBhZ2U6Zmlyc3QtY2hpbGQgeyAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50OyB9IDwvc3R5bGU+XCI7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJJbmZvID0gXCI8aGVhZD5cIiArIGVsZW1lbnQub3V0ZXJIVE1MICsgXCJcXHJcXG5cIiArIGV4dHJhICsgXCI8L2hlYWQ+XCI7XHJcblxyXG4vLyAgICAgICAgICAgICAgICA8c3R5bGUgdHlwZT1cInRleHQvY3NzXCIgbWVkaWE9XCJwcmludFwiPlxyXG4vLyAgQHBhZ2UgeyBzaXplOiBsYW5kc2NhcGU7IH1cclxuLy88L3N0eWxlPlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKEZvY3VzZWRQYWdlICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIEZvY3VzZWRQYWdlLkNsYXNzTGlzdC5yZW1vdmUoXCJwYWdlLWZvY3VzZWRcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJpbnRpbmdGcmFtZS5kb2N1bWVudC53cml0ZShcIjxodG1sPjx0aXRsZT5QcmludGluZy4uLjwvdGl0bGU+XCIgKyBoZWFkZXJJbmZvICsgXCI8Ym9keT5cIiArIENvbnRlbnQub3V0ZXJIVE1MICsgXCI8L2JvZHk+PC9odG1sPlwiKTtcclxuICAgICAgICAgICAgcHJpbnRpbmdGcmFtZS5kb2N1bWVudC5jbG9zZSgpO1xyXG4gICAgICAgICAgICBwcmludGluZ0ZyYW1lLmZvY3VzKCk7XHJcblxyXG4gICAgICAgICAgICBwcmludGluZ0ZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIChnbG9iYWw6OlN5c3RlbS5BY3Rpb248Z2xvYmFsOjpSZXR5cGVkLmRvbS5FdmVudD4pKChSZXR5cGVkLmRvbS5FdmVudCBhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwcmludGluZ0ZyYW1lLnByaW50KCk7XHJcbiAgICAgICAgICAgICAgICBwcmludGluZ0ZyYW1lLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuXHJcblxyXG4gICAgICAgICAgICAvL3ByaW50aW5nRnJhbWUuRG9jdW1lbnQuQWRkRXZlbnRMaXN0ZW5lcihFdmVudFR5cGUuTG9hZCwgKCkgPT5cclxuICAgICAgICAgICAgLy97XHJcbiAgICAgICAgICAgIC8vICAgIEdsb2JhbC5BbGVydChcIkhlbGxvXCIpO1xyXG4gICAgICAgICAgICAvLyAgICBwcmludGluZ0ZyYW1lLkZvY3VzKCk7XHJcbiAgICAgICAgICAgIC8vICAgIHByaW50aW5nRnJhbWUuUHJpbnQoKTtcclxuICAgICAgICAgICAgLy99KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKEZvY3VzZWRQYWdlICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIEZvY3VzZWRQYWdlLkNsYXNzTGlzdC5hZGQoXCJwYWdlLWZvY3VzZWRcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBQcmludGVyQ29udHJvbCgpIDogYmFzZShcInByaW50LWJvZHlcIilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFN0eWxlLm92ZXJmbG93ID0gXCJhdXRvXCI7XHJcblxyXG4gICAgICAgICAgICB3cmFwcGVyID0gbmV3IFJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50KCk7XHJcbiAgICAgICAgICAgIHdyYXBwZXIuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gXCI1MCUgMCAwXCI7XHJcbiAgICAgICAgICAgIHdyYXBwZXIuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XHJcbiAgICAgICAgICAgIC8vd3JhcHBlci5TdHlsZS5NYXJnaW4gPSBcIjAgYXV0b1wiO1xyXG5cclxuICAgICAgICAgICAgQ29udGVudC5BcHBlbmRDaGlsZCh3cmFwcGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIFBhZ2UgOiBDb250cm9sXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIEFjdGlvbiBPbkNsaWNrID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHVibGljIFBhZ2UoKSA6IGJhc2UoUmV0eXBlZC5kb20uZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBhZ2VcIikpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDbGFzc0xpc3QucmVtb3ZlKFwiY29udHJvbFwiKTtcclxuXHJcbiAgICAgICAgICAgIFBhZ2VTaXplID0gUGFnZVNpemUuQTQ7ICAgICAgICAgICAgXHJcbiAgICAgICAgfSAgICAgICAgXHJcblxyXG4gICAgICAgIHB1YmxpYyBQYWdlU2l6ZSBQYWdlU2l6ZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IEdldEF0dHJpYnV0ZShcInNpemVcIik7XHJcbiAgICAgICAgICAgICAgICAgaWYodmFsdWUgPT0gXCJBNVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQYWdlU2l6ZS5BNTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBQYWdlU2l6ZS5BNDtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0IHtcclxuICAgICAgICAgICAgICAgIFNldEF0dHJpYnV0ZShcInNpemVcIiwgdmFsdWUuVG9TdHJpbmcoXCJHXCIpKTsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBMYXlvdXQgTGF5b3V0XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gR2V0QXR0cmlidXRlKFwibGF5b3V0XCIpO1xyXG4gICAgICAgICAgICAgICAgaWYodmFsdWUgPT0gXCJMYW5kc2NhcGVcIilcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTGF5b3V0LkxhbmRzY2FwZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBMYXlvdXQuUG9ydHJhaXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFNldEF0dHJpYnV0ZShcImxheW91dFwiLCB2YWx1ZS5Ub1N0cmluZyhcIkdcIikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW51bSBQYWdlU2l6ZVxyXG4gICAge1xyXG4gICAgICAgIEE0LFxyXG4gICAgICAgIEE1XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGVudW0gTGF5b3V0XHJcbiAgICB7XHJcbiAgICAgICAgUG9ydHJhaXQsXHJcbiAgICAgICAgTGFuZHNjYXBlXHJcbiAgICB9XHJcbn1cclxuIiwidXNpbmcgQnJpZGdlO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgUHJvZ3Jlc3NDb250cm9sIDogQ29udHJvbFxyXG4gICAge1xyXG4gICAgICAgIHByaXZhdGUgaW50IHBvc2l0aW9uO1xyXG5cclxuICAgICAgICBwdWJsaWMgUmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQgaW50ZXJuYWxQcm9ncmVzc0NvbnRyb2w7XHJcblxyXG4gICAgICAgIHByaXZhdGUgaW50IG1heGltdW07XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbnQgU3RlcCA9IDE7XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIERpc2FibGVVcGRhdGUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgTmV4dFN0ZXAoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgUG9zaXRpb24gKz0gU3RlcDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbnQgTWF4aW11bVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIG1heGltdW07IH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKHZhbHVlIDwgMSlcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IDE7XHJcbiAgICAgICAgICAgICAgICBpZih2YWx1ZSA8IHBvc2l0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBtYXhpbXVtID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZighRGlzYWJsZVVwZGF0ZSlcclxuICAgICAgICAgICAgICAgICAgICBVcGRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGludCBQb3NpdGlvblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIHBvc2l0aW9uOyB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZih2YWx1ZSA8IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZih2YWx1ZSA+IG1heGltdW0pXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBtYXhpbXVtO1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGlmKCFEaXNhYmxlVXBkYXRlKVxyXG4gICAgICAgICAgICAgICAgICAgIFVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgUHJvZ3Jlc3NDb250cm9sKCkgOiBiYXNlKFwicHJvZ3Jlc3NiYXJcIilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludGVybmFsUHJvZ3Jlc3NDb250cm9sID0gRGl2KFwicHJvZ3Jlc3NiYXJib2R5XCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHZvaWQgUmVuZGVyKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhc2UuUmVuZGVyKCk7XHJcblxyXG4gICAgICAgICAgICBDb250ZW50LkFwcGVuZENoaWxkKGludGVybmFsUHJvZ3Jlc3NDb250cm9sKTtcclxuXHJcbiAgICAgICAgICAgIFVwZGF0ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgVXBkYXRlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKERpc2FibGVVcGRhdGUgfHwgaW50ZXJuYWxQcm9ncmVzc0NvbnRyb2wgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgaWYobWF4aW11bSA9PSAwIHx8IHBvc2l0aW9uID09IDApXHJcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFByb2dyZXNzQ29udHJvbC5zdHlsZS53aWR0aCA9IFwiMCVcIjtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgc291cmNlID0gU2NyaXB0LldyaXRlPHN0cmluZz4oXCIoKHRoaXMucG9zaXRpb24gLyB0aGlzLm1heGltdW0pICogMTAwLjAwKSArICclJ1wiKTtcclxuICAgICAgICAgICAgICAgIGludGVybmFsUHJvZ3Jlc3NDb250cm9sLnN0eWxlLndpZHRoID0gXCJjYWxjKFwiICsgc291cmNlICsgXCIgLSAycHgpXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uTGlucTtcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcbnVzaW5nIFN5c3RlbS5UaHJlYWRpbmcuVGFza3M7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBSYWRpb0VkaXQgOiBDb250cm9sXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIExpc3Q8UmFkaW9FbGVtZW50PiBSYWRpb0VsZW1lbnRzID0gbmV3IExpc3Q8UmFkaW9FbGVtZW50PigpO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIGxvbmcgUmFkaW9JZDtcclxuICAgICAgICBwcml2YXRlIHN0cmluZyBkZWZhdWx0TmFtZSA9IFwiXCI7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgUmFuZG9tIHJuZyA9IG5ldyBSYW5kb20oKTtcclxuICAgICAgICBwdWJsaWMgQWN0aW9uPFJhZGlvRWxlbWVudD4gT25DaGVja0NoYW5nZWQ7XHJcblxyXG4gICAgICAgIHB1YmxpYyBSYWRpb0VkaXQoKSA6IGJhc2UoXCJpbnB1dGNvbnRyb2wgcG9wdXBcIilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFJhZGlvSWQrKztcclxuICAgICAgICAgICAgaWYoUmFkaW9JZCA+IDIwMDAwKVxyXG4gICAgICAgICAgICAgICAgUmFkaW9JZCA9IDA7XHJcbiAgICAgICAgICAgICBcclxuICAgICAgICAgICAgZGVmYXVsdE5hbWUgPSBcIl9fcmFkaW9fZ3JvdXBfaW50ZXJuYWxfXCIgKyBSYWRpb0lkLlRvU3RyaW5nKCkgKyBcIl9ybmdfXCIgKyBybmcuTmV4dCgxLCAxMDAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcHVibGljIFJhZGlvRWxlbWVudCBTZWxlY3RlZFJhZGlvRWxlbWVudFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciBzaSA9IFNlbGVjdGVkSW5kZXg7XHJcbiAgICAgICAgICAgICAgICBpZihzaSA9PSAtMSB8fCBzaSA+PSBSYWRpb0VsZW1lbnRzLkNvdW50KVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJhZGlvRWxlbWVudHNbc2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBBZGRJdGVtcyhwYXJhbXMgc3RyaW5nW10gaXRlbXMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihpdGVtcyA9PSBudWxsIHx8IGl0ZW1zLkxlbmd0aCA9PSAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBmb3JlYWNoKHZhciBpdGVtIGluIGl0ZW1zKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBBZGRFbGVtZW50KG5ldyBSYWRpb0VsZW1lbnQoKSB7IENhcHRpb24gPSBpdGVtIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW50IFNlbGVjdGVkSW5kZXhcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7XHJcbiAgICAgICAgICAgICAgICBpZihSYWRpb0VsZW1lbnRzID09IG51bGwgfHwgUmFkaW9FbGVtZW50cy5Db3VudCA9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgIGludCBpID0gMDtcclxuICAgICAgICAgICAgICAgIGZvcmVhY2godmFyIGl0ZW0gaW4gUmFkaW9FbGVtZW50cylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihpdGVtLkNoZWNrZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXQge1xyXG4gICAgICAgICAgICAgICAgaW50IGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgZm9yZWFjaCh2YXIgaXRlbSBpbiBSYWRpb0VsZW1lbnRzKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGkgPT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uQ2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLkNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQWRkRWxlbWVudChSYWRpb0VsZW1lbnQgZWxlbWVudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKGVsZW1lbnQgIT0gbnVsbCAmJiBlbGVtZW50LkNvbnRlbnQgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5Db250ZW50LnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgZGVmYXVsdE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5BcHBlbmRDaGlsZChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIFJhZGlvRWxlbWVudHMuQWRkKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5Qcm9jZXNzUmVuZGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5PblRleHRDaGFuZ2VkID0gKHNlbmRlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKE9uQ2hlY2tDaGFuZ2VkICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9uQ2hlY2tDaGFuZ2VkKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihSYWRpb0VsZW1lbnRzLkNvdW50ID09IDEpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5TdHlsZS5tYXJnaW5MZWZ0ID0gXCIwXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEFkZEVsZW1lbnRzKHBhcmFtcyBSYWRpb0VsZW1lbnRbXSBlbGVtZW50cylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKGVsZW1lbnRzICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZvcmVhY2godmFyIGVsZW1lbnQgaW4gZWxlbWVudHMpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZWxlbWVudCAhPSBudWxsICYmIGVsZW1lbnQuQ29udGVudCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5Db250ZW50LnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgZGVmYXVsdE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5BcHBlbmRDaGlsZChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmFkaW9FbGVtZW50cy5BZGQoZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LlByb2Nlc3NSZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoUmFkaW9FbGVtZW50cy5Db3VudCA9PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LlN0eWxlLm1hcmdpbkxlZnQgPSBcIjBcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgUmFkaW9FbGVtZW50IDogVGV4dElucHV0XHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHN0cmluZyBfY2FwdGlvbjtcclxuICAgICAgICBwdWJsaWMgc3RyaW5nIFRhZztcclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgUHJvY2Vzc0lzRW5hYmxlZCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihsYWJlbEVsZW1lbnQgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGlmKEVuYWJsZWQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICAgICAgICAgIGxhYmVsRWxlbWVudC5zdHlsZS5jb2xvciA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICBsYWJlbEVsZW1lbnQuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICBsYWJlbEVsZW1lbnQuc3R5bGUuY29sb3IgPSBcImdyZXlcIjtcclxuICAgICAgICAgICAgICAgIGxhYmVsRWxlbWVudC5zdHlsZS5jdXJzb3IgPSBcIm5vdC1hbGxvd2VkXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBSZXR5cGVkLmRvbS5IVE1MTGFiZWxFbGVtZW50IGxhYmVsRWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgcHVibGljIHN0cmluZyBDYXB0aW9uXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gX2NhcHRpb247IH1cclxuICAgICAgICAgICAgc2V0IHtcclxuICAgICAgICAgICAgICAgIGlmKF9jYXB0aW9uICE9IHZhbHVlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIF9jYXB0aW9uID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgUHJvY2Vzc1JlbmRlcigpOyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIENoZWNrZWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiAgQ29udGVudC5BczxSZXR5cGVkLmRvbS5IVE1MSW5wdXRFbGVtZW50PigpLkBjaGVja2VkOyB9XHJcbiAgICAgICAgICAgIHNldCB7IENvbnRlbnQuQXM8UmV0eXBlZC5kb20uSFRNTElucHV0RWxlbWVudD4oKS5AY2hlY2tlZCA9IHZhbHVlOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBQcm9jZXNzUmVuZGVyKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCFIYXNSZW5kZXJlZCkgLy8gY2FsbCB3aGVuIGFkZGVkIHRvIGVsZW1lbnRcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGlmKGxhYmVsRWxlbWVudCA9PSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLkNvbnRlbnQucGFyZW50RWxlbWVudCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsRWxlbWVudCA9IG5ldyBSZXR5cGVkLmRvbS5IVE1MTGFiZWxFbGVtZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjb250cm9sXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsRWxlbWVudC5zdHlsZS5tYXJnaW5MZWZ0ID0gXCIxNnB4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxFbGVtZW50LnN0eWxlLnRleHRJbmRlbnQgPSBcIjBcIjtcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbEVsZW1lbnQuc3R5bGUubGVmdCA9IFwiM3B4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxFbGVtZW50Lmh0bWxGb3IgPSB0aGlzLkNvbnRlbnQuaWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsRWxlbWVudC5pbm5lckhUTUwgPSBfY2FwdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5Db250ZW50Lm5leHRFbGVtZW50U2libGluZyA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkNvbnRlbnQucGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZDxSZXR5cGVkLmRvbS5IVE1MQlJFbGVtZW50PihuZXcgUmV0eXBlZC5kb20uSFRNTEJSRWxlbWVudCgpKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuQ29udGVudC5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZTxSZXR5cGVkLmRvbS5IVE1MQlJFbGVtZW50PihuZXcgUmV0eXBlZC5kb20uSFRNTEJSRWxlbWVudCgpLCB0aGlzLkNvbnRlbnQubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5Db250ZW50Lm5leHRFbGVtZW50U2libGluZyA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkNvbnRlbnQucGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZDxIVE1MTGFiZWxFbGVtZW50PihsYWJlbEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Db250ZW50LnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlPEhUTUxMYWJlbEVsZW1lbnQ+KGxhYmVsRWxlbWVudCwgdGhpcy5Db250ZW50Lm5leHRFbGVtZW50U2libGluZyk7XHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9ZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbEVsZW1lbnQuaW5uZXJIVE1MID0gX2NhcHRpb247XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFByb2Nlc3NJc0VuYWJsZWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIFJlbmRlcigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBIYXNSZW5kZXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBiYXNlLlJlbmRlcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgbG9uZyBSYWRpb0lkO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIFJhbmRvbSBybmcgPSBuZXcgUmFuZG9tKCk7XHJcblxyXG4gICAgICAgIHB1YmxpYyBSYWRpb0VsZW1lbnQoKSA6IGJhc2UoXCJyYWRpb1wiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgUmFkaW9JZCsrO1xyXG4gICAgICAgICAgICBpZihSYWRpb0lkID4gMjAwMDApXHJcbiAgICAgICAgICAgICAgICBSYWRpb0lkID0gMDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuQ29udGVudC5pZCA9IFwiX19yYWRpb19pbnRlcm5hbF9cIiArIFJhZGlvSWQuVG9TdHJpbmcoKSArIFwiX3JuZ19cIiArIHJuZy5OZXh0KDEsIDEwMDApLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIFN0eWxlLm1hcmdpbkxlZnQgPSBcIjNweFwiO1xyXG4gICAgICAgICAgICBTdHlsZS50ZXh0SW5kZW50ID0gXCIwXCI7XHJcbiAgICAgICAgICAgIENsYXNzTGlzdC5yZW1vdmUoXCJDb250cm9sXCIpO1xyXG4gICAgICAgICAgICBDbGFzc0xpc3QucmVtb3ZlKFwiaW5wdXRjb250cm9sXCIpOyAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXHJcbiAgICB9XHJcbn1cclxuIiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLkxpbnE7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG51c2luZyBTeXN0ZW0uVGhyZWFkaW5nLlRhc2tzO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgUmliYm9uSXRlbSA6IENvbnRyb2xcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgYm9vbCBCZWdpbkdyb3VwID0gZmFsc2U7XHJcbiAgICAgICAgcHVibGljIGJvb2wgSXNTbWFsbEl0ZW0gPSBmYWxzZTtcclxuICAgICAgICBwdWJsaWMgUmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQgY2FwdGlvbkRpdiA9IG51bGw7XHJcbiAgICAgICAgcHVibGljIHZvaWQgUHJvY2Vzc0NhcHRpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoY2FwdGlvbkRpdiAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjYXB0aW9uRGl2LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgY2FwdGlvbkRpdiA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoIXN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoQ2FwdGlvbikpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhcHRpb25EaXYgPSBEaXYoSXNTbWFsbEl0ZW0gPyBcInJpYmJvbmJ1dHRvbnNtYWxsY2FwdGlvblwiIDogXCJyaWJib25idXR0b25jYXB0aW9uXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhcHRpb25EaXYuaW5uZXJIVE1MID0gQ2FwdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICBDb250ZW50LkFwcGVuZENoaWxkKGNhcHRpb25EaXYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0cmluZyBfY2FwdGlvbiA9IFwiXCI7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgQ2FwdGlvblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfY2FwdGlvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoX2NhcHRpb24gIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2NhcHRpb24gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBQcm9jZXNzQ2FwdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgUmliYm9uSXRlbShzdHJpbmcgY2xhc3NOYW1lKSA6IGJhc2UoY2xhc3NOYW1lKVxyXG4gICAgICAgIHtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgdmlydHVhbCB2b2lkIE9uU2V0RW5hYmxlZChib29sIHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYodmFsdWUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKGNhcHRpb25EaXYgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXB0aW9uRGl2LmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHsgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZihjYXB0aW9uRGl2ICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FwdGlvbkRpdi5jbGFzc0xpc3QuYWRkKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9ICAgICAgICBcclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGJvb2wgZW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgcHVibGljIHZvaWQgc2V0RW5hYmxlZChib29sIHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ2hhbmdlU3RhdGUodmFsdWUpO1xyXG4gICAgICAgICAgICBPblNldEVuYWJsZWQodmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgRW5hYmxlZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbmFibGVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBzZXRFbmFibGVkKHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJ1c2luZyBCcmlkZ2U7XHJcbnVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIFtOYW1lc3BhY2UodHJ1ZSldXHJcbiAgICBwdWJsaWMgY2xhc3MgUmliYm9uQ29udHJvbCA6IENvbnRyb2wsIElQYWdlc1xyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBMaXN0PFJpYmJvblBhZ2U+IFJpYmJvblBhZ2VzIHsgZ2V0OyBzZXQ7IH1cclxuICAgICAgICBwdWJsaWMgc3RyaW5nIEljb25VUkwgPSBcImZhdi5pY29cIjtcclxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgUmliYm9uVHlwZSBUeXBlO1xyXG4gICAgICAgIHB1YmxpYyBSZXR5cGVkLmRvbS5IVE1MRGl2RWxlbWVudCBBcHBsaWNhdGlvbkljb24gPSBudWxsO1xyXG4gICAgICAgIHB1YmxpYyBBY3Rpb248aW50LCBSaWJib25QYWdlPiBPblNlbGVjdGVkUGFnZUNoYW5nZSA9IG51bGw7XHJcblxyXG4gICAgICAgIHB1YmxpYyBlbnVtIFJpYmJvblR5cGVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEZ1bGwsXHJcbiAgICAgICAgICAgIENvbXBhY3RcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBSaWJib25Db250cm9sKFJpYmJvblR5cGUgdHlwZSA9IFJpYmJvblR5cGUuRnVsbCkgOiBiYXNlKFwicmliYm9uY29udHJvbFwiICsgKHR5cGUgPT0gUmliYm9uVHlwZS5GdWxsID8gXCJcIiA6IFwiIHJpYmJvbmNvbnRyb2wtY29tcGFjdFwiKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFR5cGUgPSB0eXBlO1xyXG5cclxuICAgICAgICAgICAgQ29udGVudC5vbmNvbnRleHRtZW51ID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBBZGRSaWJib25QYWdlcyhwYXJhbXMgUmliYm9uUGFnZVtdIHBhZ2VzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYocGFnZXMgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yZWFjaCh2YXIgaXRlbSBpbiBwYWdlcylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihpdGVtICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBSaWJib25QYWdlcy5BZGQoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGludCBzZWxlY3RlZGluZGV4ID0gLTE7XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbnQgU2VsZWN0ZWRJbmRleFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZGluZGV4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZih2YWx1ZSA8IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYoc2VsZWN0ZWRpbmRleCA+PSBSaWJib25QYWdlcy5Db3VudClcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZGluZGV4ID0gUmliYm9uUGFnZXMuQ291bnQgLSAxO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHNlbGVjdGVkaW5kZXggIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRpbmRleCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKE9uU2VsZWN0ZWRQYWdlQ2hhbmdlICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9uU2VsZWN0ZWRQYWdlQ2hhbmdlKHNlbGVjdGVkaW5kZXgsIFJpYmJvblBhZ2VzW3NlbGVjdGVkaW5kZXhdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFNldFNlbGVjdGVkSW5kZXgodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBNZW51Q2xpY2soKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoSGVscGVyLk5vdERlc2t0b3ApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgU2V0U2VsZWN0ZWRJbmRleChpbnQgaW5kZXgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihSaWJib25QYWdlcyAhPSBudWxsICYmIFJpYmJvblBhZ2VzLkNvdW50ID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IFJpYmJvblBhZ2VzLkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoUmliYm9uUGFnZXNbaV0uUmliYm9uSGVhZGVyICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBSaWJib25QYWdlc1tpXS5SaWJib25IZWFkZXIuY2xhc3NMaXN0LnJlbW92ZShcInJpYmJvbnBhZ2VoZWFkZXItaGlkZGVuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBSaWJib25QYWdlc1tpXS5SaWJib25IZWFkZXIuY2xhc3NMaXN0LnJlbW92ZShcInJpYmJvbnBhZ2VoZWFkZXItYWN0aXZlXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaSA9PSBpbmRleClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmliYm9uUGFnZXNbaV0uUmliYm9uSGVhZGVyLmNsYXNzTGlzdC5hZGQoXCJyaWJib25wYWdlaGVhZGVyLWFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJpYmJvblBhZ2VzW2ldLkNvbnRlbnQuc3R5bGUudmlzaWJpbGl0eSA9IFwiaW5oZXJpdFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmliYm9uUGFnZXNbaV0uUmliYm9uSGVhZGVyLmNsYXNzTGlzdC5hZGQoXCJyaWJib25wYWdlaGVhZGVyLWhpZGRlblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJpYmJvblBhZ2VzW2ldLkNvbnRlbnQuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIFJlbmRlcigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBIYXNSZW5kZXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmKFR5cGUgPT0gUmliYm9uVHlwZS5GdWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihBcHBsaWNhdGlvbkljb24gIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkljb24uRGVsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkljb24gPSBEaXYoXCJhcHBsaWNhdGlvbi1pY29uXCIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcEljb25JbWFnZSA9IERpdihcImZhdi1pY29uXCIpO1xyXG4gICAgICAgICAgICAgICAgYXBwSWNvbkltYWdlLnN0eWxlLmJhY2tncm91bmQgPSBSaWJib25CdXR0b24uR2V0SW1hZ2VTdHJpbmdVUkkoSWNvblVSTCk7XHJcbiAgICAgICAgICAgICAgICBhcHBJY29uSW1hZ2Uuc3R5bGUuYmFja2dyb3VuZFNpemUgPSBcIjEwMCUgMTAwJVwiO1xyXG5cclxuICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uSWNvbi5BcHBlbmRDaGlsZChhcHBJY29uSW1hZ2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIENvbnRlbnQuQXBwZW5kQ2hpbGQoQXBwbGljYXRpb25JY29uKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoUmliYm9uUGFnZXMgIT0gbnVsbCAmJiBSaWJib25QYWdlcy5Db3VudCA+IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGludCB3aWR0aCA9IDU4O1xyXG4gICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IFJpYmJvblBhZ2VzLkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoQ29udGVudC5jb250YWlucyhSaWJib25QYWdlc1tpXSkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBSaWJib25QYWdlc1tpXS5Db250ZW50LkRlbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBSaWJib25QYWdlc1tpXS5SaWJib25IZWFkZXIuRGVsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFJpYmJvblBhZ2VzW2ldLlJlbmRlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihUeXBlID09IFJpYmJvblR5cGUuQ29tcGFjdClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFSaWJib25QYWdlc1tpXS5Db250ZW50LmNsYXNzTmFtZS5Db250YWlucyhcInJpYmJvbnBhZ2UtY29tcGFjdFwiKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJpYmJvblBhZ2VzW2ldLkNvbnRlbnQuY2xhc3NMaXN0LmFkZChcInJpYmJvbnBhZ2UtY29tcGFjdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoUmliYm9uUGFnZXNbaV0uQ29udGVudC5jbGFzc05hbWUuQ29udGFpbnMoXCJyaWJib25wYWdlLWNvbXBhY3RcIikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSaWJib25QYWdlc1tpXS5Db250ZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJyaWJib25wYWdlLWNvbXBhY3RcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpbnQgaW5kZXggPSBpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihpID09IHNlbGVjdGVkaW5kZXgpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBSaWJib25QYWdlc1tpXS5SaWJib25IZWFkZXIgPSBEaXYoXCJyaWJib25wYWdlaGVhZGVyIHJpYmJvbnBhZ2VoZWFkZXItYWN0aXZlXCIgKyAoVHlwZSA9PSBSaWJib25UeXBlLkZ1bGwgPyBcIlwiIDogXCIgcmliYm9ucGFnZWhlYWRlci1jb21wYWN0XCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmliYm9uUGFnZXNbaV0uQ29udGVudC5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJpYmJvblBhZ2VzW2ldLlJpYmJvbkhlYWRlciA9IERpdihcInJpYmJvbnBhZ2VoZWFkZXIgcmliYm9ucGFnZWhlYWRlci1oaWRkZW5cIiArIChUeXBlID09IFJpYmJvblR5cGUuRnVsbCA/IFwiXCIgOiBcIiByaWJib25wYWdlaGVhZGVyLWNvbXBhY3RcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBSaWJib25QYWdlc1tpXS5Db250ZW50LnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgUmliYm9uUGFnZXNbaV0uUmliYm9uSGVhZGVyLm9ubW91c2Vkb3duID0gKGV2KSA9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2VsZWN0ZWRJbmRleCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgUmliYm9uUGFnZXNbaV0uUmliYm9uSGVhZGVyLm9udG91Y2hzdGFydCA9IChldikgPT5cclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNlbGVjdGVkSW5kZXggPSBpbmRleDtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBSaWJib25QYWdlc1tpXS5SaWJib25IZWFkZXIuaW5uZXJIVE1MID0gUmliYm9uUGFnZXNbaV0uQ2FwdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaW50IGlud2lkdGggPSAyNDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIXN0cmluZy5Jc051bGxPckVtcHR5KFJpYmJvblBhZ2VzW2ldLkNhcHRpb24pKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW53aWR0aCArPSAoaW50KUdldFRleHRXaWR0aChSaWJib25QYWdlc1tpXS5DYXB0aW9uLCBTZXR0aW5ncy5EZWZhdWx0Rm9udCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBSaWJib25QYWdlc1tpXS5SaWJib25IZWFkZXIuc3R5bGUubGVmdCA9IHdpZHRoICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIFJpYmJvblBhZ2VzW2ldLlJpYmJvbkhlYWRlci5zdHlsZS53aWR0aCA9IGlud2lkdGggKyBcInB4XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIENvbnRlbnQuQXBwZW5kQ2hpbGQoUmliYm9uUGFnZXNbaV0uUmliYm9uSGVhZGVyKTtcclxuICAgICAgICAgICAgICAgICAgICBDb250ZW50LkFwcGVuZENoaWxkKFJpYmJvblBhZ2VzW2ldKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggKz0gaW53aWR0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBTZWxlY3RlZEluZGV4ID0gc2VsZWN0ZWRpbmRleDtcclxuICAgICAgICB9XHJcblxuICAgIFxucHJpdmF0ZSBMaXN0PFJpYmJvblBhZ2U+IF9fUHJvcGVydHlfX0luaXRpYWxpemVyX19SaWJib25QYWdlcz1uZXcgTGlzdDxSaWJib25QYWdlPigpO31cclxufSIsInVzaW5nIEJyaWRnZTtcclxudXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIFtOYW1lc3BhY2UodHJ1ZSldXHJcbiAgICBwdWJsaWMgY2xhc3MgUmliYm9uR3JvdXAgOiBDb250cm9sXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHN0cmluZyBDYXB0aW9uIHsgZ2V0OyBzZXQ7IH1cclxuICAgICAgICBwdWJsaWMgTGlzdDxSaWJib25JdGVtPiBJdGVtcyB7IGdldDsgc2V0OyB9XHJcbiAgICAgICAgcHJpdmF0ZSBib29sIGVuYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICBwcml2YXRlIFJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50IGNhcHRpb25EaXYgPSBudWxsO1xyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBFbmFibGVkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVuYWJsZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIHNldEVuYWJsZWQodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIHNldEVuYWJsZWQoYm9vbCB2YWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKEl0ZW1zLkNvdW50ID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IEl0ZW1zLkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIXZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBJdGVtc1tpXS5zZXRFbmFibGVkKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBJdGVtc1tpXS5zZXRFbmFibGVkKEl0ZW1zW2ldLkVuYWJsZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBDaGFuZ2VTdGF0ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIGlmKHZhbHVlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihjYXB0aW9uRGl2ICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FwdGlvbkRpdi5jbGFzc0xpc3QucmVtb3ZlKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihjYXB0aW9uRGl2ICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FwdGlvbkRpdi5jbGFzc0xpc3QuYWRkKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBSaWJib25Hcm91cChzdHJpbmcgX2NhcHRpb24gPSBcIlwiKSA6IGJhc2UoXCJyaWJib25ncm91cFwiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ2FwdGlvbiA9IF9jYXB0aW9uO1xyXG4gICAgICAgICAgICBJdGVtcyA9IG5ldyBMaXN0PFJpYmJvbkl0ZW0+KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgUmliYm9uR3JvdXAoc3RyaW5nIF9jYXB0aW9uLCBwYXJhbXMgUmliYm9uSXRlbVtdIGJ1dHRvbnMpIDogYmFzZShcInJpYmJvbmdyb3VwXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDYXB0aW9uID0gX2NhcHRpb247XHJcbiAgICAgICAgICAgIEl0ZW1zID0gbmV3IExpc3Q8UmliYm9uSXRlbT4oKTtcclxuICAgICAgICAgICAgaWYoYnV0dG9ucyAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmb3JlYWNoKHZhciBpdGVtIGluIGJ1dHRvbnMpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSXRlbXMuQWRkKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIFJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50IENyZWF0ZVZlcnRpY2FsTGluZShpbnQgaGVpZ2h0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGh0bWxEaXYgPSBEaXYoXCJyaWJib25zZXBlcmF0b3JcIik7XHJcbiAgICAgICAgICAgIGlmKGhlaWdodCAhPSA1OClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaHRtbERpdi5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyBcInB4XCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBodG1sRGl2O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGNsYXNzIFJlbmRlckluZm9cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHB1YmxpYyBpbnQgTGVmdDtcclxuICAgICAgICAgICAgcHVibGljIGludCBXaWR0aDtcclxuXHJcbiAgICAgICAgICAgIHB1YmxpYyBib29sIElzU21hbGwgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHB1YmxpYyBSaWJib25JdGVtIEZpcnN0SXRlbTtcclxuICAgICAgICAgICAgcHVibGljIFJpYmJvbkl0ZW0gU2Vjb25kSXRlbTtcclxuICAgICAgICAgICAgcHVibGljIFJpYmJvbkl0ZW0gVGhpcmRJdGVtO1xyXG5cclxuICAgICAgICAgICAgcHVibGljIGJvb2wgQmVnaW5Hcm91cCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIExpc3Q8UmVuZGVySW5mbz4gcmlMaXN0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgR2VuZXJhdGVSTGlzdCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBSZW5kZXJJbmZvIHJpID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmKHJpTGlzdCA9PSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByaUxpc3QgPSBuZXcgTGlzdDxSZW5kZXJJbmZvPigpO1xyXG4gICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IEl0ZW1zLkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocmkgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpID0gbmV3IFJlbmRlckluZm8oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmkuRmlyc3RJdGVtID0gSXRlbXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpLklzU21hbGwgPSByaS5GaXJzdEl0ZW0uSXNTbWFsbEl0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJpLklzU21hbGwgIT0gSXRlbXNbaV0uSXNTbWFsbEl0ZW0gfHwgSXRlbXNbaV0uQmVnaW5Hcm91cCB8fCAhSXRlbXNbaV0uSXNTbWFsbEl0ZW0gfHwgKHJpLkZpcnN0SXRlbSAhPSBudWxsICYmIHJpLlNlY29uZEl0ZW0gIT0gbnVsbCAmJiByaS5UaGlyZEl0ZW0gIT0gbnVsbCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpTGlzdC5BZGQocmkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpID0gbmV3IFJlbmRlckluZm8oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpLkZpcnN0SXRlbSA9IEl0ZW1zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmkuSXNTbWFsbCA9IEl0ZW1zW2ldLklzU21hbGxJdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmkuQmVnaW5Hcm91cCA9IEl0ZW1zW2ldLkJlZ2luR3JvdXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihyaS5TZWNvbmRJdGVtID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmkuU2Vjb25kSXRlbSA9IEl0ZW1zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpLlRoaXJkSXRlbSA9IEl0ZW1zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKHJpICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmlMaXN0LkFkZChyaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmkgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW50IEdldEV4dHJhV2lkdGgoUmliYm9uSXRlbSBpdGVtKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoaXRlbSBpcyBSaWJib25FZGl0SXRlbSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uQXM8UmliYm9uRWRpdEl0ZW0+KCkuRWRpdFdpZHRoICsgNiAtIDIwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHZvaWQgUmVuZGVyKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEhhc1JlbmRlcmVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIEdlbmVyYXRlUkxpc3QoKTtcclxuXHJcbiAgICAgICAgICAgIENvbnRlbnQuRW1wdHkoKTtcclxuXHJcbiAgICAgICAgICAgIGludCB3aWR0aCA9IDA7XHJcblxyXG4gICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgcmlMaXN0LkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciByaSA9IHJpTGlzdFtpXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihyaS5CZWdpbkdyb3VwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoICs9IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZsYmcgPSBDcmVhdGVWZXJ0aWNhbExpbmUoNTgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZsYmcuc3R5bGUubGVmdCA9IHdpZHRoICsgXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBDb250ZW50LkFwcGVuZENoaWxkKHZsYmcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHdpZHRoICs9IDM7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYocmkuSXNTbWFsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnQgTWF4V2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHJpLlRoaXJkSXRlbSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYocmkuU2Vjb25kSXRlbSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXhXaWR0aCA9IE1hdGguTWF4KChpbnQpR2V0VGV4dFdpZHRoKHJpLkZpcnN0SXRlbS5DYXB0aW9uLCBTZXR0aW5ncy5EZWZhdWx0Rm9udCkgKyAyOCArIDYgKyBHZXRFeHRyYVdpZHRoKHJpLkZpcnN0SXRlbSksIDY0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByaS5GaXJzdEl0ZW0uUmVuZGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmkuRmlyc3RJdGVtLkNvbnRlbnQuc3R5bGUubGVmdCA9IHdpZHRoICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmkuRmlyc3RJdGVtLkNvbnRlbnQuc3R5bGUud2lkdGggPSBNYXhXaWR0aCArIFwicHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByaS5GaXJzdEl0ZW0uQ29udGVudC5zdHlsZS50b3AgPSBcIjI2cHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb250ZW50LkFwcGVuZENoaWxkKHJpLkZpcnN0SXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXhXaWR0aCA9IE1hdGguTWF4KE1hdGguTWF4KChpbnQpR2V0VGV4dFdpZHRoKHJpLkZpcnN0SXRlbS5DYXB0aW9uLCBTZXR0aW5ncy5EZWZhdWx0Rm9udCkgKyBHZXRFeHRyYVdpZHRoKHJpLkZpcnN0SXRlbSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGludClHZXRUZXh0V2lkdGgocmkuU2Vjb25kSXRlbS5DYXB0aW9uLCBTZXR0aW5ncy5EZWZhdWx0Rm9udCkgKyBHZXRFeHRyYVdpZHRoKHJpLlNlY29uZEl0ZW0pKSArIDI4ICsgNiwgNjQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpLkZpcnN0SXRlbS5SZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpLlNlY29uZEl0ZW0uUmVuZGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmkuRmlyc3RJdGVtLkNvbnRlbnQuc3R5bGUubGVmdCA9IHdpZHRoICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmkuU2Vjb25kSXRlbS5Db250ZW50LnN0eWxlLmxlZnQgPSB3aWR0aCArIFwicHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByaS5GaXJzdEl0ZW0uQ29udGVudC5zdHlsZS50b3AgPSAoKCgxMDAgLSAzKSAvIDMpIC0gMTEpICsgXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpLkZpcnN0SXRlbS5Db250ZW50LnN0eWxlLndpZHRoID0gTWF4V2lkdGggKyBcInB4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByaS5TZWNvbmRJdGVtLkNvbnRlbnQuc3R5bGUud2lkdGggPSBNYXhXaWR0aCArIFwicHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByaS5GaXJzdEl0ZW0uQ29udGVudC5zdHlsZS50b3AgPSBcIjExcHhcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpLlNlY29uZEl0ZW0uQ29udGVudC5zdHlsZS50b3AgPSBcIjQxcHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb250ZW50LkFwcGVuZENoaWxkKHJpLkZpcnN0SXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb250ZW50LkFwcGVuZENoaWxkKHJpLlNlY29uZEl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE1heFdpZHRoID0gTWF0aC5NYXgoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLk1heChNYXRoLk1heCgoaW50KUdldFRleHRXaWR0aChyaS5GaXJzdEl0ZW0uQ2FwdGlvbiwgU2V0dGluZ3MuRGVmYXVsdEZvbnQpICsgR2V0RXh0cmFXaWR0aChyaS5GaXJzdEl0ZW0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpbnQpR2V0VGV4dFdpZHRoKHJpLlNlY29uZEl0ZW0uQ2FwdGlvbiwgU2V0dGluZ3MuRGVmYXVsdEZvbnQpICsgR2V0RXh0cmFXaWR0aChyaS5TZWNvbmRJdGVtKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGludClHZXRUZXh0V2lkdGgocmkuVGhpcmRJdGVtLkNhcHRpb24sIFNldHRpbmdzLkRlZmF1bHRGb250KSArIEdldEV4dHJhV2lkdGgocmkuVGhpcmRJdGVtKSkgKyAyOCArIDYsIDY0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpLkZpcnN0SXRlbS5SZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmkuU2Vjb25kSXRlbS5SZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmkuVGhpcmRJdGVtLlJlbmRlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmkuRmlyc3RJdGVtLkNvbnRlbnQuc3R5bGUubGVmdCA9IHdpZHRoICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByaS5TZWNvbmRJdGVtLkNvbnRlbnQuc3R5bGUubGVmdCA9IHdpZHRoICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByaS5UaGlyZEl0ZW0uQ29udGVudC5zdHlsZS5sZWZ0ID0gd2lkdGggKyBcInB4XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByaS5GaXJzdEl0ZW0uQ29udGVudC5zdHlsZS53aWR0aCA9IE1heFdpZHRoICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByaS5TZWNvbmRJdGVtLkNvbnRlbnQuc3R5bGUud2lkdGggPSBNYXhXaWR0aCArIFwicHhcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmkuVGhpcmRJdGVtLkNvbnRlbnQuc3R5bGUud2lkdGggPSBNYXhXaWR0aCArIFwicHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpLkZpcnN0SXRlbS5Db250ZW50LnN0eWxlLnRvcCA9IFwiM3B4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpLlNlY29uZEl0ZW0uQ29udGVudC5zdHlsZS50b3AgPSBcIjI2cHhcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmkuVGhpcmRJdGVtLkNvbnRlbnQuc3R5bGUudG9wID0gXCI0OXB4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDNcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRlbnQuQXBwZW5kQ2hpbGQocmkuRmlyc3RJdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQ29udGVudC5BcHBlbmRDaGlsZChyaS5TZWNvbmRJdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQ29udGVudC5BcHBlbmRDaGlsZChyaS5UaGlyZEl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggKz0gTWF4V2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmkuRmlyc3RJdGVtLlJlbmRlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByaS5GaXJzdEl0ZW0uQ29udGVudC5zdHlsZS5sZWZ0ID0gd2lkdGggKyBcInB4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50IGlud2lkdGggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHJpLkZpcnN0SXRlbS5DYXB0aW9uLkNvbnRhaW5zKFwiIFwiKSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdHJpbmdzID0gcmkuRmlyc3RJdGVtLkNhcHRpb24uU3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1aWxkZXIgPSBuZXcgU3RyaW5nQnVpbGRlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW50IGxlbmd0aCA9IHJpLkZpcnN0SXRlbS5DYXB0aW9uLkxlbmd0aCAvIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IoaW50IGogPSAwOyBqIDwgc3RyaW5ncy5MZW5ndGg7IGorKylcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoYnVpbGRlci5MZW5ndGggPiBsZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW53aWR0aCA9IChpbnQpR2V0VGV4dFdpZHRoKGJ1aWxkZXIuVG9TdHJpbmcoKSwgU2V0dGluZ3MuRGVmYXVsdEZvbnQpICsgMjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihidWlsZGVyLkxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoXCIgXCIgKyBzdHJpbmdzW2pdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChzdHJpbmdzW2pdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpbndpZHRoID09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlud2lkdGggPSAoaW50KUdldFRleHRXaWR0aChidWlsZGVyLlRvU3RyaW5nKCksIFNldHRpbmdzLkRlZmF1bHRGb250KSArIDIwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlud2lkdGggPSAoaW50KUdldFRleHRXaWR0aChyaS5GaXJzdEl0ZW0uQ2FwdGlvbiwgU2V0dGluZ3MuRGVmYXVsdEZvbnQpICsgMjA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihpbndpZHRoIDwgNDQpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbndpZHRoID0gNDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpbndpZHRoICs9IEdldEV4dHJhV2lkdGgocmkuRmlyc3RJdGVtKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmkuRmlyc3RJdGVtLkNvbnRlbnQuc3R5bGUud2lkdGggPSBpbndpZHRoICsgXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCArPSBpbndpZHRoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBDb250ZW50LkFwcGVuZENoaWxkKHJpLkZpcnN0SXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGludCBtaW5XaWR0aCA9IChpbnQpR2V0VGV4dFdpZHRoKENhcHRpb24sIFNldHRpbmdzLkRlZmF1bHRGb250KSArIDIwO1xyXG5cclxuICAgICAgICAgICAgaWYod2lkdGggPCBtaW5XaWR0aClcclxuICAgICAgICAgICAgICAgIHdpZHRoID0gbWluV2lkdGg7XHJcblxyXG4gICAgICAgICAgICB3aWR0aCArPSAzO1xyXG5cclxuICAgICAgICAgICAgdmFyIHZsID0gQ3JlYXRlVmVydGljYWxMaW5lKDgwKTtcclxuICAgICAgICAgICAgdmwuc3R5bGUubGVmdCA9IHdpZHRoIC0gMSArIFwicHhcIjtcclxuXHJcbiAgICAgICAgICAgIENvbnRlbnQuQXBwZW5kQ2hpbGQodmwpO1xyXG5cclxuICAgICAgICAgICAgQ29udGVudC5zdHlsZS53aWR0aCA9IHdpZHRoICsgXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgaWYoIXN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoQ2FwdGlvbikpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhcHRpb25EaXYgPSBEaXYoXCJyaWJib25ncm91cGNhcHRpb25cIik7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FwdGlvbkRpdi5pbm5lckhUTUwgPSBDYXB0aW9uO1xyXG4gICAgICAgICAgICAgICAgQ29udGVudC5BcHBlbmRDaGlsZChjYXB0aW9uRGl2KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0RW5hYmxlZChlbmFibGVkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJ1c2luZyBCcmlkZ2U7XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBbTmFtZXNwYWNlKHRydWUpXVxyXG4gICAgcHVibGljIGNsYXNzIFJpYmJvblBhZ2UgOiBDb250cm9sXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHN0cmluZyBDYXB0aW9uIHsgZ2V0OyBzZXQ7IH1cclxuICAgICAgICBwdWJsaWMgTGlzdDxSaWJib25Hcm91cD4gUmliYm9uR3JvdXBzIHsgZ2V0OyBzZXQ7IH1cclxuICAgICAgICBwdWJsaWMgUmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQgUmliYm9uSGVhZGVyID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHVibGljIFJpYmJvblBhZ2Uoc3RyaW5nIF9jYXB0aW9uID0gXCJcIikgOiBiYXNlKFwicmliYm9ucGFnZVwiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ2FwdGlvbiA9IF9jYXB0aW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQWRkUmliYm9uR3JvdXBzKHBhcmFtcyBSaWJib25Hcm91cFtdIHBhZ2VzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYocGFnZXMgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yZWFjaCh2YXIgaXRlbSBpbiBwYWdlcylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihpdGVtICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJpYmJvbkdyb3Vwcy5BZGQoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBSZW5kZXIoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgSGFzUmVuZGVyZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZihSaWJib25Hcm91cHMgPT0gbnVsbCB8fCBSaWJib25Hcm91cHMuQ291bnQgPT0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgaW50IHdpZHRoID0gMDtcclxuICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IFJpYmJvbkdyb3Vwcy5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBSaWJib25Hcm91cHNbaV0uUmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICBSaWJib25Hcm91cHNbaV0uQ29udGVudC5zdHlsZS5sZWZ0ID0gd2lkdGggKyBcInB4XCI7XHJcbiAgICAgICAgICAgICAgICB3aWR0aCArPSBTY3JpcHQuUGFyc2VJbnQoUmliYm9uR3JvdXBzW2ldLkNvbnRlbnQuc3R5bGUud2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgQ29udGVudC5BcHBlbmRDaGlsZChSaWJib25Hcm91cHNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cbiAgICBcbnByaXZhdGUgTGlzdDxSaWJib25Hcm91cD4gX19Qcm9wZXJ0eV9fSW5pdGlhbGl6ZXJfX1JpYmJvbkdyb3Vwcz1uZXcgTGlzdDxSaWJib25Hcm91cD4oKTt9XHJcbn0iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uTGlucTtcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcbnVzaW5nIFN5c3RlbS5UaHJlYWRpbmcuVGFza3M7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBTb2xpZEJydXNoIDogQnJ1c2hcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgQ29sb3IgQ29sb3I7XHJcbiAgICAgICAgcHVibGljIFNvbGlkQnJ1c2goQ29sb3IgY29sb3IpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDb2xvciA9IGNvbG9yO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJcclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgU3BsaXRDb250cm9sQ29udGFpbmVyIDogQ29udHJvbFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBDb250cm9sIFBhbmVsMTtcclxuICAgICAgICBwdWJsaWMgQ29udHJvbCBQYW5lbDI7XHJcbiAgICAgICAgcHVibGljIENvbnRyb2wgU3BsaXR0ZXI7XHJcblxyXG4gICAgICAgIHByaXZhdGUgUmV0eXBlZC5kb20uQ2xpZW50UmVjdCBfcHJldkNsaWVudFJlY3QgPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgYm9vbCBJc01vdXNlRG93biA9IGZhbHNlO1xyXG4gICAgICAgIHByaXZhdGUgVmVjdG9yMiBfbW91c2VEb3duVmVjdG9yO1xyXG4gICAgICAgIHByaXZhdGUgVmVjdG9yMiBfY3VycmVudE1vdXNlRG93blZlY3RvcjtcclxuICAgICAgICBwcml2YXRlIGludCBfc3RhcnRpbmdTcGxpdHRlclBvcztcclxuICAgICAgICBwcml2YXRlIGludCBfc3BsaXR0ZXJQb3NpdGlvbiA9IC0xO1xyXG5cclxuICAgICAgICBwcml2YXRlIEZpeGVkU3BsaXR0ZXJQb3NpdGlvbiBmaXhlZFNwbGl0dGVyUG9zdGlvbiA9IEZpeGVkU3BsaXR0ZXJQb3NpdGlvbi5QYW5lbDE7XHJcblxyXG4gICAgICAgIHB1YmxpYyBGaXhlZFNwbGl0dGVyUG9zaXRpb24gRml4ZWRTcGxpdHRlclBvc3Rpb25cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBmaXhlZFNwbGl0dGVyUG9zdGlvbjsgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZml4ZWRTcGxpdHRlclBvc3Rpb24gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIFJlbmRlckNvbnRyb2xzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIFNwbGl0dGVyUmVzaXphYmxlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgcHVibGljIGludCBTcGxpdHRlclBvc2l0aW9uXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gX3NwbGl0dGVyUG9zaXRpb247IH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKHZhbHVlIDwgMClcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICBfc3BsaXR0ZXJQb3NpdGlvbiA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgUmVuZGVyQ29udHJvbHMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBib29sIGhvcml6b250YWw7XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIEhvcml6b250YWxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBob3Jpem9udGFsOyB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZih2YWx1ZSAhPSBob3Jpem9udGFsKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFJlbmRlckNvbnRyb2xzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBSZW5kZXIoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYmFzZS5SZW5kZXIoKTtcclxuXHJcbiAgICAgICAgICAgIFJlbmRlckNvbnRyb2xzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHZvaWQgUmVzaXplQ2hpbGRyZW4oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYodGhpcy5MaW5rZWRGb3JtICE9IG51bGwgJiYgdGhpcy5Db250ZW50ICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuTGlua2VkRm9ybS5SZXNpemVDaGlsZHJlbih0aGlzLkNvbnRlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgU3BsaXRDb250cm9sQ29udGFpbmVyKCkgOiBiYXNlKFwic3BsaXRjb250cm9sXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBQYW5lbDEgPSBuZXcgQ29udHJvbCgpIHsgTG9jYXRpb24gPSBuZXcgVmVjdG9yMigwLCAwKSB9O1xyXG4gICAgICAgICAgICBQYW5lbDIgPSBuZXcgQ29udHJvbCgpO1xyXG4gICAgICAgICAgICBQYW5lbDEuU3R5bGUub3ZlcmZsb3cgPSBcImF1dG9cIjtcclxuICAgICAgICAgICAgUGFuZWwyLlN0eWxlLm92ZXJmbG93ID0gXCJhdXRvXCI7XHJcblxyXG4gICAgICAgICAgICBTcGxpdHRlciA9IG5ldyBDb250cm9sKFwicHJpbWFyeVwiKTtcclxuICAgICAgICAgICAgU3BsaXR0ZXIuU3R5bGUuY3Vyc29yID0gXCJtb3ZlXCI7XHJcblxyXG4gICAgICAgICAgICBTcGxpdHRlci5Db250ZW50Lm9ubW91c2Vkb3duID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZighU3BsaXR0ZXJSZXNpemFibGUpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgSXNNb3VzZURvd24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgX21vdXNlRG93blZlY3RvciA9IEhlbHBlci5HZXRDbGllbnRNb3VzZUxvY2F0aW9uKGV2KTtcclxuICAgICAgICAgICAgICAgIHZhciBtYXhTaXplID0gR2V0TWF4U3BsaXR0ZXJTaXplKCk7XHJcbiAgICAgICAgICAgICAgICBfc3RhcnRpbmdTcGxpdHRlclBvcyA9IF9zcGxpdHRlclBvc2l0aW9uID4gbWF4U2l6ZSA/IG1heFNpemUgOiBfc3BsaXR0ZXJQb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgIGV2LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgT25SZXNpemUgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuTGlua2VkRm9ybSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLkxpbmtlZEZvcm0uSXNWaXNpYmxlKCkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGNsaWVudFJlYyA9IChSZXR5cGVkLmRvbS5DbGllbnRSZWN0KXRoaXMuQ29udGVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihfcHJldkNsaWVudFJlY3QgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBfcHJldkNsaWVudFJlY3QgPSBjbGllbnRSZWM7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoZml4ZWRTcGxpdHRlclBvc3Rpb24gPT0gRml4ZWRTcGxpdHRlclBvc2l0aW9uLk5vbmUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG91YmxlIFYxID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBkb3VibGUgVjIgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGJvb2wgZGlydHkgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoSG9yaXpvbnRhbClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNsaWVudFJlYy5oZWlnaHQgIT0gX3ByZXZDbGllbnRSZWN0LmhlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVjEgPSBjbGllbnRSZWMuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVjIgPSBfcHJldkNsaWVudFJlY3QuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNsaWVudFJlYy53aWR0aCAhPSBfcHJldkNsaWVudFJlY3Qud2lkdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFYxID0gY2xpZW50UmVjLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVjIgPSBfcHJldkNsaWVudFJlY3Qud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZGlydHkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTcGxpdHRlclBvc2l0aW9uID0gVjEgPT0gMCB8fCBWMiA9PSAwID8gMCA6IChpbnQpKFNwbGl0dGVyUG9zaXRpb24gKiAoVjEgLyBWMikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBfcHJldkNsaWVudFJlY3QgPSBjbGllbnRSZWM7XHJcblxyXG4gICAgICAgICAgICAgICAgUmVuZGVyQ29udHJvbHMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBSZXNpemVDaGlsZHJlbigpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgQ29udGVudC5vbm1vdXNlbW92ZSA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoSXNNb3VzZURvd24pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2N1cnJlbnRNb3VzZURvd25WZWN0b3IgPSBIZWxwZXIuR2V0Q2xpZW50TW91c2VMb2NhdGlvbihldik7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50IHg7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50IG0gPSBob3Jpem9udGFsID8gKF9tb3VzZURvd25WZWN0b3IuWWkgLSBfY3VycmVudE1vdXNlRG93blZlY3Rvci5ZaSkgOiAoX21vdXNlRG93blZlY3Rvci5YaSAtIF9jdXJyZW50TW91c2VEb3duVmVjdG9yLlhpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHkgPSBHZXRNYXhTcGxpdHRlclNpemUoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZigoeCA9IGZpeGVkU3BsaXR0ZXJQb3N0aW9uID09IEZpeGVkU3BsaXR0ZXJQb3NpdGlvbi5QYW5lbDIgPyBfc3RhcnRpbmdTcGxpdHRlclBvcyArIG0gOiBfc3RhcnRpbmdTcGxpdHRlclBvcyAtIG0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID4geSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPSB5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBTcGxpdHRlclBvc2l0aW9uID0geDtcclxuICAgICAgICAgICAgICAgICAgICBfY3VycmVudE1vdXNlRG93blZlY3RvciA9IF9tb3VzZURvd25WZWN0b3I7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFJlc2l6ZUNoaWxkcmVuKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBDb250ZW50Lm9ubW91c2V1cCA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgSXNNb3VzZURvd24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIFJlbmRlckNvbnRyb2xzKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLkFwcGVuZENoaWxkcmVuKFBhbmVsMSwgU3BsaXR0ZXIsIFBhbmVsMik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGludCBHZXRNYXhTcGxpdHRlclNpemUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IGxlZnQgPSAxMjtcclxuICAgICAgICAgICAgaWYoRml4ZWRTcGxpdHRlclBvc3Rpb24gPT0gRml4ZWRTcGxpdHRlclBvc2l0aW9uLlBhbmVsMilcclxuICAgICAgICAgICAgICAgIGxlZnQgPSAwO1xyXG4gICAgICAgICAgICB2YXIgbWF4U2l6ZSA9IChpbnQpKEhvcml6b250YWwgPyAoKFJldHlwZWQuZG9tLkRPTVJlY3QpdGhpcy5Db250ZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKS5oZWlnaHQgOiAoKFJldHlwZWQuZG9tLkRPTVJlY3QpdGhpcy5Db250ZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKS53aWR0aCkgLSBsZWZ0O1xyXG4gICAgICAgICAgICBpZihtYXhTaXplIDwgMClcclxuICAgICAgICAgICAgICAgIG1heFNpemUgPSAwO1xyXG4gICAgICAgICAgICByZXR1cm4gbWF4U2l6ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBSZW5kZXJDb250cm9scygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgc3AgPSBTcGxpdHRlclBvc2l0aW9uO1xyXG4gICAgICAgICAgICB2YXIgbWF4U2l6ZSA9IEdldE1heFNwbGl0dGVyU2l6ZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYoX3ByZXZDbGllbnRSZWN0ICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKHNwID4gbWF4U2l6ZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzcCA9IG1heFNpemU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKEhvcml6b250YWwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFBhbmVsMS5FeGNoYW5nZUNsYXNzKFwic3BsaXR2ZXJ0aWNhbFwiLCBcInNwbGl0aG9yaXpvbnRhbFwiKTtcclxuICAgICAgICAgICAgICAgIFBhbmVsMi5FeGNoYW5nZUNsYXNzKFwic3BsaXR2ZXJ0aWNhbFwiLCBcInNwbGl0aG9yaXpvbnRhbFwiKTtcclxuICAgICAgICAgICAgICAgIFNwbGl0dGVyLkV4Y2hhbmdlQ2xhc3MoXCJzcGxpdHRlcnZlcnRpY2FsXCIsIFwic3BsaXR0ZXJob3Jpem9udGFsXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIFBhbmVsMS5XaWR0aCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICBTcGxpdHRlci5XaWR0aCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICBQYW5lbDIuV2lkdGggPSBcIlwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKGZpeGVkU3BsaXR0ZXJQb3N0aW9uICE9IEZpeGVkU3BsaXR0ZXJQb3NpdGlvbi5QYW5lbDIpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgU3BsaXR0ZXIuTG9jYXRpb24gPSBuZXcgVmVjdG9yMigwLCBzcCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFBhbmVsMS5IZWlnaHQgPSBzcDtcclxuICAgICAgICAgICAgICAgICAgICBQYW5lbDIuTG9jYXRpb24gPSBuZXcgVmVjdG9yMigwLCBzcCArIDEyKTtcclxuICAgICAgICAgICAgICAgICAgICBQYW5lbDIuSGVpZ2h0ID0gXCIoMTAwJSAtIFwiICsgKHNwICsgMTIpICsgXCJweClcIjsgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFNwbGl0dGVyLkxvY2F0aW9uID0gbmV3IFZlY3RvcjIoMCwgXCIoMTAwJSAtIFwiICsgKHNwKSArIFwicHgpXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBQYW5lbDEuSGVpZ2h0ID0gXCIoMTAwJSAtIFwiICsgc3AgKyBcInB4KVwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBQYW5lbDIuSGVpZ2h0ID0gc3AgLSAxMjtcclxuICAgICAgICAgICAgICAgICAgICBQYW5lbDIuTG9jYXRpb24gPSBuZXcgVmVjdG9yMigwLCBcIigxMDAlIC0gXCIgKyAoc3AgLSAxMikgKyBcInB4KVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFBhbmVsMS5FeGNoYW5nZUNsYXNzKFwic3BsaXRob3Jpem9udGFsXCIsIFwic3BsaXR2ZXJ0aWNhbFwiKTtcclxuICAgICAgICAgICAgICAgIFBhbmVsMi5FeGNoYW5nZUNsYXNzKFwic3BsaXRob3Jpem9udGFsXCIsIFwic3BsaXR2ZXJ0aWNhbFwiKTtcclxuICAgICAgICAgICAgICAgIFNwbGl0dGVyLkV4Y2hhbmdlQ2xhc3MoXCJzcGxpdHRlcmhvcml6b250YWxcIiwgXCJzcGxpdHRlcnZlcnRpY2FsXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIFBhbmVsMS5IZWlnaHQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgU3BsaXR0ZXIuSGVpZ2h0ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIFBhbmVsMi5IZWlnaHQgPSBcIlwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKGZpeGVkU3BsaXR0ZXJQb3N0aW9uICE9IEZpeGVkU3BsaXR0ZXJQb3NpdGlvbi5QYW5lbDIpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgU3BsaXR0ZXIuTG9jYXRpb24gPSBuZXcgVmVjdG9yMihzcCwgMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFBhbmVsMS5XaWR0aCA9IHNwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBQYW5lbDIuV2lkdGggPSBcIigxMDAlIC0gXCIgKyAoc3AgKyAxMikgKyBcInB4KVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIFBhbmVsMi5Mb2NhdGlvbiA9IG5ldyBWZWN0b3IyKHNwICsgMTIsIDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFNwbGl0dGVyLkxvY2F0aW9uID0gbmV3IFZlY3RvcjIoXCIoMTAwJSAtIFwiICsgKHNwICsgMTIpICsgXCJweClcIiwgMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFBhbmVsMS5XaWR0aCA9IFwiKDEwMCUgLSBcIiArIChzcCArIDEyKSArIFwicHgpXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFBhbmVsMi5XaWR0aCA9IHNwO1xyXG4gICAgICAgICAgICAgICAgICAgIFBhbmVsMi5Mb2NhdGlvbiA9IG5ldyBWZWN0b3IyKFwiKDEwMCUgLSBcIiArIChzcCkgKyBcInB4KVwiLCAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIlxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBTcGxpdEhpZGVDb250cm9sQ29udGFpbmVyIDogQ29udHJvbFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBDb250cm9sIEJvZHk7XHJcbiAgICAgICAgcHVibGljIENvbnRyb2wgU2xpZGVyO1xyXG4gICAgICAgIHB1YmxpYyBDb250cm9sIFBhbmVsO1xyXG4gICAgICAgIHByaXZhdGUgUmV0eXBlZC5kb20uSFRNTFNwYW5FbGVtZW50IHNwYW47XHJcblxyXG4gICAgICAgIHByaXZhdGUgaW50IF9zbGlkZVdpZHRoO1xyXG5cclxuICAgICAgICBwdWJsaWMgaW50IFNsaWRlV2lkdGhcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBfc2xpZGVXaWR0aDsgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoX3NsaWRlV2lkdGggIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3NsaWRlV2lkdGggPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBSZW5kZXJDb250cm9sKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgUmVzaXplQ2hpbGRyZW4oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBTbGlkZXJMb2NhdGlvbiBfc2xpZGVyTG9jYXRpb24gPSBTbGlkZXJMb2NhdGlvbi5MZWZ0O1xyXG5cclxuICAgICAgICBwdWJsaWMgU2xpZGVyTG9jYXRpb24gU2xpZGVyTG9jYXRpb25cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBfc2xpZGVyTG9jYXRpb247IH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKF9zbGlkZXJMb2NhdGlvbiAhPSB2YWx1ZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBfc2xpZGVyTG9jYXRpb24gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBSZW5kZXJDb250cm9sKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgUmVzaXplQ2hpbGRyZW4oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBib29sIF9zbGlkZXJWaXNpYmxlID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIFNsaWRlclZpc2libGVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBfc2xpZGVyVmlzaWJsZTsgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoX3NsaWRlclZpc2libGUgIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBfc2xpZGVyVmlzaWJsZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIFJlbmRlckNvbnRyb2woKTtcclxuICAgICAgICAgICAgICAgICAgICBSZXNpemVDaGlsZHJlbigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGludCByZWZyZXNoSWQgPSAtMTtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIFJlc2l6ZUNoaWxkcmVuKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuTGlua2VkRm9ybSAhPSBudWxsICYmIHRoaXMuQ29udGVudCAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmKHJlZnJlc2hJZCAhPSAtMSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBSZXR5cGVkLmRvbS5jbGVhclRpbWVvdXQocmVmcmVzaElkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlZnJlc2hJZCA9IChpbnQpUmV0eXBlZC5kb20uc2V0VGltZW91dCgoZ2xvYmFsOjpSZXR5cGVkLmRvbS5zZXRUaW1lb3V0Rm4pKChhYikgPT5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkxpbmtlZEZvcm0uUmVzaXplQ2hpbGRyZW4odGhpcy5Db250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoSWQgPSAtMTtcclxuICAgICAgICAgICAgICAgIH0pLCAxMDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgU3BsaXRIaWRlQ29udHJvbENvbnRhaW5lcigpIDogYmFzZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBCb2R5ID0gbmV3IENvbnRyb2woKTtcclxuICAgICAgICAgICAgU2xpZGVyID0gbmV3IENvbnRyb2woXCJwcmltYXJ5XCIpO1xyXG4gICAgICAgICAgICBQYW5lbCA9IG5ldyBDb250cm9sKCk7XHJcbiAgICAgICAgICAgIFBhbmVsLlN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcclxuICAgICAgICAgICAgQm9keS5TdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XHJcbiAgICAgICAgICAgIHNwYW4gPSBTcGFuKFwiZm9ybS1oZWFkaW5nLXRpdGxlXCIpO1xyXG4gICAgICAgICAgICBzcGFuLnRleHRDb250ZW50ID0gXCI+XCI7XHJcblxyXG4gICAgICAgICAgICBzcGFuLnN0eWxlLmZvbnRXZWlnaHQgPSBcImJvbGRcIjtcclxuICAgICAgICAgICAgc3Bhbi5zdHlsZS5jb2xvciA9IFwid2hpdGVcIjtcclxuXHJcbiAgICAgICAgICAgIFNsaWRlci5Db250ZW50LkFwcGVuZENoaWxkKHNwYW4pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgU2xpZGVyLlN0eWxlLnRyYW5zaXRpb24gPSBcIndpZHRoIDAuMXMsIGxlZnQgMC4xc1wiO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgUGFuZWwuU3R5bGUudHJhbnNpdGlvbiA9IFwid2lkdGggMC4xc1wiO1xyXG5cclxuICAgICAgICAgICAgU2xpZGVyLlN0eWxlLmZpbHRlciA9IFwiYnJpZ2h0bmVzcyg5MCUpXCI7XHJcblxyXG4gICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3Bhbi5zdHlsZS5mb250U3R5bGUgPSBcIjM2cHhcIjtcclxuICAgICAgICAgICAgICAgIFNsaWRlci5XaWR0aCA9IDY1O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3Bhbi5zdHlsZS5mb250U3R5bGUgPSBcIjI2cHhcIjtcclxuICAgICAgICAgICAgICAgIFNsaWRlci5XaWR0aCA9IDMwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBTbGlkZXIuSGVpZ2h0ID0gXCIxMDAlXCI7XHJcblxyXG4gICAgICAgICAgICBTbGlkZXIuQ29udGVudC5vbmNsaWNrID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBTbGlkZXJWaXNpYmxlID0gIVNsaWRlclZpc2libGU7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIF9zbGlkZVdpZHRoID0gMjUwO1xyXG4gICAgICAgICAgICBDb250ZW50LkFwcGVuZENoaWxkcmVuKFBhbmVsLCBTbGlkZXIsIEJvZHkpO1xyXG5cclxuICAgICAgICAgICAgUmVuZGVyQ29udHJvbCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgUmVuZGVyQ29udHJvbCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgd2lkdGg7XHJcbiAgICAgICAgICAgIGlmKEhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aCA9IDY1O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgd2lkdGggPSAzMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoU2xpZGVyTG9jYXRpb24gPT0gU2xpZGVyTG9jYXRpb24uTGVmdClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoU2xpZGVyVmlzaWJsZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzcGFuLnRleHRDb250ZW50ID0gXCI8XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgUGFuZWwuV2lkdGggPSBTbGlkZVdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIFNsaWRlci5MZWZ0ID0gU2xpZGVXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICBCb2R5LkxvY2F0aW9uID0gbmV3IFZlY3RvcjIod2lkdGggKyBTbGlkZVdpZHRoLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICBCb2R5LlNpemUgPSBuZXcgVmVjdG9yMihcIigxMDAlIC0gXCIgKyAod2lkdGggKyBTbGlkZVdpZHRoKSArIFwicHgpXCIsIFwiMTAwJVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzcGFuLnRleHRDb250ZW50ID0gXCI+XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgU2xpZGVyLkxlZnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIFBhbmVsLldpZHRoID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBCb2R5LkxvY2F0aW9uID0gbmV3IFZlY3RvcjIod2lkdGgsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIEJvZHkuU2l6ZSA9IG5ldyBWZWN0b3IyKFwiKDEwMCUgLSBcIiArICh3aWR0aCkgKyBcInB4KVwiLCBcIjEwMCVcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgUGFuZWwuTG9jYXRpb24gPSBuZXcgVmVjdG9yMigwLCAwKTtcclxuICAgICAgICAgICAgICAgIFBhbmVsLkhlaWdodCA9IFwiMTAwJVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8vIFdPUktJTkcgT04hISEhISEhISEhISEhISEhIVxyXG4gICAgICAgICAgICAgICAgaWYoU2xpZGVyVmlzaWJsZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzcGFuLnRleHRDb250ZW50ID0gXCI+XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgUGFuZWwuV2lkdGggPSBTbGlkZVdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIFBhbmVsLkxvY2F0aW9uID0gbmV3IFZlY3RvcjIoXCIoMTAwJSAtIFwiICsgKFNsaWRlV2lkdGgpICsgXCJweClcIiwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgU2xpZGVyLkxlZnQgPSBcIigxMDAlIC0gXCIgKyAod2lkdGggKyBTbGlkZVdpZHRoKSArIFwicHgpXCI7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBCb2R5LlNpemUgPSBuZXcgVmVjdG9yMihcIigxMDAlIC0gXCIgKyAod2lkdGggKyBTbGlkZVdpZHRoKSArIFwicHgpXCIsIFwiMTAwJVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzcGFuLnRleHRDb250ZW50ID0gXCI8XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgU2xpZGVyLkxlZnQgPVwiKDEwMCUgLSBcIiArICh3aWR0aCkgKyBcInB4KVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIFBhbmVsLldpZHRoID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBCb2R5LlNpemUgPSBuZXcgVmVjdG9yMihcIigxMDAlIC0gXCIgKyAod2lkdGgpICsgXCJweClcIiwgXCIxMDAlXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIEJvZHkuTG9jYXRpb24gPSBuZXcgVmVjdG9yMigwLCAwKTtcclxuICAgICAgICAgICAgICAgIFBhbmVsLkhlaWdodCA9IFwiMTAwJVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBlbnVtIFNsaWRlckxvY2F0aW9uXHJcbiAgICB7XHJcbiAgICAgICAgTGVmdCxcclxuICAgICAgICBSaWdodFxyXG4gICAgfVxyXG59IiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLkxpbnE7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG51c2luZyBTeXN0ZW0uVGhyZWFkaW5nLlRhc2tzO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgU3RhY2tMaXN0IDogQ29udHJvbFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBMaXN0PFN0YWNrSXRlbT4gU3RhY2tJdGVtcyA9IG5ldyBMaXN0PFN0YWNrSXRlbT4oKTsgICAgICAgIFxyXG4gICAgICAgIHByaXZhdGUgVGV4dElucHV0IHNlYXJjaElucHV0O1xyXG4gICAgICAgIHByaXZhdGUgYm9vbCBfc2hvd0ZpbmRTY3JlZW47XHJcbiAgICAgICAgcHJpdmF0ZSBzdHJpbmcgc2VhcmNoVGV4dDtcclxuICAgICAgICBwcml2YXRlIGJvb2wgY2xlYXJNYXJrID0gZmFsc2U7XHJcbiAgICAgICAgcHVibGljIENvbnRyb2wgY29udGVudEJvZHk7ICAgICAgICBcclxuXHJcblxyXG4gICAgICAgIHByaXZhdGUgU3RhY2tJdGVtIF9mb2N1c2VkU3RhY2tJdGVtO1xyXG5cclxuICAgICAgICBwdWJsaWMgU3RhY2tJdGVtIEZvY3VzZWRTdGFja0l0ZW1cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBfZm9jdXNlZFN0YWNrSXRlbTsgfVxyXG4gICAgICAgICAgICBzZXQge1xyXG4gICAgICAgICAgICAgICAgaWYoX2ZvY3VzZWRTdGFja0l0ZW0gIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoX2ZvY3VzZWRTdGFja0l0ZW0gIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9mb2N1c2VkU3RhY2tJdGVtLkNsYXNzTGlzdC5yZW1vdmUoXCJzdGFjay1pdGVtLWFjdGl2ZVwiKTsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgX2ZvY3VzZWRTdGFja0l0ZW0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZihfZm9jdXNlZFN0YWNrSXRlbSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2ZvY3VzZWRTdGFja0l0ZW0uQ2xhc3NMaXN0LmFkZChcInN0YWNrLWl0ZW0tYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihfZm9jdXNlZFN0YWNrSXRlbS5PbkZvY3VzZWQgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mb2N1c2VkU3RhY2tJdGVtLk9uRm9jdXNlZChfZm9jdXNlZFN0YWNrSXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIFNob3dGaW5kU2NyZWVuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gX3Nob3dGaW5kU2NyZWVuOyB9XHJcbiAgICAgICAgICAgIHNldCB7XHJcbiAgICAgICAgICAgICAgICBpZihfc2hvd0ZpbmRTY3JlZW4gIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJNYXJrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgX3Nob3dGaW5kU2NyZWVuID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoX3Nob3dGaW5kU2NyZWVuKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoSW5wdXQgPSBuZXcgVGV4dElucHV0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaElucHV0LkxvY2F0aW9uID0gbmV3IFZlY3RvcjIoNiwgNik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaElucHV0LlNpemUgPSBuZXcgVmVjdG9yMihcIigxMDAlIC0gMTJweClcIiwgMzgpOyAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hJbnB1dC5PblRleHRDaGFuZ2VkID0gKHNlbmRlcikgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJNYXJrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFRleHQgPSBzZWFyY2hJbnB1dC5UZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVidWlsZERhdGEoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRlbnQuYXBwZW5kQ2hpbGQ8UmV0eXBlZC5kb20uTm9kZT4oKFJldHlwZWQuZG9tLk5vZGUpc2VhcmNoSW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEJvZHkuVG9wID0gNTA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRCb2R5LlNpemUgPSBuZXcgVmVjdG9yMihcIjEwMCVcIiwgXCIoMTAwJSAtIDUwcHgpXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShzZWFyY2hUZXh0KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJNYXJrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJNYXJrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRlbnQucmVtb3ZlQ2hpbGQ8SFRNTEVsZW1lbnQ+KHNlYXJjaElucHV0LkNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hJbnB1dCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50Qm9keS5Ub3AgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50Qm9keS5TaXplID0gbmV3IFZlY3RvcjIoXCIxMDAlXCIsIFwiMTAwJVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFN0YWNrTGlzdCgpIDogYmFzZSgpXHJcbiAgICAgICAgeyAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb250ZW50Qm9keSA9IG5ldyBDb250cm9sKCk7XHJcbiAgICAgICAgICAgIGNvbnRlbnRCb2R5LlNpemUgPSBuZXcgVmVjdG9yMihcIjEwMCVcIiwgXCIxMDAlXCIpO1xyXG4gICAgICAgICAgICBjb250ZW50Qm9keS5TdHlsZS5vdmVyZmxvd1kgPSBcImF1dG9cIjtcclxuICAgICAgICAgICAgQ29udGVudC5hcHBlbmRDaGlsZDxSZXR5cGVkLmRvbS5Ob2RlPigoUmV0eXBlZC5kb20uTm9kZSljb250ZW50Qm9keSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHZvaWQgQWRkTWFyayhSZXR5cGVkLmRvbS5IVE1MRWxlbWVudCBpdGVtKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoaXRlbS5jaGlsZEVsZW1lbnRDb3VudCA9PSAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZigoaXRlbS50ZXh0Q29udGVudCArIFwiXCIpLlRvTG93ZXIoKS5Db250YWlucygoc2VhcmNoVGV4dCArIFwiXCIpLlRvTG93ZXIoKSkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nIHggPSBpdGVtLnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uRW1wdHkoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1aWxkZXIgPSBuZXcgU3RyaW5nQnVpbGRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBidWlsZGVyMiA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7ICAgICAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IHguTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyMi5BcHBlbmQoeFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKHhbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihidWlsZGVyMi5Ub1N0cmluZygpLlRvTG93ZXIoKSA9PSAoc2VhcmNoVGV4dCArIFwiXCIpLlRvTG93ZXIoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdvcmQgPSBidWlsZGVyMi5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5MZW5ndGggLT0gc2VhcmNoVGV4dC5MZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIjxtYXJrPlwiICsgd29yZC5IdG1sRXNjYXBlKCkgKyBcIjwvbWFyaz5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyMiA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKGJ1aWxkZXIyLlRvU3RyaW5nKCkuVG9Mb3dlcigpLkVuZHNXaXRoKChzZWFyY2hUZXh0ICsgXCJcIikuVG9Mb3dlcigpKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3b3JkID0gYnVpbGRlcjIuVG9TdHJpbmcoKS5TdWJzdHJpbmcoYnVpbGRlcjIuVG9TdHJpbmcoKS5MZW5ndGggLSBzZWFyY2hUZXh0Lkxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyLkxlbmd0aCAtPSBzZWFyY2hUZXh0Lkxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiPG1hcms+XCIgKyB3b3JkLkh0bWxFc2NhcGUoKSArIFwiPC9tYXJrPlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIyID0gbmV3IFN0cmluZ0J1aWxkZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihidWlsZGVyMi5MZW5ndGggPiBzZWFyY2hUZXh0Lkxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlcjIgPSBuZXcgU3RyaW5nQnVpbGRlcihidWlsZGVyMi5Ub1N0cmluZygpLlN1YnN0cmluZygxKSk7IC8vPyA/P1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uaW5uZXJIVE1MID0gYnVpbGRlci5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmb3IodWludCBpID0gMDsgaSA8IGl0ZW0uY2hpbGRFbGVtZW50Q291bnQ7IGkrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBpdGVtLmNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIEFkZE1hcmsoY2hpbGQuQXM8UmV0eXBlZC5kb20uSFRNTEVsZW1lbnQ+KCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIFJlbW92ZU1hcmsoUmV0eXBlZC5kb20uSFRNTEVsZW1lbnQgaXRlbSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKGl0ZW0uaW5uZXJIVE1MLkNvbnRhaW5zKFwiPG1hcms+XCIpICYmIGl0ZW0uaW5uZXJIVE1MLkNvbnRhaW5zKFwiPC9tYXJrPlwiKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaXRlbS5pbm5lckhUTUwgPSBpdGVtLmlubmVySFRNTC5SZXBsYWNlKFwiPG1hcms+XCIsIFwiXCIpLlJlcGxhY2UoXCI8L21hcms+XCIsIFwiXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yKHVpbnQgaSA9IDA7IGkgPCBpdGVtLmNoaWxkRWxlbWVudENvdW50OyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gaXRlbS5jaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgICAgICAgICBBZGRNYXJrKGNoaWxkLkFzPFJldHlwZWQuZG9tLkhUTUxFbGVtZW50PigpKTtcclxuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBSZWJ1aWxkRGF0YSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb250ZW50Qm9keS5Db250ZW50LkVtcHR5KCk7XHJcbiAgICAgICAgICAgIC8vdGhpcy5Db250ZW50LkVtcHR5KCk7XHJcblxyXG4gICAgICAgICAgICBmb3JlYWNoKHZhciBpdGVtIGluIFN0YWNrSXRlbXMpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKGl0ZW0uQ29udGVudC5vbmNsaWNrID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5Db250ZW50Lm9uY2xpY2sgPSAoZXYpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRm9jdXNlZFN0YWNrSXRlbSA9IGl0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZihjbGVhck1hcmspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgUmVtb3ZlTWFyayhpdGVtLkNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKCFzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKHNlYXJjaFRleHQpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKChpdGVtLkNvbnRlbnQudGV4dENvbnRlbnQgKyBcIlwiKS5Ub0xvd2VyKCkuQ29udGFpbnMoKHNlYXJjaFRleHQgKyBcIlwiKS5Ub0xvd2VyKCkpIClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEFkZE1hcmsoaXRlbS5Db250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEJvZHkuQ29udGVudC5hcHBlbmRDaGlsZDxSZXR5cGVkLmRvbS5Ob2RlPigoUmV0eXBlZC5kb20uTm9kZSlpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEJvZHkuQ29udGVudC5hcHBlbmRDaGlsZDxSZXR5cGVkLmRvbS5IVE1MRGl2RWxlbWVudD4obmV3IFJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRCb2R5LkNvbnRlbnQuYXBwZW5kQ2hpbGQ8UmV0eXBlZC5kb20uTm9kZT4oKFJldHlwZWQuZG9tLk5vZGUpaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudEJvZHkuQ29udGVudC5hcHBlbmRDaGlsZDxSZXR5cGVkLmRvbS5IVE1MRGl2RWxlbWVudD4obmV3IFJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50KCkpO1xyXG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjbGVhck1hcmsgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIFJlbmRlcigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZighSGFzUmVuZGVyZWQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFJlYnVpbGREYXRhKCk7XHJcbiAgICAgICAgICAgICAgICBIYXNSZW5kZXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIGJhc2UuUmVuZGVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBTdGFja0l0ZW0gOiBDb250cm9sXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHN0cmluZyBVbmlxdWVJZCA9IFwiXCI7XHJcbiAgICAgICAgcHVibGljIEFjdGlvbjxTdGFja0l0ZW0+IE9uRm9jdXNlZDtcclxuICAgICAgICBwdWJsaWMgQWN0aW9uPFN0YWNrSXRlbSwgb2JqZWN0PiBPblN0YXRlQ2hhbmdlZDtcclxuICAgICAgICBwdWJsaWMgb2JqZWN0IFJlZmVyZW5jZU9iamVjdDtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBvYmplY3QgX3N0YXRlO1xyXG5cclxuICAgICAgICBwdWJsaWMgb2JqZWN0IFN0YXRlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gX3N0YXRlOyB9XHJcbiAgICAgICAgICAgIHNldCB7XHJcbiAgICAgICAgICAgICAgICBpZihfc3RhdGUgIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3N0YXRlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoT25TdGF0ZUNoYW5nZWQgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgT25TdGF0ZUNoYW5nZWQodGhpcywgX3N0YXRlKTtcclxuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBwdWJsaWMgU3RhY2tJdGVtKCkgOiAgYmFzZShcInN0YWNrLWl0ZW1cIilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIENsYXNzTGlzdC5yZW1vdmUoXCJjb250cm9sXCIpO1xyXG4gICAgICAgICAgICBTdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xyXG4gICAgICAgICAgICBTdHlsZS5oZWlnaHQgPSBcImF1dG9cIjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbn1cclxuIiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLkxpbnE7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG51c2luZyBTeXN0ZW0uVGhyZWFkaW5nLlRhc2tzO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgU3R5bGVCcnVzaCA6IEJydXNoXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHN0cmluZyBTdHlsZTtcclxuICAgICAgICBwdWJsaWMgU3R5bGVCcnVzaChzdHJpbmcgc3R5bGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBTdHlsZSA9IHN0eWxlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBCcmlkZ2U7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBUYWJDb250cm9sIDogQ29udHJvbFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBMaXN0PFRhYkNvbnRyb2xQYWdlPiBUYWJQYWdlcyB7IGdldDsgc2V0OyB9XHJcbiAgICAgICAgcHJpdmF0ZSBDb250cm9sIHRhYkhlYWRlcnM7XHJcbiAgICAgICAgcHJpdmF0ZSBDb250cm9sIHRhYkhlYWRlckNvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgcHVibGljIFRhYkNvbnRyb2woKSA6IGJhc2UoXCJ0YWJjb250cm9sXCIpXHJcbiAgICAgICAgeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBDb250ZW50Lm9uY29udGV4dG1lbnUgPSAoZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEFkZFBhZ2VzKHBhcmFtcyBUYWJDb250cm9sUGFnZVtdIFBhZ2VzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVGFiUGFnZXMuQWRkUmFuZ2UoUGFnZXMpO1xyXG4gICAgICAgICAgICBpZih0aGlzLkhhc1JlbmRlcmVkKVxyXG4gICAgICAgICAgICAgICAgUmVzaXplVGFiSGVhZGVycygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBib29sIHNob3dDbG9zZWRCdXR0b247XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIFNob3dDbG9zZWRCdXR0b25cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2hvd0Nsb3NlZEJ1dHRvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYodmFsdWUgIT0gc2hvd0Nsb3NlZEJ1dHRvbilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93Q2xvc2VkQnV0dG9uID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgUmVzaXplVGFiSGVhZGVycygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgQWN0aW9uPGludD4gT25TZWxlY3RlZFRhYkluZGV4Q2hhbmdlZCA9IG51bGw7XHJcblxyXG4gICAgICAgIHByaXZhdGUgaW50IHNlbGVjdGVkaW5kZXggPSAwO1xyXG5cclxuICAgICAgICBwdWJsaWMgaW50IFNlbGVjdGVkSW5kZXhcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRpbmRleDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYodmFsdWUgPCAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gMDtcclxuICAgICAgICAgICAgICAgIGlmKHNlbGVjdGVkaW5kZXggIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRpbmRleCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIE9uU2VsZWN0ZWRUYWJJbmRleENoYW5nZWQhPW51bGw/Z2xvYmFsOjpCcmlkZ2UuU2NyaXB0LkZyb21MYW1iZGEoKCk9Pk9uU2VsZWN0ZWRUYWJJbmRleENoYW5nZWQuSW52b2tlKHZhbHVlKSk6bnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZihUYWJQYWdlcyAhPSBudWxsICYmIFRhYlBhZ2VzLkNvdW50ID4gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgVGFiUGFnZXMuQ291bnQ7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWdlID0gVGFiUGFnZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRhYkNvbnRyb2xBY3RpdmVTdHlsZUNoYW5nZShpLCByZWYgcGFnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRhYlBhZ2VzW2ldID0gcGFnZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBUYWJDb250cm9sQWN0aXZlU3R5bGVDaGFuZ2UoaW50IGksIHJlZiBUYWJDb250cm9sUGFnZSBwYWdlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYm9vbCBJc3NlbGVjdGVkID0gaSA9PSBzZWxlY3RlZGluZGV4O1xyXG5cclxuICAgICAgICAgICAgc3RyaW5nIHN0YXRlID0gSXNzZWxlY3RlZCA/IFwiYWN0aXZlXCIgOiBcImhpZGRlblwiO1xyXG4gICAgICAgICAgICBpZihwYWdlLlRhYlBhZ2VIZWFkZXIgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGFnZS5UYWJQYWdlSGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJjb250cm9scGFnZWhlYWRlci1oaWRkZW5cIik7XHJcbiAgICAgICAgICAgICAgICBwYWdlLlRhYlBhZ2VIZWFkZXIuY2xhc3NMaXN0LnJlbW92ZShcInRhYmNvbnRyb2xwYWdlaGVhZGVyLWFjdGl2ZVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBwYWdlLlRhYlBhZ2VIZWFkZXIuY2xhc3NMaXN0LmFkZChcInRhYmNvbnRyb2xwYWdlaGVhZGVyLVwiICsgc3RhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGFnZS5UYWJQYWdlSGVhZGVyID0gRGl2KFwidGFiY29udHJvbHBhZ2VoZWFkZXIgdGFiY29udHJvbHBhZ2VoZWFkZXItXCIgKyBzdGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoSGVscGVyLk5vdERlc2t0b3ApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKElzc2VsZWN0ZWQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZS5UYWJQYWdlSGVhZGVyLnN0eWxlLmxpbmVIZWlnaHQgPSBcIjQ0cHhcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlLlRhYlBhZ2VIZWFkZXIuc3R5bGUubGluZUhlaWdodCA9IFwiNDZweFwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcGFnZS5UYWJQYWdlSGVhZGVyLnN0eWxlLmhlaWdodCA9IFwiNDVweFwiO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBwYWdlLlRhYlBhZ2VIZWFkZXIuc2V0QXR0cmlidXRlKFwiaVwiLCBpLlRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICBpZihzaG93Q2xvc2VkQnV0dG9uKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihwYWdlLlRhYlBhZ2VIZWFkZXJDbG9zZSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2UuVGFiUGFnZUhlYWRlckNsb3NlID0gRGl2KFwidGFiY29udHJvbHBhZ2VoZWFkZXItY2xvc2VidXR0b25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZS5UYWJQYWdlSGVhZGVyQ2xvc2Uub25jbGljayA9IChldikgPT5cclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IFNjcmlwdC5QYXJzZUludChldi5jdXJyZW50VGFyZ2V0LkFzPFJldHlwZWQuZG9tLkhUTUxFbGVtZW50PigpLnBhcmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaVwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjcGFnZSA9IFRhYlBhZ2VzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoY3BhZ2UuQ29udGVudCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcGFnZS5Db250ZW50LkVtcHR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcGFnZS5Db250ZW50LkRlbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNwYWdlLlRhYlBhZ2VIZWFkZXIgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3BhZ2UuVGFiUGFnZUhlYWRlci5FbXB0eSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3BhZ2UuVGFiUGFnZUhlYWRlci5EZWxldGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBUYWJQYWdlcy5SZW1vdmUoY3BhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpbmRleCA+IFRhYlBhZ2VzLkNvdW50IC0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gVGFiUGFnZXMuQ291bnQgLSAxO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZWxlY3RlZEluZGV4ID0gaW5kZXg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSZXNpemVUYWJIZWFkZXJzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlLlRhYlBhZ2VIZWFkZXIuYXBwZW5kQ2hpbGQ8SFRNTERpdkVsZW1lbnQ+KHBhZ2UuVGFiUGFnZUhlYWRlckNsb3NlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKHBhZ2UuVGFiUGFnZUhlYWRlckNsb3NlICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZS5UYWJQYWdlSGVhZGVyLnJlbW92ZUNoaWxkPEhUTUxEaXZFbGVtZW50PihwYWdlLlRhYlBhZ2VIZWFkZXJDbG9zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHBhZ2UuQ29udGVudC5zdHlsZS52aXNpYmlsaXR5ID0gSXNzZWxlY3RlZCA/IFwiaW5oZXJpdFwiIDogXCJjb2xsYXBzZVwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgUmVzaXplVGFiSGVhZGVycygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZih0YWJIZWFkZXJzID09IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRhYkhlYWRlcnMgPSBuZXcgQ29udHJvbChcInRhYmhlYWRlci1jb250YWluZXJcIikgeyBMb2NhdGlvbiA9IG5ldyBWZWN0b3IyKDAsIDApIH07XHJcbiAgICAgICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJIZWFkZXJzLkhlaWdodCA9IDQ3O1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYkhlYWRlckNvbnRhaW5lciA9IG5ldyBDb250cm9sKCkgeyBMb2NhdGlvbiA9IG5ldyBWZWN0b3IyKDAsIDApIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdGFiSGVhZGVyQ29udGFpbmVyLldpZHRoID0gXCIxMDAlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFiSGVhZGVyQ29udGFpbmVyLkhlaWdodCA9IDUwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYkhlYWRlckNvbnRhaW5lci5BcHBlbmRDaGlsZCh0YWJIZWFkZXJzKTtcclxuICAgICAgICAgICAgICAgICAgICB0YWJIZWFkZXJDb250YWluZXIuU3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ0cmFuc3BhcmVudFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYkhlYWRlckNvbnRhaW5lci5TdHlsZS5vdmVyZmxvd1ggPSBcImF1dG9cIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGFiSGVhZGVycy5TdHlsZS5taW5XaWR0aCA9IFwiMTAwJVwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBDb250ZW50LmFwcGVuZENoaWxkPFJldHlwZWQuZG9tLk5vZGU+KChSZXR5cGVkLmRvbS5Ob2RlKXRhYkhlYWRlckNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFiSGVhZGVycy5IZWlnaHQgPSAyMztcclxuICAgICAgICAgICAgICAgICAgICBDb250ZW50LmFwcGVuZENoaWxkPFJldHlwZWQuZG9tLk5vZGU+KChSZXR5cGVkLmRvbS5Ob2RlKXRhYkhlYWRlcnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYkhlYWRlcnMuV2lkdGggPSBcIjEwMCVcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihUYWJQYWdlcyAhPSBudWxsICYmIFRhYlBhZ2VzLkNvdW50ID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaW50IHdpZHRoID0gMjtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgVGFiUGFnZXMuQ291bnQ7IGkrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFnZSA9IFRhYlBhZ2VzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHBhZ2UgPT0gbnVsbCB8fCBwYWdlLkhpZGRlbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZS5SZW5kZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHBhZ2UuVGFiUGFnZUhlYWRlciA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVGFiQ29udHJvbEFjdGl2ZVN0eWxlQ2hhbmdlKGksIHJlZiBwYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZS5UYWJQYWdlSGVhZGVyLm9ubW91c2Vkb3duID0gKGV2KSA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWxlY3RlZEluZGV4ID0gU2NyaXB0LlBhcnNlSW50KGV2LmN1cnJlbnRUYXJnZXQuQXM8UmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQ+KCkuZ2V0QXR0cmlidXRlKFwiaVwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2UuVGFiUGFnZUhlYWRlci5vbnRvdWNoc3RhcnQgPSAoZXYpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlbGVjdGVkSW5kZXggPSBTY3JpcHQuUGFyc2VJbnQoZXYuY3VycmVudFRhcmdldC5BczxSZXR5cGVkLmRvbS5IVE1MRGl2RWxlbWVudD4oKS5nZXRBdHRyaWJ1dGUoXCJpXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFiSGVhZGVycy5Db250ZW50LmFwcGVuZENoaWxkPEhUTUxEaXZFbGVtZW50PihwYWdlLlRhYlBhZ2VIZWFkZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBDb250ZW50LmFwcGVuZENoaWxkPEhUTUxFbGVtZW50PihwYWdlLkNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBwYWdlLlRhYlBhZ2VIZWFkZXIuc2V0QXR0cmlidXRlKFwiaVwiLCBpLlRvU3RyaW5nKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpbnQgaW53aWR0aCA9IDI0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZighc3RyaW5nLklzTnVsbE9yRW1wdHkocGFnZS5DYXB0aW9uKSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKEhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbndpZHRoICs9IChpbnQpR2V0VGV4dFdpZHRoKHBhZ2UuQ2FwdGlvbiwgXCIxNHB4IFRhaG9tYVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlud2lkdGggKz0gKGludClHZXRUZXh0V2lkdGgocGFnZS5DYXB0aW9uLCBTZXR0aW5ncy5EZWZhdWx0Rm9udCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHNob3dDbG9zZWRCdXR0b24pXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbndpZHRoICs9IDE5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBSZXR5cGVkLmRvbS5IVE1MU3BhbkVsZW1lbnQgc3BhbiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKHVpbnQgayA9IDA7IGsgPCBwYWdlLlRhYlBhZ2VIZWFkZXIuY2hpbGRyZW4ubGVuZ3RoOyBrKyspXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHBhZ2UuVGFiUGFnZUhlYWRlci5jaGlsZHJlbltrXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbSBpcyBSZXR5cGVkLmRvbS5IVE1MU3BhbkVsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzcGFuID0gaXRlbS5BczxSZXR5cGVkLmRvbS5IVE1MU3BhbkVsZW1lbnQ+KCkpLmlubmVySFRNTCA9IHBhZ2UuQ2FwdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoc3BhbiA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3BhbiA9IG5ldyBSZXR5cGVkLmRvbS5IVE1MU3BhbkVsZW1lbnQoKSB7IGlubmVySFRNTCA9IHBhZ2UuQ2FwdGlvbiB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZS5UYWJQYWdlSGVhZGVyLkFwcGVuZENoaWxkKHNwYW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4uc3R5bGUuZm9udFNpemUgPSBcIjE0cHhcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2UuVGFiUGFnZUhlYWRlci5zdHlsZS5sZWZ0ID0gd2lkdGguVG9QeCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2UuVGFiUGFnZUhlYWRlci5zdHlsZS53aWR0aCA9IGlud2lkdGguVG9QeCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDI2cHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdG9wOiAyNHB4O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2UuSGVpZ2h0ID0gXCIoMTAwJSAtIDQ5cHgpXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2UuVG9wID0gNDk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCArPSBpbndpZHRoICsgMjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgVGFiUGFnZXNbaV0gPSBwYWdlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoSGVscGVyLk5vdERlc2t0b3ApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFiSGVhZGVycy5XaWR0aCA9IHdpZHRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBSZW5kZXIoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgSGFzUmVuZGVyZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBSZXNpemVUYWJIZWFkZXJzKCk7XHJcbiAgICAgICAgfVxyXG5cbiAgICBcbnByaXZhdGUgTGlzdDxUYWJDb250cm9sUGFnZT4gX19Qcm9wZXJ0eV9fSW5pdGlhbGl6ZXJfX1RhYlBhZ2VzPW5ldyBMaXN0PFRhYkNvbnRyb2xQYWdlPigpO31cclxufSIsIlxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBUYWJDb250cm9sUGFnZSA6IENvbnRyb2xcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgaW50IGluZGV4O1xyXG5cclxuICAgICAgICBwdWJsaWMgVGFiQ29udHJvbFBhZ2UoKSA6IGJhc2UoXCJ0YWJjb250cm9scGFnZVwiKVxyXG4gICAgICAgIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBSZXR5cGVkLmRvbS5IVE1MRGl2RWxlbWVudCBUYWJQYWdlSGVhZGVyID0gbnVsbDtcclxuICAgICAgICBwdWJsaWMgUmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQgVGFiUGFnZUhlYWRlckNsb3NlID0gbnVsbDtcclxuICAgICAgICBwdWJsaWMgc3RyaW5nIENhcHRpb247XHJcbiAgICAgICAgcHVibGljIGJvb2wgSGlkZGVuO1xyXG4gICAgfVxyXG59IiwidXNpbmcgQnJpZGdlO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIFRpbGVDb250cm9sIDogQ29udHJvbCwgSVBhZ2VzXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIExpc3Q8UmliYm9uUGFnZT4gUmliYm9uUGFnZXMgeyBnZXQ7IHNldDsgfVxyXG4gICAgICAgIHByaXZhdGUgVGlsZVZpZXdTdGF0ZSBfdmlld1N0YXRlID0gVGlsZVZpZXdTdGF0ZS5IaWRkZW47XHJcbiAgICAgICAgcHJpdmF0ZSBzdHJpbmcgcHJldk92ZXJGbG93ID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIGludCBDbGVhclRpbWVPdXQgPSAtMTtcclxuXHJcbiAgICAgICAgcHVibGljIFRpbGVWaWV3U3RhdGUgVmlld1N0YXRlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gX3ZpZXdTdGF0ZTsgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoQ2xlYXJUaW1lT3V0ICE9IC0xKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFJldHlwZWQuZG9tLmNsZWFyVGltZW91dChDbGVhclRpbWVPdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIENsZWFyVGltZU91dCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYodmFsdWUgIT0gX3ZpZXdTdGF0ZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBfdmlld1N0YXRlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoX3ZpZXdTdGF0ZSA9PSBUaWxlVmlld1N0YXRlLkhpZGRlbilcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENsZWFyVGltZU91dCA9IChpbnQpUmV0eXBlZC5kb20uc2V0VGltZW91dCgoZ2xvYmFsOjpSZXR5cGVkLmRvbS5zZXRUaW1lb3V0Rm4pKChvYmopID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbnRlbnQuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAxMDAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9jYXRpb24gPSBuZXcgVmVjdG9yMihcIigxMDAlICogLTEpXCIsIDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoQ29udGVudC5wYXJlbnRFbGVtZW50ICE9IG51bGwgJiYgcHJldk92ZXJGbG93ICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbnRlbnQucGFyZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9IHByZXZPdmVyRmxvdztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2NhdGlvbiA9IG5ldyBWZWN0b3IyKDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBDb250ZW50LnN0eWxlLnZpc2liaWxpdHkgPSBcImluaGVyaXRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmVuZGVyVGlsZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoQ29udGVudC5wYXJlbnRFbGVtZW50ICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPdmVyRmxvdyA9IENvbnRlbnQucGFyZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbnRlbnQucGFyZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFJlbmRlclRpbGVzKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCB4ID0gMDtcclxuICAgICAgICAgICAgaW50IHkgPSA2O1xyXG5cclxuICAgICAgICAgICAgdmFyIGRvYyA9IFJldHlwZWQuZG9tLmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuICAgICAgICAgICAgdmFyIGRpdiA9IG5ldyBDb250cm9sKCk7XHJcbiAgICAgICAgICAgIGRpdi5XaWR0aCA9IFwiMTAwJVwiO1xyXG4gICAgICAgICAgICBkaXYuU2V0TG9jYXRpb24oMCwgMCk7XHJcbiAgICAgICAgICAgIGRpdi5TdHlsZS56SW5kZXggPSBcIjEwXCI7XHJcblxyXG4gICAgICAgICAgICB2YXIgZGl2MiA9IG5ldyBDb250cm9sKFwicHJpbWFyeVwiKTtcclxuICAgICAgICAgICAgZGl2Mi5XaWR0aCA9IFwiMTAwJVwiO1xyXG4gICAgICAgICAgICBkaXYyLlN0eWxlLm1pbkhlaWdodCA9IFwiMTAwJVwiO1xyXG4gICAgICAgICAgICBkaXYyLlNldExvY2F0aW9uKDAsIDApO1xyXG4gICAgICAgICAgICBkaXYyLlN0eWxlLmZpbHRlciA9IFwiYnJpZ2h0bmVzcyg1MCUpXCI7XHJcblxyXG4gICAgICAgICAgICBkaXYyLlN0eWxlLm9wYWNpdHkgPSBcIjAuOVwiO1xyXG4gICAgICAgICAgICBkaXYyLlN0eWxlLnpJbmRleCA9IFwiOVwiO1xyXG5cclxuICAgICAgICAgICAgZm9yZWFjaCh2YXIgcGFnZSBpbiBSaWJib25QYWdlcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoIXN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UocGFnZS5DYXB0aW9uKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbGxiID0gQ29udHJvbC5MYWJlbChwYWdlLkNhcHRpb24sIDYsIHkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxsYi5zdHlsZS5mb250U2l6ZSA9IFwiMTRweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGxsYi5zdHlsZS5jb2xvciA9IFwid2hpdGVcIjtcclxuICAgICAgICAgICAgICAgICAgICBkb2MuYXBwZW5kQ2hpbGQ8SFRNTFNwYW5FbGVtZW50PihsbGIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHkgKz0gMjY7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yZWFjaCh2YXIgZ3JvdXAgaW4gcGFnZS5SaWJib25Hcm91cHMpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCh2YXIgaXRlbSBpbiBncm91cC5JdGVtcylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0gaXMgUmliYm9uQnV0dG9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnV0dG9uID0gKFJpYmJvbkJ1dHRvbilpdGVtO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uRXhjaGFuZ2VDbGFzcyhcInJpYmJvbmJ1dHRvbnNtYWxsXCIsIFwicmliYm9uYnV0dG9uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5TdHlsZS5ib3JkZXJSYWRpdXMgPSBcIjRweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5BZnRlckl0ZW1DbGljayA9IChldikgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3U3RhdGUgPSBUaWxlVmlld1N0YXRlLkhpZGRlbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtLkVuYWJsZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5FeGNoYW5nZUNsYXNzKFwicHJpbWFyeVwiLCBcInByaW1hcnlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5TdHlsZS5ib3JkZXIgPSBcIjBcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLlN0eWxlLmZpbHRlciA9IFwiYnJpZ2h0bmVzcygxMTAlKVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uRXhjaGFuZ2VDbGFzcyhcInByaW1hcnlcIiwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5TdHlsZS5ib3JkZXIgPSBcIjFweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uU3R5bGUuZmlsdGVyID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uU3R5bGUub3BhY2l0eSA9IFwiMVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5TdHlsZS5ib3hTaGFkb3cgPSBcIjBweCAwcHggMTBweCAtMnB4IHJnYmEoMCwwLDAsMC4yNSlcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5Jc1NtYWxsSXRlbSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5Qcm9jZXNzQ2FwdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLlByb2Nlc3NJbWFnZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5TaXplID0gbmV3IFZlY3RvcjIoXCIoKDEwMCUgLSAyNHB4KSAqIDAuMzMpXCIsIDEwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLkxvY2F0aW9uID0gbmV3IFZlY3RvcjIoXCIoKCgxMDAlIC0gMjRweCkgKiAoXCIgKyAoeCAqIDAuMzNtKSArIFwiKSkgKyAoXCIgKyAoNiAqICh4KSkgKyBcInB4KSArIDZweClcIiwgeSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5jYXB0aW9uRGl2ICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5FbmFibGVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jYXB0aW9uRGl2LnN0eWxlLmNvbG9yID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNhcHRpb25EaXYuc3R5bGUuY29sb3IgPSBcImdyZXlcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY2FwdGlvbkRpdi5zdHlsZS5mb250U2l6ZSA9IFwiMTRweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY2FwdGlvbkRpdi5zdHlsZS50b3AgPSBcIjY1cHhcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihidXR0b24uaW1hZ2VEaXYgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uaW1hZ2VEaXYuRXhjaGFuZ2VDbGFzcyhcInJpYmJvbmJ1dHRvbnNtYWxsaWNvblwiLCBcInJpYmJvbmJ1dHRvbmljb25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLkljb25VUkwgPSAoYnV0dG9uLkljb25VUkwgKyBcIlwiKS5SZXBsYWNlKFwieDE2eDE2XCIsIFwieDMyeDMyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5pbWFnZURpdi5zdHlsZS50b3AgPSBcIjI3cHhcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtLkVuYWJsZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgYnV0dG9uLmltYWdlRGl2LlN0eWxlLmZpbHRlciA9IFwiYnJpZ2h0bmVzcyg5MCUpIGdyYXlzY2FsZSgxMDAlKSBjb250cmFzdCg2MCUpIGJyaWdodG5lc3MoMTgwJSlcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gIGJ1dHRvbi5pbWFnZURpdi5TdHlsZS5maWx0ZXIgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih4ID09IDIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSArPSAxMDY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5TdHlsZS5vcGFjaXR5ID0gXCIxXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2MuYXBwZW5kQ2hpbGQ8UmV0eXBlZC5kb20uTm9kZT4oKFJldHlwZWQuZG9tLk5vZGUpaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKHggIT0gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB5ICs9IDEwNjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGl2LkhlaWdodCA9IHk7XHJcbiAgICAgICAgICAgIGRpdjIuSGVpZ2h0ID0geTtcclxuXHJcbiAgICAgICAgICAgIENvbnRlbnQuRW1wdHkoKTtcclxuICAgICAgICAgICAgZGl2LkNvbnRlbnQuYXBwZW5kQ2hpbGQ8RG9jdW1lbnRGcmFnbWVudD4oZG9jKTtcclxuXHJcbiAgICAgICAgICAgIGRpdjIuQ29udGVudC5vbm1vdXNlZG93biA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBDb250ZW50LmFwcGVuZENoaWxkPFJldHlwZWQuZG9tLk5vZGU+KChSZXR5cGVkLmRvbS5Ob2RlKWRpdjIpO1xyXG4gICAgICAgICAgICBDb250ZW50LmFwcGVuZENoaWxkPFJldHlwZWQuZG9tLk5vZGU+KChSZXR5cGVkLmRvbS5Ob2RlKWRpdik7XHJcblxyXG4gICAgICAgICAgICBkaXYuQ29udGVudC5jbGljaygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHZvaWQgUmVuZGVyKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhc2UuUmVuZGVyKCk7XHJcbiAgICAgICAgICAgIFJlbmRlclRpbGVzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgVGlsZUNvbnRyb2woKSA6IGJhc2UoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgU3R5bGUub3ZlcmZsb3dZID0gXCJhdXRvXCI7XHJcbiAgICAgICAgICAgIExvY2F0aW9uID0gbmV3IFZlY3RvcjIoXCIoMTAwJSAqIC0xKVwiLCAwKTtcclxuICAgICAgICAgICAgU2l6ZSA9IG5ldyBWZWN0b3IyKFwiMTAwJVwiLCBcIjEwMCVcIik7XHJcblxyXG4gICAgICAgICAgICBDb250ZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwidHJhbnNwYXJlbnRcIjtcclxuICAgICAgICAgICAgQ29udGVudC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICAgICAgICAgICAgQ29udGVudC5zdHlsZS50cmFuc2l0aW9uID0gXCJsZWZ0IDFzIGVhc2VcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEFkZFJpYmJvblBhZ2VzKHBhcmFtcyBSaWJib25QYWdlW10gcGFnZXMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihwYWdlcyAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmb3JlYWNoKHZhciBpdGVtIGluIHBhZ2VzKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0gIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJpYmJvblBhZ2VzLkFkZChpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxuICAgIFxucHJpdmF0ZSBMaXN0PFJpYmJvblBhZ2U+IF9fUHJvcGVydHlfX0luaXRpYWxpemVyX19SaWJib25QYWdlcz1uZXcgTGlzdDxSaWJib25QYWdlPigpO31cclxuXHJcbiAgICBwdWJsaWMgZW51bSBUaWxlVmlld1N0YXRlXHJcbiAgICB7XHJcbiAgICAgICAgSGlkZGVuLFxyXG4gICAgICAgIFZpc2libGVcclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbTtcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIEZvcm1Qb3B1cCA6IEZvcm1cclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgZG91YmxlIFByZXZpb3VzU2Nyb2xsVG9wO1xyXG4gICAgICAgIHB1YmxpYyBSZXR5cGVkLmRvbS5IVE1MRWxlbWVudCBQYXJlbnRDb250YWluZXI7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yMiBHZXRQb3B1cERlZmF1bHRMb2NhdGlvbihDb250cm9sIGNvbnRyb2wsIGJvb2wgaXNDb250cm9sQ2hpbGQgPSBmYWxzZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKEhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKDAsIDApO1xyXG5cclxuICAgICAgICAgICAgaWYoaXNDb250cm9sQ2hpbGQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciByZWMgPSAoUmV0eXBlZC5kb20uRE9NUmVjdCljb250cm9sLkNvbnRlbnQucGFyZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVmVjdG9yMigoZmxvYXQpcmVjLmxlZnQsIChmbG9hdCkocmVjLnRvcCArIHJlYy5oZWlnaHQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciByZWMgPSAoUmV0eXBlZC5kb20uRE9NUmVjdCljb250cm9sLkNvbnRlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoKGZsb2F0KXJlYy5sZWZ0LCAoZmxvYXQpKHJlYy50b3AgKyByZWMuaGVpZ2h0KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBGb3JtUG9wdXAoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgSGVhZGluZy5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgIEJvZHkuU2V0TG9jYXRpb24oMCwgMCk7XHJcbiAgICAgICAgICAgIEJvZHkuU2V0U2l6ZShcIjEwMCVcIiwgXCIxMDAlXCIpO1xyXG4gICAgICAgICAgICBDb250ZW50LmNsYXNzTGlzdC5hZGQoXCJpbnB1dGNvbnRyb2xcIik7XHJcbiAgICAgICAgICAgIENvbnRlbnQuY2xhc3NMaXN0LmFkZChcInBvcHVwXCIpO1xyXG4gICAgICAgICAgICBDb250ZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJmb3JtLWJhc2VcIik7XHJcbiAgICAgICAgICAgIENvbnRlbnQuc3R5bGUuYm94U2hhZG93ID0gXCIwIDAgNjNweCAtMTdweCByZ2JhKDAsMCwwLDAuNzUpXCI7XHJcblxyXG4gICAgICAgICAgICBTdGFydFBvc2l0aW9uID0gRm9ybVN0YXJ0UG9zaXRpb24uTWFudWFsO1xyXG5cclxuICAgICAgICAgICAgU2hvd0Nsb3NlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIFNob3dNYXhpbWl6ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBTaG93TWluaW1pemUgPSBmYWxzZTtcclxuICAgICAgICAgICAgQWxsb3dNb3ZlQ2hhbmdlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIEFsbG93U2l6ZUNoYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgU2hvd1BvcHVwKFZlY3RvcjIgbG9jYXRpb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLkxvY2F0aW9uID0gbG9jYXRpb247XHJcbiAgICAgICAgICAgIFNob3dEaWFsb2coKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBNb3ZlRm9ybVVwKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuTG9jYXRpb24gPSBuZXcgVmVjdG9yMih0aGlzLkxlZnQsIHRoaXMuVG9wLlRvRmxvYXQoKSAtIHRoaXMuSGVpZ2h0LlRvRmxvYXQoKSAtIDIwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIE9uU2hvd2VkKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhc2UuT25TaG93ZWQoKTtcclxuXHJcbiAgICAgICAgICAgIGlmKEhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBBbGxvd1NpemVDaGFuZ2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgV2luZG93U3RhdGUgPSBXaW5kb3dTdGF0ZVR5cGUuTWF4aW1pemVkO1xyXG4gICAgICAgICAgICAgICAgQWxsb3dTaXplQ2hhbmdlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVjdCA9IChSZXR5cGVkLmRvbS5ET01SZWN0KUNvbnRlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocmVjdC5ib3R0b20gPiBSZXR5cGVkLmRvbS53aW5kb3cgLmlubmVySGVpZ2h0IHx8IHJlY3QuYm90dG9tID4gUmV0eXBlZC5kb20uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE1vdmVGb3JtVXAoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaChFeGNlcHRpb24pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIE9uQ2xvc2VkKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhc2UuT25DbG9zZWQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJcclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgQ29uc29sZUZvcm0gOiBGb3JtXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIENvbnNvbGVWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgQ29uc29sZUZvcm0gX2NvbnNvbGVGb3JtID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIFJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50IGxvZ0NvbnRlbnQgPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIFdpbmRvd1N0YXRlVHlwZSBwcmV2V2luZG93U3RhdGUgPSBXaW5kb3dTdGF0ZVR5cGUuTm9ybWFsO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIGJvb2wgZmlyc3RMb2FkID0gdHJ1ZTtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBWZWN0b3IyIHByZXZMb2NhdGlvbjtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBWZWN0b3IyIHByZXZTaXplID0gU2V0dGluZ3MuQ29uc29sZURlZmF1bHRTaXplO1xyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBJbnRlcm5hbENsZWFyKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxvZ0NvbnRlbnQuRW1wdHkoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEludGVybmFsTG9nKHN0cmluZyBzb3VyY2UsIENvbnNvbGVMb2dUeXBlIGxvZ1R5cGUgPSBDb25zb2xlTG9nVHlwZS5Mb2cpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgcGFyYSA9IG5ldyBSZXR5cGVkLmRvbS5IVE1MUGFyYWdyYXBoRWxlbWVudCgpIHsgY2xhc3NOYW1lID0gXCJjb25zb2xlLXBhcmFcIiB9O1xyXG4gICAgICAgICAgICBzd2l0Y2gobG9nVHlwZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBDb25zb2xlTG9nVHlwZS5EZWJ1ZzpcclxuICAgICAgICAgICAgICAgICAgICBwYXJhLnN0eWxlLmNvbG9yID0gQ29sb3IuRm9yZXN0R3JlZW47XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBDb25zb2xlTG9nVHlwZS5FcnJvcjpcclxuICAgICAgICAgICAgICAgICAgICBwYXJhLnN0eWxlLmNvbG9yID0gQ29sb3IuUmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBwYXJhLmlubmVySFRNTCA9IHNvdXJjZTtcclxuICAgICAgICAgICAgbG9nQ29udGVudC5hcHBlbmRDaGlsZDxIVE1MUGFyYWdyYXBoRWxlbWVudD4ocGFyYSk7XHJcbiAgICAgICAgICAgIGlmKGxvZ0NvbnRlbnQuY2hpbGRyZW4ubGVuZ3RoID4gMTAwMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9nQ29udGVudC5yZW1vdmVDaGlsZDxFbGVtZW50Pihsb2dDb250ZW50LmNoaWxkcmVuWzBdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwYXJhLnNjcm9sbEludG9WaWV3KGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIE9uR290Rm9jdXMoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoQ29udGVudCAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBTdHlsZS5vcGFjaXR5ID0gXCIxXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYmFzZS5PbkdvdEZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBPbkxvc3RGb2N1cygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihDb250ZW50ICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFN0eWxlLm9wYWNpdHkgPSBcIjAuNVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJhc2UuT25Mb3N0Rm9jdXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBDb25zb2xlRm9ybSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsb2dDb250ZW50ID0gRGl2KFwiY29uc29sZS1ib2R5XCIpO1xyXG4gICAgICAgICAgICB0aGlzLkJvZHkuQXBwZW5kQ2hpbGQobG9nQ29udGVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuQm9keS5zdHlsZS5iYWNrZ3JvdW5kID0gQ29sb3IuQmxhY2s7XHJcbiAgICAgICAgICAgIHRoaXMuQm9keS5zdHlsZS5vdmVyZmxvd1kgPSBcInNjcm9sbFwiO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5UZXh0ID0gUmV0eXBlZC5kb20uZG9jdW1lbnQgLnRpdGxlICsgXCIgLSBDb25zb2xlXCI7XHJcbiAgICAgICAgICAgIGlmKGZpcnN0TG9hZClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5TdGFydFBvc2l0aW9uID0gRm9ybVN0YXJ0UG9zaXRpb24uQ2VudGVyO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5TaXplID0gcHJldlNpemU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLlN0YXJ0UG9zaXRpb24gPSBGb3JtU3RhcnRQb3NpdGlvbi5NYW51YWw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkxvY2F0aW9uID0gcHJldkxvY2F0aW9uO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHByZXZXaW5kb3dTdGF0ZSA9PSBXaW5kb3dTdGF0ZVR5cGUuTWF4aW1pemVkKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZTaXplID0gU2V0dGluZ3MuQ29uc29sZURlZmF1bHRTaXplO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuU2l6ZSA9IHByZXZTaXplO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHByZXZXaW5kb3dTdGF0ZSA9PSBXaW5kb3dTdGF0ZVR5cGUuTWF4aW1pemVkKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFNldFdpbmRvd1N0YXRlKHByZXZXaW5kb3dTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIE9uU2hvd2VkKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhc2UuT25TaG93ZWQoKTtcclxuICAgICAgICAgICAgQ29uc29sZVZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBmaXJzdExvYWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIE9uQ2xvc2luZygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiYXNlLk9uQ2xvc2luZygpO1xyXG5cclxuICAgICAgICAgICAgcHJldlNpemUgPSBTaXplO1xyXG4gICAgICAgICAgICBwcmV2TG9jYXRpb24gPSBMb2NhdGlvbjtcclxuICAgICAgICAgICAgcHJldldpbmRvd1N0YXRlID0gV2luZG93U3RhdGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBPbkNsb3NlZCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiYXNlLk9uQ2xvc2VkKCk7XHJcbiAgICAgICAgICAgIENvbnNvbGVWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyB2b2lkIENoZWNrQ29uc29sZVN0YXRlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCFDb25zb2xlVmlzaWJsZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgX2NvbnNvbGVGb3JtID0gbmV3IENvbnNvbGVGb3JtKCk7XHJcbiAgICAgICAgICAgICAgICBfY29uc29sZUZvcm0uU2hvdyh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIExvZyhzdHJpbmcgc291cmNlLCBDb25zb2xlTG9nVHlwZSBsb2dUeXBlID0gQ29uc29sZUxvZ1R5cGUuTG9nKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ2hlY2tDb25zb2xlU3RhdGUoKTtcclxuICAgICAgICAgICAgX2NvbnNvbGVGb3JtLkludGVybmFsTG9nKHNvdXJjZSwgbG9nVHlwZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgQ2xlYXIoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ2hlY2tDb25zb2xlU3RhdGUoKTtcclxuICAgICAgICAgICAgX2NvbnNvbGVGb3JtLkludGVybmFsQ2xlYXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGVudW0gQ29uc29sZUxvZ1R5cGVcclxuICAgIHtcclxuICAgICAgICBMb2csXHJcbiAgICAgICAgRGVidWcsXHJcbiAgICAgICAgRXJyb3JcclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgRGlhbG9nRm9ybSA6IEZvcm1cclxuICAgIHtcclxuICAgICAgICBwcm90ZWN0ZWQgTGlzdDxTaW1wbGVEaWFsb2dCdXR0b24+IF9idXR0b25Db2xsZWN0aW9uO1xyXG5cclxuICAgICAgICBwdWJsaWMgQ29udHJvbCBCdXR0b25TZWN0aW9uO1xyXG5cclxuICAgICAgICBwdWJsaWMgRGlhbG9nRm9ybShzdHJpbmcgdGV4dCA9IFwiXCIpIDogYmFzZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLlRleHQgPSB0ZXh0O1xyXG4gICAgICAgICAgICBiYXNlLkJvZHkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ3aGl0ZVwiO1xyXG5cclxuICAgICAgICAgICAgLy8gICAgICAgICAgIHRvcDpjYWxjKDEwMCUgLSA3MHB4KTtcclxuICAgICAgICAgICAgLy93aWR0aDoxMDAlO1xyXG4gICAgICAgICAgICAvL2hlaWdodDo3MHB4O1xyXG5cclxuICAgICAgICAgICAgQnV0dG9uU2VjdGlvbiA9IG5ldyBDb250cm9sKFwiZGlhbG9nYnV0dG9uc2VjdGlvblwiKTtcclxuXHJcbiAgICAgICAgICAgIGlmKEhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBCdXR0b25TZWN0aW9uLlRvcCA9IFwiKDEwMCUgLSA3MHB4KVwiO1xyXG4gICAgICAgICAgICAgICAgQnV0dG9uU2VjdGlvbi5TaXplID0gbmV3IFZlY3RvcjIoXCIxMDAlXCIsIDcwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIG92ZXJyaWRlIHZvaWQgT25TaG93aW5nKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuQm9keS5BcHBlbmRDaGlsZChCdXR0b25TZWN0aW9uKTtcclxuICAgICAgICAgICAgYmFzZS5PblNob3dpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJcclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgVGV4dElucHV0RHJvcERvd24gOiBUZXh0SW5wdXRcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgU2ltcGxlQnV0dG9uIERyb3BEb3duQnV0dG9uO1xyXG4gICAgICAgIHB1YmxpYyBUZXh0SW5wdXQgVXNlZEVkaXQ7XHJcblxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSBzdHJpbmcgR2V0RGlzcGxheUZvcm1hdCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gVXNlZEVkaXQuR2V0RGlzcGxheUZvcm1hdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcml2YXRlIGJvb2wgX2Rpc2FibGVUZXh0RWRpdG9yO1xyXG4gICAgICAgIHB1YmxpYyBib29sIERpc2FibGVUZXh0RWRpdG9yXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gX2Rpc2FibGVUZXh0RWRpdG9yOyB9XHJcbiAgICAgICAgICAgIHNldCB7XHJcbiAgICAgICAgICAgICAgICBfZGlzYWJsZVRleHRFZGl0b3IgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIFVzZWRFZGl0LkRpc2FibGVGb2N1cyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYodmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgVXNlZEVkaXQuU2V0QXR0cmlidXRlKFwiY29udGVudGVkaXRhYmxlXCIsIFwiZmFsc2VcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgVXNlZEVkaXQuU3R5bGUuYmFja2dyb3VuZENvbG9yID0gQ29sb3IuV2hpdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgVXNlZEVkaXQuU3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgVXNlZEVkaXQuU3R5bGUuYmFja2dyb3VuZENvbG9yID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBVc2VkRWRpdC5Db250ZW50LnJlbW92ZUF0dHJpYnV0ZShcImNvbnRlbnRlZGl0YWJsZVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gICAgICAgIFxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCBmbG9hdCBHZXREcm9wZG93bldpZHRoKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAoZmxvYXQpKChSZXR5cGVkLmRvbS5ET01SZWN0KXRoaXMuQ29udGVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSkud2lkdGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBTZXREaXNwbGF5Rm9ybWF0KHN0cmluZyB2YWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFVzZWRFZGl0LlNldERpc3BsYXlGb3JtYXQodmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHZvaWQgT25Gb2N1cygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBVc2VkRWRpdC5Gb2N1cygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIFJldHlwZWQuZG9tLkhUTUxJbnB1dEVsZW1lbnQgR2V0SW5wdXQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIFVzZWRFZGl0LkdldElucHV0KCk7XHJcbiAgICAgICAgfSAgICAgICAgXHJcblxyXG4gICAgICAgIHB1YmxpYyBUZXh0SW5wdXREcm9wRG93bihzdHJpbmcgaW5wdXRUeXBlID0gXCJ0ZXh0XCIpIDogYmFzZShuZXcgUmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQoKSwgdHJ1ZSwgZmFsc2UpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgZHJvcERvd25XaWR0aCA9IDE3O1xyXG5cclxuICAgICAgICAgICAgaWYoSGVscGVyLk5vdERlc2t0b3ApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRyb3BEb3duV2lkdGggPSA0NTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgVHlwZSA9IGlucHV0VHlwZTtcclxuXHJcbiAgICAgICAgICAgIFVzZWRFZGl0ID0gbmV3IFRleHRJbnB1dChpbnB1dFR5cGUpIHsgRGlzYWJsZUZvY3VzUG9wdXAgPSB0cnVlLCBMb2NhdGlvbiA9IG5ldyBWZWN0b3IyKDAsIDApLCBTaXplID0gbmV3IFZlY3RvcjIoXCIoMTAwJSAtIFwiICsgKGRyb3BEb3duV2lkdGggLSAxKSArIFwicHgpXCIsIFwiMTAwJVwiKSB9O1xyXG4gICAgICAgICAgICBVc2VkRWRpdC5PblRleHRDaGFuZ2VkID0gKHNlbmRlcikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoT25UZXh0Q2hhbmdlZCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIE9uVGV4dENoYW5nZWQoc2VuZGVyKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIF9kaXNwbGF5Rm9ybWF0ID0gVXNlZEVkaXQuRGlzcGxheUZvcm1hdDtcclxuXHJcbiAgICAgICAgICAgIERyb3BEb3duQnV0dG9uID0gbmV3IFNpbXBsZUJ1dHRvbigpIHsgTG9jYXRpb24gPSBuZXcgVmVjdG9yMihcIigxMDAlIC0gXCIgKyBkcm9wRG93bldpZHRoICsgXCJweClcIiwgMCksIFNpemUgPSBuZXcgVmVjdG9yMihkcm9wRG93bldpZHRoLCBcIjEwMCVcIikgfTtcclxuICAgICAgICAgICAgRHJvcERvd25CdXR0b24uQ29udGVudC5vbm1vdXNlZG93biA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoIVJlYWRvbmx5ICYmIEVuYWJsZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgT25Ecm9wRG93bkNsaWNrZWQoZXYpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgU3R5bGUuYm9yZGVyID0gXCIwXCI7XHJcblxyXG4gICAgICAgICAgICBEcm9wRG93bkJ1dHRvbi5DbGFzc0xpc3QuYWRkKFwiZHJvcGRvd25cIik7XHJcblxyXG4gICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgRHJvcERvd25CdXR0b24uU3R5bGUuYmFja2dyb3VuZFBvc2l0aW9uID0gXCJyaWdodCAxNnB4IGNlbnRlclwiO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBDb250ZW50LkFwcGVuZENoaWxkcmVuKFVzZWRFZGl0LCBEcm9wRG93bkJ1dHRvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgc3RyaW5nIEdldFZhbHVlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBVc2VkRWRpdC5UZXh0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHZvaWQgU2V0VmFsdWUoc3RyaW5nIHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVXNlZEVkaXQuVGV4dCA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgdm9pZCBPbkRyb3BEb3duQ2xpY2tlZChSZXR5cGVkLmRvbS5Nb3VzZUV2ZW50IG1vdXNlRXZlbnQpXHJcbiAgICAgICAge1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5MaW5xO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxudXNpbmcgU3lzdGVtLlRocmVhZGluZy5UYXNrcztcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIERyYXdpbmdDb250cm9sIDogQ2FudmFzQ29udHJvbFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBMaXN0PFZlY3RvcjQ+IExpbmVzID0gbmV3IExpc3Q8VmVjdG9yND4oKTtcclxuICAgICAgICBwcml2YXRlIGJvb2wgX19tb3VzZURvd24gPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlIGludCBfX2xhc3REcmF3biA9IDA7XHJcbiAgICAgICAgcHJpdmF0ZSBWZWN0b3IyIF9fY3VycmVudEN1cnNvcjtcclxuXHJcbiAgICAgICAgcHVibGljIERyYXdpbmdDb250cm9sKCkgOiBiYXNlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIENsYXNzTGlzdC5hZGQoXCJpbnB1dGNvbnRyb2xcIik7XHJcbiAgICAgICAgICAgIFN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwid2hpdGVcIjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKEhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDb250ZW50Lm9udG91Y2hzdGFydCA9IChldikgPT5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBkeW5hbWljIGV2MiA9IGV2O1xyXG4gICAgICAgICAgICAgICAgICAgIF9fbW91c2VEb3duID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBfX2N1cnJlbnRDdXJzb3IgPSBuZXcgVmVjdG9yMihldjIubGF5ZXJYLCBldjIubGF5ZXJZKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgT25QYWludCgpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIENvbnRlbnQub250b3VjaG1vdmUgPSAoZXYpID0+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pYyBldjIgPSBldjtcclxuICAgICAgICAgICAgICAgICAgICBpZihfX21vdXNlRG93bilcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBucCA9IG5ldyBWZWN0b3IyKGV2Mi5sYXllclgsIGV2Mi5sYXllclkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBMaW5lcy5BZGQobmV3IFZlY3RvcjQoX19jdXJyZW50Q3Vyc29yLCBucCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfX2N1cnJlbnRDdXJzb3IgPSBucDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9uUGFpbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgQ29udGVudC5vbnRvdWNoZW5kID0gKGV2KSA9PlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWMgZXYyID0gZXY7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5wID0gbmV3IFZlY3RvcjIoZXYyLmxheWVyWCwgZXYyLmxheWVyWSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYobnAuWGkgIT0gX19jdXJyZW50Q3Vyc29yLlhpIHx8IG5wLllpICE9IF9fY3VycmVudEN1cnNvci5ZaSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExpbmVzLkFkZChuZXcgVmVjdG9yNChfX2N1cnJlbnRDdXJzb3IsIG5wKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF9fbW91c2VEb3duID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIE9uUGFpbnQoKTtcclxuICAgICAgICAgICAgICAgIH07IFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQ29udGVudC5vbm1vdXNlZG93biA9IChldikgPT5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBkeW5hbWljIGV2MiA9IGV2O1xyXG4gICAgICAgICAgICAgICAgICAgIF9fbW91c2VEb3duID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBfX2N1cnJlbnRDdXJzb3IgPSBuZXcgVmVjdG9yMihldjIubGF5ZXJYLCBldjIubGF5ZXJZKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgT25QYWludCgpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIENvbnRlbnQub25tb3VzZW1vdmUgPSAoZXYpID0+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoX19tb3VzZURvd24pXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljIGV2MiA9IGV2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnAgPSBuZXcgVmVjdG9yMihldjIubGF5ZXJYLCBldjIubGF5ZXJZKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTGluZXMuQWRkKG5ldyBWZWN0b3I0KF9fY3VycmVudEN1cnNvciwgbnApKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX19jdXJyZW50Q3Vyc29yID0gbnA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBPblBhaW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIENvbnRlbnQub25tb3VzZXVwID0gKGV2KSA9PlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWMgZXYyID0gZXY7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5wID0gbmV3IFZlY3RvcjIoZXYyLmxheWVyWCwgZXYyLmxheWVyWSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYobnAuWGkgIT0gX19jdXJyZW50Q3Vyc29yLlhpIHx8IG5wLllpICE9IF9fY3VycmVudEN1cnNvci5ZaSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExpbmVzLkFkZChuZXcgVmVjdG9yNChfX2N1cnJlbnRDdXJzb3IsIG5wKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF9fbW91c2VEb3duID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIE9uUGFpbnQoKTtcclxuICAgICAgICAgICAgICAgIH07IFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9ICAgICAgICBcclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHZvaWQgT25DbGVhcigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiYXNlLk9uQ2xlYXIoKTtcclxuICAgICAgICAgICAgX19sYXN0RHJhd24gPSAwO1xyXG4gICAgICAgICAgICBPblBhaW50KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBPblBhaW50KClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBpID0gX19sYXN0RHJhd247XHJcbiAgICAgICAgICAgIGlmKGkgPCBMaW5lcy5Db3VudClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQ29udGV4dC5iZWdpblBhdGgoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IoOyBpIDwgTGluZXMuQ291bnQ7IGkrKylcclxuICAgICAgICAgICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHYxID0gTGluZXNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIENvbnRleHQubW92ZVRvKHYxLlhpLCB2MS5ZaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgQ29udGV4dC5saW5lVG8odjEuWmksIHYxLk1pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBDb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICAgICAgX19sYXN0RHJhd24gPSBpO1xyXG4gICAgICAgICAgICB9ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uTGlucTtcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcbnVzaW5nIFN5c3RlbS5UaHJlYWRpbmcuVGFza3M7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBEcm9wRG93bkJ1dHRvbiA6IFNpbXBsZUJ1dHRvblxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBEcm9wRG93bkJ1dHRvbigpIDogYmFzZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDb250ZW50Lm9ubW91c2Vkb3duID0gKGV2KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZihFbmFibGVkKVxyXG4gICAgICAgICAgICAgICAgICAgIE9uRHJvcERvd25DbGlja2VkKGV2KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2aXJ0dWFsIHZvaWQgT25Ecm9wRG93bkNsaWNrZWQoUmV0eXBlZC5kb20uTW91c2VFdmVudCBtb3VzZUV2ZW50KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsInVzaW5nIFN5c3RlbTtcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIE1lbW9JbnB1dCA6IFRleHRJbnB1dFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBpbnQgUm93c1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIChpbnQpQ29udGVudC5BczxSZXR5cGVkLmRvbS5IVE1MVGV4dEFyZWFFbGVtZW50PigpLnJvd3M7IH1cclxuICAgICAgICAgICAgc2V0IHsgQ29udGVudC5BczxSZXR5cGVkLmRvbS5IVE1MVGV4dEFyZWFFbGVtZW50PigpLnJvd3MgPSAodWludCl2YWx1ZTsgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGludCBDb2xzXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gKGludClDb250ZW50LkFzPFJldHlwZWQuZG9tLkhUTUxUZXh0QXJlYUVsZW1lbnQ+KCkuY29sczsgfVxyXG4gICAgICAgICAgICBzZXQgeyBDb250ZW50LkFzPFJldHlwZWQuZG9tLkhUTUxUZXh0QXJlYUVsZW1lbnQ+KCkuY29scyA9ICh1aW50KXZhbHVlOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW50IE1heExlbmd0aFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIChpbnQpQ29udGVudC5BczxSZXR5cGVkLmRvbS5IVE1MVGV4dEFyZWFFbGVtZW50PigpLm1heExlbmd0aDsgfVxyXG4gICAgICAgICAgICBzZXQgeyBDb250ZW50LkFzPFJldHlwZWQuZG9tLkhUTUxUZXh0QXJlYUVsZW1lbnQ+KCkubWF4TGVuZ3RoID0gdmFsdWU7IH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgVmVjdG9yMiBQcmVTaXplO1xyXG4gICAgICAgIHByaXZhdGUgVmVjdG9yMiBQcmVQcmVTaXplO1xyXG4gICAgICAgIHByaXZhdGUgc3RyaW5nIFByZVpJbmRleDtcclxuICAgICAgICBwcml2YXRlIGJvb2wgX2hhc0dvdEZvY3VzO1xyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBEaXNhYmxlUmVzaXplIHsgZ2V0OyBzZXQ7IH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHN0cmluZyBHZXRWYWx1ZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gQ29udGVudC5BczxSZXR5cGVkLmRvbS5IVE1MVGV4dEFyZWFFbGVtZW50PigpLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHZvaWQgU2V0VmFsdWUoc3RyaW5nIHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ29udGVudC5BczxSZXR5cGVkLmRvbS5IVE1MVGV4dEFyZWFFbGVtZW50PigpLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgTWVtb0lucHV0KCkgOiBiYXNlKG5ldyBSZXR5cGVkLmRvbS5IVE1MVGV4dEFyZWFFbGVtZW50KCkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBTdHlsZS5yZXNpemUgPSBcIm5vbmVcIjtcclxuXHJcbiAgICAgICAgICAgIE9uR290Rm9jdXMgPSAobWVtbykgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoRGlzYWJsZVJlc2l6ZSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgU3R5bGUucmVzaXplID0gXCJib3RoXCI7XHJcbiAgICAgICAgICAgICAgICBQcmVQcmVTaXplID0gU2l6ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihfaGFzR290Rm9jdXMpXHJcbiAgICAgICAgICAgICAgICAgICAgU2l6ZSA9IFByZVNpemU7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2hhc0dvdEZvY3VzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBQcmVTaXplID0gU2l6ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgT25Mb3N0Rm9jdXMgPSAobWVtbykgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgU3R5bGUucmVzaXplID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgICAgICBQcmVTaXplID0gU2l6ZTtcclxuICAgICAgICAgICAgICAgIFNpemUgPSBQcmVQcmVTaXplO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIEJyaWRnZTtcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIFBERlByZXZpZXdGb3JtIDogRm9ybVxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgU291cmNlO1xyXG4gICAgICAgIHB1YmxpYyBQZGZTb3VyY2VUeXBlIFBERlNvdXJjZVR5cGU7XHJcbiAgICAgICAgcHVibGljIFJldHlwZWQuZG9tLkhUTUxFbGVtZW50IFBkZlZpZXdlcjtcclxuXHJcbiAgICAgICAgcHVibGljIFBERlByZXZpZXdGb3JtKHN0cmluZyBzb3VyY2UsIFBkZlNvdXJjZVR5cGUgcGRmU291cmNlVHlwZSA9IFBkZlNvdXJjZVR5cGUuVXJsKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgU291cmNlID0gc291cmNlO1xyXG4gICAgICAgICAgICBQREZTb3VyY2VUeXBlID0gcGRmU291cmNlVHlwZTtcclxuXHJcbiAgICAgICAgICAgIFBkZlZpZXdlciA9IFJldHlwZWQuZG9tLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoQnJvd3Nlci5Jc0lFID8gXCJpZnJhbWVcIiA6IHBkZlNvdXJjZVR5cGUgPT0gUGRmU291cmNlVHlwZS5VcmwgPyBcImVtYmVkXCIgOiBcIm9iamVjdFwiKTtcclxuICAgICAgICAgICAgUGRmVmlld2VyLmNsYXNzTmFtZSA9IFwiY29udHJvbFwiO1xyXG5cclxuICAgICAgICAgICAgUGRmVmlld2VyLlNldEJvdW5kcygwLCAwLCBcIjEwMCVcIiwgXCIxMDAlXCIpO1xyXG4gICAgICAgICAgICBQZGZWaWV3ZXIuc2V0QXR0cmlidXRlKFwiYWx0XCIsIFwicGRmXCIpO1xyXG4gICAgICAgICAgICBQZGZWaWV3ZXIuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImFwcGxpY2F0aW9uL3BkZlwiKTtcclxuICAgICAgICAgICAgLy9vYmplY3RcclxuXHJcbiAgICAgICAgICAgIHRoaXMuQm9keS5BcHBlbmRDaGlsZChQZGZWaWV3ZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIG92ZXJyaWRlIHZvaWQgT25TaG93aW5nKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhc2UuT25TaG93aW5nKCk7XHJcbiAgICAgICAgICAgIC8vZGF0YVxyXG4gICAgICAgICAgICBpZihQREZTb3VyY2VUeXBlID09IFBkZlNvdXJjZVR5cGUuVXJsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBQZGZWaWV3ZXIuc2V0QXR0cmlidXRlKFwiU3JjXCIsIFNvdXJjZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBQZGZWaWV3ZXIuc2V0QXR0cmlidXRlKFwiZGF0YVwiLCBHZXRQZGZTdHJpbmcoU291cmNlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGVudW0gUGRmU291cmNlVHlwZVxyXG4gICAge1xyXG4gICAgICAgIFVybCxcclxuICAgICAgICBCYXNlNjRcclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5MaW5xO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxudXNpbmcgU3lzdGVtLlRocmVhZGluZy5UYXNrcztcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIFByaW50aW5nUHJldmlld0Zvcm0gOiBGb3JtXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIFByaW50ZXJDb250cm9sIFByaW50aW5nQ29udHJvbDtcclxucHVibGljIFBhZ2UgRm9jdXNlZFBhZ2Vcclxue1xyXG4gICAgZ2V0XHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIFByaW50aW5nQ29udHJvbC5Gb2N1c2VkUGFnZTtcclxuICAgIH1cclxufXB1YmxpYyBMaXN0PFBhZ2U+IFBhZ2VzXHJcbntcclxuICAgIGdldFxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBQcmludGluZ0NvbnRyb2wuUGFnZXM7XHJcbiAgICB9XHJcbn1cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIFBhZ2UgaXMgYSBIVE1MRWxlbWVudCAtIEFwcGVuZENoaWxkIGFuZCBBZGQgdGhlIHBhZ2UgdG8gdGhlIGxpc3RcclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImVsZW1lbnRcIj48L3BhcmFtPlxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEFkZEVsZW1lbnRGb2N1c2VkUGFnZShDb250cm9sIGVsZW1lbnQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBQcmludGluZ0NvbnRyb2wuQWRkRWxlbWVudEZvY3VzZWRQYWdlKGVsZW1lbnQuQ29udGVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgUGFnZSBDcmVhdGVOZXdQYWdlKFBhZ2VTaXplIHNpemUgPSBQYWdlU2l6ZS5BNClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcmludGluZ0NvbnRyb2wuQ3JlYXRlTmV3UGFnZShzaXplKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gUGFnZSBpcyBhIEhUTUxFbGVtZW50IC0gQXBwZW5kQ2hpbGQgYW5kIEFkZCB0aGUgcGFnZSB0byB0aGUgbGlzdFxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiZWxlbWVudFwiPjwvcGFyYW0+XHJcbiAgICAgICAgcHVibGljIHZvaWQgQWRkRWxlbWVudEZvY3VzZWRQYWdlKFJldHlwZWQuZG9tLkhUTUxFbGVtZW50IGVsZW1lbnQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihGb2N1c2VkUGFnZSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIlRoZXJlIGlzIG5vdCBmb2N1c2VkIHBhZ2UhXCIpO1xyXG5cclxuICAgICAgICAgICAgUHJpbnRpbmdDb250cm9sLkZvY3VzZWRQYWdlLkNvbnRlbnQuQXBwZW5kQ2hpbGQoZWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgUHJpbnRpbmdQcmV2aWV3Rm9ybSgpIDogYmFzZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBQcmludGluZ0NvbnRyb2wgPSBuZXcgUHJpbnRlckNvbnRyb2woKTtcclxuICAgICAgICAgICAgUHJpbnRpbmdDb250cm9sLlNldEJvdW5kc0Z1bGwoKTtcclxuXHJcbiAgICAgICAgICAgIEJvZHkuQXBwZW5kQ2hpbGQoUHJpbnRpbmdDb250cm9sKTtcclxuXHJcbiAgICAgICAgICAgIFRleHQgPSBcIlByaW50aW5nIFByZXZpZXdcIjtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIG92ZXJyaWRlIHZvaWQgT25TaG93ZWQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYmFzZS5PblNob3dlZCgpO1xyXG5cclxuICAgICAgICAgICAgU2hvd0Nsb3NlID0gdHJ1ZTtcclxuICAgICAgICAgICAgU2hvd01pbmltaXplID0gdHJ1ZTtcclxuICAgICAgICAgICAgU2hvd01heGltaXplID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIFdpbmRvd1N0YXRlID0gV2luZG93U3RhdGVUeXBlLk1heGltaXplZDsgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9XHJcbn1cclxuIiwidXNpbmcgQnJpZGdlO1xyXG51c2luZyBTeXN0ZW07XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIFtOYW1lc3BhY2UodHJ1ZSldXHJcbiAgICBwdWJsaWMgY2xhc3MgUmliYm9uQnV0dG9uIDogUmliYm9uSXRlbVxyXG4gICAge1xyXG4gICAgICAgIHByaXZhdGUgc3RyaW5nIF9pY29uID0gXCJcIjtcclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBJY29uXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9pY29uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihfaWNvbiAhPSB2YWx1ZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBfaWNvbiA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIFByb2Nlc3NJbWFnZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0cmluZyBfaWNvblVSTCA9IFwiXCI7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgSWNvblVSTFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfaWNvblVSTDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoX2ljb25VUkwgIT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2ljb25VUkwgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBQcm9jZXNzSW1hZ2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXHJcblxyXG5cclxuXHJcbiAgICAgICAgcHVibGljIEFjdGlvbjxSaWJib25CdXR0b24+IE9uSXRlbUNsaWNrO1xyXG5cclxuICAgICAgICBcclxuXHJcbiAgICAgICAgXHJcbiAgICAgICAgcHVibGljIFJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50IGltYWdlRGl2ID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIG92ZXJyaWRlIHZvaWQgT25TZXRFbmFibGVkKGJvb2wgdmFsdWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZih2YWx1ZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoaW1hZ2VEaXYgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZURpdi5jbGFzc0xpc3QucmVtb3ZlKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoaW1hZ2VEaXYgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZURpdi5jbGFzc0xpc3QuYWRkKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJhc2UuT25TZXRFbmFibGVkKHZhbHVlKTtcclxuICAgICAgICB9ICAgICAgICBcclxuXHJcbiAgICAgICAgcHVibGljIFJpYmJvbkJ1dHRvbihzdHJpbmcgY2FwdGlvbiA9IFwiXCIsIGJvb2wgX2lzU21hbGxDYXB0aW9uID0gZmFsc2UpIDogYmFzZShfaXNTbWFsbENhcHRpb24gPyBcInJpYmJvbmJ1dHRvbnNtYWxsXCIgOiBcInJpYmJvbmJ1dHRvblwiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ2FwdGlvbiA9IGNhcHRpb247XHJcbiAgICAgICAgICAgIElzU21hbGxJdGVtID0gX2lzU21hbGxDYXB0aW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEFjdGlvbjxSaWJib25CdXR0b24+IEFmdGVySXRlbUNsaWNrO1xyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBSZW5kZXIoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgSGFzUmVuZGVyZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgQ29udGVudC5vbmNsaWNrID0gKGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBib29sIHdhc0VuYWJsZWQgPSBlbmFibGVkO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKGVuYWJsZWQgJiYgT25JdGVtQ2xpY2sgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBPbkl0ZW1DbGljayh0aGlzKTtcclxuICAgICAgICAgICAgICAgIGlmKHdhc0VuYWJsZWQgJiYgQWZ0ZXJJdGVtQ2xpY2sgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBBZnRlckl0ZW1DbGljayh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIFByb2Nlc3NDYXB0aW9uKCk7XHJcbiAgICAgICAgICAgIFByb2Nlc3NJbWFnZSgpO1xyXG5cclxuICAgICAgICAgICAgc2V0RW5hYmxlZChlbmFibGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBQcm9jZXNzSW1hZ2UoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoaW1hZ2VEaXYgPT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoIXN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoSWNvbikpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VEaXYgPSBEaXYoSXNTbWFsbEl0ZW0gPyBcInJpYmJvbmJ1dHRvbnNtYWxsaWNvblwiIDogXCJyaWJib25idXR0b25pY29uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlRGl2LnN0eWxlLmJhY2tncm91bmQgPSBHZXRJbWFnZVN0cmluZyhJY29uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYoIXN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoSWNvblVSTCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VEaXYgPSBEaXYoSXNTbWFsbEl0ZW0gPyBcInJpYmJvbmJ1dHRvbnNtYWxsaWNvblwiIDogXCJyaWJib25idXR0b25pY29uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlRGl2LnN0eWxlLmJhY2tncm91bmQgPSBHZXRJbWFnZVN0cmluZ1VSSShJY29uVVJMKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKGltYWdlRGl2ICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgQ29udGVudC5BcHBlbmRDaGlsZChpbWFnZURpdik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZighc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShJY29uKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZURpdi5zdHlsZS5iYWNrZ3JvdW5kID0gR2V0SW1hZ2VTdHJpbmcoSWNvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKCFzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKEljb25VUkwpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlRGl2LnN0eWxlLmJhY2tncm91bmQgPSBHZXRJbWFnZVN0cmluZ1VSSShJY29uVVJMKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoaW1hZ2VEaXYgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaW1hZ2VEaXYuc3R5bGUuYmFja2dyb3VuZFNpemUgPSBcIjEwMCUgMTAwJVwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKGNhcHRpb25EaXYgIT0gbnVsbCAmJiBJc1NtYWxsSXRlbSlcclxuICAgICAgICAgICAgICAgICAgICBjYXB0aW9uRGl2LnN0eWxlLmxlZnQgPSBcIjI4cHhcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKGNhcHRpb25EaXYgIT0gbnVsbCAmJiBJc1NtYWxsSXRlbSlcclxuICAgICAgICAgICAgICAgICAgICBjYXB0aW9uRGl2LnN0eWxlLmxlZnQgPSBcIjZweFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLkxpbnE7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG51c2luZyBTeXN0ZW0uVGhyZWFkaW5nLlRhc2tzO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgUmliYm9uRWRpdEl0ZW0gOiBSaWJib25JdGVtXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIFRleHRJbnB1dCBFZGl0O1xyXG4gICAgICAgIHB1YmxpYyBSaWJib25FZGl0SXRlbShUZXh0SW5wdXQgZWRpdCwgaW50IGVkaXRXaWR0aCA9IDEwMCkgOiBiYXNlKFwicmliYm9uYnV0dG9uc21hbGxcIilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEVkaXQgPSBlZGl0O1xyXG4gICAgICAgICAgICBFZGl0V2lkdGggPSBlZGl0V2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMuQ29udGVudC5BcHBlbmRDaGlsZChFZGl0KTtcclxuXHJcbiAgICAgICAgICAgIElzU21hbGxJdGVtID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcHVibGljIGludCBFZGl0V2lkdGhcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBFZGl0LldpZHRoLlRvSW50KCk7IH1cclxuICAgICAgICAgICAgc2V0IHtcclxuICAgICAgICAgICAgICAgIEVkaXQuV2lkdGggPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIEVkaXQuVG9wID0gMDtcclxuICAgICAgICAgICAgICAgIEVkaXQuTGVmdCA9IFwiKDEwMCUgLSBcIiArICh2YWx1ZSArIDEwKSArIFwicHgpXCI7XHJcbiAgICAgICAgICAgICAgICBFZGl0LkhlaWdodCA9IFwiMTAwJVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uTGlucTtcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcbnVzaW5nIFN5c3RlbS5UaHJlYWRpbmcuVGFza3M7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBTaGVldCA6IENhbnZhc0NvbnRyb2xcclxuICAgIHtcclxuICAgICAgICAvL1Jvdy9DZWxsXHJcbiAgICAgICAgcHJpdmF0ZSBMaXN0PExpc3Q8U2hlZXRDZWxsPj4gZGF0YSA9IG5ldyBMaXN0PExpc3Q8U2hlZXRDZWxsPj4oKTtcclxuICAgICAgICBwcml2YXRlIGludCBTY3JvbGxDb2x1bW5JbmRleDtcclxuICAgICAgICBwcml2YXRlIGludCBTY3JvbGxSb3dJbmRleDtcclxuICAgICAgICBcclxuICAgICAgICBwcml2YXRlIExpc3Q8U2hlZXRDb2x1bW4+IGNvbHVtbnMgPSBuZXcgTGlzdDxTaGVldENvbHVtbj4oKTtcclxuICAgICAgICBwcml2YXRlIExpc3Q8U2hlZXRSb3c+IHJvd3MgPSBuZXcgTGlzdDxTaGVldFJvdz4oKTtcclxuXHJcbiAgICAgICAgaW50ZXJuYWwgYm9vbCBfaW5EYXRhVXBkYXRlO1xyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBSZXF1ZXN0UmVmcmVzaCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihfaW5EYXRhVXBkYXRlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBSZWZyZXNoKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBCZWdpbkRhdGFVcGRhdGUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgX2luRGF0YVVwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBFbmREYXRhVXBkYXRlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIF9pbkRhdGFVcGRhdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgUmVmcmVzaCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFNoZWV0KClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwid2hpdGVcIjtcclxuICAgICAgICAgICAgQ29udGVudC5jb250ZW50RWRpdGFibGUgPSBcInRydWVcIjtcclxuICAgICAgICAgICAgQ29udGVudC5hZGRFdmVudExpc3RlbmVyPHN0cmluZz4oXCJrZXlkb3duXCIsIChnbG9iYWw6OlJldHlwZWQuZG9tLkhUTUxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXJGbjxzdHJpbmc+KSgoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV2ID0gZS5BczxSZXR5cGVkLmRvbS5LZXlib2FyZEV2ZW50PigpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKGV2LmtleUNvZGUgPT0gNDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgU2Nyb2xsUm93SW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICBSZWZyZXNoKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKGV2LmtleUNvZGUgPT0gMzgpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgU2Nyb2xsUm93SW5kZXgtLTtcclxuICAgICAgICAgICAgICAgICAgICBpZihTY3JvbGxSb3dJbmRleCA8IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNjcm9sbFJvd0luZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBSZWZyZXNoKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKGV2LmtleUNvZGUgPT0gMzcpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgU2Nyb2xsQ29sdW1uSW5kZXgtLTtcclxuICAgICAgICAgICAgICAgICAgICBpZihTY3JvbGxDb2x1bW5JbmRleCA8IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNjcm9sbENvbHVtbkluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBSZWZyZXNoKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKGV2LmtleUNvZGUgPT0gMzkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgU2Nyb2xsQ29sdW1uSW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICBSZWZyZXNoKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KSk7ICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHZvaWQgaW5jcmVhc2VMaXN0Qnk8VD4oSUxpc3Q8VD4gbGlzdCwgaW50IGNvdW50KSB3aGVyZSBUIDogY2xhc3NcclxuICAgICAgICB7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsaXN0LkFkZChudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFNoZWV0Q2VsbCBHZXRDZWxsKGludCB4LCBpbnQgeSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKGRhdGEgPT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0YSA9IG5ldyBMaXN0PExpc3Q8U2hlZXRDZWxsPj4oKTsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKHkgPj0gZGF0YS5Db3VudClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaW5jcmVhc2VMaXN0Qnk8U2hlZXRSb3c+KHJvd3MsIHkgKyAxIC0gcm93cy5Db3VudCk7XHJcbiAgICAgICAgICAgICAgICBpbmNyZWFzZUxpc3RCeTxMaXN0PFNoZWV0Q2VsbD4+KGRhdGEsIHkgKyAxIC0gZGF0YS5Db3VudCk7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihkYXRhW3ldID09IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRhdGFbeV0gPSBuZXcgTGlzdDxTaGVldENlbGw+KCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKHggPj0gZGF0YVt5XS5Db3VudClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaW5jcmVhc2VMaXN0Qnk8U2hlZXRDb2x1bW4+KGNvbHVtbnMsIHggKyAxIC0gY29sdW1ucy5Db3VudCk7XHJcbiAgICAgICAgICAgICAgICBpbmNyZWFzZUxpc3RCeTxTaGVldENlbGw+KGRhdGFbeV0sIHggKyAxIC0gZGF0YVt5XS5Db3VudCk7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGRhdGFbeV1beF07XHJcbiAgICAgICAgICAgIGlmKHZhbHVlID09IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gKGRhdGFbeV1beF0gPSBuZXcgU2hlZXRDZWxsKHRoaXMpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFNoZWV0Q2VsbCB0aGlzW2ludCB4LCBpbnQgeV1cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBHZXRDZWxsKHgsIHkpOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RyaW5nIEdldENvbHVtbkxldHRlcnMoaW50IGNvbHVtbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyBjb2wgPSBcIkFcIjtcclxuICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IGNvbHVtbjsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb2wgPSBJbmNyZW1lbnRDb2x1bW4oY29sKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY29sO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBJbmNyZW1lbnRDb2x1bW4oc3RyaW5nIGNvbHVtbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIExpc3Q8Y2hhcj4gY29sdW1uQ2hhcnMgPSBuZXcgTGlzdDxjaGFyPihjb2x1bW4uVG9VcHBlcigpLlRvQ2hhckFycmF5KCkpO1xyXG5cclxuICAgICAgICAgICAgaW50IGxlZnRPdmVyID0gMTtcclxuXHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IGNvbHVtbkNoYXJzLkNvdW50IC0gMTsgaSA+PSAwOyBpLS0pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKChjb2x1bW5DaGFyc1tpXSsrKSA9PSAnWycpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uQ2hhcnNbaV0gPSAnQSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdE92ZXIgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGxlZnRPdmVyID09IDEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbHVtbkNoYXJzLkluc2VydCgwLCAnQScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgc3RyaW5nKGNvbHVtbkNoYXJzLlRvQXJyYXkoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBPblBhaW50KClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhc2UuT25QYWludCgpO1xyXG4gICAgICAgICAgICB2YXIgZyA9IENyZWF0ZUdyYXBoaWNzKCk7XHJcblxyXG4gICAgICAgICAgICAvLyB3aGF0IHdlIG5lZWQgdG8gZG8gaXMgZHJhdyBmcm9tIHggdG8geCArICh0b3RhbCBuZXh0IGNvbHVtbnMgdW50aWwgbGFyZ2VyIHRoZW4gd2lkdGgpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBkb3VibGUgd2lkdGhTb0ZhciA9IDQ1O1xyXG4gICAgICAgICAgICBkb3VibGUgaGVpZ2h0U29GYXIgPSAyNTtcclxuXHJcbiAgICAgICAgICAgIHZhciBkZWZhdWx0Qm9yZGVyQ29sb3IgPSBuZXcgUGVuKG5ldyBTb2xpZEJydXNoKENvbG9yLkZyb21BcmdiKDIxOCwgMjE4LCAyMTgpKSk7XHJcbiAgICAgICAgICAgIHZhciBjb2x1bW5Cb3JkZXJDb2xvciA9IG5ldyBQZW4obmV3IFNvbGlkQnJ1c2goQ29sb3IuRnJvbUFyZ2IoMTkyLCAxOTIsIDE5MikpKTtcclxuICAgICAgICAgICAgLy8gZHJhdyBkZWZhdWx0IGJvcmRlcnMuLi5cclxuICAgICAgICAgICAgdmFyIGNvbHVtbkhlYWRlciA9IG5ldyBTb2xpZEJydXNoKENvbG9yLkZyb21BcmdiKDI0MywgMjQzLCAyNDMpKTtcclxuXHJcbiAgICAgICAgICAgIGZvcihpbnQgeCA9IFNjcm9sbENvbHVtbkluZGV4OyB4IDwgY29sdW1ucy5Db3VudDsgeCsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihjb2x1bW5zW3hdID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uc1t4XSA9IG5ldyBTaGVldENvbHVtbih0aGlzKTtcclxuICAgICAgICAgICAgICAgIHZhciBwcmUgPSB3aWR0aFNvRmFyO1xyXG4gICAgICAgICAgICAgICAgd2lkdGhTb0ZhciArPSBjb2x1bW5zW3hdLldpZHRoO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGRyYXcgY29sdW1uXHJcbiAgICAgICAgICAgICAgICBnLkZpbGxSZWN0YW5nbGUoY29sdW1uSGVhZGVyLCAoZmxvYXQpcHJlLCAwLCBjb2x1bW5zW3hdLldpZHRoLCAyNSk7XHJcbiAgICAgICAgICAgICAgICBnLkRyYXdSZWN0YW5nbGUoY29sdW1uQm9yZGVyQ29sb3IsIChmbG9hdClwcmUsIDAsIGNvbHVtbnNbeF0uV2lkdGgsIDI1KTtcclxuXHJcbiAgICAgICAgICAgICAgICBnLkRyYXdTdHJpbmcoR2V0Q29sdW1uTGV0dGVycyh4KSwgbmV3IEZvbnQoXCJBcmlhbCAxMHB0XCIpLCBuZXcgU29saWRCcnVzaChDb2xvci5CbGFjayksIChmbG9hdClwcmUgKyAoY29sdW1uc1t4XS5XaWR0aCAvIDIpLCA2LCBjb2x1bW5zW3hdLldpZHRoLCB0cnVlLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBnLkRyYXdMaW5lKGRlZmF1bHRCb3JkZXJDb2xvciwgKGZsb2F0KXdpZHRoU29GYXIsIDI1LCAoZmxvYXQpd2lkdGhTb0ZhciwgKGZsb2F0KUNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICB9ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvcihpbnQgeSA9IFNjcm9sbFJvd0luZGV4OyB5IDwgcm93cy5Db3VudDsgeSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihyb3dzW3ldID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgcm93c1t5XSA9IG5ldyBTaGVldFJvdyh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHZhciBwcmUgPSBoZWlnaHRTb0ZhcjtcclxuICAgICAgICAgICAgICAgIGhlaWdodFNvRmFyICs9IHJvd3NbeV0uSGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgIGcuRmlsbFJlY3RhbmdsZShjb2x1bW5IZWFkZXIsIDAsIChmbG9hdClwcmUsIDQ1LCByb3dzW3ldLkhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBnLkRyYXdSZWN0YW5nbGUoY29sdW1uQm9yZGVyQ29sb3IsIDAsIChmbG9hdClwcmUsIDQ1LCByb3dzW3ldLkhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZy5EcmF3U3RyaW5nKCh5ICsgMSkuVG9TdHJpbmcoKSwgbmV3IEZvbnQoXCJBcmlhbCAxMHB0XCIpLCBuZXcgU29saWRCcnVzaChDb2xvci5CbGFjayksIDIzLCAoZmxvYXQpcHJlICsgKHJvd3NbeV0uSGVpZ2h0IC8gMikgLSA2LCA0NSwgdHJ1ZSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZy5EcmF3TGluZShkZWZhdWx0Qm9yZGVyQ29sb3IsIDQ1LCAoZmxvYXQpaGVpZ2h0U29GYXIsIChmbG9hdClDYW52YXMud2lkdGgsIChmbG9hdCloZWlnaHRTb0Zhcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHdpZHRoU29GYXIgPSA0NTtcclxuICAgICAgICAgICAgaGVpZ2h0U29GYXIgPSAyNTsgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIGZvcihpbnQgeCA9IFNjcm9sbENvbHVtbkluZGV4OyB4IDwgY29sdW1ucy5Db3VudDsgeCsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHRTb0ZhciA9IDI1O1xyXG4gICAgICAgICAgICAgICAgaWYoY29sdW1uc1t4XSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnNbeF0gPSBuZXcgU2hlZXRDb2x1bW4odGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGNvbHVtbldpZHRoID0gY29sdW1uc1t4XS5XaWR0aDtcclxuICAgICAgICAgICAgICAgIGZvcihpbnQgeSA9IFNjcm9sbFJvd0luZGV4OyB5IDwgcm93cy5Db3VudDsgeSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbmRlciBjZWxsLlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjZWxsID0gR2V0Q2VsbCh4LCB5KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZHJhdyBzdHlsZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBjZWxsLlZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3BsYXlWYWx1ZSA9IENvbnZlcnQuVG9TdHJpbmcodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShkaXNwbGF5VmFsdWUpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgZm9udCBmcm9tIGNlbGwuLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcuRHJhd1N0cmluZyhkaXNwbGF5VmFsdWUsIG5ldyBGb250KFwiQXJpYWwgMTBwdFwiKSwgbmV3IFNvbGlkQnJ1c2goQ29sb3IuQmxhY2spLCB3aWR0aFNvRmFyICsgMiwgaGVpZ2h0U29GYXIgKyAyLCBjb2x1bW5XaWR0aCAtIDQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihyb3dzW3ldID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3NbeV0gPSBuZXcgU2hlZXRSb3codGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodFNvRmFyICs9IHJvd3NbeV0uSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGhlaWdodFNvRmFyID4gQ2FudmFzLmhlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB3aWR0aFNvRmFyICs9IGNvbHVtbldpZHRoO1xyXG4gICAgICAgICAgICAgICAgaWYod2lkdGhTb0ZhciA+IENhbnZhcy53aWR0aClcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfSAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJuYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBTaW1wbGVEaWFsb2dCdXR0b24gOiBTaW1wbGVCdXR0b25cclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgU2ltcGxlRGlhbG9nQnV0dG9uKEZvcm0gcGFyZW50Rm9ybSwgRGlhbG9nUmVzdWx0RW51bSBkaWFsb2dSZXN1bHQgPSBEaWFsb2dSZXN1bHRFbnVtLk5vbmUpIDogYmFzZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLlBhcmVudEZvcm0gPSBwYXJlbnRGb3JtO1xyXG4gICAgICAgICAgICB0aGlzLkRpYWxvZ1Jlc3VsdCA9IGRpYWxvZ1Jlc3VsdDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuU2V0U2l6ZSg3NSwgMjMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIEJyaWRnZTtcclxudXNpbmcgRXhwcmVzc0NyYWZ0O1xyXG51c2luZyBFeHByZXNzQ3JhZnQueGFtbDtcclxudXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLkxpbnE7XHJcbnVzaW5nIFN5c3RlbS5SZWZsZWN0aW9uO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxudXNpbmcgU3lzdGVtLlRocmVhZGluZy5UYXNrcztcclxuXHJcbm5hbWVzcGFjZSBYYW1hcmluLkZvcm1zXHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBDb250ZW50UGFnZSA6IEZvcm1cclxuICAgIHtcclxuICAgICAgICBzdGF0aWMgQ29udGVudFBhZ2UoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICBcclxuICAgICAgICB9ICAgICAgICBcclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgSW5pdGlhbGl6ZUNvbXBvbmVudCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBYQU1MRGVmaW5pdGlvbnMuTG9hZCh0aGlzLkdldFR5cGUoKS5Bc3NlbWJseSk7XHJcbiAgICAgICAgICAgIFhBTUxEZWZpbml0aW9ucy5CdWlsZFVJKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJuYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBDYWxjRm9ybSA6IEZvcm1Qb3B1cFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBUZXh0SW5wdXQgSW5wdXRDb250cm9sO1xyXG5cclxuICAgICAgICBwdWJsaWMgQ2FsY3VsYXRvckNvbnRyb2wgQ2FsQ29udHJvbDtcclxuICAgICAgICBwdWJsaWMgYm9vbCBDbGlja2VkQ2xvc2UgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgcHVibGljIENhbGNGb3JtKFRleHRJbnB1dCBpbnB1dENvbnRyb2wpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihpbnB1dENvbnRyb2wuQ29udGVudC5wYXJlbnRFbGVtZW50ICE9IG51bGwgJiYgaW5wdXRDb250cm9sLkNvbnRlbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50ICE9IG51bGwgJiYgaW5wdXRDb250cm9sLkNvbnRlbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgUHJldmlvdXNTY3JvbGxUb3AgPSBpbnB1dENvbnRyb2wuQ29udGVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5zY3JvbGxUb3A7XHJcbiAgICAgICAgICAgICAgICBQYXJlbnRDb250YWluZXIgPSBpbnB1dENvbnRyb2wuQ29udGVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgSW5wdXRDb250cm9sID0gaW5wdXRDb250cm9sO1xyXG4gICAgICAgICAgICBDYWxDb250cm9sID0gbmV3IENhbGN1bGF0b3JDb250cm9sKElucHV0Q29udHJvbC5HZXROdW1iZXJWYWx1ZSgpLCB0cnVlKTtcclxuICAgICAgICAgICAgQ2FsQ29udHJvbC5TZXRCb3VuZHNGdWxsKCk7XHJcbiAgICAgICAgICAgIENhbENvbnRyb2wuT25DbG9zZSA9ICgpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIENsaWNrZWRDbG9zZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkNsb3NlKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBDYWxDb250cm9sLk9uRXF1YWwgPSAodmFsdWUpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIElucHV0Q29udHJvbC5UZXh0ID0gdmFsdWUuVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIEFwcGVuZENoaWxkKENhbENvbnRyb2wpO1xyXG5cclxuICAgICAgICAgICAgU2l6ZSA9IG5ldyBWZWN0b3IyKDE4MiwgMTU3KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIE9uQ2xvc2VkKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhc2UuT25DbG9zZWQoKTtcclxuICAgICAgICAgICAgSW5wdXRDb250cm9sLlZhbGlkYXRlRGF0YSgpO1xyXG4gICAgICAgICAgICBpZighSGVscGVyLk5vdERlc2t0b3ApXHJcbiAgICAgICAgICAgICAgICBJbnB1dENvbnRyb2wuRm9jdXMoKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBJbnB1dENvbnRyb2wuU2Nyb2xsKChpbnQpUHJldmlvdXNTY3JvbGxUb3AsIFBhcmVudENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIE9uQ2xvc2luZygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiYXNlLk9uQ2xvc2luZygpO1xyXG5cclxuICAgICAgICAgICAgaWYoIUNsaWNrZWRDbG9zZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQ2FsQ29udHJvbC5Eb250UmVmcmVzaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBDYWxDb250cm9sLkFkZE9wZXJhdG9yKENhbENvbnRyb2wuYnRuRXEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBPblNob3dlZCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiYXNlLk9uU2hvd2VkKCk7XHJcbiAgICAgICAgICAgIGlmKElucHV0Q29udHJvbCA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5DbG9zZSgpO1xyXG5cclxuICAgICAgICAgICAgQ2FsQ29udHJvbC5idG5FcS5Gb2N1cygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBEYXRhUm93RWRpdEZvcm0gOiBEaWFsb2dGb3JtXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIGJvb2wgTGl2ZURhdGE7XHJcbiAgICAgICAgcHVibGljIEdyaWRWaWV3IEdyaWRWaWV3O1xyXG4gICAgICAgIHB1YmxpYyBEYXRhUm93IERhdGFSb3c7XHJcblxyXG4gICAgICAgIHByaXZhdGUgUmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQgUGFuZWw7XHJcblxyXG4gICAgICAgIHByaXZhdGUgb2JqZWN0W10gcHJldkRhdGE7XHJcblxyXG4gICAgICAgIHB1YmxpYyBEYXRhUm93RWRpdEZvcm0oRGF0YVJvdyBfZGF0YVJvdywgR3JpZFZpZXcgX2dyaWRWaWV3LCBib29sIF9saXZlRGF0YSA9IHRydWUpIDogYmFzZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwcmV2RGF0YSA9IG5ldyBvYmplY3RbX2RhdGFSb3cuUGFyZW50VGFibGUuQ29sdW1uQ291bnRdO1xyXG5cclxuICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IF9kYXRhUm93LlBhcmVudFRhYmxlLkNvbHVtbkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHByZXZEYXRhW2ldID0gX2RhdGFSb3dbaV07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIERhdGFSb3cgPSBfZGF0YVJvdztcclxuICAgICAgICAgICAgR3JpZFZpZXcgPSBfZ3JpZFZpZXc7XHJcbiAgICAgICAgICAgIExpdmVEYXRhID0gX2xpdmVEYXRhO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5UZXh0ID0gXCJSb3cgRWRpdCBGb3JtXCI7XHJcbiAgICAgICAgICAgIHRoaXMuV2lkdGggPSBcIjQwMHB4XCI7IC8vIDI1cHggLSAyNXB4IDM1MHB4IHdpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLkhlaWdodCA9IFwiNjAwcHhcIjtcclxuICAgICAgICAgICAgdGhpcy5Cb2R5LnN0eWxlLm92ZXJmbG93WSA9IFwiYXV0b1wiO1xyXG5cclxuICAgICAgICAgICAgUGFuZWwgPSBEaXYoKTtcclxuICAgICAgICAgICAgUGFuZWwuc3R5bGUub3ZlcmZsb3dZID0gXCJhdXRvXCI7XHJcbiAgICAgICAgICAgIFBhbmVsLlNldEJvdW5kcyhcIjBcIiwgXCIwXCIsIFwiMTAwJVwiLCBcIigxMDAlIC0gNjBweClcIik7XHJcbiAgICAgICAgICAgIEJvZHkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ3aGl0ZVwiO1xyXG5cclxuICAgICAgICAgICAgX2J1dHRvbkNvbGxlY3Rpb24gPSBnbG9iYWw6OkJyaWRnZS5TY3JpcHQuQ2FsbEZvcihuZXcgTGlzdDxTaW1wbGVEaWFsb2dCdXR0b24+KCksKF9vMSk9PntfbzEuQWRkKG5ldyBTaW1wbGVEaWFsb2dCdXR0b24odGhpcywgRGlhbG9nUmVzdWx0RW51bS5DYW5jZWwpIHsgVGV4dCA9IFwiQ2FuY2VsXCIsIExvY2F0aW9uID0gbmV3IFZlY3RvcjIoXCIoMTAwJSAtIDg1cHgpXCIsIFwiKDEwMCUgLSAzNXB4KVwiKSwgSXRlbUNsaWNrID0gKGV2KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IERhdGFSb3cuUGFyZW50VGFibGUuQ29sdW1uQ291bnQ7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZGF0YVJvd1tpXSA9IHByZXZEYXRhW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdyaWRWaWV3LlJlbmRlckdyaWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX0pO19vMS5BZGQobmV3IFNpbXBsZURpYWxvZ0J1dHRvbih0aGlzLCBEaWFsb2dSZXN1bHRFbnVtLk9LKSB7IFRleHQgPSBcIk9LXCIsIExvY2F0aW9uID0gbmV3IFZlY3RvcjIoXCIoMTAwJSAtIDE3MHB4KVwiLCBcIigxMDAlIC0gMzVweClcIikgIH0pO3JldHVybiBfbzE7fSk7XHJcblxyXG4gICAgICAgICAgICBCdXR0b25TZWN0aW9uLkFwcGVuZENoaWxkcmVuVGFiSW5kZXgoX2J1dHRvbkNvbGxlY3Rpb24uVG9BcnJheSgpKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuQm9keS5BcHBlbmRDaGlsZChQYW5lbCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLkFsbG93U2l6ZUNoYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRGF0YSBub3cgYXV0byBjaGFuZ2VzLi4uXHJcbiAgICAgICAgcHJvdGVjdGVkIG92ZXJyaWRlIHZvaWQgT25DbG9zZWQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgR3JpZFZpZXcuRGF0YVNvdXJjZS5FbmREYXRhVXBkYXRlKCk7XHJcblxyXG4gICAgICAgICAgICBiYXNlLk9uQ2xvc2VkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBPblNob3dlZCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiYXNlLk9uU2hvd2VkKCk7XHJcblxyXG4gICAgICAgICAgICBpZihEYXRhUm93ID09IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuRGlhbG9nUmVzdWx0ID0gRGlhbG9nUmVzdWx0RW51bS5DYW5jZWw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkNsb3NlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBHcmlkVmlldy5EYXRhU291cmNlLkJlZ2luRGF0YVVwZGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIEdlbmVyYXRlRm9ybSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHZvaWQgR2VuZXJhdGVGb3JtKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuUGFuZWwuRW1wdHkoKTtcclxuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IEdyaWRWaWV3LkNvbHVtbkNvdW50KCk7XHJcblxyXG4gICAgICAgICAgICBpbnQgY29sID0gMDtcclxuICAgICAgICAgICAgaW50IGhlaWdodCA9IDI1O1xyXG5cclxuICAgICAgICAgICAgaW50IGRlZmF1bHRIZWlnaHQgPSAyNCArIDMgKyAyNCArIDM7XHJcbiAgICAgICAgICAgIGludCBkZWZhdWx0SGVpZ2h0MlggPSBkZWZhdWx0SGVpZ2h0ICogMztcclxuICAgICAgICAgICAgaW50IGluY3JlbWVudEhlaWdodCA9IGRlZmF1bHRIZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICBpbnQgZWFjaFdpZHRoID0gKDM1MCAvIDMpIC0gMztcclxuXHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaW5jcmVtZW50SGVpZ2h0ID0gZGVmYXVsdEhlaWdodDtcclxuICAgICAgICAgICAgICAgIHZhciBnckNvbCA9IEdyaWRWaWV3LkdldENvbHVtbihpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZighZ3JDb2wuQWxsb3dFZGl0KVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBkdENvbCA9IGdyQ29sLkNvbHVtbjtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZHRJbmRleCA9IGdyQ29sLkdldERhdGFDb2x1bW5JbmRleCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKGdyQ29sLkNvbHVtbi5GaWVsZE5hbWUuVG9Mb3dlcigpID09IFwiY250clwiKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGdyQ29sLlJlYWRPbmx5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2goZHRDb2wuRGF0YVR5cGUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5EYXRlVGltZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxibGRhdGUgPSBMYWJlbChnckNvbC5DYXB0aW9uLCAyNSArIChjb2wgKiBlYWNoV2lkdGggKyAoY29sICogMykpLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXREYXRlID0gbmV3IFRleHRJbnB1dChcImRhdGVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0RGF0ZS5TZXRCb3VuZHMoMjUgKyAoY29sICogZWFjaFdpZHRoICsgKGNvbCAqIDMpKSwgaGVpZ2h0ICsgMTYgKyAzLCBlYWNoV2lkdGgsIDI0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXREYXRlLlNldERhdGUoQ29udmVydC5Ub1N0cmluZyhEYXRhUm93W2R0SW5kZXhdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0RGF0ZS5SZWFkb25seSA9IGdyQ29sLlJlYWRPbmx5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighZ3JDb2wuUmVhZE9ubHkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0RGF0ZS5PblRleHRDaGFuZ2VkID0gKGV2KSA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhdGFSb3dbZHRJbmRleF0gPSBpbnB1dERhdGUuR2V0RGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKExpdmVEYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHcmlkVmlldy5SZW5kZXJHcmlkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBQYW5lbC5BcHBlbmRDaGlsZHJlbihsYmxkYXRlLCBpbnB1dERhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuSW50ZWdlcjpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkxvbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5GbG9hdDpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkRvdWJsZTpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkRlY2ltYWw6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5Cb29sOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuQnl0ZTpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLlNob3J0OlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxibG5tYiA9IExhYmVsKGdyQ29sLkNhcHRpb24sIDI1ICsgKGNvbCAqIGVhY2hXaWR0aCArIChjb2wgKiAzKSksIGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRleHRJbnB1dCBpbnB1dE51bTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZ3JDb2wuQ2VsbERpc3BsYXkgaXMgR3JpZFZpZXdDZWxsRGlzcGxheUNoZWNrQm94KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dE51bSA9IG5ldyBUZXh0SW5wdXQoXCJjaGVja2JveFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0TnVtLlNldENoZWNrZWQoRGF0YVJvd1tkdEluZGV4XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dE51bSA9IG5ldyBUZXh0SW5wdXQoXCJudW1iZXJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dE51bS5UZXh0ID0gQ29udmVydC5Ub1N0cmluZyhEYXRhUm93W2R0SW5kZXhdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXROdW0uU2V0Qm91bmRzKDI1ICsgKGNvbCAqIGVhY2hXaWR0aCArIChjb2wgKiAzKSksIGhlaWdodCArIDE2ICsgMywgZWFjaFdpZHRoLCAyNCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dE51bS5SZWFkb25seSA9IGdyQ29sLlJlYWRPbmx5O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIWdyQ29sLlJlYWRPbmx5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dE51bS5PblRleHRDaGFuZ2VkID0gKGV2KSA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlucHV0TnVtLlR5cGUgPT0gXCJjaGVja2JveFwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGF0YVJvd1tkdEluZGV4XSA9IGlucHV0TnVtLlRleHQuSXNUcnVlKCkgPT0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGF0YVJvd1tkdEluZGV4XSA9IGlucHV0TnVtLlRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKExpdmVEYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHcmlkVmlldy5SZW5kZXJHcmlkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBQYW5lbC5BcHBlbmRDaGlsZHJlbihsYmxubWIsIGlucHV0TnVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5PYmplY3Q6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5TdHJpbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYmxzdHIgPSBMYWJlbChnckNvbC5DYXB0aW9uLCAyNSArIChjb2wgKiBlYWNoV2lkdGggKyAoY29sICogMykpLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXRzdHIgPSBuZXcgVGV4dElucHV0KFwidGV4dFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzdHIuU2V0Qm91bmRzKDI1ICsgKGNvbCAqIGVhY2hXaWR0aCArIChjb2wgKiAzKSksIGhlaWdodCArIDE2ICsgMywgZWFjaFdpZHRoLCAyNCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c3RyLlRleHQgPSBDb252ZXJ0LlRvU3RyaW5nKERhdGFSb3dbZHRJbmRleF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHN0ci5SZWFkb25seSA9IGdyQ29sLlJlYWRPbmx5O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIWdyQ29sLlJlYWRPbmx5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHN0ci5PblRleHRDaGFuZ2VkID0gKGV2KSA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhdGFSb3dbZHRJbmRleF0gPSBpbnB1dHN0ci5UZXh0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihMaXZlRGF0YSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR3JpZFZpZXcuUmVuZGVyR3JpZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgUGFuZWwuQXBwZW5kQ2hpbGRyZW4obGJsc3RyLCBpbnB1dHN0cik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmKG9iai5MZW5ndGggPiAxMDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8ve1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1x0aW5jcmVtZW50SGVpZ2h0ID0gZGVmYXVsdEhlaWdodDJYO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9cdGNvbCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2Vsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy97XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZihjb2wgPT0gMilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgKz0gaW5jcmVtZW50SGVpZ2h0ICsgMztcclxuICAgICAgICAgICAgICAgICAgICBjb2wgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIEFkZCBBY2NlcHQgQ2hhbmdlc1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbTtcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIERhdGVGb3JtIDogRm9ybVBvcHVwXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIFRleHRJbnB1dCBJbnB1dENvbnRyb2w7XHJcblxyXG4gICAgICAgIHB1YmxpYyBEYXRlQ29udHJvbCBEYXRlQ29udHJvbDtcclxuICAgICAgICBwdWJsaWMgYm9vbCBDbGlja2VkQ2xvc2UgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgcHVibGljIERhdGVGb3JtKFRleHRJbnB1dCBpbnB1dENvbnRyb2wpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihpbnB1dENvbnRyb2wuQ29udGVudC5wYXJlbnRFbGVtZW50ICE9IG51bGwgJiYgaW5wdXRDb250cm9sLkNvbnRlbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50ICE9IG51bGwgJiYgaW5wdXRDb250cm9sLkNvbnRlbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgUHJldmlvdXNTY3JvbGxUb3AgPSBpbnB1dENvbnRyb2wuQ29udGVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5zY3JvbGxUb3A7XHJcbiAgICAgICAgICAgICAgICBQYXJlbnRDb250YWluZXIgPSBpbnB1dENvbnRyb2wuQ29udGVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgU2l6ZSA9IG5ldyBWZWN0b3IyKDIzMiwgMjQ3KTtcclxuXHJcbiAgICAgICAgICAgIElucHV0Q29udHJvbCA9IGlucHV0Q29udHJvbDtcclxuICAgICAgICAgICAgRGF0ZUNvbnRyb2wgPSBuZXcgRGF0ZUNvbnRyb2woaW5wdXRDb250cm9sLkdldERhdGVUaW1lKCkpO1xyXG4gICAgICAgICAgICBEYXRlQ29udHJvbC5TZXRCb3VuZHNGdWxsKCk7XHJcblxyXG4gICAgICAgICAgICBEYXRlQ29udHJvbC5PbkRhdGVDaGFuZ2VkID0gKGRhdGUpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKGRhdGUgPT0gRGF0ZVRpbWUuTWluVmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRDb250cm9sLlNldERhdGUoXCJcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRDb250cm9sLlNldERhdGUoc3RyaW5nLkZvcm1hdChcInswOlwiICsgaW5wdXRDb250cm9sLkRpc3BsYXlGb3JtYXQgKyBcIn1cIiwgZGF0ZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgRGF0ZUNvbnRyb2wuT25SZXF1ZXN0VG9DbG9zZSA9ICgpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuQ2xvc2UoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIENvbnRlbnQub25rZXlkb3duID0gRGF0ZUNvbnRyb2wuQmxvY2tUYWJFdmVudDtcclxuXHJcbiAgICAgICAgICAgIEFwcGVuZENoaWxkKERhdGVDb250cm9sKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIE9uQ2xvc2VkKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhc2UuT25DbG9zZWQoKTtcclxuICAgICAgICAgICAgSW5wdXRDb250cm9sLlZhbGlkYXRlRGF0YSgpO1xyXG4gICAgICAgICAgICBpZighSGVscGVyLk5vdERlc2t0b3ApXHJcbiAgICAgICAgICAgICAgICBJbnB1dENvbnRyb2wuRm9jdXMoKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBJbnB1dENvbnRyb2wuU2Nyb2xsKChpbnQpUHJldmlvdXNTY3JvbGxUb3AsIFBhcmVudENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIE9uU2hvd2VkKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhc2UuT25TaG93ZWQoKTtcclxuICAgICAgICAgICAgaWYoSW5wdXRDb250cm9sID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICB0aGlzLkNsb3NlKCk7XHJcblxyXG4gICAgICAgICAgICBEYXRlQ29udHJvbC5idG5Ub2RheS5Gb2N1cygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIlxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBEYXRlSW5wdXQgOiBUZXh0SW5wdXREcm9wRG93blxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBEYXRlSW5wdXQoKSA6IGJhc2UoXCJkYXRlXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBVc2VkRWRpdC5PbktleURvd24gPSAoc2VuZGVyLCBldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoZXYua2V5Q29kZSA9PSBLZXlDb2Rlcy5FbnRlcilcclxuICAgICAgICAgICAgICAgICAgICBVc2VkRWRpdC5Db250ZW50LmJsdXIoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIE9uRHJvcERvd25DbGlja2VkKFJldHlwZWQuZG9tLk1vdXNlRXZlbnQgbW91c2VFdmVudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCFSZWFkb25seSAmJiBFbmFibGVkKVxyXG4gICAgICAgICAgICAgICAgKG5ldyBEYXRlRm9ybSh0aGlzLlVzZWRFZGl0KSkuXHJcbiAgICAgICAgICAgICAgICBTaG93UG9wdXAoRm9ybVBvcHVwLlxyXG4gICAgICAgICAgICAgICAgICAgIEdldFBvcHVwRGVmYXVsdExvY2F0aW9uKERyb3BEb3duQnV0dG9uLCB0cnVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLkdsb2JhbGl6YXRpb247XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBJbnB1dERpYWxvZ0NoZWNrYm94IDogSW5wdXREaWFsb2dCYXNlXHJcbiAgICB7XHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyAgICAgQ3JlYXRlcyBhIFF1ZXN0aW9uIERpYWxvZyB3aXRoIGEgY2hlY2tib3hcclxuICAgICAgICAvLy8gICAgIFRoZSBSZXN1bHQgUHJvcGVydHkgY29udGFpbnMgYSBib29sZWFuIHZhbHVlIG9mIHRoZSBjaGVja2JveCBzdGF0ZVxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwidGl0bGVcIj5UaGUgbWVzc2FnZSB0aGF0IHdpbGwgYXBwZWFyIGluIHRoZSB0aXRsZSBiYXIgb2YgdGhlIGRpYWxvZzwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwicXVlc3Rpb25cIj5UaGUgbWVzc2FnZSB0aGF0IHdpbGwgYXBwZWFyIGFib3V0IHRoZSBpbnB1dCBib3ggb24gdGhlIGRpYWxvZzwvcGFyYW0+XHJcbiAgICAgICAgcHVibGljIElucHV0RGlhbG9nQ2hlY2tib3goc3RyaW5nIHRpdGxlLCBzdHJpbmcgcXVlc3Rpb24pIDogdGhpcyh0aXRsZSwgcXVlc3Rpb24sIDM2MClcclxuICAgICAgICB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vICAgICBDcmVhdGVzIGEgUXVlc3Rpb24gRGlhbG9nIHdpdGggYSBjaGVja2JveFxyXG4gICAgICAgIC8vLyAgICAgVGhlIFJlc3VsdCBQcm9wZXJ0eSBjb250YWlucyBhIGJvb2xlYW4gdmFsdWUgb2YgdGhlIGNoZWNrYm94IHN0YXRlXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ0aXRsZVwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgaW4gdGhlIHRpdGxlIGJhciBvZiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJxdWVzdGlvblwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgYWJvdXQgdGhlIGlucHV0IGJveCBvbiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJzaXplXCI+VGhlIHdpZHRoIG9mIHRoaXMgZGlhbG9nLiBUaGUgZGVmYXVsdCBzaXplIGlzIDM2MDwvcGFyYW0+XHJcbiAgICAgICAgcHVibGljIElucHV0RGlhbG9nQ2hlY2tib3goc3RyaW5nIHRpdGxlLCBzdHJpbmcgcXVlc3Rpb24sIGludCBzaXplKSA6IGJhc2UodGl0bGUsIHNpemUsIHF1ZXN0aW9uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gSW5wdXQoXCJpbnB1dGNvbnRyb2xcIiwgXCJjaGVja2JveFwiKTtcclxuICAgICAgICAgICAgaW5wdXQuaWQgPSBcIkRpYWxvZ0Fuc3dlckJveFwiO1xyXG4gICAgICAgICAgICBpbnB1dC5TZXRCb3VuZHMoXCIxMHB4XCIsIFwiMHB4XCIsIFwiOTAlXCIsIFwiNDBweFwiKTtcclxuICAgICAgICAgICAgaW5wdXQub25jaGFuZ2UgPSBldiA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBSZXN1bHQgPSBpbnB1dC5AY2hlY2tlZDtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgQW5zd2VyRGl2LkFwcGVuZENoaWxkKGlucHV0KTtcclxuICAgICAgICAgICAgQ3JlYXRlKFF1ZXN0aW9uU2l6ZSArIDQwICsgMjUgKyA3OCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBSZXN1bHQgeyBnZXQ7IHByaXZhdGUgc2V0OyB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIElucHV0RGlhbG9nQ29sb3VyIDogSW5wdXREaWFsb2dCYXNlXHJcbiAgICB7XHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyAgICAgQ3JlYXRlcyBhIFF1ZXN0aW9uIERpYWxvZyB3aXRoIGEgY29sb3VyIHNlbGVjdG9yXHJcbiAgICAgICAgLy8vICAgICBUaGUgUmVzdWx0IFByb3BlcnR5IGNvbnRhaW5zIHRoZSBIZXhDb2RlIGZvciB0aGUgc2VsZWN0ZWQgY29sb3VyXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ0aXRsZVwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgaW4gdGhlIHRpdGxlIGJhciBvZiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJxdWVzdGlvblwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgYWJvdXQgdGhlIGlucHV0IGJveCBvbiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICBwdWJsaWMgSW5wdXREaWFsb2dDb2xvdXIoc3RyaW5nIHRpdGxlLCBzdHJpbmcgcXVlc3Rpb24pIDogdGhpcyh0aXRsZSwgcXVlc3Rpb24sIDM2MClcclxuICAgICAgICB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vICAgICBDcmVhdGVzIGEgUXVlc3Rpb24gRGlhbG9nIHdpdGggYSBjb2xvdXIgc2VsZWN0b3JcclxuICAgICAgICAvLy8gICAgIFRoZSBSZXN1bHQgUHJvcGVydHkgY29udGFpbnMgdGhlIEhleENvZGUgZm9yIHRoZSBzZWxlY3RlZCBjb2xvdXJcclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInRpdGxlXCI+VGhlIG1lc3NhZ2UgdGhhdCB3aWxsIGFwcGVhciBpbiB0aGUgdGl0bGUgYmFyIG9mIHRoZSBkaWFsb2c8L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInF1ZXN0aW9uXCI+VGhlIG1lc3NhZ2UgdGhhdCB3aWxsIGFwcGVhciBhYm91dCB0aGUgaW5wdXQgYm94IG9uIHRoZSBkaWFsb2c8L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInNpemVcIj5UaGUgd2lkdGggb2YgdGhpcyBkaWFsb2cuIFRoZSBkZWZhdWx0IHNpemUgaXMgMzYwPC9wYXJhbT5cclxuICAgICAgICBwdWJsaWMgSW5wdXREaWFsb2dDb2xvdXIoc3RyaW5nIHRpdGxlLCBzdHJpbmcgcXVlc3Rpb24sIGludCBzaXplKSA6IGJhc2UodGl0bGUsIHNpemUsIHF1ZXN0aW9uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gSW5wdXQoXCJpbnB1dGNvbnRyb2xcIiwgXCJjb2xvclwiKTtcclxuICAgICAgICAgICAgaW5wdXQuaWQgPSBcIkRpYWxvZ0Fuc3dlckJveFwiO1xyXG4gICAgICAgICAgICBpbnB1dC5TZXRCb3VuZHMoXCIxMHB4XCIsIFwiMHB4XCIsIFwiOTAlXCIsIFwiNDBweFwiKTtcclxuICAgICAgICAgICAgaW5wdXQub25jaGFuZ2UgPSBldiA9PiB7IFJlc3VsdCA9IGlucHV0LnZhbHVlOyB9O1xyXG4gICAgICAgICAgICBBbnN3ZXJEaXYuQXBwZW5kQ2hpbGQoaW5wdXQpO1xyXG4gICAgICAgICAgICBDcmVhdGUoUXVlc3Rpb25TaXplICsgNDAgKyAyNSArIDc4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgUmVzdWx0IHsgZ2V0OyBwcml2YXRlIHNldDsgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBJbnB1dERpYWxvZ0RhdGUgOiBJbnB1dERpYWxvZ0Jhc2VcclxuICAgIHtcclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vICAgICBDcmVhdGVzIGEgUXVlc3Rpb24gRGlhbG9nIHdpdGggYSBEYXRlIFNlbGVjdG9yXHJcbiAgICAgICAgLy8vICAgICBUaGUgUmVzdWx0IFByb3BlcnR5IGNvbnRhaW5zIHRoZSBzZWxlY3RlZCBEYXRlXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ0aXRsZVwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgaW4gdGhlIHRpdGxlIGJhciBvZiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJxdWVzdGlvblwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgYWJvdXQgdGhlIGlucHV0IGJveCBvbiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICBwdWJsaWMgSW5wdXREaWFsb2dEYXRlKHN0cmluZyB0aXRsZSwgc3RyaW5nIHF1ZXN0aW9uKSA6IHRoaXModGl0bGUsIHF1ZXN0aW9uLCAzNjApXHJcbiAgICAgICAge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyAgICAgQ3JlYXRlcyBhIFF1ZXN0aW9uIERpYWxvZyB3aXRoIGEgRGF0ZSBTZWxlY3RvclxyXG4gICAgICAgIC8vLyAgICAgVGhlIFJlc3VsdCBQcm9wZXJ0eSBjb250YWlucyB0aGUgc2VsZWN0ZWQgRGF0ZVxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwidGl0bGVcIj5UaGUgbWVzc2FnZSB0aGF0IHdpbGwgYXBwZWFyIGluIHRoZSB0aXRsZSBiYXIgb2YgdGhlIGRpYWxvZzwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwicXVlc3Rpb25cIj5UaGUgbWVzc2FnZSB0aGF0IHdpbGwgYXBwZWFyIGFib3V0IHRoZSBpbnB1dCBib3ggb24gdGhlIGRpYWxvZzwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwic2l6ZVwiPlRoZSB3aWR0aCBvZiB0aGlzIGRpYWxvZy4gVGhlIGRlZmF1bHQgc2l6ZSBpcyAzNjA8L3BhcmFtPlxyXG4gICAgICAgIHB1YmxpYyBJbnB1dERpYWxvZ0RhdGUoc3RyaW5nIHRpdGxlLCBzdHJpbmcgcXVlc3Rpb24sIGludCBzaXplKSA6IGJhc2UodGl0bGUsIHNpemUsIHF1ZXN0aW9uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gSW5wdXQoXCJpbnB1dGNvbnRyb2xcIiwgXCJkYXRlXCIpO1xyXG4gICAgICAgICAgICBpbnB1dC5pZCA9IFwiRGlhbG9nQW5zd2VyQm94XCI7XHJcbiAgICAgICAgICAgIGlucHV0LlNldEJvdW5kcyhcIjEwcHhcIiwgXCIwcHhcIiwgXCI5MCVcIiwgXCJhdXRvXCIpO1xyXG4gICAgICAgICAgICBpbnB1dC5vbmNoYW5nZSA9IGV2ID0+IHsgUmVzdWx0ID0gaW5wdXQudmFsdWU7IH07XHJcbiAgICAgICAgICAgIEFuc3dlckRpdi5BcHBlbmRDaGlsZChpbnB1dCk7XHJcbiAgICAgICAgICAgIENyZWF0ZShRdWVzdGlvblNpemUgKyAyNSArIDI1ICsgNzgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBSZXN1bHQgeyBnZXQ7IHByaXZhdGUgc2V0OyB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIElucHV0RGlhbG9nRGF0ZVRpbWVMb2NhbCA6IElucHV0RGlhbG9nQmFzZVxyXG4gICAge1xyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gICAgIENyZWF0ZXMgYSBRdWVzdGlvbiBEaWFsb2cgd2l0aCBhIERhdGUgU2VsZWN0b3JcclxuICAgICAgICAvLy8gICAgIFRoZSBSZXN1bHQgUHJvcGVydHkgY29udGFpbnMgdGhlIHNlbGVjdGVkIERhdGVcclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInRpdGxlXCI+VGhlIG1lc3NhZ2UgdGhhdCB3aWxsIGFwcGVhciBpbiB0aGUgdGl0bGUgYmFyIG9mIHRoZSBkaWFsb2c8L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInF1ZXN0aW9uXCI+VGhlIG1lc3NhZ2UgdGhhdCB3aWxsIGFwcGVhciBhYm91dCB0aGUgaW5wdXQgYm94IG9uIHRoZSBkaWFsb2c8L3BhcmFtPlxyXG4gICAgICAgIHB1YmxpYyBJbnB1dERpYWxvZ0RhdGVUaW1lTG9jYWwoc3RyaW5nIHRpdGxlLCBzdHJpbmcgcXVlc3Rpb24pIDogdGhpcyh0aXRsZSwgcXVlc3Rpb24sIDM2MClcclxuICAgICAgICB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vICAgICBDcmVhdGVzIGEgUXVlc3Rpb24gRGlhbG9nIHdpdGggYSBEYXRlIFNlbGVjdG9yXHJcbiAgICAgICAgLy8vICAgICBUaGUgUmVzdWx0IFByb3BlcnR5IGNvbnRhaW5zIHRoZSBzZWxlY3RlZCBEYXRlXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ0aXRsZVwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgaW4gdGhlIHRpdGxlIGJhciBvZiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJxdWVzdGlvblwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgYWJvdXQgdGhlIGlucHV0IGJveCBvbiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJzaXplXCI+VGhlIHdpZHRoIG9mIHRoaXMgZGlhbG9nLiBUaGUgZGVmYXVsdCBzaXplIGlzIDM2MDwvcGFyYW0+XHJcbiAgICAgICAgcHVibGljIElucHV0RGlhbG9nRGF0ZVRpbWVMb2NhbChzdHJpbmcgdGl0bGUsIHN0cmluZyBxdWVzdGlvbiwgaW50IHNpemUpIDogYmFzZSh0aXRsZSwgc2l6ZSwgcXVlc3Rpb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBSZXN1bHQgPSBEYXRlVGltZS5Ob3c7XHJcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IElucHV0KFwiaW5wdXRjb250cm9sXCIsIFwiZGF0ZVRpbWVMb2NhbFwiKTtcclxuICAgICAgICAgICAgaW5wdXQuaWQgPSBcIkRpYWxvZ0Fuc3dlckJveFwiO1xyXG4gICAgICAgICAgICBpbnB1dC5TZXRCb3VuZHMoXCIxMHB4XCIsIFwiMHB4XCIsIFwiOTAlXCIsIFwiYXV0b1wiKTtcclxuICAgICAgICAgICAgaW5wdXQub25jaGFuZ2UgPSBldiA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBSZXN1bHQgPSBEYXRlVGltZS5QYXJzZUV4YWN0KGlucHV0LnZhbHVlLCBcInl5eXktTU0tZGRUSEg6bW1cIiwgQ3VsdHVyZUluZm8uSW52YXJpYW50Q3VsdHVyZSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIEFuc3dlckRpdi5BcHBlbmRDaGlsZChpbnB1dCk7XHJcbiAgICAgICAgICAgIENyZWF0ZShRdWVzdGlvblNpemUgKyAyNSArIDI1ICsgNzgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIERhdGVUaW1lIFJlc3VsdFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0OyBwcml2YXRlIHNldDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIElucHV0RGlhbG9nRW1haWwgOiBJbnB1dERpYWxvZ0Jhc2VcclxuICAgIHtcclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vICAgICBDcmVhdGVzIGEgUXVlc3Rpb24gRGlhbG9nIHdpdGggYW4gZW1haWwgaW5wdXRcclxuICAgICAgICAvLy8gICAgIFRoZSBSZXN1bHQgUHJvcGVydHkgY29udGFpbnMgdGhlIEVudGVyZWQgZW1haWwgYWRkcmVzc1xyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwidGl0bGVcIj5UaGUgbWVzc2FnZSB0aGF0IHdpbGwgYXBwZWFyIGluIHRoZSB0aXRsZSBiYXIgb2YgdGhlIGRpYWxvZzwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwicXVlc3Rpb25cIj5UaGUgbWVzc2FnZSB0aGF0IHdpbGwgYXBwZWFyIGFib3V0IHRoZSBpbnB1dCBib3ggb24gdGhlIGRpYWxvZzwvcGFyYW0+XHJcbiAgICAgICAgcHVibGljIElucHV0RGlhbG9nRW1haWwoc3RyaW5nIHRpdGxlLCBzdHJpbmcgcXVlc3Rpb24pIDogdGhpcyh0aXRsZSwgcXVlc3Rpb24sIDM2MClcclxuICAgICAgICB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vICAgICBDcmVhdGVzIGEgUXVlc3Rpb24gRGlhbG9nIHdpdGggYW4gZW1haWwgaW5wdXRcclxuICAgICAgICAvLy8gICAgIFRoZSBSZXN1bHQgUHJvcGVydHkgY29udGFpbnMgdGhlIEVudGVyZWQgZW1haWxcclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInRpdGxlXCI+VGhlIG1lc3NhZ2UgdGhhdCB3aWxsIGFwcGVhciBpbiB0aGUgdGl0bGUgYmFyIG9mIHRoZSBkaWFsb2c8L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInF1ZXN0aW9uXCI+VGhlIG1lc3NhZ2UgdGhhdCB3aWxsIGFwcGVhciBhYm91dCB0aGUgaW5wdXQgYm94IG9uIHRoZSBkaWFsb2c8L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInNpemVcIj5UaGUgd2lkdGggb2YgdGhpcyBkaWFsb2cuIFRoZSBkZWZhdWx0IHNpemUgaXMgMzYwPC9wYXJhbT5cclxuICAgICAgICBwdWJsaWMgSW5wdXREaWFsb2dFbWFpbChzdHJpbmcgdGl0bGUsIHN0cmluZyBxdWVzdGlvbiwgaW50IHNpemUpIDogYmFzZSh0aXRsZSwgc2l6ZSwgcXVlc3Rpb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgaW5wdXQgPSBJbnB1dChcImlucHV0Y29udHJvbFwiLCBcImVtYWlsXCIpO1xyXG4gICAgICAgICAgICBpbnB1dC5pZCA9IFwiRGlhbG9nQW5zd2VyQm94XCI7XHJcbiAgICAgICAgICAgIGlucHV0LlNldEJvdW5kcyhcIjEwcHhcIiwgXCIwcHhcIiwgXCI5MCVcIiwgXCJhdXRvXCIpO1xyXG4gICAgICAgICAgICBpbnB1dC5vbmNoYW5nZSA9IGV2ID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vdG9kbyBjc3MgZm9yIGVtYWlsIGlucHV0IG5vdCBzaG93aW5nIHVwXHJcbiAgICAgICAgICAgICAgICAvL3RvZG8gY291bGQgYWx3YXlzIHZhbGlkYXRlIGVtYWlsIGhlcmVcclxuICAgICAgICAgICAgICAgIFJlc3VsdCA9IGlucHV0LnZhbHVlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBBbnN3ZXJEaXYuQXBwZW5kQ2hpbGQoaW5wdXQpO1xyXG4gICAgICAgICAgICBDcmVhdGUoUXVlc3Rpb25TaXplICsgMjUgKyAyNSArIDc4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgUmVzdWx0XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQ7IHByaXZhdGUgc2V0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgSW5wdXREaWFsb2dXZWVrIDogSW5wdXREaWFsb2dCYXNlXHJcbiAgICB7XHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyAgICAgQ3JlYXRlcyBhIFF1ZXN0aW9uIERpYWxvZyB3aXRoIGEgV2VlayBpbnB1dFxyXG4gICAgICAgIC8vLyAgICAgVGhlIFJlc3VsdCBQcm9wZXJ0eSBjb250YWlucyB0aGUgRW50ZXJlZCB3ZWVrXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ0aXRsZVwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgaW4gdGhlIHRpdGxlIGJhciBvZiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJxdWVzdGlvblwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgYWJvdXQgdGhlIGlucHV0IGJveCBvbiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICBwdWJsaWMgSW5wdXREaWFsb2dXZWVrKHN0cmluZyB0aXRsZSwgc3RyaW5nIHF1ZXN0aW9uKSA6IHRoaXModGl0bGUsIHF1ZXN0aW9uLCAzNjApXHJcbiAgICAgICAge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyAgICAgQ3JlYXRlcyBhIFF1ZXN0aW9uIERpYWxvZyB3aXRoIGEgV2VlayBpbnB1dFxyXG4gICAgICAgIC8vLyAgICAgVGhlIFJlc3VsdCBQcm9wZXJ0eSBjb250YWlucyB0aGUgRW50ZXJlZCBXZWVrXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ0aXRsZVwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgaW4gdGhlIHRpdGxlIGJhciBvZiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJxdWVzdGlvblwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgYWJvdXQgdGhlIGlucHV0IGJveCBvbiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJzaXplXCI+VGhlIHdpZHRoIG9mIHRoaXMgZGlhbG9nLiBUaGUgZGVmYXVsdCBzaXplIGlzIDM2MDwvcGFyYW0+XHJcbiAgICAgICAgcHVibGljIElucHV0RGlhbG9nV2VlayhzdHJpbmcgdGl0bGUsIHN0cmluZyBxdWVzdGlvbiwgaW50IHNpemUpIDogYmFzZSh0aXRsZSwgc2l6ZSwgcXVlc3Rpb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgaW5wdXQgPSBJbnB1dChcImlucHV0Y29udHJvbFwiLCBcIndlZWtcIik7XHJcbiAgICAgICAgICAgIGlucHV0LmlkID0gXCJEaWFsb2dBbnN3ZXJCb3hcIjtcclxuICAgICAgICAgICAgaW5wdXQuU2V0Qm91bmRzKFwiMTBweFwiLCBcIjBweFwiLCBcIjkwJVwiLCBcImF1dG9cIik7XHJcbiAgICAgICAgICAgIGlucHV0Lm9uY2hhbmdlID0gZXYgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgUmVzdWx0ID0gaW5wdXQudmFsdWU7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIEFuc3dlckRpdi5BcHBlbmRDaGlsZChpbnB1dCk7XHJcbiAgICAgICAgICAgIENyZWF0ZShRdWVzdGlvblNpemUgKyAyNSArIDI1ICsgNzgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBSZXN1bHRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldDsgcHJpdmF0ZSBzZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBJbnB1dERpYWxvZ01vbnRoIDogSW5wdXREaWFsb2dCYXNlXHJcbiAgICB7XHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyAgICAgQ3JlYXRlcyBhIFF1ZXN0aW9uIERpYWxvZyB3aXRoIGEgTW9udGggaW5wdXRcclxuICAgICAgICAvLy8gICAgIFRoZSBSZXN1bHQgUHJvcGVydHkgY29udGFpbnMgdGhlIEVudGVyZWQgTW9udGhcclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInRpdGxlXCI+VGhlIG1lc3NhZ2UgdGhhdCB3aWxsIGFwcGVhciBpbiB0aGUgdGl0bGUgYmFyIG9mIHRoZSBkaWFsb2c8L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInF1ZXN0aW9uXCI+VGhlIG1lc3NhZ2UgdGhhdCB3aWxsIGFwcGVhciBhYm91dCB0aGUgaW5wdXQgYm94IG9uIHRoZSBkaWFsb2c8L3BhcmFtPlxyXG4gICAgICAgIHB1YmxpYyBJbnB1dERpYWxvZ01vbnRoKHN0cmluZyB0aXRsZSwgc3RyaW5nIHF1ZXN0aW9uKSA6IHRoaXModGl0bGUsIHF1ZXN0aW9uLCAzNjApXHJcbiAgICAgICAge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyAgICAgQ3JlYXRlcyBhIFF1ZXN0aW9uIERpYWxvZyB3aXRoIGEgTW9udGggaW5wdXRcclxuICAgICAgICAvLy8gICAgIFRoZSBSZXN1bHQgUHJvcGVydHkgY29udGFpbnMgdGhlIEVudGVyZWQgTW9udGhcclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInRpdGxlXCI+VGhlIG1lc3NhZ2UgdGhhdCB3aWxsIGFwcGVhciBpbiB0aGUgdGl0bGUgYmFyIG9mIHRoZSBkaWFsb2c8L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInF1ZXN0aW9uXCI+VGhlIG1lc3NhZ2UgdGhhdCB3aWxsIGFwcGVhciBhYm91dCB0aGUgaW5wdXQgYm94IG9uIHRoZSBkaWFsb2c8L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInNpemVcIj5UaGUgd2lkdGggb2YgdGhpcyBkaWFsb2cuIFRoZSBkZWZhdWx0IHNpemUgaXMgMzYwPC9wYXJhbT5cclxuICAgICAgICBwdWJsaWMgSW5wdXREaWFsb2dNb250aChzdHJpbmcgdGl0bGUsIHN0cmluZyBxdWVzdGlvbiwgaW50IHNpemUpIDogYmFzZSh0aXRsZSwgc2l6ZSwgcXVlc3Rpb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgaW5wdXQgPSBJbnB1dChcImlucHV0Y29udHJvbFwiLCBcIm1vbnRoXCIpO1xyXG4gICAgICAgICAgICBpbnB1dC5pZCA9IFwiRGlhbG9nQW5zd2VyQm94XCI7XHJcbiAgICAgICAgICAgIGlucHV0LlNldEJvdW5kcyhcIjEwcHhcIiwgXCIwcHhcIiwgXCI5MCVcIiwgXCJhdXRvXCIpO1xyXG4gICAgICAgICAgICBpbnB1dC5vbmNoYW5nZSA9IGV2ID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFJlc3VsdCA9IGlucHV0LnZhbHVlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBBbnN3ZXJEaXYuQXBwZW5kQ2hpbGQoaW5wdXQpO1xyXG4gICAgICAgICAgICBDcmVhdGUoUXVlc3Rpb25TaXplICsgMjUgKyAyNSArIDc4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgUmVzdWx0XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQ7IHByaXZhdGUgc2V0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgSW5wdXREaWFsb2dOdW1iZXIgOiBJbnB1dERpYWxvZ0Jhc2VcclxuICAgIHtcclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vICAgICBDcmVhdGVzIGEgUXVlc3Rpb24gRGlhbG9nIHdpdGggYSBOdW1iZXIgU2VsZWN0b3JcclxuICAgICAgICAvLy8gICAgIFRoZSBSZXN1bHQgUHJvcGVydHkgY29udGFpbnMgdGhlIHNlbGVjdGVkIHZhbHVlXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ0aXRsZVwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgaW4gdGhlIHRpdGxlIGJhciBvZiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJxdWVzdGlvblwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgYWJvdXQgdGhlIGlucHV0IGJveCBvbiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICBwdWJsaWMgSW5wdXREaWFsb2dOdW1iZXIoc3RyaW5nIHRpdGxlLCBzdHJpbmcgcXVlc3Rpb24pIDogdGhpcyh0aXRsZSwgcXVlc3Rpb24sIDM2MClcclxuICAgICAgICB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vICAgICBDcmVhdGVzIGEgUXVlc3Rpb24gRGlhbG9nIHdpdGggYSBOdW1iZXIgU2VsZWN0b3JcclxuICAgICAgICAvLy8gICAgIFRoZSBSZXN1bHQgUHJvcGVydHkgY29udGFpbnMgdGhlIHNlbGVjdGVkIHZhbHVlXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ0aXRsZVwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgaW4gdGhlIHRpdGxlIGJhciBvZiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJxdWVzdGlvblwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgYWJvdXQgdGhlIGlucHV0IGJveCBvbiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJzaXplXCI+VGhlIHdpZHRoIG9mIHRoaXMgZGlhbG9nLiBUaGUgZGVmYXVsdCBzaXplIGlzIDM2MDwvcGFyYW0+XHJcbiAgICAgICAgcHVibGljIElucHV0RGlhbG9nTnVtYmVyKHN0cmluZyB0aXRsZSwgc3RyaW5nIHF1ZXN0aW9uLCBpbnQgc2l6ZSkgOiBiYXNlKHRpdGxlLCBzaXplLCBxdWVzdGlvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IElucHV0KFwiaW5wdXRjb250cm9sXCIsIFwibnVtYmVyXCIpO1xyXG4gICAgICAgICAgICBpbnB1dC5pZCA9IFwiRGlhbG9nQW5zd2VyQm94XCI7XHJcbiAgICAgICAgICAgIGlucHV0LlNldEJvdW5kcyhcIjEwcHhcIiwgXCIwcHhcIiwgXCI5MCVcIiwgXCJhdXRvXCIpO1xyXG4gICAgICAgICAgICBpbnB1dC5vbmNoYW5nZSA9IGV2ID0+IHsgUmVzdWx0ID0gaW5wdXQudmFsdWVBc051bWJlcjsgfTtcclxuICAgICAgICAgICAgQW5zd2VyRGl2LkFwcGVuZENoaWxkKGlucHV0KTtcclxuICAgICAgICAgICAgQ3JlYXRlKFF1ZXN0aW9uU2l6ZSArIDI1ICsgMjUgKyA3OCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZG91YmxlIFJlc3VsdCB7IGdldDsgcHJpdmF0ZSBzZXQ7IH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgSW5wdXREaWFsb2dUZXh0IDogSW5wdXREaWFsb2dCYXNlXHJcbiAgICB7XHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyAgICAgQ3JlYXRlcyBhIFF1ZXN0aW9uIERpYWxvZyB3aXRoIGEgVGV4dCBpbnB1dFxyXG4gICAgICAgIC8vLyAgICAgVGhlIFJlc3VsdCBQcm9wZXJ0eSBjb250YWlucyB0aGUgRW50ZXJlZCBUZXh0XHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ0aXRsZVwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgaW4gdGhlIHRpdGxlIGJhciBvZiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJxdWVzdGlvblwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgYWJvdXQgdGhlIGlucHV0IGJveCBvbiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICBwdWJsaWMgSW5wdXREaWFsb2dUZXh0KHN0cmluZyB0aXRsZSwgc3RyaW5nIHF1ZXN0aW9uKSA6IHRoaXModGl0bGUsIHF1ZXN0aW9uLCAzNjApXHJcbiAgICAgICAge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyAgICAgQ3JlYXRlcyBhIFF1ZXN0aW9uIERpYWxvZyB3aXRoIGEgVGV4dCBpbnB1dFxyXG4gICAgICAgIC8vLyAgICAgVGhlIFJlc3VsdCBQcm9wZXJ0eSBjb250YWlucyB0aGUgRW50ZXJlZCBUZXh0XHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ0aXRsZVwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgaW4gdGhlIHRpdGxlIGJhciBvZiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJxdWVzdGlvblwiPlRoZSBtZXNzYWdlIHRoYXQgd2lsbCBhcHBlYXIgYWJvdXQgdGhlIGlucHV0IGJveCBvbiB0aGUgZGlhbG9nPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJzaXplXCI+VGhlIHdpZHRoIG9mIHRoaXMgZGlhbG9nLiBUaGUgZGVmYXVsdCBzaXplIGlzIDM2MDwvcGFyYW0+XHJcbiAgICAgICAgcHVibGljIElucHV0RGlhbG9nVGV4dChzdHJpbmcgdGl0bGUsIHN0cmluZyBxdWVzdGlvbiwgaW50IHNpemUpIDogYmFzZSh0aXRsZSwgc2l6ZSwgcXVlc3Rpb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgaW5wdXQgPSBJbnB1dChcImlucHV0Y29udHJvbFwiLCBcInRleHRcIik7XHJcbiAgICAgICAgICAgIGlucHV0LmlkID0gXCJEaWFsb2dBbnN3ZXJCb3hcIjtcclxuICAgICAgICAgICAgaW5wdXQuU2V0Qm91bmRzKFwiMTBweFwiLCBcIjBweFwiLCBcIjkwJVwiLCBcImF1dG9cIik7XHJcbiAgICAgICAgICAgIGlucHV0Lm9uY2hhbmdlID0gZXYgPT4geyBSZXN1bHQgPSBpbnB1dC52YWx1ZTsgfTtcclxuICAgICAgICAgICAgQW5zd2VyRGl2LkFwcGVuZENoaWxkKGlucHV0KTtcclxuICAgICAgICAgICAgQ3JlYXRlKFF1ZXN0aW9uU2l6ZSArIDI1ICsgMjUgKyA3OCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RyaW5nIFJlc3VsdCB7IGdldDsgcHJpdmF0ZSBzZXQ7IH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgSW5wdXREaWFsb2dCYXNlIDogRGlhbG9nRm9ybVxyXG4gICAge1xyXG4gICAgICAgIHByb3RlY3RlZCBJbnB1dERpYWxvZ0Jhc2Uoc3RyaW5nIHRpdGxlLCBpbnQgd2lkdGgsIHN0cmluZyBxdWVzdGlvbikgOiBiYXNlKHRpdGxlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgV2lkdGggPSB3aWR0aC5Ub1B4KCk7XHJcbiAgICAgICAgICAgIFdyYXBwZXIgPSBEaXYoKTtcclxuICAgICAgICAgICAgUXVlc3Rpb25EaXYgPSBEaXYoKTtcclxuICAgICAgICAgICAgQW5zd2VyRGl2ID0gRGl2KCk7XHJcbiAgICAgICAgICAgIF9idXR0b25Db2xsZWN0aW9uID0gZ2xvYmFsOjpCcmlkZ2UuU2NyaXB0LkNhbGxGb3IobmV3IExpc3Q8U2ltcGxlRGlhbG9nQnV0dG9uPigpLChfbzEpPT57X28xLkFkZChuZXcgU2ltcGxlRGlhbG9nQnV0dG9uKHRoaXMsIERpYWxvZ1Jlc3VsdEVudW0uT0spIHtUZXh0ID0gXCJBY2NlcHRcIn0pO19vMS5BZGQobmV3IFNpbXBsZURpYWxvZ0J1dHRvbih0aGlzLCBEaWFsb2dSZXN1bHRFbnVtLkNhbmNlbCkge1RleHQgPSBcIkNhbmNlbFwifSk7cmV0dXJuIF9vMTt9KTtcclxuXHJcbiAgICAgICAgICAgIFdyYXBwZXIuc3R5bGUub3ZlcmZsb3dZID0gXCJoaWRkZW5cIjtcclxuICAgICAgICAgICAgV3JhcHBlci5TZXRCb3VuZHMoXCIwcHhcIiwgXCIwcHhcIiwgXCIxMDAlXCIsIFwiKDEwMCUgLSA2MHB4KVwiKTtcclxuICAgICAgICAgICAgUXVlc3Rpb25EaXYuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XHJcbiAgICAgICAgICAgIFF1ZXN0aW9uRGl2LnN0eWxlLmhlaWdodCA9IFwiYXV0b1wiO1xyXG4gICAgICAgICAgICBRdWVzdGlvbkRpdi5zdHlsZS5tYXJnaW5MZWZ0ID0gXCIxMHB4XCI7XHJcbiAgICAgICAgICAgIFF1ZXN0aW9uRGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCIxMHB4XCI7XHJcbiAgICAgICAgICAgIFF1ZXN0aW9uRGl2LnN0eWxlLm1hcmdpblRvcCA9IFwiMTBweFwiO1xyXG4gICAgICAgICAgICBBbnN3ZXJEaXYuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XHJcbiAgICAgICAgICAgIEFuc3dlckRpdi5zdHlsZS5oZWlnaHQgPSBcImF1dG9cIjtcclxuICAgICAgICAgICAgX2J1dHRvbkNvbGxlY3Rpb25bMF0uU2V0TG9jYXRpb24oXCIoMTAwJSAtIDE3MHB4KVwiLCBcIigxMDAlIC0gMzVweClcIik7XHJcbiAgICAgICAgICAgIF9idXR0b25Db2xsZWN0aW9uWzFdLlNldExvY2F0aW9uKFwiKDEwMCUgLSA4NXB4KVwiLCBcIigxMDAlIC0gMzVweClcIik7XHJcblxyXG4gICAgICAgICAgICB2YXIgdGIgPSBuZXcgVGV4dEJsb2NrKHF1ZXN0aW9uLCB3aWR0aCAtIDI1KTtcclxuICAgICAgICAgICAgdGIuQ29tcHV0ZVN0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgaWYoIXRiLkVsZWxlbXRzT3Zlck1heClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgd2lkdGggPSAoaW50KXRiLk1heENhbGN1bGF0ZWRXaWR0aCArIDY1ICsgMzc7XHJcbiAgICAgICAgICAgICAgICBpZih3aWR0aCA8IFNldHRpbmdzLk1lc3NhZ2VGb3JtTWluaW11bVdpZHRoSW5QeClcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IFNldHRpbmdzLk1lc3NhZ2VGb3JtTWluaW11bVdpZHRoSW5QeDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZih0Yi5Db21wdXRlZEhlaWdodCA+IFNldHRpbmdzLk1lc3NhZ2VGb3JtVGV4dE1heGltdW1IZWlnaHRJblB4KVxyXG4gICAgICAgICAgICAgICAgdGIuQ29tcHV0ZWRIZWlnaHQgPSBTZXR0aW5ncy5NZXNzYWdlRm9ybVRleHRNYXhpbXVtSGVpZ2h0SW5QeDtcclxuICAgICAgICAgICAgaWYodGIuQ29tcHV0ZWRIZWlnaHQgPCBTZXR0aW5ncy5NZXNzYWdlRm9ybVRleHRNaW5pbXVtSGVpZ2h0SW5QeClcclxuICAgICAgICAgICAgICAgIHRiLkNvbXB1dGVkSGVpZ2h0ID0gU2V0dGluZ3MuTWVzc2FnZUZvcm1UZXh0TWluaW11bUhlaWdodEluUHg7XHJcblxyXG4gICAgICAgICAgICBRdWVzdGlvbkRpdi5pbm5lckhUTUwgPSBxdWVzdGlvbjtcclxuICAgICAgICAgICAgUXVlc3Rpb25TaXplID0gQ29udmVydC5Ub0ludDMyKHRiLkNvbXB1dGVkSGVpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBpbnQgUXVlc3Rpb25TaXplIHsgZ2V0OyBzZXQ7IH1cclxuICAgICAgICBwcml2YXRlIFJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50IFdyYXBwZXIgeyBnZXQ7IHByaXZhdGUgc2V0OyB9XHJcbiAgICAgICAgcHJvdGVjdGVkIFJldHlwZWQuZG9tLkhUTUxEaXZFbGVtZW50IFF1ZXN0aW9uRGl2IHsgZ2V0OyBzZXQ7IH1cclxuICAgICAgICBwcm90ZWN0ZWQgUmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQgQW5zd2VyRGl2IHsgZ2V0OyBzZXQ7IH1cclxuICAgICAgICBwcm90ZWN0ZWQgUmV0eXBlZC5kb20uSFRNTERpdkVsZW1lbnQgSW1hZ2VEaXYgeyBnZXQ7IHNldDsgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgdm9pZCBDcmVhdGUoaW50IGhlaWdodClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFdyYXBwZXIuQXBwZW5kQ2hpbGQoUXVlc3Rpb25EaXYpO1xyXG4gICAgICAgICAgICBXcmFwcGVyLkFwcGVuZENoaWxkKG5ldyBSZXR5cGVkLmRvbS5IVE1MQlJFbGVtZW50KCkpO1xyXG4gICAgICAgICAgICBXcmFwcGVyLkFwcGVuZENoaWxkKEFuc3dlckRpdik7XHJcbiAgICAgICAgICAgIEJvZHkuQXBwZW5kQ2hpbGQoV3JhcHBlcik7XHJcblxyXG4gICAgICAgICAgICBCdXR0b25TZWN0aW9uLkFwcGVuZENoaWxkcmVuVGFiSW5kZXgoX2J1dHRvbkNvbGxlY3Rpb24uVG9BcnJheSgpKTtcclxuXHJcbiAgICAgICAgICAgIEhlaWdodCA9IGhlaWdodC5Ub1B4KCk7XHJcbiAgICAgICAgICAgIEFsbG93U2l6ZUNoYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcblxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBNZXNzYWdlQm94Rm9ybSA6IERpYWxvZ0Zvcm1cclxuICAgIHtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBSZXR5cGVkLmRvbS5IVE1MQXVkaW9FbGVtZW50IHNuZCA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSBzdHJpbmcgX3Byb21wdDtcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIEJlZXAoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIVNldHRpbmdzLk1lc3NhZ2VGb3JtQmVlcClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgaWYoc25kID09IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNuZCA9IG5ldyBSZXR5cGVkLmRvbS5IVE1MQXVkaW9FbGVtZW50KCk7XHJcbiAgICAgICAgICAgICAgICBzbmQuc3JjID0gUmVzb3VyY2VNYW5hZ2VyLkdldFJlc291cmNlU3RyaW5nKFwiYmVlcFNvdW5kXCIpOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzbmQucGxheSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBNZXNzYWdlQm94QnV0dG9ucyBfYnV0dG9ucztcclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBDcmVhdGUgYSBuZXcgTWVzc2FnZSBEaWFsb2dcclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInByb21wdFwiPlRoZSB0ZXh0IHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgbWVzc2FnZSBib3g8L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInVpXCI+VGhlIFVJIHNldHRpbmdzIHRvIGJlIGFwcGxpZWQgdG8gdGhlIGZvcm08L3BhcmFtPlxyXG4gICAgICAgIHB1YmxpYyBNZXNzYWdlQm94Rm9ybShzdHJpbmcgcHJvbXB0LCBNZXNzYWdlQm94TGF5b3V0IHVpKSA6IHRoaXMocHJvbXB0LCB1aSwgTWVzc2FnZUJveEJ1dHRvbnMuQXV0bywgdWkuVG9TdHJpbmcoKSkgeyB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gQ3JlYXRlIGEgbmV3IE1lc3NhZ2UgRGlhbG9nXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJwcm9tcHRcIj5UaGUgdGV4dCB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIG1lc3NhZ2UgYm94PC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ1aVwiPlRoZSBVSSBzZXR0aW5ncyB0byBiZSBhcHBsaWVkIHRvIHRoZSBmb3JtPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ0aXRsZVwiPlRoZSB0aXRsZSBvZiB0aGUgbWVzc2FnZSBib3g8L3BhcmFtPlxyXG4gICAgICAgIHB1YmxpYyBNZXNzYWdlQm94Rm9ybShzdHJpbmcgcHJvbXB0LCBNZXNzYWdlQm94TGF5b3V0IHVpLCBzdHJpbmcgdGl0bGUpIDogdGhpcyhwcm9tcHQsIHVpLCBNZXNzYWdlQm94QnV0dG9ucy5BdXRvLCB0aXRsZSkgeyB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gQ3JlYXRlIGEgbmV3IE1lc3NhZ2UgRGlhbG9nXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJwcm9tcHRcIj5UaGUgdGV4dCB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIG1lc3NhZ2UgYm94PC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ1aVwiPlRoZSBVSSBzZXR0aW5ncyB0byBiZSBhcHBsaWVkIHRvIHRoZSBmb3JtPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJidXR0b25zXCI+VGhlIFR5cGUgb2YgYnV0dG9uIHRvIGJlIGRpc3BsYXllZCB3aXRoIHRoaXMgbWVzc2FnZTwvcGFyYW0+XHJcbiAgICAgICAgcHVibGljIE1lc3NhZ2VCb3hGb3JtKHN0cmluZyBwcm9tcHQsIE1lc3NhZ2VCb3hMYXlvdXQgdWksIE1lc3NhZ2VCb3hCdXR0b25zIGJ1dHRvbnMpIDogdGhpcyhwcm9tcHQsIHVpLCBidXR0b25zLCB1aS5Ub1N0cmluZygpKSB7IH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBDcmVhdGUgYSBuZXcgTWVzc2FnZSBEaWFsb2dcclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInByb21wdFwiPlRoZSB0ZXh0IHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgbWVzc2FnZSBib3g8L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInVpXCI+VGhlIFVJIHNldHRpbmdzICB0byBiZSBhcHBsaWVkIHRvIHRoZSBmb3JtPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJidXR0b25zXCI+VGhlIFR5cGUgb2YgYnV0dG9uIHRvIGJlIGRpc3BsYXllZCB3aXRoIHRoaXMgbWVzc2FnZTwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwidGl0bGVcIj5UaGUgdGl0bGUgb2YgdGhlIG1lc3NhZ2UgYm94PC9wYXJhbT5cclxuICAgICAgICBwdWJsaWMgTWVzc2FnZUJveEZvcm0oc3RyaW5nIHByb21wdCwgTWVzc2FnZUJveExheW91dCB1aSwgTWVzc2FnZUJveEJ1dHRvbnMgYnV0dG9ucywgc3RyaW5nIHRpdGxlKSA6IGJhc2UodGl0bGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgc2VjdGlvbiA9IERpdigpO1xyXG4gICAgICAgICAgICB2YXIgcGljID0gRGl2KFwiaW1hZ2UzMlwiKTtcclxuICAgICAgICAgICAgdmFyIHRleHRDb250ZW50ID0gRGl2KFwibWVzc2FnLWJveC1jb250ZW50XCIpO1xyXG4gICAgICAgICAgICBfcHJvbXB0ID0gcHJvbXB0O1xyXG4gICAgICAgICAgICBfYnV0dG9ucyA9IGJ1dHRvbnM7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2godWkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgTWVzc2FnZUJveExheW91dC5FeGNsYW1hdGlvbjpcclxuICAgICAgICAgICAgICAgICAgICBpZihfYnV0dG9ucyA9PSBNZXNzYWdlQm94QnV0dG9ucy5BdXRvKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2J1dHRvbnMgPSBNZXNzYWdlQm94QnV0dG9ucy5PaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcGljLmNsYXNzTGlzdC5hZGQoXCJpbWFnZXdhcm5pbmdcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBNZXNzYWdlQm94TGF5b3V0LkluZm9ybWF0aW9uOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmKF9idXR0b25zID09IE1lc3NhZ2VCb3hCdXR0b25zLkF1dG8pXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYnV0dG9ucyA9IE1lc3NhZ2VCb3hCdXR0b25zLk9rO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBwaWMuY2xhc3NMaXN0LmFkZChcImltYWdlaW5mb1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VCb3hMYXlvdXQuUXVlc3Rpb246XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoX2J1dHRvbnMgPT0gTWVzc2FnZUJveEJ1dHRvbnMuQXV0bylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9idXR0b25zID0gTWVzc2FnZUJveEJ1dHRvbnMuWWVzTm87XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHBpYy5jbGFzc0xpc3QuYWRkKFwiaW1hZ2VpbmRleFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VCb3hMYXlvdXQuRXJyb3I6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoX2J1dHRvbnMgPT0gTWVzc2FnZUJveEJ1dHRvbnMuQXV0bylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9idXR0b25zID0gTWVzc2FnZUJveEJ1dHRvbnMuQWJvcnRTZW5kQ2FuY2VsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBwaWMuY2xhc3NMaXN0LmFkZChcImltYWdlZXJyb3JcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnRPdXRPZlJhbmdlRXhjZXB0aW9uKFwidWlcIiwgdWksIG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN0cmluZyBoZWlnaHRDYWxjID0gSGVscGVyLk5vdERlc2t0b3AgPyBcIigxMDAlIC0gNjBweClcIiA6IFwiKDEwMCUgLSAzNXB4KVwiO1xyXG4gICAgICAgICAgICBzd2l0Y2goX2J1dHRvbnMpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgTWVzc2FnZUJveEJ1dHRvbnMuT2s6XHJcbiAgICAgICAgICAgICAgICAgICAgX2J1dHRvbkNvbGxlY3Rpb24gPSBnbG9iYWw6OkJyaWRnZS5TY3JpcHQuQ2FsbEZvcihuZXcgTGlzdDxTaW1wbGVEaWFsb2dCdXR0b24+KCksKF9vMSk9PntfbzEuQWRkKG5ldyBTaW1wbGVEaWFsb2dCdXR0b24odGhpcywgRGlhbG9nUmVzdWx0RW51bS5PSykgeyBUZXh0ID0gXCJPa1wiLCBMb2NhdGlvbiA9IG5ldyBWZWN0b3IyKFwiKDUwJSAtIDM3LjVweClcIiwgaGVpZ2h0Q2FsYyl9KTtyZXR1cm4gX28xO30pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgTWVzc2FnZUJveEJ1dHRvbnMuWWVzTm86XHJcbiAgICAgICAgICAgICAgICAgICAgX2J1dHRvbkNvbGxlY3Rpb24gPSBnbG9iYWw6OkJyaWRnZS5TY3JpcHQuQ2FsbEZvcihuZXcgTGlzdDxTaW1wbGVEaWFsb2dCdXR0b24+KCksKF9vMik9PntfbzIuQWRkKG5ldyBTaW1wbGVEaWFsb2dCdXR0b24odGhpcywgRGlhbG9nUmVzdWx0RW51bS5ObykgeyBUZXh0ID0gXCJOb1wiLCBMb2NhdGlvbiA9IG5ldyBWZWN0b3IyKFwiKDEwMCUgLSA4NXB4KVwiLCBoZWlnaHRDYWxjKX0pO19vMi5BZGQobmV3IFNpbXBsZURpYWxvZ0J1dHRvbih0aGlzLCBEaWFsb2dSZXN1bHRFbnVtLlllcykgeyBUZXh0ID0gXCJZZXNcIiwgTG9jYXRpb24gPSBuZXcgVmVjdG9yMihcIigxMDAlIC0gMTcwcHgpXCIsIGhlaWdodENhbGMpfSk7cmV0dXJuIF9vMjt9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VCb3hCdXR0b25zLlllc05vQ2FuY2VsOlxyXG4gICAgICAgICAgICAgICAgICAgIF9idXR0b25Db2xsZWN0aW9uID0gZ2xvYmFsOjpCcmlkZ2UuU2NyaXB0LkNhbGxGb3IobmV3IExpc3Q8U2ltcGxlRGlhbG9nQnV0dG9uPigpLChfbzMpPT57X28zLkFkZChuZXcgU2ltcGxlRGlhbG9nQnV0dG9uKHRoaXMsIERpYWxvZ1Jlc3VsdEVudW0uQ2FuY2VsKSB7IFRleHQgPSBcIkNhbmNlbFwiLCBMb2NhdGlvbiA9IG5ldyBWZWN0b3IyKFwiKDEwMCUgLSA4NXB4KVwiLCBoZWlnaHRDYWxjKSB9KTtfbzMuQWRkKG5ldyBTaW1wbGVEaWFsb2dCdXR0b24odGhpcywgRGlhbG9nUmVzdWx0RW51bS5ObykgeyBUZXh0ID0gXCJOb1wiLCBMb2NhdGlvbiA9IG5ldyBWZWN0b3IyKFwiKDEwMCUgLSAxNzBweClcIiwgaGVpZ2h0Q2FsYykgfSk7X28zLkFkZChuZXcgU2ltcGxlRGlhbG9nQnV0dG9uKHRoaXMsIERpYWxvZ1Jlc3VsdEVudW0uWWVzKSB7IFRleHQgPSBcIlllc1wiLCBMb2NhdGlvbiA9IG5ldyBWZWN0b3IyKFwiKDEwMCUgLSAyNTVweClcIiwgaGVpZ2h0Q2FsYykgfSk7cmV0dXJuIF9vMzt9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VCb3hCdXR0b25zLkFib3J0U2VuZENhbmNlbDpcclxuICAgICAgICAgICAgICAgICAgICBfYnV0dG9uQ29sbGVjdGlvbiA9IGdsb2JhbDo6QnJpZGdlLlNjcmlwdC5DYWxsRm9yKG5ldyBMaXN0PFNpbXBsZURpYWxvZ0J1dHRvbj4oKSwoX280KT0+e19vNC5BZGQobmV3IFNpbXBsZURpYWxvZ0J1dHRvbih0aGlzLCBEaWFsb2dSZXN1bHRFbnVtLkNhbmNlbCkgeyBUZXh0ID0gXCJDYW5jZWxcIiwgTG9jYXRpb24gPSBuZXcgVmVjdG9yMihcIigxMDAlIC0gODVweClcIiwgaGVpZ2h0Q2FsYyl9KTtfbzQuQWRkKG5ldyBTaW1wbGVEaWFsb2dCdXR0b24odGhpcywgRGlhbG9nUmVzdWx0RW51bS5TZW5kKSB7IFRleHQgPSBcIlNlbmRcIiwgTG9jYXRpb24gPSBuZXcgVmVjdG9yMihcIigxMDAlIC0gMTcwcHgpXCIsIGhlaWdodENhbGMpLCBJdGVtQ2xpY2sgPSAoZXYpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKFNldHRpbmdzLk9uU2VuZEVycm9yICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2V0dGluZ3MuT25TZW5kRXJyb3IoX3Byb21wdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gfSk7X280LkFkZChuZXcgU2ltcGxlRGlhbG9nQnV0dG9uKHRoaXMsIERpYWxvZ1Jlc3VsdEVudW0uQWJvcnQpIHsgVGV4dCA9IFwiQWJvcnRcIiwgTG9jYXRpb24gPSBuZXcgVmVjdG9yMihcIigxMDAlIC0gMjU1cHgpXCIsIGhlaWdodENhbGMpLCBJdGVtQ2xpY2sgPSAoZXYpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2wgcHJlID1TZXR0aW5ncy5BbGxvd0Nsb3NlV2l0aG91dFF1ZXN0aW9uO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldHRpbmdzLkFsbG93Q2xvc2VXaXRob3V0UXVlc3Rpb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uLkNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZXR0aW5ncy5BbGxvd0Nsb3NlV2l0aG91dFF1ZXN0aW9uID0gcHJlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9fSk7cmV0dXJuIF9vNDt9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE91dE9mUmFuZ2VFeGNlcHRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBUZXh0QmxvY2sgdGIgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgaW50IHdpZHRoID0gNDgwO1xyXG5cclxuICAgICAgICAgICAgaWYoIUhlbHBlci5Ob3REZXNrdG9wKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0YiA9IG5ldyBUZXh0QmxvY2socHJvbXB0LCA0ODAgLSAyNSk7XHJcbiAgICAgICAgICAgICAgICB0Yi5Db21wdXRlU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBpZihfYnV0dG9uQ29sbGVjdGlvbi5Db3VudCA+IDIpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYod2lkdGggPCAzMjApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gMzIwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoIXRiLkVsZWxlbXRzT3Zlck1heClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IChpbnQpdGIuTWF4Q2FsY3VsYXRlZFdpZHRoICsgNjUgKyAzNztcclxuICAgICAgICAgICAgICAgICAgICBpZih3aWR0aCA8IFNldHRpbmdzLk1lc3NhZ2VGb3JtTWluaW11bVdpZHRoSW5QeClcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBTZXR0aW5ncy5NZXNzYWdlRm9ybU1pbmltdW1XaWR0aEluUHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbnQgY291bnQgPSBfYnV0dG9uQ29sbGVjdGlvbi5Db3VudDtcclxuICAgICAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBidXQgPSBfYnV0dG9uQ29sbGVjdGlvbltpXTtcclxuICAgICAgICAgICAgICAgICAgICBidXQuSGVpZ2h0ID0gNDU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0LlN0eWxlLmJvcmRlclJhZGl1cyA9IFwiNHB4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0LlN0eWxlLmZvbnRTaXplID0gXCIxNHB4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoYnV0LkRpYWxvZ1Jlc3VsdCA9PSBEaWFsb2dSZXN1bHRFbnVtLk9LIHx8IGJ1dC5EaWFsb2dSZXN1bHQgPT0gRGlhbG9nUmVzdWx0RW51bS5ZZXMpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXQuQ2xhc3NMaXN0LmFkZChcInByaW1hcnlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dC5TdHlsZS5jb2xvciA9IFwid2hpdGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0LlN0eWxlLmJvcmRlciA9IFwiMFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGV4dENvbnRlbnQuaW5uZXJIVE1MID0gcHJvbXB0O1xyXG5cclxuICAgICAgICAgICAgc2VjdGlvbi5zdHlsZS5vdmVyZmxvd1kgPSBcImF1dG9cIjtcclxuICAgICAgICAgICAgc2VjdGlvbi5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcclxuICAgICAgICAgICAgc2VjdGlvbi5zdHlsZS5tYXhIZWlnaHQgPSBTZXR0aW5ncy5NZXNzYWdlRm9ybVRleHRNYXhpbXVtSGVpZ2h0SW5QeC5Ub1B4KCk7XHJcbiAgICAgICAgICAgIHNlY3Rpb24uYXBwZW5kQ2hpbGQ8SFRNTERpdkVsZW1lbnQ+KHRleHRDb250ZW50KTtcclxuICAgICAgICAgICAgc2VjdGlvbi5zdHlsZS50b3AgPSBcIjMycHhcIjtcclxuICAgICAgICAgICAgc2VjdGlvbi5zdHlsZS53aWR0aCA9IFwiOTAlXCI7XHJcblxyXG4gICAgICAgICAgICBiYXNlLkJvZHkuQXBwZW5kQ2hpbGRyZW4ocGljLCBzZWN0aW9uKTtcclxuXHJcbiAgICAgICAgICAgIENvbnRyb2xbXSBhcnJheSA9IG5ldyBDb250cm9sW19idXR0b25Db2xsZWN0aW9uLkNvdW50XTtcclxuICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IGFycmF5Lkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IF9idXR0b25Db2xsZWN0aW9uW2ldO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBCdXR0b25TZWN0aW9uLkFwcGVuZENoaWxkcmVuVGFiSW5kZXgoYXJyYXkpO1xyXG4gICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2VjdGlvbi5zdHlsZS50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgICAgICAgICAgICAgc2VjdGlvbi5zdHlsZS5saW5lSGVpZ2h0ID0gXCIxMDAlXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgV2luZG93U3RhdGUgPSBXaW5kb3dTdGF0ZVR5cGUuTWF4aW1pemVkO1xyXG4gICAgICAgICAgICAgICAgSGVhZGluZy5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgICAgICBCb2R5LlNldExvY2F0aW9uKDAsIDApO1xyXG4gICAgICAgICAgICAgICAgQm9keS5TZXRTaXplKFwiMTAwJVwiLCBcIjEwMCVcIik7XHJcbiAgICAgICAgICAgICAgICBTdGFydFBvc2l0aW9uID0gRm9ybVN0YXJ0UG9zaXRpb24uTWFudWFsO1xyXG4gICAgICAgICAgICAgICAgQWxsb3dTaXplQ2hhbmdlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBBbGxvd01vdmVDaGFuZ2UgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICBTaG93TWF4aW1pemUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIFNob3dNaW5pbWl6ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgU2hvd0Nsb3NlID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgdGV4dENvbnRlbnQuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lQmxvY2tcIjtcclxuICAgICAgICAgICAgICAgIHRleHRDb250ZW50LnN0eWxlLmZvbnRTaXplID0gXCIxNHB4XCI7XHJcbiAgICAgICAgICAgICAgICB0ZXh0Q29udGVudC5zdHlsZS52ZXJ0aWNhbEFsaWduID0gXCJtaWRkbGVcIjtcclxuICAgICAgICAgICAgICAgIHRleHRDb250ZW50LnN0eWxlLmxpbmVIZWlnaHQgPSBcIm5vcm1hbFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYodGIuQ29tcHV0ZWRIZWlnaHQgPiBTZXR0aW5ncy5NZXNzYWdlRm9ybVRleHRNYXhpbXVtSGVpZ2h0SW5QeClcclxuICAgICAgICAgICAgICAgICAgICB0Yi5Db21wdXRlZEhlaWdodCA9IFNldHRpbmdzLk1lc3NhZ2VGb3JtVGV4dE1heGltdW1IZWlnaHRJblB4O1xyXG4gICAgICAgICAgICAgICAgaWYodGIuQ29tcHV0ZWRIZWlnaHQgPCBTZXR0aW5ncy5NZXNzYWdlRm9ybVRleHRNaW5pbXVtSGVpZ2h0SW5QeClcclxuICAgICAgICAgICAgICAgICAgICB0Yi5Db21wdXRlZEhlaWdodCA9IFNldHRpbmdzLk1lc3NhZ2VGb3JtVGV4dE1pbmltdW1IZWlnaHRJblB4O1xyXG5cclxuICAgICAgICAgICAgICAgIGJhc2UuSGVpZ2h0ID0gdGIuQ29tcHV0ZWRIZWlnaHQgKyA3NyArIDI5ICsgMzIgKyBcInB4XCI7XHJcbiAgICAgICAgICAgICAgICBiYXNlLldpZHRoID0gd2lkdGguVG9QeCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBiYXNlLkFsbG93U2l6ZUNoYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIG92ZXJyaWRlIHZvaWQgT25TaG93ZWQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQmVlcCgpO1xyXG5cclxuICAgICAgICAgICAgYmFzZS5PblNob3dlZCgpO1xyXG4gICAgICAgICAgICBfYnV0dG9uQ29sbGVjdGlvblswXS5Db250ZW50LmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBlbnVtIE1lc3NhZ2VCb3hMYXlvdXRcclxuICAgIHtcclxuICAgICAgICBJbmZvcm1hdGlvbixcclxuICAgICAgICBFeGNsYW1hdGlvbixcclxuICAgICAgICBRdWVzdGlvbixcclxuICAgICAgICBFcnJvclxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBlbnVtIE1lc3NhZ2VCb3hCdXR0b25zXHJcbiAgICB7XHJcbiAgICAgICAgQXV0byxcclxuICAgICAgICBPayxcclxuICAgICAgICBZZXNObyxcclxuICAgICAgICBZZXNOb0NhbmNlbCxcclxuICAgICAgICBBYm9ydFNlbmRDYW5jZWxcclxuICAgIH1cclxufSIsIlxyXG5uYW1lc3BhY2UgRXhwcmVzc0NyYWZ0XHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBOdW1iZXJJbnB1dCA6IFRleHRJbnB1dERyb3BEb3duXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIE51bWJlcklucHV0KCkgOiBiYXNlKFwibnVtYmVyXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBVc2VkRWRpdC5TZXRBdHRyaWJ1dGUoXCJzdGVwXCIsIFwiYW55XCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHZvaWQgT25Ecm9wRG93bkNsaWNrZWQoUmV0eXBlZC5kb20uTW91c2VFdmVudCBtb3VzZUV2ZW50KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIVJlYWRvbmx5ICYmIEVuYWJsZWQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciBjYWxjRWRpdCA9IG5ldyBDYWxjRm9ybSh0aGlzLlVzZWRFZGl0KTtcclxuICAgICAgICAgICAgICAgIGNhbGNFZGl0LlxyXG4gICAgICAgICAgICAgICAgU2hvd1BvcHVwKEZvcm1Qb3B1cC5cclxuICAgICAgICAgICAgICAgICAgICBHZXRQb3B1cERlZmF1bHRMb2NhdGlvbihEcm9wRG93bkJ1dHRvbiwgdHJ1ZSkpO1xyXG4gICAgICAgICAgICAgICAgY2FsY0VkaXQuT25Gb3JtQ2xvc2VkID0gKCkgPT5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBWYWxpZGF0ZURhdGEoKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbTtcclxuXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIFNlYXJjaElucHV0IDogVGV4dElucHV0RHJvcERvd25cclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgb2JqZWN0IEVkaXRWYWx1ZTtcclxuICAgICAgICBwdWJsaWMgc3RyaW5nIERpc3BsYXlNZW1iZXI7XHJcbiAgICAgICAgcHVibGljIHN0cmluZyBWYWx1ZU1lbWJlcjtcclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgRm9jdXNlZENoYW5nZUNsb3NlRm9ybTtcclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgU2V0VmFsdWVzKG9iamVjdCBlZGl0VmFsdWUsIHN0cmluZyB0ZXh0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5UZXh0ID0gdGV4dDtcclxuICAgICAgICAgICAgRWRpdFZhbHVlID0gZWRpdFZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFNlYXJjaElucHV0KCkgOiBiYXNlKFwidGV4dFwiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVXNlZEVkaXQuT25LZXlEb3duID0gKG9iaiwgZXYpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKGV2LmtleUNvZGUgPT0gMTMgfHwgZXYua2V5Q29kZSA9PSA0MClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBPbkRyb3BEb3duQ2xpY2tlZChuZXcgUmV0eXBlZC5kb20uTW91c2VFdmVudChcIm9ubW91c2Vkb3duXCIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgVXNlZEVkaXQuQ29udGVudC5vbm1vdXNlZG93biA9IChldikgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgT25Ecm9wRG93bkNsaWNrZWQobmV3IFJldHlwZWQuZG9tLk1vdXNlRXZlbnQoXCJvbm1vdXNlZG93blwiKSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG5cclxuXHJcbiAgICAgICAgcHVibGljIEFjdGlvbjxzdHJpbmcsIEdyaWRWaWV3PiBPblNlYXJjaDtcclxuXHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgYm9vbCBDbGVhck9uT3BlbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCB2b2lkIE9uUmVxdWVzdFNlYXJjaChzdHJpbmcgc2VhcmNoVmFsdWUsIEdyaWRWaWV3IGdyaWQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihPblNlYXJjaCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgT25TZWFyY2goc2VhcmNoVmFsdWUsIGdyaWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgYm9vbCBTZWFyY2hPbkxvYWQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgdm9pZCBPbkFjY2VwdFJlc3VsdChEYXRhUm93IHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYodmFsdWUgPT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgRWRpdFZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIFRleHQgPSBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoVmFsdWVNZW1iZXIgIT0gXCJcIilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBFZGl0VmFsdWUgPSB2YWx1ZS5HZXRWYWx1ZShWYWx1ZU1lbWJlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZihEaXNwbGF5TWVtYmVyICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgVGV4dCA9ICh2YWx1ZS5HZXRWYWx1ZShEaXNwbGF5TWVtYmVyKSArIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCB2b2lkIE9uUmVxdWVzdE5ldyhHcmlkVmlldyBncmlkKVxyXG4gICAgICAgIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2aXJ0dWFsIHZvaWQgT25DbG9zZWQoRGF0YVJvdyB2YWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBPbkRyb3BEb3duQ2xpY2tlZChSZXR5cGVkLmRvbS5Nb3VzZUV2ZW50IG1vdXNlRXZlbnQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZighUmVhZG9ubHkgJiYgRW5hYmxlZClcclxuICAgICAgICAgICAgICAgIChuZXcgU2VhcmNoTG9va3VwRm9ybSh0aGlzKSkuXHJcbiAgICAgICAgICAgICAgICBTaG93UG9wdXAoRm9ybVBvcHVwLlxyXG4gICAgICAgICAgICAgICAgICAgIEdldFBvcHVwRGVmYXVsdExvY2F0aW9uKERyb3BEb3duQnV0dG9uLCB0cnVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiXHJcbm5hbWVzcGFjZSBFeHByZXNzQ3JhZnRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIFNlYXJjaExvb2t1cEZvcm0gOiBGb3JtUG9wdXBcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgU2VhcmNoSW5wdXQgU2VhcmNoSW5wdXQ7XHJcbiAgICAgICAgcHVibGljIERhdGFSb3cgRm9jdXNlZFJvdztcclxuICAgICAgICBwdWJsaWMgR3JpZFZpZXcgVmlldztcclxuXHJcbiAgICAgICAgcHVibGljIFRleHRJbnB1dCBTZWFyY2hFZGl0O1xyXG4gICAgICAgIHB1YmxpYyBTaW1wbGVCdXR0b24gYnRuU2VhcmNoO1xyXG4gICAgICAgIHB1YmxpYyBTaW1wbGVCdXR0b24gYnRuQ2xvc2U7XHJcbiAgICAgICAgcHVibGljIFNpbXBsZUJ1dHRvbiBidG5OZXc7XHJcbiAgICAgICAgcHVibGljIFNpbXBsZUJ1dHRvbiBidG5Vc2U7XHJcbiAgICAgICAgcHVibGljIFNpbXBsZUJ1dHRvbiBidG5DbGVhcjtcclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIG92ZXJyaWRlIHZvaWQgT25TaG93ZWQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYmFzZS5PblNob3dlZCgpO1xyXG5cclxuICAgICAgICAgICAgU2VhcmNoRWRpdC5Gb2N1cygpO1xyXG5cclxuICAgICAgICAgICAgaWYoU2VhcmNoSW5wdXQuU2VhcmNoT25Mb2FkKCkpXHJcbiAgICAgICAgICAgICAgICBidG5TZWFyY2guQ29udGVudC5jbGljaygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFNlYXJjaExvb2t1cEZvcm0oU2VhcmNoSW5wdXQgc2VhcmNoSW5wdXQpIDogYmFzZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihzZWFyY2hJbnB1dC5Db250ZW50LnBhcmVudEVsZW1lbnQgIT0gbnVsbCAmJiBzZWFyY2hJbnB1dC5Db250ZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudCAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBQcmV2aW91c1Njcm9sbFRvcCA9IHNlYXJjaElucHV0LkNvbnRlbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnNjcm9sbFRvcDtcclxuICAgICAgICAgICAgICAgIFBhcmVudENvbnRhaW5lciA9IHNlYXJjaElucHV0LkNvbnRlbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB4ID0gc2VhcmNoSW5wdXQuQ29udGVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgICAgICAgICAgIE1pbkhlaWdodCA9IDEwMDtcclxuICAgICAgICAgICAgTWluV2lkdGggPSAxNTA7XHJcblxyXG4gICAgICAgICAgICB2YXIgd2lkID0gc2VhcmNoSW5wdXQuR2V0RHJvcGRvd25XaWR0aCgpO1xyXG4gICAgICAgICAgICBpZih3aWQgPCAxNTApXHJcbiAgICAgICAgICAgICAgICB3aWQgPSAxNTA7XHJcblxyXG4gICAgICAgICAgICBTaXplID0gbmV3IFZlY3RvcjIod2lkLCAyNTApO1xyXG5cclxuICAgICAgICAgICAgQWxsb3dTaXplQ2hhbmdlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIFNlYXJjaElucHV0ID0gc2VhcmNoSW5wdXQ7XHJcblxyXG4gICAgICAgICAgICB2YXIgZnJhZyA9IFJldHlwZWQuZG9tLmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuXHJcbiAgICAgICAgICAgIGZyYWcuQXBwZW5kQ2hpbGRyZW4oXHJcbiAgICAgICAgICAgICAgICBTZWFyY2hFZGl0ID0gbmV3IFRleHRJbnB1dCgpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgVGV4dCA9IHNlYXJjaElucHV0LkNsZWFyT25PcGVuKCkgPyBcIlwiIDogU2VhcmNoSW5wdXQuVGV4dCxcclxuICAgICAgICAgICAgICAgICAgICBPbkZvY3VzRG9udFNlbGVjdEFsbCA9IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgRGlzYWJsZUZvY3VzUG9wdXAgPSB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIEJvdW5kcyA9IG5ldyBWZWN0b3I0KDQsIDQsIFwiKDEwMCUgLSA2OHB4KVwiLCAyMCksXHJcbiAgICAgICAgICAgICAgICAgICAgVG9vbFRpcCA9IG5ldyBUb29sVGlwKFwiSGVscDpcIiwgXCJbRW50ZXJdIHRvIFNlYXJjaCwgW0NUUkxdICsgW0VudGVyXSB0byBTZWFyY2ggYW5kIFVzZSwgW0VTQ10gdG8gY2xvc2VcIilcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBidG5TZWFyY2ggPSBuZXcgU2ltcGxlQnV0dG9uKClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBUZXh0ID0gXCJTZWFyY2hcIixcclxuICAgICAgICAgICAgICAgICAgICBCb3VuZHMgPSBuZXcgVmVjdG9yNChcIigxMDAlIC0gNjVweClcIiwgNCwgNjEsIDIwKSxcclxuICAgICAgICAgICAgICAgICAgICBJdGVtQ2xpY2sgPSAocykgPT5cclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNlYXJjaElucHV0Lk9uUmVxdWVzdFNlYXJjaChTZWFyY2hFZGl0LlRleHQsIFZpZXcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBWaWV3ID0gbmV3IEdyaWRWaWV3KHRydWUsIHRydWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgQWxsb3dNdWx0aVNlbGVjdGlvbiA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIFVzZUVkaXRGb3JtID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgQm91bmRzID0gbmV3IFZlY3RvcjQoNCwgMjgsIFwiKDEwMCUgLSAxMHB4KVwiLCBcIigxMDAlIC0gNjBweClcIilcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBidG5DbG9zZSA9IG5ldyBTaW1wbGVCdXR0b24oKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFRleHQgPSBcIiZ0aW1lcztcIixcclxuICAgICAgICAgICAgICAgICAgICBCb3VuZHMgPSBuZXcgVmVjdG9yNCg0LCBcIigxMDAlIC0gMjVweClcIiwgMjAsIDIwKSxcclxuICAgICAgICAgICAgICAgICAgICBJdGVtQ2xpY2sgPSAocykgPT5cclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJ0bk5ldyA9IG5ldyBTaW1wbGVCdXR0b24oKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFRleHQgPSBcIk5ld1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIEJvdW5kcyA9IG5ldyBWZWN0b3I0KFwiKDEwMCUgLSA2NXB4KVwiLCBcIigxMDAlIC0gMjVweClcIiwgNjEsIDIwKSxcclxuICAgICAgICAgICAgICAgICAgICBJdGVtQ2xpY2sgPSAocykgPT5cclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNlYXJjaElucHV0Lk9uUmVxdWVzdE5ldyhWaWV3KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCBidG5Vc2UgPSBuZXcgU2ltcGxlQnV0dG9uKClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBUZXh0ID0gXCJVc2VcIixcclxuICAgICAgICAgICAgICAgICAgICBCb3VuZHMgPSBuZXcgVmVjdG9yNChcIigxMDAlIC0gMTMycHgpXCIsIFwiKDEwMCUgLSAyNXB4KVwiLCA2MSwgMjApLFxyXG4gICAgICAgICAgICAgICAgICAgIEl0ZW1DbGljayA9IChzKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoVmlldy5Gb2N1c2VkRGF0YUhhbmRsZSA9PSAtMSAmJiBWaWV3LlJvd0NvdW50KCkgPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3LkZvY3VzZWREYXRhSGFuZGxlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihGb2N1c2VkUm93ICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlYXJjaElucHV0Lk9uQWNjZXB0UmVzdWx0KEZvY3VzZWRSb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5DbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJ0bkNsZWFyID0gbmV3IFNpbXBsZUJ1dHRvbigpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgVGV4dCA9IFwiQ2xlYXJcIixcclxuICAgICAgICAgICAgICAgICAgICBCb3VuZHMgPSBuZXcgVmVjdG9yNChcIigxMDAlIC0gMTk5cHgpXCIsIFwiKDEwMCUgLSAyNXB4KVwiLCA2MSwgMjApLFxyXG4gICAgICAgICAgICAgICAgICAgIEl0ZW1DbGljayA9IChzKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRm9jdXNlZFJvdyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNlYXJjaElucHV0Lk9uQWNjZXB0UmVzdWx0KEZvY3VzZWRSb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBidG5DbG9zZS5TdHlsZS5jb2xvciA9IFwicmVkXCI7XHJcblxyXG4gICAgICAgICAgICBpZihIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgU2VhcmNoRWRpdC5TdHlsZS5mb250U2l6ZSA9IFwiMTRweFwiO1xyXG4gICAgICAgICAgICAgICAgU2VhcmNoRWRpdC5IZWlnaHQgPSBcIjQ1cHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICBidG5TZWFyY2guU3R5bGUuZm9udFNpemUgPSBcIjE0cHhcIjtcclxuICAgICAgICAgICAgICAgIGJ0blNlYXJjaC5IZWlnaHQgPSA0NTtcclxuXHJcbiAgICAgICAgICAgICAgICBWaWV3LlRvcCA9IDU1O1xyXG4gICAgICAgICAgICAgICAgVmlldy5IZWlnaHQgPSBcIigxMDAlIC0gMTEycHgpXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgYnRuQ2xlYXIuU3R5bGUuZm9udFNpemUgPSBcIjE0cHhcIjtcclxuICAgICAgICAgICAgICAgIGJ0bkNsZWFyLkhlaWdodCA9IDQ1O1xyXG4gICAgICAgICAgICAgICAgYnRuQ2xlYXIuVG9wID0gXCIoMTAwJSAtIDUxcHgpXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgYnRuVXNlLlN0eWxlLmZvbnRTaXplID0gXCIxNHB4XCI7XHJcbiAgICAgICAgICAgICAgICBidG5Vc2UuSGVpZ2h0ID0gNDU7XHJcbiAgICAgICAgICAgICAgICBidG5Vc2UuVG9wID0gXCIoMTAwJSAtIDUxcHgpXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgYnRuTmV3LlN0eWxlLmZvbnRTaXplID0gXCIxNHB4XCI7XHJcbiAgICAgICAgICAgICAgICBidG5OZXcuSGVpZ2h0ID0gNDU7XHJcbiAgICAgICAgICAgICAgICBidG5OZXcuVG9wID0gXCIoMTAwJSAtIDUxcHgpXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgYnRuQ2xvc2UuU3R5bGUuZm9udFNpemUgPSBcIjI2cHhcIjtcclxuICAgICAgICAgICAgICAgIGJ0bkNsb3NlLlN0eWxlLmZvbnRXZWlnaHQgPSBcImJvbGRcIjtcclxuICAgICAgICAgICAgICAgIGJ0bkNsb3NlLkhlaWdodCA9IDQ1O1xyXG4gICAgICAgICAgICAgICAgYnRuQ2xvc2UuV2lkdGggPSA2MTtcclxuICAgICAgICAgICAgICAgIGJ0bkNsb3NlLlRvcCA9IFwiKDEwMCUgLSA1MXB4KVwiO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBTZWFyY2hFZGl0Lk9uS2V5RG93biA9IChvYmosIGV2KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihldi5rZXlDb2RlID09IDkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihldi5rZXlDb2RlID09IDEzKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFNlYXJjaElucHV0Lk9uUmVxdWVzdFNlYXJjaChTZWFyY2hFZGl0LlRleHQsIFZpZXcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGV2LmN0cmxLZXkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidG5Vc2UuQ29udGVudC5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihldi5rZXlDb2RlID09IDI3KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIEZvY3VzZWRSb3cgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgVmlldy5PbkZvY3VzZWRSb3dDaGFuZ2VkID0gKHJvdywgY29sKSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihWaWV3LkZvY3VzZWREYXRhSGFuZGxlID4gLTEpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgRm9jdXNlZFJvdyA9IFZpZXcuRGF0YVNvdXJjZVtWaWV3LkdldERhdGFTb3VyY2VSb3coVmlldy5Gb2N1c2VkRGF0YUhhbmRsZSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIEZvY3VzZWRSb3cgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgU2VhcmNoSW5wdXQuT25BY2NlcHRSZXN1bHQoRm9jdXNlZFJvdyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoU2VhcmNoSW5wdXQuRm9jdXNlZENoYW5nZUNsb3NlRm9ybSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkNsb3NlKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBWaWV3Lk9uUm93RG91YmxlQ2xpY2sgPSAocm93KSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihWaWV3LkZvY3VzZWREYXRhSGFuZGxlID4gLTEpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgRm9jdXNlZFJvdyA9IFZpZXcuRGF0YVNvdXJjZVtWaWV3LkdldERhdGFTb3VyY2VSb3coVmlldy5Gb2N1c2VkRGF0YUhhbmRsZSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIEZvY3VzZWRSb3cgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgU2VhcmNoSW5wdXQuT25BY2NlcHRSZXN1bHQoRm9jdXNlZFJvdyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkNsb3NlKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLkJvZHkuQXBwZW5kQ2hpbGQoZnJhZyk7XHJcblxyXG4gICAgICAgICAgICBTZWFyY2hFZGl0Lk9uR290Rm9jdXMgPSAob2JqKSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZighc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShTZWFyY2hFZGl0LlRleHQpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFNlYXJjaEVkaXQuR2V0SW5wdXQoKS5zZWxlY3Rpb25TdGFydCA9ICh1aW50KVNlYXJjaEVkaXQuVGV4dC5MZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBMaW5rY2hpbGRUb0Zvcm0oVmlldyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBPbkNsb3NlZCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiYXNlLk9uQ2xvc2VkKCk7XHJcblxyXG4gICAgICAgICAgICBTZWFyY2hJbnB1dC5PbkNsb3NlZChGb2N1c2VkUm93KTtcclxuICAgICAgICAgICAgU2VhcmNoSW5wdXQuVmFsaWRhdGVEYXRhKCk7XHJcbiAgICAgICAgICAgIGlmKCFIZWxwZXIuTm90RGVza3RvcClcclxuICAgICAgICAgICAgICAgIFNlYXJjaElucHV0LkdldElucHV0KCkuZm9jdXMoKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBTZWFyY2hJbnB1dC5TY3JvbGwoKGludClQcmV2aW91c1Njcm9sbFRvcCwgUGFyZW50Q29udGFpbmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgUmV0eXBlZDtcclxudXNpbmcgQnJpZGdlO1xyXG5cclxubmFtZXNwYWNlIEV4cHJlc3NDcmFmdFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgVGV4dEZvcm0gOiBGb3JtUG9wdXBcclxuICAgIHtcclxuICAgICAgICBwcml2YXRlIFRleHRJbnB1dCBSZWFkSW5wdXQ7XHJcbiAgICAgICAgcHJpdmF0ZSBUZXh0SW5wdXQgRWRpdElucHV0O1xyXG4gICAgICAgIHByaXZhdGUgU2ltcGxlQnV0dG9uIGJ0bkRvbmU7XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIE9uU2hvd2VkKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhc2UuT25TaG93ZWQoKTtcclxuXHJcbiAgICAgICAgICAgIHN0cmluZyBkYXRhUCA9IFJlYWRJbnB1dC5HZXRBdHRyaWJ1dGUoXCJkYXRhLXBsYWNlaG9sZGVyXCIpO1xyXG4gICAgICAgICAgICBpZighc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShkYXRhUCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIEVkaXRJbnB1dC5TZXRBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiLCBkYXRhUCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZighc3RyaW5nLklzTnVsbE9yV2hpdGVTcGFjZShSZWFkSW5wdXQuR2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIikpKVxyXG4gICAgICAgICAgICAgICAgICAgIEVkaXRJbnB1dC5TZXRBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiLCBSZWFkSW5wdXQuR2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIikpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBFZGl0SW5wdXQuRm9jdXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBUZXh0Rm9ybShUZXh0SW5wdXQgaW5wdXQpIDogYmFzZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihpbnB1dC5Db250ZW50LnBhcmVudEVsZW1lbnQgIT0gbnVsbCAmJiBpbnB1dC5Db250ZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudCAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBQcmV2aW91c1Njcm9sbFRvcCA9IGlucHV0LkNvbnRlbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnNjcm9sbFRvcDtcclxuICAgICAgICAgICAgICAgIFBhcmVudENvbnRhaW5lciA9IGlucHV0LkNvbnRlbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBXaW5kb3dTdGF0ZSA9IFdpbmRvd1N0YXRlVHlwZS5NYXhpbWl6ZWQ7XHJcblxyXG4gICAgICAgICAgICBSZWFkSW5wdXQgPSBpbnB1dDtcclxuXHJcbiAgICAgICAgICAgIGlmKFJlYWRJbnB1dCBpcyBNZW1vSW5wdXQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIEVkaXRJbnB1dCA9IG5ldyBNZW1vSW5wdXQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIEVkaXRJbnB1dCA9IG5ldyBUZXh0SW5wdXQoaW5wdXQuVHlwZSkgeyBEaXNwbGF5Rm9ybWF0ID0gUmVhZElucHV0LkRpc3BsYXlGb3JtYXQgfTtcclxuICAgICAgICAgICAgICAgIEVkaXRJbnB1dC5PbktleURvd24gPSAocywgZXYpID0+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZXYua2V5Q29kZSA9PSAxMylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkRvbmUuQ29udGVudC5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIEVkaXRJbnB1dC5UZXh0ID0gaW5wdXQuVGV4dDtcclxuICAgICAgICAgICAgRWRpdElucHV0LlN0eWxlLmZvbnRTaXplID0gXCIxNHB4XCI7XHJcblxyXG4gICAgICAgICAgICBFZGl0SW5wdXQuRGlzYWJsZUZvY3VzUG9wdXAgPSB0cnVlO1xyXG4gICAgICAgICAgICBFZGl0SW5wdXQuU2l6ZSA9IG5ldyBWZWN0b3IyKFwiKDEwMCUgLSAxMTJweClcIiwgXCIxMDAlXCIpO1xyXG4gICAgICAgICAgICBFZGl0SW5wdXQuTG9jYXRpb24gPSBuZXcgVmVjdG9yMigwLCAwKTtcclxuXHJcbiAgICAgICAgICAgIGJ0bkRvbmUgPSBuZXcgU2ltcGxlQnV0dG9uKClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgVGV4dCA9IFwiJnRpbWVzO1wiLFxyXG4gICAgICAgICAgICAgICAgQm91bmRzID0gbmV3IFZlY3RvcjQoXCIoMTAwJSAtIDEwNnB4KVwiLCBcIig1MCUgLSAyMi41cHgpXCIsIDEwMCwgNDUpLFxyXG4gICAgICAgICAgICAgICAgSXRlbUNsaWNrID0gKHNlbmRlcikgPT5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoRWRpdElucHV0LkdldEVkaXRWYWx1ZSgpICE9IFJlYWRJbnB1dC5HZXRFZGl0VmFsdWUoKSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWRJbnB1dC5UZXh0ID0gRWRpdElucHV0LlRleHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihSZWFkSW5wdXQuSXNTdWJtaXQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWMgalF1ZXJ5MiA9IFJldHlwZWQuanF1ZXJ5LmpRdWVyeTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljIGUgPSBqUXVlcnkyLkV2ZW50KFwia2V5cHJlc3NcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLndoaWNoID0gMTM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmtleUNvZGUgPSAxMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWMgb2JqID0gUmV0eXBlZC5qcXVlcnkualF1ZXJ5LnNlbGVjdCgoUmV0eXBlZC5qcXVlcnkuSlF1ZXJ5LlR5cGVPckFycmF5PFJldHlwZWQuZG9tLkVsZW1lbnQ+KVJlYWRJbnB1dC5Db250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai50cmlnZ2VyKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9qUXVlcnkuc2VsZWN0KFJlYWRJbnB1dC5Db250ZW50KS50cmlnZ2VyKChKUXVlcnlFdmVudE9iamVjdCllKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKFJlYWRJbnB1dC5Hb05leHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0gUmV0eXBlZC5kb20uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbDxzdHJpbmc+KFwiaW5wdXQsIHRleHRhcmVhLCBidXR0b25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnQgdGFiUGx1czEgPSAoaW50KVJlYWRJbnB1dC5Db250ZW50LnRhYkluZGV4ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHhbaV0uQXM8UmV0eXBlZC5kb20uSFRNTEVsZW1lbnQ+KCkudGFiSW5kZXggPT0gdGFiUGx1czEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4W2ldLkFzPFJldHlwZWQuZG9tLkhUTUxFbGVtZW50PigpLkZvY3VzRWxlbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBidG5Eb25lLlN0eWxlLmJvcmRlclJhZGl1cyA9IFwiNHB4XCI7XHJcbiAgICAgICAgICAgIGJ0bkRvbmUuQ2xhc3NMaXN0LmFkZChcInByaW1hcnlcIik7XHJcbiAgICAgICAgICAgIGJ0bkRvbmUuU3R5bGUuYm9yZGVyV2lkdGggPSBcIjBcIjtcclxuXHJcbiAgICAgICAgICAgIGJ0bkRvbmUuVGV4dCA9IFwiJnRpbWVzO1wiO1xyXG4gICAgICAgICAgICBidG5Eb25lLlN0eWxlLmZvbnRTaXplID0gXCIyNnB4XCI7XHJcbiAgICAgICAgICAgIGJ0bkRvbmUuU3R5bGUuY29sb3IgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgICAgIGJ0bkRvbmUuU3R5bGUuZm9udFdlaWdodCA9IFwiYm9sZFwiO1xyXG5cclxuICAgICAgICAgICAgRWRpdElucHV0Lk9uVGV4dENoYW5nZWQgPSAoc2VuZGVyKSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihFZGl0SW5wdXQuR2V0RWRpdFZhbHVlKCkgPT0gUmVhZElucHV0LkdldEVkaXRWYWx1ZSgpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ0bkRvbmUuVGV4dCA9IFwiJnRpbWVzO1wiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ0bkRvbmUuU3R5bGUuZm9udFNpemUgPSBcIjI2cHhcIjtcclxuICAgICAgICAgICAgICAgICAgICBidG5Eb25lLlN0eWxlLmZvbnRXZWlnaHQgPSBcImJvbGRcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBidG5Eb25lLlRleHQgPSBSZWFkSW5wdXQuSXNTdWJtaXQgPyBcIlN1Ym1pdFwiIDogUmVhZElucHV0LkdvTmV4dCA/IFwiTmV4dFwiIDogXCJEb25lXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnRuRG9uZS5TdHlsZS5mb250U2l6ZSA9IFwiMTRweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ0bkRvbmUuU3R5bGUuZm9udFdlaWdodCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBBcHBlbmRDaGlsZHJlbihFZGl0SW5wdXQsIGJ0bkRvbmUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIG92ZXJyaWRlIHZvaWQgT25DbG9zZWQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgUmVhZElucHV0LlNjcm9sbCgoaW50KVByZXZpb3VzU2Nyb2xsVG9wLCBQYXJlbnRDb250YWluZXIpO1xyXG4gICAgICAgICAgICBSZWFkSW5wdXQuVmFsaWRhdGVEYXRhKCk7XHJcbiAgICAgICAgICAgIGJhc2UuT25DbG9zZWQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXQp9Cg==
